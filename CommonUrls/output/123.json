{
  "p": [
    "Hi! 👋 Welcome to the Block Editor Handbook.",
    "The Block editor is a modern and up-to-date paradigm for WordPress site building and publishing. It uses a modular system of Blocks to compose and format content, and is designed to create rich and flexible layouts for websites and digital products.",
    "The editor consists of several primary elements, as shown in the following figure:",
    "",
    "The elements highlighted in the figure are:",
    "Through the Block editor, you create content modularly using Blocks. There are a number of core blocks ready to be used, and you can also create your own custom block.",
    "A Block is a discrete element such as a Paragraph, Heading, Media element, or Embed. Each block is treated as a separate element with individual editing and format controls. When all these components are pieced together, they make up the content that is then stored in the WordPress database.",
    "The Block Editor is the result of the work done on the Gutenberg project which is aimed to revolutionize the WordPress editing experience.",
    "Besides offering an enhanced editing experience through visual content creation tools, the Block Editor is also a powerful developer platform with a rich feature set of APIs that allow it to be manipulated and extended in a multitude of different ways.",
    "This handbook is focused on block development and is divided into five sections, each serving a different purpose.",
    "Getting Started",
    "For those just starting out with block development this is where you can get set up with a development environment and learn the fundamentals of block development.",
    "How-to Guides",
    "Here you can build on what you learned in the Getting Started section and learn how to solve particular problems that you might encounter. You can also get tutorials, and example code that you can reuse, for projects such as building a full-featured block or working with WordPress’ data. In addition you can learn How to use JavaScript with the Block Editor.",
    "Reference Guides",
    "This section is the heart of the handbook and is where you can get down to the nitty-gritty and look up the details of the particular API that you’re working with or need information on. Among other things, the Block API Reference covers most of what you will want to do with a block, and each component and package is also documented here. Components are also documented via Storybook.",
    "Explanations",
    "This section enables you to go deeper and reinforce your practical knowledge with a theoretical understanding of the Architecture of the block editor. Its Glossary of terms and FAQs should answer any outstanding questions you may have.",
    "Contributor Guide",
    "Gutenberg is open source software and anyone is welcome to contribute to the project. This section details how to contribute and can help you choose in which way you want to contribute, whether that be with code, with design, with documentation, or in some other way.",
    "Top ↑",
    "This handbook should be considered the canonical resource for all things related to block development. However there are other resources that can help you.",
    "This handbook is targeted at those seeking to develop for the block editor, but several other handbooks exist for WordPress developers under developer.wordpress.org:",
    "Notifications",
    "Block Selectors is the API that allows blocks to customize the CSS selector used\nwhen their styles are generated.",
    "A block may customize its CSS selectors at three levels: root, feature, and\nsubfeature.",
    "The root selector is the block’s primary CSS selector.",
    "All blocks require a primary CSS selector for their style declarations to be\nincluded under. If one is not provided through the Block Selectors API, a\ndefault is generated in the form of .wp-block-<name>.",
    "Feature selectors relate to styles for a block support, e.g. border, color,\ntypography, etc.",
    "A block may wish to apply the styles for specific features to different\nelements within a block. An example might be using colors on the block’s wrapper\nbut applying the typography styles to an inner heading only.",
    "These selectors relate to individual styles provided by a block support e.g.\nbackground-color",
    "A subfeature can have styles generated under its own unique selector. This is\nespecially useful where one block support subfeature can’t be applied to the\nsame element as the support’s other subfeatures.",
    "A great example of this is text-decoration. Web browsers render this style\ndifferently, making it difficult to override if added to a wrapper element. By\nassigning text-decoration a custom selector, its style can target only the\nelements to which it should be applied.",
    "Rather than specify a CSS selector for every subfeature, you can set a single\nselector as a string value for the relevant feature. This is the approach\ndemonstrated for the color feature in the earlier examples above.",
    "A selector that hasn’t been configured for a specific feature will fall back to\nthe block’s root selector. Similarly, if a subfeature hasn’t had a custom\nselector set, it will fall back to its parent feature’s selector and, if unavailable, fall back further to the block’s root selector.",
    "Rather than repeating selectors for multiple subfeatures, you can set the\ncommon selector as the parent feature’s root selector and only define the\nunique selectors for the subfeatures that differ.",
    "The color.background-color subfeature isn’t explicitly set in the above\nexample. As the color feature also doesn’t define a root selector,\ncolor.background-color would be included under the block’s primary root\nselector, .my-custom-block-selector.",
    "For a subfeature such as typography.font-size, it would fallback to its parent\nfeature’s selector given that is present, i.e. .my-custom-block-selector > h2.",
    "Block registration API reference.",
    "[Learn how to create your first block](https://developer.wordpress.org/block-editor/getting-started/create-block/) for the WordPress block editor. From setting up your development environment, tools, and getting comfortable with the new development model, this tutorial covers all you need to know to get started with creating blocks.",
    "Every block starts by registering a new block type definition. To register, you use the registerBlockType function from the wp-blocks package. The function takes two arguments, a block name and a block configuration object.",
    "The name for a block is a unique string that identifies a block. Names have to be structured as namespace/block-name, where namespace is the name of your plugin or theme.",
    "Note: A block name can only contain lowercase alphanumeric characters and dashes, and must begin with a letter.",
    "Note: This name is used on the comment delimiters as <!-- wp:my-plugin/book -->. Those blocks provided by core don’t include a namespace when serialized.",
    "A block requires a few properties to be specified before it can be registered successfully. These are defined through a configuration object, which includes the following:",
    "This is the display title for your block, which can be translated with our translation functions. The title will display in the Inserter and in other areas of the editor.",
    "Note: To keep your block titles readable and accessible in the UI, try to avoid very long titles.",
    "This is a short description for your block, which can be translated with our translation functions. This will be shown in the Block Tab in the Settings Sidebar.",
    "Blocks are grouped into categories to help users browse and discover them.",
    "The core provided categories are:",
    "Plugins and Themes can also register custom block categories.",
    "An icon property should be specified to make it easier to identify a block. These can be any of WordPress’ Dashicons, or a custom svg element.",
    "Note: Custom SVG icons are automatically wrapped in the wp.primitives.SVG component to add accessibility attributes (aria-hidden, role, and focusable).",
    "An object can also be passed as icon, in this case, icon, as specified above, should be included in the src property.",
    "Besides src the object can contain background and foreground colors, this colors will appear with the icon when they are applicable e.g.: in the inserter.",
    "Sometimes a block could have aliases that help users discover it while searching. For example, an image block could also want to be discovered by photo. You can do so by providing an array of terms (which can be translated).",
    "Block styles can be used to provide alternative styles to block. It works by adding a class name to the block’s wrapper. Using CSS, a theme developer can target the class name for the block style if it is selected.",
    "Plugins and Themes can also register custom block style for existing blocks.",
    "Attributes provide the structured data needs of a block. They can exist in different forms when they are serialized, but they are declared together under a common interface.",
    "Example provides structured example data for the block. This data is used to construct a preview for the block to be shown in the Inspector Help Panel when the user mouses over the block and in the Styles panel when the block is selected.",
    "The data provided in the example object should match the attributes defined. For example:",
    "If example is not defined, the preview will not be shown. So even if no-attributes are defined, setting a empty example object example: {} will trigger the preview to show.",
    "It’s also possible to extend the block preview with inner blocks via innerBlocks. For example:",
    "It’s also possible to define the width of the preview container in pixels via viewportWidth. For example:",
    "Similarly to how the block’s styles can be declared, a block type can define block variations that the user can pick from. The difference is that, rather than changing only the visual appearance, this field provides a way to apply initial custom attributes and inner blocks at the time when a block is inserted. See the Block Variations API for more details.",
    "Supports contains as set of options to control features used in the editor. See the the supports documentation for more details.",
    "Transforms provide rules for what a block can be transformed from and what it can be transformed to. A block can be transformed from another block, a shortcode, a regular expression, a file or a raw DOM node. Take a look at the Block Transforms API for more info about each available transformation.",
    "Blocks are able to be inserted into blocks that use InnerBlocks as nested content. Sometimes it is useful to restrict a block so that it is only available as a nested block. For example, you might want to allow an ‘Add to Cart’ block to only be available within a ‘Product’ block.",
    "Setting parent lets a block require that it is only available when nested within the specified blocks.",
    "The ancestor property makes a block available inside the specified block types at any position of the ancestor block subtree. That allows, for example, to place a ‘Comment Content’ block inside a ‘Column’ block, as long as ‘Column’ is somewhere within a ‘Comment Template’ block. In comparison to the parent property blocks that specify their ancestor can be placed anywhere in the subtree whilst blocks with a specified parent need to be direct children.",
    "Blocks can be added to collections, grouping together all blocks from the same origin",
    "registerBlockCollection takes two parameters, namespace and an object of settings including title and icon.",
    "This should match the namespace declared in the block name; the name of your plugin or theme.",
    "This will display in the block inserter section, which will list all blocks in this collection.",
    "(Optional) An icon to display alongside the title in the block inserter.",
    "Block Patterns are predefined block layouts, available from the patterns tab of the block inserter. Once inserted into content, the blocks are ready for additional or modified content and configuration.",
    "In this Document:\n– Patterns\n    – Block Patterns\n        – register_block_pattern\n    – Unregistering Block Patterns\n        – unregister_block_pattern\n    – Block Pattern Categories\n        – register_block_pattern_category\n        – unregister_block_pattern_category\n    – Block patterns contextual to block types and pattern transformations\n    – Semantic block patterns",
    "The editor comes with several core block patterns. Theme and plugin authors can register additional custom block patterns using the register_block_pattern helper function.",
    "The register_block_pattern helper function receives two arguments.\n–   title: A machine-readable title with a naming convention of namespace/title.\n–   properties: An array describing properties of the pattern.",
    "The properties available for block patterns are:",
    "The following code sample registers a block pattern named ‘my-plugin/my-awesome-pattern’:",
    "Note:",
    "register_block_pattern() should be called from a handler attached to the init hook.",
    "The unregister_block_pattern helper function allows for a previously registered block pattern to be unregistered from a theme or plugin and receives one argument.\n–   title: The name of the block pattern to be unregistered.",
    "The following code sample unregisters the block pattern named ‘my-plugin/my-awesome-pattern’:",
    "unregister_block_pattern() should be called from a handler attached to the init hook.",
    "Block patterns can be grouped using categories. The block editor comes with bundled categories you can use on your custom block patterns. You can also register your own block pattern categories.",
    "The register_block_pattern_category helper function receives two arguments.\n–   title: A machine-readable title for the block pattern category.\n–   properties: An array describing properties of the pattern category.",
    "The properties of the pattern categories include:",
    "The following code sample registers the category named ‘hero’:",
    "register_block_pattern_category() should be called from a handler attached to the init hook.",
    "The category will not show under Patterns unless a pattern has been assigned to that category.",
    "unregister_block_pattern_category allows unregistering a pattern category.",
    "The unregister_block_pattern_category helper function allows for a previously registered block pattern category to be unregistered from a theme or plugin and receives one argument.\n–   title: The name of the block pattern category to be unregistered.",
    "The following code sample unregisters the category named ‘hero’:",
    "unregister_block_pattern_category() should be called from a handler attached to the init hook.",
    "It is possible to attach a block pattern to one or more block types. This adds the block pattern as an available transform for that block type.",
    "Currently these transformations are available only to simple blocks (blocks without inner blocks). In order for a pattern to be suggested, every selected block must be present in the block pattern.",
    "For instance:",
    "The above code registers a block pattern named ‘my-plugin/powered-by-wordpress’ and also shows the pattern in the “transform menu” of paragraph blocks. The transformation result will be keeping the paragraph’s existing content and also apply the other attributes – in this case the background and text color.",
    "As mentioned above pattern transformations for simple blocks can also work if we have selected multiple blocks and there are matching contextual patterns to these blocks. Let’s see an example of a pattern where two block types are attached.",
    "In the above example if we select one of the two block types, either a paragraph or a heading block, this pattern will be suggested by transforming the selected block using its content and will also add the remaining blocks from the pattern. If on the other hand we multi select one paragraph and one heading block, both blocks will be transformed.",
    "Blocks can also use these contextual block patterns in other places. For instance, when inserting a new Query Loop block, the user is provided with a list of all patterns attached to the block.",
    "In block themes, you can also mark block patterns as “header” or “footer” patterns (template part areas). We call these “semantic block patterns”. These patterns are shown to the user when inserting or replacing header or footer template parts.",
    "Example:",
    "Starting in WordPress 5.8 release, we recommend using the block.json metadata file as the canonical way to register block types with both PHP (server-side) and JavaScript (client-side). Here is an example block.json file that would define the metadata for a plugin create a notice block.",
    "The block definition allows code sharing between JavaScript, PHP, and other languages when processing block types stored as JSON, and registering blocks with the block.json metadata file provides multiple benefits on top of it.",
    "From a performance perspective, when themes support lazy loading assets, blocks registered with block.json will have their asset enqueuing optimized out of the box. The frontend CSS and JavaScript assets listed in the style or script properties will only be enqueued when the block is present on the page, resulting in reduced page sizes.",
    "Furthermore, because the Block Type REST API Endpoint can only list blocks registered on the server, registering blocks server-side is recommended; using the block.json file simplifies this registration.",
    "The WordPress Plugins Directory can detect block.json files, highlight blocks included in plugins, and extract their metadata. If you wish to submit your block(s) to the Block Directory, all blocks contained in your plugin must have a block.json file for the Block Directory to recognize them.",
    "Development is improved by using a defined schema definition file. Supported editors can provide help like tooltips, autocomplete, and schema validation. To use the schema, add the following to the top of the block.json.",
    "The register_block_type function that aims to simplify the block type registration on the server, can read metadata stored in the block.json file.",
    "This function takes two params relevant in this context ($block_type accepts more types and variants):",
    "It returns the registered block type (WP_Block_Type) on success or false on failure.",
    "When the block is registered on the server, you only need to register the client-side settings on the client using the same block’s name.",
    "Although registering the block also on the server with PHP is still recommended for the reasons above, if you want to register it only client-side you can now use registerBlockType method from @wordpress/blocks package to register a block type using the metadata loaded from block.json file.",
    "The function takes two params:",
    "It returns the registered block type (WPBlock) on success or undefined on failure.",
    "This section describes all the properties that can be added to the block.json file to define the behavior and metadata of block types.",
    "The version of the Block API used by the block. The most recent version is 2 and it was introduced in WordPress 5.6.",
    "See the the API versions documentation for more details.",
    "Note: A block name can only contain lowercase alphanumeric characters, dashes, and at most one forward slash to designate the plugin-unique namespace prefix. It must begin with a letter.",
    "Note: This name is used on the comment delimiters as <!-- wp:my-plugin/book -->. Block types in the core namespace do not include a namespace when serialized.",
    "An implementation should expect and tolerate unknown categories, providing some reasonable fallback behavior (e.g. a “text” category).",
    "Setting parent lets a block require that it is only available when nested within the specified blocks. For example, you might want to allow an ‘Add to Cart’ block to only be available within a ‘Product’ block.",
    "An icon property should be specified to make it easier to identify a block. These can be any of WordPress’ Dashicons (slug serving also as a fallback in non-js contexts).",
    "Note: It’s also possible to override this property on the client-side with the source of the SVG element. In addition, this property can be defined with JavaScript as an object containing background and foreground colors. This colors will appear with the icon when they are applicable e.g.: in the inserter. Custom SVG icons are automatically wrapped in the wp.primitives.SVG component to add accessibility attributes (aria-hidden, role, and focusable).",
    "This is a short description for your block, which can be translated with our translation functions. This will be shown in the block inspector.",
    "Sometimes a block could have aliases that help users discover it while searching. For example, an image block could also want to be discovered by photo. You can do so by providing an array of unlimited terms (which are translated).",
    "The current version number of the block, such as 1.0 or 1.0.3. It’s similar to how plugins are versioned. This field might be used with block assets to control cache invalidation, and when the block author omits it, then the installed version of WordPress is used instead.",
    "The gettext text domain of the plugin/block. More information can be found in the Text Domain section of the How to Internationalize your Plugin page.",
    "See the the attributes documentation for more details.",
    "Context provided for available access by descendants of blocks of this type, in the form of an object which maps a context name to one of the block’s own attribute.",
    "See the block context documentation for more details.",
    "Array of the names of context values to inherit from an ancestor provider.",
    "Any custom CSS selectors, keyed by root, feature, or sub-feature, to be used\nwhen generating block styles for theme.json (global styles) stylesheets.\nProviding custom selectors allows more fine grained control over which styles\napply to what block elements, e.g. applying typography styles only to an inner\nheading while colors are still applied on the outer block wrapper etc.",
    "See the the selectors documentation for more details.",
    "It contains as set of options to control features used in the editor. See the the supports documentation for more details.",
    "It provides structured example data for the block. This data is used to construct a preview for the block to be shown in the Inspector Help Panel when the user mouses over the block.",
    "See the the example documentation for more details.",
    "Block Variations is the API that allows a block to have similar versions of it, but all these versions share some common functionality. Each block variation is differentiated from the others by setting some initial attributes or inner blocks. Then at the time when a block is inserted these attributes and/or inner blocks are applied.",
    "Note: In JavaScript you can provide a function for the isActive property, and a React element for the icon. In the block.json file both only support strings",
    "See the the variations documentation for more details.",
    "Block type editor scripts definition. They will only be enqueued in the context of the editor.",
    "It’s possible to pass a script handle registered with the wp_register_script function, a path to a JavaScript file relative to the block.json file, or a list with a mix of both (learn more).",
    "Note: An option to pass also an array of editor scripts exists since WordPress 6.1.0.",
    "Block type frontend and editor scripts definition. They will be enqueued both in the editor and when viewing the content on the front of the site.",
    "Note: An option to pass also an array of scripts exists since WordPress 6.1.0.",
    "Block type frontend scripts definition. They will be enqueued only when viewing the content on the front of the site.",
    "Note: An option to pass also an array of view scripts exists since WordPress 6.1.0.",
    "Block type editor styles definition. They will only be enqueued in the context of the editor.",
    "It’s possible to pass a style handle registered with the wp_register_style function, a path to a CSS file relative to the block.json file, or a list with a mix of both (learn more).",
    "Note: An option to pass also an array of editor styles exists since WordPress 5.9.0.",
    "Block type frontend and editor styles definition. They will be enqueued both in the editor and when viewing the content on the front of the site.",
    "Note: An option to pass also an array of styles exists since WordPress 5.9.0.",
    "PHP file to use when rendering the block type on the server to show on the front end. The following variables are exposed to the file:",
    "The WPDefinedPath type is a subtype of string, where the value represents a path to a JavaScript, CSS or PHP file relative to where block.json file is located. The path provided must be prefixed with file:. This approach is based on how npm handles local paths for packages.",
    "In block.json:",
    "It extends WPDefinedPath for JavaScript and CSS files. An alternative to the file path would be a script or style handle name referencing an already registered asset using WordPress helpers.",
    "In the context of WordPress, when a block is registered with PHP, it will automatically register all scripts and styles that are found in the block.json file and use file paths rather than asset handles.",
    "That’s why, the WPDefinedAsset type has to offer a way to mirror also the shape of params necessary to register scripts and styles using wp_register_script and wp_register_style, and then assign these as handles associated with your block using the script, style, editor_script, and editor_style block type registration settings.",
    "It’s possible to provide an object which takes the following shape:",
    "The definition is stored inside separate PHP file which ends with .asset.php and is located next to the JS/CSS file listed in block.json. WordPress will automatically detect this file through pattern matching. This option is the preferred one as it is expected it will become an option to auto-generate those asset files with @wordpress/scripts package.",
    "In build/index.asset.php:",
    "Starting in the WordPress 5.8 release, it is possible to instruct WordPress to enqueue scripts and styles for a block type only when rendered on the frontend. It applies to the following asset fields in the block.json file:",
    "WordPress string discovery system can automatically translate fields marked in this document as translatable. First, you need to set the textdomain property in the block.json file that provides block metadata.",
    "In PHP, localized properties will be automatically wrapped in _x function calls on the backend of WordPress when executing register_block_type. These translations get added as an inline script to the plugin’s script handle or to the wp-block-library script handle in WordPress core.",
    "The way register_block_type processes translatable values is roughly equivalent to the following code snippet:",
    "Implementation follows the existing get_plugin_data function which parses the plugin contents to retrieve the plugin’s metadata, and it applies translations dynamically.",
    "In JavaScript, you can use registerBlockType method from @wordpress/blocks package and pass the metadata object loaded from block.json as the first param. All localized properties get automatically wrapped in _x (from @wordpress/i18n package) function calls similar to how it works in PHP.",
    "The existing registration mechanism (both server side and frontend) will continue to work, it will serve as low-level implementation detail for the block.json based registration.",
    "Once all details are ready, Core Blocks will be migrated iteratively and third-party blocks will see warnings appearing in the console to encourage them to refactor the block registration API used.",
    "The following properties are going to be supported for backward compatibility reasons on the client-side only. Some of them might be replaced with alternative APIs in the future:",
    "In the case of dynamic blocks supported by WordPress, it should be still possible to register render_callback property using both register_block_type function on the server.",
    "When registering a block with JavaScript on the client, the edit and save functions provide the interface for how a block is going to be rendered within the editor, how it will operate and be manipulated, and how it will be saved.",
    "The edit function describes the structure of your block in the context of the editor. This represents what the editor will render when the block is used.",
    "The first thing to notice here is the use of the useBlockProps React hook on the block wrapper element. In the example above, the block wrapper renders a “div” in the editor, but in order for the Gutenberg editor to know how to manipulate the block, add any extra classNames that are needed for the block… the block wrapper element should apply props retrieved from the useBlockProps react hook call. The block wrapper element should be a native DOM element, like <div> and <table>, or a React component that forwards any additional props to native DOM elements. Using a <Fragment> or <ServerSideRender> component, for instance, would be invalid.",
    "If the element wrapper needs any extra custom HTML attributes, these need to be passed as an argument to the useBlockProps hook. For example to add a my-random-classname className to the wrapper, you can use the following code:",
    "The edit function also receives a number of properties through an object argument. You can use these properties to adapt the behavior of your block.",
    "The attributes property surfaces all the available attributes and their corresponding values, as described by the attributes property when the block type was registered. See attributes documentation for how to specify attribute sources.",
    "In this case, assuming we had defined an attribute of content during block registration, we would receive and use that value in our edit function:",
    "The value of attributes.content will be displayed inside the div when inserting the block in the editor.",
    "The isSelected property is an boolean that communicates whether the block is currently selected.",
    "This function allows the block to update individual attributes based on user interactions.",
    "When using attributes that are objects or arrays it’s a good idea to copy or clone the attribute prior to updating it:",
    "Why do this? In JavaScript, arrays and objects are passed by reference, so this practice ensures changes won’t affect other code that might hold references to the same data. Furthermore, the Gutenberg project follows the philosophy of the Redux library that state should be immutable—data should not be changed directly, but instead a new version of the data created containing the changes.",
    "The save function defines the way in which the different attributes should be combined into the final markup, which is then serialized into post_content.",
    "For most blocks, the return value of save should be an instance of WordPress Element representing how the block is to appear on the front of the site.",
    "Note: While it is possible to return a string value from save, it will be escaped. If the string includes HTML markup, the markup will be shown on the front of the site verbatim, not as the equivalent HTML node content. If you must return raw HTML from save, use wp.element.RawHTML. As the name implies, this is prone to cross-site scripting and therefore is discouraged in favor of a WordPress Element hierarchy whenever possible.",
    "Note: The save function should be a pure function that depends only on the attributes used to invoke it.\nIt can not have any side effect or retrieve information from another source, e.g. it is not possible to use the data module inside it select( store ).selector( ... ).\nThis is because if the external information changes, the block may be flagged as invalid when the post is later edited (read more about Validation).\nIf there is a need to have other information as part of the save, developers can consider one of these two alternatives:",
    "For dynamic blocks, the return value of save could represent a cached copy of the block’s content to be shown only in case the plugin implementing the block is ever disabled.",
    "If left unspecified, the default implementation will save no markup in post content for the dynamic block, instead deferring this to always be calculated when the block is shown on the front of the site.",
    "Like the edit function, when rendering static blocks, it’s important to add the block props returned by useBlockProps.save() to the wrapper element of your block. This ensures that the block class name is rendered properly in addition to any HTML attribute injected by the block supports API.",
    "As with edit, the save function also receives an object argument including attributes which can be inserted into the markup.",
    "When saving your block, you want to save the attributes in the same format specified by the attribute source definition. If no attribute source is specified, the attribute will be saved to the block’s comment delimiter. See the Block Attributes documentation for more details.",
    "Here are a couple examples of using attributes, edit, and save all together. For a full working example, see the Introducing Attributes and Editable Fields section of the Block Tutorial.",
    "Ideally, the attributes saved should be included in the markup. However, there are times when this is not practical, so if no attribute source is specified the attribute is serialized and saved to the block’s comment delimiter.",
    "This example could be for a dynamic block, such as the Latest Posts block, which renders the markup server-side. The save function is still required, however in this case it simply returns null since the block is not saving content from the editor.",
    "When the editor loads, all blocks within post content are validated to determine their accuracy in order to protect against content loss. This is closely related to the saving implementation of a block, as a user may unintentionally remove or modify their content if the editor is unable to restore a block correctly. During editor initialization, the saved markup for each block is regenerated using the attributes that were parsed from the post’s content. If the newly-generated markup does not match what was already stored in post content, the block is marked as invalid. This is because we assume that unless the user makes edits, the markup should remain identical to the saved content.",
    "If a block is detected to be invalid, the user will be prompted to choose how to handle the invalidation:",
    "Clicking Attempt Block Recovery button will attempt recovery action as much as possible.",
    "Clicking the “3-dot” menu on the side of the block displays three options:",
    "How do blocks become invalid?",
    "The two most common sources of block invalidations are:",
    "I’m a plugin author. What should I do to debug why my blocks are being marked as invalid?",
    "Before starting to debug, be sure to familiarize yourself with the validation step described above documenting the process for detecting whether a block is invalid. A block is invalid if its regenerated markup does not match what is saved in post content, so often this can be caused by the attributes of a block being parsed incorrectly from the saved content.",
    "If you’re using attribute sources, be sure that attributes sourced from markup are saved exactly as you expect, and in the correct type (usually a 'string' or 'number').",
    "When a block is detected as invalid, a warning will be logged into your browser’s developer tools console. The warning will include specific details about the exact point at which a difference in markup occurred. Be sure to look closely at any differences in the expected and actual markups to see where problems are occurring.",
    "I’ve changed my block’s save behavior and old content now includes invalid blocks. How can I fix this?",
    "Refer to the guide on Deprecated Blocks to learn more about how to accommodate legacy content in intentional markup changes.",
    "This page provides a comprehensive guide to the principles and usage of the Deprecation API. For an introduction check out the tutorial on the basics of block deprecation which can be found on the Developer Blog.",
    "When updating static blocks markup and attributes, block authors need to consider existing posts using the old versions of their block. To provide a good upgrade path, you can choose one of the following strategies:",
    "A block can have several deprecated versions. A deprecation will be tried if the current state of a parsed block is invalid, or if the deprecation defines an isEligible function that returns true.",
    "Deprecations do not operate as a chain of updates in the way other software data updates, like database migrations, do. At first glance, it is easy to think that each deprecation is going to make the required changes to the data and then hand this new form of the block onto the next deprecation to make its changes. What happens instead is:",
    "It is important to note that if a deprecation’s save method does not produce a valid block then it is skipped completely, including its migrate method, even if isEligible would return true for the given attributes. This means that if you have several deprecations for a block and want to perform a new migration, like moving content to InnerBlocks, you may need to update the migrate methods in multiple deprecations in order for the required changes to be applied to all previous versions of the block.",
    "It is also important to note that if a deprecation’s save method imports additional functions from other files, changes to those files may accidentally change the behavior of the deprecation. You may want to add a snapshot copy of these functions to the deprecations file instead of importing them in order to avoid inadvertently breaking the deprecations.",
    "For blocks with multiple deprecations, it may be easier to save each deprecation to a constant with the version of the block it applies to, and then add each of these to the block’s deprecated array. The deprecations in the array should be in reverse chronological order. This allows the block editor to attempt to apply the most recent and likely deprecations first, avoiding unnecessary and expensive processing.",
    "It is also recommended to keep fixtures which contain the different versions of the block content to allow you to easily test that new deprecations and migrations are working across all previous versions of the block.",
    "Deprecations are defined on a block type as its deprecated property, an array of deprecation objects where each object takes the form:",
    "It’s important to note that attributes, supports, and save are not automatically inherited from the current version, since they can impact parsing and serialization of a block, so they must be defined on the deprecated object in order to be processed during a migration.",
    "In the example above we updated the markup of the block to use a div instead of p.",
    "Sometimes, you need to update the attributes set to rename or modify old attributes.",
    "In the example above we updated the markup of the block to use a div instead of p and rename the text attribute to content.",
    "Situations may exist where when migrating the block we may need to add or remove innerBlocks.\nE.g: a block wants to migrate a title attribute to a paragraph innerBlock.",
    "In the example above we updated the block to use an inner Paragraph block with a title instead of a title attribute.",
    "Above are example cases of block deprecation. For more, real-world examples, check for deprecations in the core block library. Core blocks have been updated across releases and contain simple and complex deprecations.",
    "Block context is a feature which enables ancestor blocks to provide values which can be consumed by descendent blocks within its own hierarchy. Those descendent blocks can inherit these values without resorting to hard-coded values and without an explicit awareness of the block which provides those values.",
    "This is especially useful in full-site editing where, for example, the contents of a block may depend on the context of the post in which it is displayed. A blogroll template may show excerpts of many different posts. Using block context, there can still be one single “Post Excerpt” block which displays the contents of the post based on an inherited post ID.",
    "If you are familiar with React Context, block context adopts many of the same ideas. In fact, the client-side block editor implementation of block context is a very simple application of React Context. Block context is also supported in server-side render_callback implementations, demonstrated in the examples below.",
    "Block context is defined in the registered settings of a block. A block can provide a context value, or consume a value it seeks to inherit.",
    "A block can provide a context value by assigning a providesContext property in its registered settings. This is an object which maps a context name to one of the block’s own attribute. The value corresponding to that attribute value is made available to descendent blocks and can be referenced by the same context name. Currently, block context only supports values derived from the block’s own attributes. This could be enhanced in the future to support additional sources of context values.",
    "For complete example, refer below section.",
    "As seen in the above example, it is recommended that you include a namespace as part of the name of the context key so as to avoid potential conflicts with other plugins or default context values provided by WordPress. The context namespace should be specific to your plugin, and in most cases can be the same as used in the name of the block itself.",
    "A block can inherit a context value from an ancestor provider by assigning a usesContext property in its registered settings. This should be assigned as an array of the context names the block seeks to inherit.",
    "Once a block has defined the context it seeks to inherit, this can be accessed in the implementation of edit (JavaScript) and render_callback (PHP). It is provided as an object (JavaScript) or associative array (PHP) of the context values which have been defined for the block. Note that a context value will only be made available if the block explicitly defines a desire to inherit that value.",
    "Note: Block Context is not available to save.",
    "A block’s context values are available from the context property of the $block argument passed as the third argument to the render_callback function.",
    "Block attributes provide information about the data stored by a block. For example, rich content, a list of image URLs, a background colour, or a button title.",
    "A block can contain any number of attributes, and these are specified by the attributes field – an object where each key is the name of the attribute, and the value is the attribute definition.",
    "The attribute definition will contain, at a minimum, either a type or an enum. There may be additional fields.",
    "Example: Attributes object defining three attributes – url, title, and size.",
    "When a block is parsed this definition will be used to extract data from the block content. Anything that matches will  be available to your block through the attributes prop.",
    "This parsing process can be summarized as:",
    "Example: Attributes available in the edit and function, using the above attributes definition.",
    "The block is responsible for using the save function to ensure that all attributes with a source field are saved according to the attributes definition. This is not automatic.",
    "Attributes without a source will be automatically saved in the block comment delimiter.",
    "For example, using the above attributes definition you would need to ensure that your save function has a corresponding img tag for the url attribute. The title and size attributes will be saved in the comment delimiter.",
    "Example: Example save function that contains the url attribute",
    "The saved HTML will contain the title and size in the comment delimiter, and the url in the img node.",
    "If an attributes change over time then a block deprecation can help migrate from an older attribute, or remove it entirely.",
    "The type indicates the type of data that is stored by the attribute. It does not indicate where the data is stored, which is defined by the source field.",
    "A type is required, unless an enum is provided. A type can be used with an enum.",
    "The type field MUST be one of the following:",
    "Note that the validity of an object is determined by your source. For an example, see the query details below.",
    "An attribute can be defined as one of a fixed set of values. This is specified by an enum, which contains an array of allowed values:",
    "Example: Example enum.",
    "Attribute sources are used to define how the attribute values are extracted from saved post content. They provide a mechanism to map from the saved markup to a JavaScript representation of a block.",
    "The available source values are:\n– (no value) – when no source is specified then data is stored in the block’s comment delimiter.\n– attribute – data is stored in an HTML element attribute.\n– text – data is stored in HTML text.\n– html – data is stored in HTML. This is typically used by RichText.\n– query – data is stored as an array of objects.\n– meta – data is stored in post meta (deprecated).",
    "The source field is usually combined with a selector field. If no selector argument is specified, the source definition runs against the block’s root node. If a selector argument is specified, it will run against the matching element(s) within the block.",
    "The selector can be an HTML tag, or anything queryable with querySelector, such as a class or id attribute. Examples are given below.",
    "For example, a selector of img will match an img element, and img.class will match an img element that has a class of class.",
    "Under the hood, attribute sources are a superset of the functionality provided by hpq, a small library used to parse and query HTML markup into an object shape.",
    "To summarize, the source determines where data is stored in your content, and the type determines what that data is. To reduce the amount of data stored it is usually better to store as much data as possible within HTML rather than as attributes within the comment delimiter.",
    "Use an attribute source to extract the value from an attribute in the markup. The attribute is specified by the attribute field, which must be supplied.",
    "Example: Extract the src attribute from an image found in the block’s markup.",
    "Saved content:",
    "Attribute definition:",
    "Attribute available in the block:",
    "Most attributes from markup will be of type string. Numeric attributes in HTML are still stored as strings, and are not converted automatically.",
    "Example: Extract the width attribute from an image found in the block’s markup.",
    "The only exception is when checking for the existence of an attribute (for example, the disabled attribute on a button). In that case type boolean can be used and the stored value will be a boolean.",
    "Example: Extract the disabled attribute from a button found in the block’s markup.",
    "Use text to extract the inner text from markup. Note that HTML is returned according to the rules of textContent.",
    "Example: Extract the content attribute from a figcaption element found in the block’s markup.",
    "Another example, using text as the source, and using .my-content class as the selector to extract text:",
    "Example: Extract the content attribute from an element with .my-content class found in the block’s markup.",
    "Use html to extract the inner HTML from markup. Note that text is returned according to the rules of innerHTML.",
    "Use the multiline property to extract the inner HTML of matching tag names for the use in RichText with the multiline prop.",
    "Example: Extract the content attribute from a blockquote element found in the block’s markup.",
    "Use query to extract an array of values from markup. Entries of the array are determined by the selector argument, where each matched element within the block will have an entry structured corresponding to the second argument, an object of attribute sources.",
    "The query field is effectively a nested block attributes definition. It is possible (although not necessarily recommended) to nest further.",
    "Example: Extract src and alt from each image element in the block’s markup.",
    "Attributes may be obtained from a post’s meta rather than from the block’s representation in saved post content. For this, an attribute is required to specify its corresponding meta key under the meta key.",
    "From here, meta attributes can be read and written by a block using the same interface as any attribute:",
    "By default, a meta field will be excluded from a post object’s meta. This can be circumvented by explicitly making the field visible:",
    "Furthermore, be aware that WordPress defaults to:",
    "If either behavior is not desired, the same register_post_meta call can be complemented with the single and/or type parameters as follows:",
    "If you’d like to use an object or an array in an attribute, you can register a string attribute type and use JSON as the intermediary. Serialize the structured data to JSON prior to saving, and then deserialize the JSON string on the server. Keep in mind that you’re responsible for the integrity of the data; make sure to properly sanitize, accommodate missing data, etc.",
    "Lastly, make sure that you respect the data’s type when setting attributes, as the framework does not automatically perform type casting of meta. Incorrect typing in block attributes will result in a post remaining dirty even after saving (cf. isEditedPostDirty, hasEditedAttributes). For instance, if authorCount is an integer, remember that event handlers may pass a different kind of data, thus the value should be cast explicitly:",
    "A block attribute can contain a default value, which will be used if the type and source do not match anything within the block content.",
    "The value is provided by the default field, and the value should match the expected format of the attribute.",
    "Example: Example default values.",
    "This document lists the changes made between the different API versions.",
    "Initial version.",
    "Annotations are a way to highlight a specific piece in a post created with the block editor. Examples of this include commenting on a piece of text and spellchecking. Both can use the annotations API to mark a piece of text.",
    "To see the API for yourself the easiest way is to have a block that is at least 200 characters long without formatting and putting the following in the console:",
    "The start and the end of the range should be calculated based only on the text of the relevant RichText. For example, in the following HTML position 0 will refer to the position before the capital S:",
    "To help with determining the correct positions, the wp.richText.create method can be used. This will split a piece of HTML into text and formats.",
    "All available properties can be found in the API documentation of the addAnnotation action.",
    "The property richTextIdentifier is the identifier of the RichText instance the annotation applies to. This is necessary because blocks may have multiple rich text instances that are used to manage data for different attributes, so you need to pass this in order to highlight text within the correct one.",
    "For example the Paragraph block only has a single RichText instance, with the identifier content. The quote block type has 2 RichText instances, so if you wish to highlight text in the citation, you need to pass citation as the richTextIdentifier when adding an annotation. To target the quote content, you need to use the identifier value. Refer to the source code of the block type to find the correct identifier.",
    "It is also possible to annotate a block completely. In that case just provide the selector property and set it to block. The default selector is range, which can be used for text annotation.",
    "This doesn’t provide any styling out of the box, so you have to provide some CSS to make sure your annotation is shown:",
    "The text annotation is controlled by the start and end properties. Simple start and end properties don’t work for HTML, so these properties are assumed to be offsets within the rich-text internal structure. For simplicity you can think about this as if all HTML would be stripped out and then you calculate the start and the end of the annotation.",
    "Blocks are the fundamental element of the editor. They are the primary way in which plugins and themes can register their own functionality and extend the capabilities of the editor.",
    "The following sections will walk you through the existing block APIs:",
    "The Legacy Widget block allows users to add, edit and preview third party widgets that are registered by plugins and widgets that were added using the classic Widgets Editor.",
    "Third party widgets can be added by inserting a Legacy Widget block using the block inserter and selecting the widget from the block’s dropdown.",
    "Third party widgets may also be added by searching for the name of the widget in the block inserter and selecting the widget. A variation of the Legacy Widget block will be inserted.",
    "The Legacy Widget block will display the widget’s form in a way similar to the Customizer, and so is compatible with most third party widgets.",
    "If the widget uses JavaScript in its form, it is important that events are added to the DOM after the 'widget-added' jQuery event is triggered on document.",
    "For example, a widget might want to show a “Password” field when the “Change password” checkbox is checked.",
    "Note that all of the widget’s event handlers are added in the widget-added callback.",
    "The Legacy Widget block will display a preview of the widget when the Legacy Widget block is not selected.",
    "A “No preview available.” message is automatically shown by the Legacy Widget block when the widget’s widget() function does not render anything or only renders empty HTML elements.",
    "Widgets may take advantage of this by returning early from widget() when a preview should not be displayed.",
    "You can allow users to easily migrate a Legacy Widget block containing a specific widget to a block or multiple blocks. This allows plugin authors to phase out their widgets in favour of blocks which are more intuitive and can be used in more places.",
    "The following steps show how to do this.",
    "First, we need to tell WordPress that it is OK to display your widget’s instance array in the REST API.",
    "This can be safely done if:",
    "If it is safe to do so, then include a widget option named show_instance_in_rest with its value set to true when registering your widget.",
    "This allows the block editor and other REST API clients to see your widget’s instance array by accessing instance.raw in the REST API response.",
    "Note that versions of WordPress prior to 5.8.0 allowed you to enable this feature by setting $show_instance_in_rest to true in the class that extends WP_Widget.",
    "This is now deprecated in favour of the widget option method.",
    "Now, we can define a block transform which tells the block editor what to replace the Legacy Widget block containing your widget with.",
    "This is done by adding JavaScript code to your block’s definition. In this example, we define a transform that turns a widget with ID 'example_widget' into a block with name 'example/block'.",
    "As a final touch, we can tell the Legacy Widget block to hide your widget from the “Select widget” dropdown and from the block inserter. This encourages users to use the block that replaces your widget.",
    "This can be done using the widget_types_to_hide_from_legacy_widget_block filter.",
    "You may optionally allow the Legacy Widget block in other block editors such as\nthe WordPress post editor. This is not enabled by default.",
    "First, ensure that any styles and scripts required by the legacy widgets are\nloaded onto the page. A convenient way of doing this is to manually perform all\nof the hooks that ordinarily run when a user browses to the widgets WP Admin\nscreen.",
    "Then, register the Legacy Widget block using registerLegacyWidgetBlock which\nis defined in the @wordpress/widgets package.",
    "There are several ways to disable the new Widgets Block Editor.",
    "Themes may disable the Widgets Block Editor by calling remove_theme_support( 'widgets-block-editor' ).",
    "For example, a theme may have the following PHP code in functions.php.",
    "End users may disable the Widgets Block Editor by installing and activating the Classic Widgets plugin.",
    "With this plugin installed, the Widgets Block Editor can be toggled on and off by deactivating and activating the plugin.",
    "the use_widgets_block_editor filter controls whether or not the Widgets Block Editor is enabled.",
    "For example, a site administrator may include the following PHP code in a mu-plugin to disable the Widgets Block Editor.",
    "For more advanced uses, you may supply your own function. In this example, the Widgets Block Editor is disabled for a specific user.",
    "The new Widgets Editor is a WordPress feature which upgrades widget areas to allow using blocks alongside widgets. It offers a new widget management experience built using the familiar WordPress block editor.",
    "You can access the new Widgets Editor by navigating to Appearance → Widgets or Appearance → Customize → Widgets and choose a widget area.",
    "The Widgets Block Editor allows you to insert blocks and widgets into any of the Widget Areas or Sidebars defined by the site’s active theme, via a standalone editor or through the Customizer.",
    "The new Widgets Editor also replaces the Widgets section in the Customizer with the new block-based editor.",
    "You can access the Customizer Widgets Block Editor by navigating to Appearance → Customize, selecting Widgets, and then selecting a Widget Area.",
    "Using the new Widgets Editor through the Customizer goes beyond inserting blocks and widgets into a selected Widget Area, making use of the live preview of the changes, to the right of the editor, and of all the other Customizer specific features such as scheduling and sharing changes.",
    "Widgets that were added to a Widget Area before the new Widgets Editor will continue to work – via the Legacy Widget block.",
    "The Legacy Widget block is the compatibility mechanism which allows us to edit and preview changes to a classic widget within the new block based Widgets Editor.",
    "Any third party widgets registered by plugins can still be inserted in widget areas by adding and setting them up through a Legacy Widget block.",
    "The Widgets Editor stores blocks using an underlying “Block” widget that is invisible to the user. This means that plugins and themes will continue to work normally, and that the Widgets Block Editor can be disabled without any data loss.",
    "Themes may disable the Widgets Block Editor using remove_theme_support( 'widgets-block-editor' ).",
    "Users may disable the Widgets Block Editor by installing the Classic Widgets plugin.",
    "The Gutenberg plugin replaces the Widgets Editor screen in WP Admin with a new screen based on the WordPress block editor.",
    "Contents",
    "Gutenberg 11.6 added support for thunks. You can think of thunks as functions that can be dispatched:",
    "Thunks expand the meaning of what a Redux action is. Before thunks, actions were purely functional and could only return and yield data. Common use cases such as interacting with the store or requesting API data from an action required using a separate control. You would often see code like:",
    "Side effects like store operations and fetch functions would be implemented outside of the action. Thunks provide an alternative to this approach. They allow you to use side effects inline, like this:",
    "This removes the need to implement separate controls.",
    "Let’s take a look at an example from Gutenberg core. Prior to thunks, the toggleFeature action from the @wordpress/interface package was implemented like this:",
    "Controls were the only way to dispatch actions and select data from the store.",
    "With thunks, there is a cleaner way. This is how toggleFeature is implemented now:",
    "Thanks to the select and dispatch arguments, thunks may use the store directly without the need for generators and controls.",
    "Imagine a simple React app that allows you to set the temperature on a thermostat. It only has one input and one button. Clicking the button dispatches a saveTemperatureToAPI action with the value from the input.",
    "If we used controls to save the temperature, the store definition would look like below:",
    "While the code is reasonably straightforward, there is a level of indirection. The saveTemperatureToAPI action does not talk directly to the API, but has to go through the FETCH_JSON control.",
    "Let’s see how this indirection can be removed with thunks:",
    "That’s pretty cool! What’s even better is that resolvers are supported as well:",
    "Support for thunks is included by default in every data store, just like the (now legacy) support for\ngenerators and controls.",
    "A thunk receives a single object argument with the following keys:",
    "An object containing the store’s selectors pre-bound to state, which means you don’t need to provide the state, only the additional arguments. select triggers the related resolvers, if any, but does not wait for them to finish. It just returns the current value even if it’s null.",
    "If a selector is part of the public API, it’s available as a method on the select object:",
    "Since not all selectors are exposed on the store, select doubles as a function that supports passing a selector as an argument:",
    "resolveSelect is the same as select, except it returns a promise that resolves with the value provided by the related resolver.",
    "An object containing the store’s actions",
    "If an action is part of the public API, it’s available as a method on the dispatch object:",
    "Since not all actions are exposed on the store, dispatch doubles as a function that supports passing a Redux action as an argument:",
    "A registry provides access to other stores through its dispatch, select, and resolveSelect methods.\nThese are very similar to the ones described above, with a slight twist. Calling registry.select( storeName ) returns a function returning an object of selectors from storeName. This comes handy when you need to interact with another store. For example:",
    "The new Blocks include baseline support in all themes, enhancements to opt-in to and the ability to extend and customize.",
    "There are a few new concepts to consider when building themes:",
    "By default, blocks provide their styles to enable basic support for blocks in themes without any change. They also provide opt-in opinionated styles. Themes can add/override these styles, or they can provide no styles at all, and rely fully on what the blocks provide.",
    "Some advanced block features require opt-in support in the theme itself as it’s difficult for the block to provide these styles, they may require some architecting of the theme itself, in order to work well.",
    "To opt-in for one of these features, call add_theme_support in the functions.php file of the theme. For example:",
    "Core blocks include default structural styles. These are loaded in both the editor and the front end by default. An example of these styles is the CSS that powers the columns block. Without these rules, the block would result in a broken layout containing no columns at all.",
    "The block editor allows themes to opt-in to slightly more opinionated styles for the front end. An example of these styles is the default color bar to the left of blockquotes. If you’d like to use these opinionated styles in your theme, add theme support for wp-block-styles:",
    "You can see the CSS that will be included in the block library theme file.",
    "Some blocks such as the image block have the possibility to define a “wide” or “full” alignment by adding the corresponding classname to the block’s wrapper ( alignwide or alignfull ). A theme can opt-in for this feature by calling:",
    "For more information about this function, see the developer docs on add_theme_support().",
    "It can be difficult to create a responsive layout that accommodates wide images, a sidebar, a centered column, and floated elements that stay within that centered column.",
    "The block editor adds additional markup to floated images to make styling them easier.",
    "Here’s the markup for an Image with a caption:",
    "Here’s the markup for a left-floated image:",
    "Here’s an example codepen using the above markup to achieve a responsive layout that features a sidebar, wide images, and floated elements with bounded captions.",
    "Different blocks have the possibility of customizing colors. The block editor provides a default palette, but a theme can overwrite it and provide its own:",
    "name is a human-readable label (demonstrated above) that appears in the tooltip and provides a meaningful description of the color to users. It is especially important for those who rely on screen readers or would otherwise have difficulty perceiving the color. slug is a unique identifier for the color and is used to generate the CSS classes used by the block editor color palette. color is the hexadecimal code to specify the color.",
    "Some colors change dynamically — such as “Primary” and “Secondary” color — such as in the Twenty Nineteen theme and cannot be described programmatically. In spite of that, it is still advisable to provide meaningful names for at least the default values when applicable.",
    "The colors will be shown in order on the palette, and there’s no limit to how many can be specified.",
    "Themes are responsible for creating the classes that apply the colors in different contexts. Core blocks use “color”, “background-color”, and “border-color” contexts. So to correctly apply “strong magenta” to all contexts of core blocks a theme should implement the classes itself. The class name is built appending ‘has-‘, followed by the class name using kebab case and ending with the context name.",
    "Starting in WordPress 5.9, to override color values defined by core, themes without a theme.json have to set their values via CSS Custom Properties instead of providing the classes. The CSS Custom Properties use the following naming --wp--preset--color--<slug>. See more info in this devnote. For example:",
    "Different blocks have the possibility of selecting from a list of predefined gradients. The block editor provides a default gradient presets, but a theme can overwrite them and provide its own:",
    "name is a human-readable label (demonstrated above) that appears in the tooltip and provides a meaningful description of the gradient to users. It is especially important for those who rely on screen readers or would otherwise have difficulty perceiving the color. gradient is a CSS value of a gradient applied to a background-image of the block. Details of valid gradient types can be found in the mozilla documentation. slug is a unique identifier for the gradient and is used to generate the CSS classes used by the block editor.",
    "Themes are responsible for creating the classes that apply the gradients. So to correctly apply “Vivid cyan blue to vivid purple” a theme should implement the following class:",
    "Starting in WordPress 5.9, to override gradient values defined by core, themes without a theme.json have to set their values via CSS Custom Properties instead of providing the classes. The CSS Custom Properties use the following naming --wp--preset--gradient--<slug>. See more info in this devnote. For example:",
    "Blocks may allow the user to configure the font sizes they use, e.g., the paragraph block. The block provides a default set of font sizes, but a theme can overwrite it and provide its own:",
    "The font sizes are rendered on the font size picker in the order themes provide them.",
    "Themes are responsible for creating the classes that apply the correct font size styles.\nThe class name is built appending ‘has-‘, followed by the font size name using kebab case and ending with -font-size.",
    "As an example for the regular font size, a theme may provide the following class.",
    "Starting in WordPress 5.9, to override font size values defined by core, themes without a theme.json have to set their values via CSS Custom Properties instead of providing the classes. The CSS Custom Properties use the following naming --wp--preset--font-size--<slug>. See more info in this devnote. For example:",
    "Themes can disable the ability to set custom font sizes with the following code:",
    "When set, users will be restricted to the default sizes provided in the block editor or the sizes provided via the editor-font-sizes theme support setting.",
    "By default, the color palette offered to blocks allows the user to select a custom color different from the editor or theme default colors.",
    "Themes can disable this feature using:",
    "This flag will make sure users are only able to choose colors from the editor-color-palette the theme provided or from the editor default colors if the theme did not provide one.",
    "Themes can disable the ability to set a custom gradient with the following code:",
    "When set, users will be restricted to the default gradients provided in the block editor or the gradients provided via the editor-gradient-presets theme support setting.",
    "Note: Since WordPress 6.1.",
    "Themes can opt out of generated block layout styles that provide default structural styles for core blocks including Group, Columns, Buttons, and Social Icons. By using the following code, these themes commit to providing their own structural styling, as using this feature will result in core blocks displaying incorrectly in both the editor and site frontend:",
    "For themes looking to customize blockGap styles or block spacing, see the developer docs on Global Settings & Styles.",
    "Some blocks like paragraph and headings support customizing the line height. Themes can enable support for this feature with the following code:",
    "In addition to pixels, users can use other units to define sizes, paddings… The available units are: px, em, rem, vh, vw. Themes can disable support for this feature with the following code:",
    "Themes can also filter the available custom units.",
    "WordPress comes with a number of block patterns built-in, themes can opt-out of the bundled patterns and provide their own set using the following code:",
    "The block editor supports the theme’s editor styles, however it works a little differently than in the classic editor.",
    "In the classic editor, the editor stylesheet is loaded directly into the iframe of the WYSIWYG editor, with no changes. The block editor, however, doesn’t use iframes. To make sure your styles are applied only to the content of the editor, we automatically transform your editor styles by selectively rewriting or adjusting certain CSS selectors. This also allows the block editor to leverage your editor style in block variation previews.",
    "For example, if you write body { ... } in your editor style, this is rewritten to .editor-styles-wrapper { ... }. This also means that you should not target any of the editor class names directly.",
    "Because it works a little differently, you need to opt-in to this by adding an extra snippet to your theme, in addition to the add_editor_style function:",
    "You shouldn’t need to change your editor styles too much; most themes can add the snippet above and get similar results in the classic editor and inside the block editor.",
    "Use the add_editor_style function to enqueue and load CSS on the editor screen. For the classic editor, this was the only function needed to add style to the editor. For the new block editor, you first need to add_theme_support( 'editor-styles'); mentioned above.",
    "Adding that to your functions.php file will add the stylesheet style-editor.css to the queue of stylesheets to be loaded in the editor.",
    "You can style the editor like any other webpage. Here’s how to change the background color and the font color to blue:",
    "To change the main column width of the editor, add the following CSS to style-editor.css:",
    "You can use those editor widths to match those in your theme. You can use any CSS width unit, including % or px.",
    "Further reading: Applying Styles with Stylesheets.",
    "The embed blocks automatically apply styles to embedded content to reflect the aspect ratio of content that is embedded in an iFrame. A block styled with the aspect ratio responsive styles would look like:",
    "To make the content resize and keep its aspect ratio, the <body> element needs the wp-embed-responsive class. This is not set by default, and requires the theme to opt in to the responsive-embeds feature:",
    "Some blocks can have padding controls. This is off by default, and requires the theme to opt in by declaring support:",
    "Link support has been made stable as part of WordPress 5.8. It’s false by default and themes can enable it via the theme.json file:",
    "Alternatively, with the Gutenberg plugin active, the old legacy support add_theme_support( 'experimental-link-color' ) would also work. This fallback would be removed when the Gutenberg plugin requires WordPress 5.9 as the minimum version.",
    "When the user sets the link color of a block, a new style will be added in the form of:",
    "where",
    "The block will get attached the class .wp-elements-<uuid>.",
    "Use this setting to enable the following Global Styles settings:",
    "Block Based Template parts allow administrators to edit parts of the site using blocks. This is off by default, and requires the theme to opt in by declaring support:",
    "This feature is only relevant for non block based themes, as block based themes already support block based template parts as part of the site editor.",
    "The standalone template part editor does not allow editors to create new, or delete existing template parts. This is because the theme manually needs to include the template part in the PHP template.",
    "You can find out more about block based template parts in the themes handbook block template and template parts section.",
    "WordPress 5.8 comes with a new mechanism to configure the editor that enables a finer-grained control and introduces the first step in managing styles for future WordPress releases: the theme.json file. Then theme.json evolved to a v2 with WordPress 5.9 release. This page documents its format.",
    "The Block Editor API has evolved at different velocities and there are some growing pains, specially in areas that affect themes. Examples of this are: the ability to control the editor programmatically, or a block style system that facilitates user, theme, and core style preferences.",
    "This describes the current efforts to consolidate the various APIs related to styles into a single point – a theme.json file that should be located inside the root of the theme directory.",
    "Instead of the proliferation of theme support flags or alternative methods, the theme.json files provides a canonical way to define the settings of the block editor. These settings includes things like:",
    "For more granularity, these settings also work at the block level in theme.json.",
    "Examples of what can be achieved are:",
    "By using the theme.json file to set style properties in a structured way, the Block Editor can “manage” the CSS that comes from different origins (user, theme, and core CSS). For example, if a theme and a user set the font size for paragraphs, we only enqueue the style coming from the user and not the theme’s.",
    "Some of the advantages are:",
    "There are some areas of styling that would benefit from having shared values that can change across a site.",
    "To address this need, we’ve started to experiment with CSS Custom Properties, aka CSS Variables, in some places:",
    "This specification is the same for the three different origins that use this format: core, themes, and users. Themes can override core’s defaults by creating a file called theme.json. Users, via the site editor, will also be able to override theme’s or core’s preferences via an user interface that is being worked on.",
    "This field describes the format of the theme.json file. The current version is v2, introduced in WordPress 5.9. It also works with the current Gutenberg plugin.",
    "If you have used v1 previously, you don’t need to update the version in the v1 file to v2, as it’ll be migrated into v2 at runtime for you.",
    "The tabs below show WordPress 5.8 supported settings and the ones supported by the Gutenberg plugin.",
    "The settings section has the following structure:",
    "Each block can configure any of these settings separately, providing a more fine-grained control over what exists via add_theme_support. The settings declared at the top-level affect to all blocks, unless a particular block overwrites it. It’s a way to provide inheritance and configure all blocks at once.",
    "Note, however, that not all settings are relevant for all blocks. The settings section provides an opt-in/opt-out mechanism for themes, but it’s the block’s responsibility to add support for the features that are relevant to it. For example, if a block doesn’t implement the dropCap feature, a theme can’t enable it for such a block through theme.json.",
    "There’s one special setting property, appearanceTools, which is a boolean and its default value is false. Themes can use this setting to enable the following ones:",
    "To retain backward compatibility, the existing add_theme_support declarations that configure the block editor are retrofit in the proper categories for the top-level section. For example, if a theme uses add_theme_support('disable-custom-colors'), it’ll be the same as setting settings.color.custom to false. If the theme.json contains any settings, these will take precedence over the values declared via add_theme_support. This is the complete list of equivalences:",
    "Presets are part of the settings section. They are values that are shown to the user via some UI controls. By defining them via theme.json the engine can do more for themes, such as automatically translate the preset name or enqueue the corresponding CSS classes and custom properties.",
    "The following presets can be defined via theme.json:",
    "The naming schema for the classes and the custom properties is as follows:",
    "To maintain backward compatibility, the presets declared via add_theme_support will also generate the CSS Custom Properties. If the theme.json contains any presets, these will take precedence over the ones declared via add_theme_support.",
    "Preset classes are attached to the content of a post by some user action. That’s why the engine will add !important to these, because user styles should take precedence over theme styles.",
    "In addition to create CSS Custom Properties for the presets, the theme.json also allows for themes to create their own, so they don’t have to be enqueued separately. Any values declared within the custom field will be transformed to CSS Custom Properties following this naming schema: --wp--custom--<variable-name>.",
    "For example:",
    "Note that the name of the variable is created by adding -- in between each nesting level and camelCase fields are transformed to kebab-case.",
    "The tabs below show WordPress 5.8 supported styles and the ones supported by the Gutenberg plugin.",
    "Each block declares which style properties it exposes via the block supports mechanism. The support declarations are used to automatically generate the UI controls for the block in the editor. Themes can use any style property via the theme.json for any block ― it’s the theme’s responsibility to verify that it works properly according to the block markup, etc.",
    "Styles found at the top-level will be enqueued using the body selector.",
    "Styles found within a block will be enqueued using the block selector.",
    "By default, the block selector is generated based on its name such as .wp-block-<blockname-without-namespace>. For example, .wp-block-group for the core/group block. There are some blocks that want to opt-out from this default behavior. They can do so by explicitly telling the system which selector to use for them via the __experimentalSelector key within the supports section of its block.json file. Note that the block needs to be registered server-side for the __experimentalSelector field to be available to the style engine.",
    "A block can be styled using a reference to a root level style. This feature is supported by Gutenberg.\nIf you register a background color for the root using styles.color.background:",
    "You can use ref: \"styles.color.background\"  to re-use the style for a block:",
    "In addition to top-level and block-level styles, there’s the concept of elements that can be used in both places. There’s a closed set of them:",
    "Supported by Gutenberg:",
    "Supported by WordPress:",
    "If they’re found in the top-level the element selector will be used. If they’re found within a block, the selector to be used will be the element’s appended to the corresponding block.",
    "Pseudo selectors :hover, :focus, :visited, :active, :link, :any-link are supported by Gutenberg.",
    "A block can have a “style variation”, as defined per the block.json specification. Theme authors can define the style attributes for an existing style variation using the theme.json file. Styles for unregistered style variations will be ignored.",
    "Note that variations are a “block concept”, they only exist bound to blocks. The theme.json specification respects that distinction by only allowing variations at the block-level but not at the top-level. It’s also worth highlighting that only variations defined in the block.json file of the block are considered “registered”: so far, the style variations added via register_block_style or in the client are ignored, see this issue for more information.",
    "For example, this is how to provide styles for the existing plain variation for the core/quote block:",
    "The resulting CSS output is this:",
    "Within this field themes can list the custom templates present in the templates folder. For example, for a custom template named my-custom-template.html, the theme.json can declare what post types can use it and what’s the title to show the user:",
    "Within this field themes can list the template parts present in the parts folder. For example, for a template part named my-template-part.html, the theme.json can declare the area term for the template part entity which is responsible for rendering the corresponding block variation (Header block, Footer block, etc.) in the editor. Defining this area term in the json will allow the setting to persist across all uses of that template part entity, as opposed to a block attribute that would only affect one block. Defining area as a block attribute is not recommended as this is only used ‘behind the scenes’ to aid in bridging the gap between placeholder flows and entity creation.",
    "Currently block variations exist for “header” and “footer” values of the area term, any other values and template parts not defined in the json will default to the general template part block. Variations will be denoted by specific icons within the editor’s interface, will default to the corresponding semantic HTML element for the wrapper (this can also be overridden by the tagName attribute set on the template part block), and will contextualize the template part allowing more custom flows in future editor improvements.",
    "Within this field themes can list patterns to register from Pattern Directory. The patterns field is an array of pattern slugs from the Pattern Directory. Pattern slugs can be extracted by the url in single pattern view at the Pattern Directory. For example in this url https://wordpress.org/patterns/pattern/partner-logos` the slug ispartner-logos`.",
    "It can be difficult to remember the theme.json settings and properties while you develop, so a JSON scheme was created to help. The schema is available at https://schemas.wp.org/trunk/theme.json",
    "Code editors can pick up the schema and can provide help like tooltips, autocomplete, or schema validation in the editor. To use the schema in Visual Studio Code, add \"$schema\": \"https://schemas.wp.org/trunk/theme.json\" to the beginning of your theme.json file.",
    "One thing you may have noticed is the naming schema used for the CSS Custom Properties the system creates, including the use of double hyphen, --, to separate the different “concepts”. Take the following examples.",
    "Presets such as --wp--preset--color--black can be divided into the following chunks:",
    "Custom properties such as --wp--custom--line-height--body, which can be divided into the following chunks:",
    "The -- as a separator has two functions:",
    "We could have used any other separator, such as a single -.",
    "However, that’d have been problematic, as it’d have been impossible to tell how --wp-custom-line-height-template-header should be converted back into an object, unless we force theme authors not to use - in their variable names.",
    "By reserving -- as a category separator and let theme authors use - for word-boundaries, the naming is clearer: --wp--custom--line-height--template-header.",
    "The algorithm to create CSS Variables out of the settings under the “custom” key works this way:",
    "This is for clarity, but also because we want a mechanism to parse back a variable name such --wp--custom--line-height--body to its object form in theme.json. We use the same separation for presets.",
    "A few notes about this process:",
    "In WordPress 5.8, the CSS for some of the presets defined by WordPress (font sizes, colors, and gradients) was loaded twice for most themes: in the block-library stylesheet plus in the global stylesheet. Additionally, there were slight differences in the CSS in both places.",
    "In WordPress 5.9 release, CSS of presets are consolidated into the global stylesheet, that is now loaded for all themes. Each preset value generates a single CSS Custom Property and a class, as in:",
    "For themes to override the default values they can use the theme.json and provide the same slug. Themes that do not use a theme.json can still override the default values by enqueuing some CSS that sets the corresponding CSS Custom Property.",
    "Example (sets a new value for the default large font size):",
    "In v1, when a user selected a link color for a specific block we attached a class to that block in the form of .wp-element-<ID> and then enqueued the following style:",
    "While this preserved user preferences at all times, the specificity was too strong and conflicted with some blocks with legit uses of an HTML element that shouldn’t be considered links. To address this issue, in WordPress 5.9 release, the !important was removed and updated the corresponding blocks to style the a elements with a specificity higher than the user link color, which now is:",
    "As a result of this change, it’s now the block author and theme author’s responsibility to make sure the user choices are respected at all times and that the link color provided by the user (specificity 011) is not overridden.",
    "For blocks that contain inner blocks, such as Group, Columns, Buttons, and Social Icons, blockGap controls the spacing between inner blocks. Depending on the layout of the block, the blockGap value will be output as either a vertical margin or a gap value. In the editor, the control for the blockGap value is called Block spacing, located in the Dimensions panel.",
    "The setting for blockGap is either a boolean or null value and is null by default. This allows an extra level of control over style output. The settings.spacing.blockGap setting in a theme.json file accepts the following values:",
    "The value defined for the root styles.spacing.blockGap style is also output as a CSS property, named --wp--style--block-gap.",
    "When you are actively developing with theme.json you may notice it takes 30+ seconds for your changes to show up in the browser, this is because theme.json is cached. To remove this caching issue, set either WP_DEBUG or SCRIPT_DEBUG to ‘true’ in your wp-config.php. This tells WordPress to skip the cache and always use fresh data.",
    "These features are experimental and part of the Gutenberg plugin.\nFor block theme features supported by WordPress 5.9 see the Theme Developer Handbook.",
    "You can provide feedback in the weekly #core-editor chats, or #fse-outreach-experiment channels, or async using GitHub issues.",
    "A block theme is a WordPress theme with templates entirely composed of blocks so that in addition to the post content of the different post types (pages, posts, …), the block editor can also be used to edit all areas of the site: headers, footers, sidebars, etc.",
    "In addition to the default theme.json file, Block Themes can define multiple global styles presets for users to pick from. For example, a theme author might provide multiple theme color variations for the theme.",
    "To provide a global styles preset, themes can add multiple JSON files inside their /styles folder. Each one of these JSON file is a mini theme.json file containing styles and/or settings that overrides any of the default theme.json file settings or styles.",
    "Example",
    "##This content has moved",
    "You can find documentation about how to create a block theme in the Theme Developer Handbook.",
    "The block editor provides a number of options for theme designers and developers, to interact with it, including theme-defined color settings, font size control, and much more.",
    "In terms of block editor terminology this is any theme that defines its templates in the traditional .php file format, and that doesn’t have an index.html format template in the /block-templates or /templates folders. A Classic theme has the ability to provide configuration and styling options to the block editor, and block content, via Theme Supports, or by including a theme.json file. A theme does not have to be a Block theme in order to take advantage of some of the flexibility provided by the use of a theme.json file.",
    "This is any theme that has, at a minimum, an index.html format template in the /block-templates or /templates folders, and with templates  provided in form of block content markup. While many Block themes will make use of a theme.json file to provide configuration and styling settings, a theme.json is not a requirement of Block themes. The advantage of Block themes is that the block editor can be used to edit all areas of the site: headers, footers, sidebars, etc.",
    "There isn’t an FSE specific theme type. In WordPress > 5.9 FSE is enabled for any Block theme, ie. any theme that has an index.html format template in the /block-templates or /templates folders.",
    "This resource seeks to offer direction for those needing to provide updates to content, whether in a template for a theme, pattern, or a block over an entire site. Since each content type allows or disallows certain kind of synchronization, it’s important to know what’s possible before creating to make maintenance easier in the future.",
    "At a high level, it’s important to recognize that not every piece of content can be updated across the entire site and that the method of creation greatly impacts what’s possible. As a result, it’s critical to spend time ahead of creation determining what you expect to need updates and to put that content in the appropriate format. This will make a huge difference in terms of future maintenance.",
    "Block theme design requires a mindset shift from the previous approach of designing large sections of a theme and controlling them via updates. While a holistic view of a design is still important when creating a custom theme project, blocks require that themers approach design on a more atomic level. This means starting from the block itself, typically through theme.json customizations. The goal is that each individual “atom” (i.e., block) can be moved around, edited, deleted, and put back together without the entire design falling apart.",
    "The more that you approach design at the block level, the less need there is to propagate updates to things like patterns and templates across the entire site. If the atomic pieces are in place, their layout should not matter.",
    "How to manage block updates depends on the nature of the block itself. If the block depends on external data, then making it dynamic from start with the render_callback function is often a better choice as it provides more control. If the block’s structure is expected to change over time, then starting with the static block that uses save() method defining a default output is the recommended approach. Over time, it’s possible to go hybrid and include also the render_callback that can use the output from save as a fallback while processing an alternate output. Keep in mind that that flexibility and controls comes at the cost of additional processing during rendering. Another option is using static blocks that rely on managing updates with block deprecations. This will require you to manually update exist blocks.  Depending on your needs and comfortability, either approach can work. To get started on creating blocks and save time, you can use the Create Block tool.",
    "For content that you want updated later on, do not use patterns and instead rely on reusable blocks or template parts. Patterns cannot be updated after you insert one into your site. For context, you can think of Patterns as more like sample/example/starter content. While Patterns exposed in the Inserter might evolve over time, those changes won’t be automatically applied to any current usage of the pattern. Once inserted, patterns become completely detached from the original pattern unlike Reusable block or Template Part block.",
    "If needed, one potential workaround for patterns with custom styles is to add a class name to the wrapping block for a pattern. For example, the following adds a themeslug-special class to a Group block:",
    "It is not fool-proof because users can modify the class via the editor UI.  However, because this setting is under the “Advanced” panel it is likely to stay intact in most instances. This gives theme authors some CSS control for some pattern types, allowing them to update existing uses. However, it does not prevent users from making massive alterations that cannot be updated.",
    "As the name suggests, these blocks are inherently synced across your site. Keep in mind that there are currently limitations with relying on reusable blocks to handle certain updates since content, HTML structure, and styles will all stay in sync when updates happen. If you require more nuance than that, this is a key element to factor in and a dynamic block might be a better approach.",
    "Because block themes allow users to directly edit templates and template parts, how changes are managed need to be adjusted in light of the greater access given to users. For context, when templates or template parts are changed by the user, the updated templates from the theme update don’t show for the user. Only new users of the theme or users who have not yet edited a template are experiencing the updated template. If users haven’t modified the files then the changes you make on the file system will be reflected on the user’s sites – you just need to update the files and they’ll get the changes. However if they have made changes to their templates then the only way you can update their templates is to:",
    "Generally speaking, if a user has made changes to templates then it’s recommended to leave the templates as is, unless agreed upon with the user (ie in an agency setting).",
    "One thing to be mindful of when updating templates is inserting references to new or different template parts.  For example, the templates/page.html template could insert a parts/header.html part in version 1.0 but change that reference to parts/header-alt.html in version 2.0.  Some developers may see this as a “workaround” in instances where users modified the original header.html.  However, this is likely to break a user’s customized design since the page.html template would no longer reference the correct part unless they also modified and saved the page template.",
    "Likewise, it is generally poor practice to delete template parts in theme updates.  In this scenario, users could create custom top-level templates that include a call to the part and expect it to continue existing.",
    "How to add a sidebar to your plugin. A sidebar is the region to the far right of the editor. Your plugin can add an additional icon next to the InspectorControls (gear icon) that can be expanded.",
    "Note: this tutorial covers a custom sidebar, if you are looking to add controls to the sidebar see the Block Toolbar and Settings Sidebar",
    "The tutorial assumes you have an existing plugin setup and are ready to add PHP and JavaScript code. Please, refer to Getting started with JavaScript tutorial for an introduction to WordPress plugins and how to use JavaScript to extend the block editor.",
    "The first step is to tell the editor that there is a new plugin that will have its own sidebar. Use the registerPlugin, PluginSidebar, and createElement utilities provided by the @wordpress/plugins, @wordpress/edit-post, and @wordpress/element packages, respectively.",
    "Add the following code to a JavaScript file called plugin-sidebar.js and save it within your plugin’s directory:",
    "For this code to work, those utilities need to be available in the browser, so you must specify wp-plugins, wp-edit-post, and wp-element as dependencies of your script.",
    "Here is the PHP code to register your script and specify the dependencies:",
    "After installing and activating this plugin, there is a new icon resembling a tack in the top-right of the editor. Upon clicking it, the plugin’s sidebar will be opened:",
    "After the sidebar is up and running, the next step is to fill it up with the necessary components and basic styling.",
    "To visualize and edit the meta field value you’ll use an input component. The @wordpress/components package contains many components available for you to reuse, and, specifically, the TextControl is aimed at creating an input field:",
    "Update the plugin-sidebar.js with this new code. Notice that it uses a new utility called wp.components from the @wordpress/components package. Be sure to add wp-components to the dependencies in the wp_register_script function in the PHP file.",
    "The code introduces:",
    "With the new CSS class available you can add a little style. Create a new file in your plugin directory called plugin-sidebar.css with the following to give some padding:",
    "Register the script and enqueue it to load with enqueue_block_editor_assets alongside the JavaScript file.",
    "After those changes, the PHP code will look like this:",
    "Reload the editor and open the sidebar:",
    "This code doesn’t let users store or retrieve data just yet, so the next steps will focus on how to connect it to the meta block field.",
    "To work with fields in the post_meta table, use the register_post_meta. function to create a new field called sidebar_plugin_meta_block_field.",
    "Note: this field needs to be available to the REST API because that’s how the block editor access data.",
    "Add the PHP code in your plugins init callback function:",
    "To confirm, query the block editor store to see the field is loaded. After implementing, reload the editor page and open your browser’s developer console. Use this JavaScript snippet in the console to confirm:",
    "The function will return an object containing the registered meta field you registered.",
    "If the code returns undefined make sure your post type supports custom-fields. Either when registering the post or with add_post_type_support function.",
    "With the field available in the editor store, it can now be surfaced to the UI. We extract the input control to a function to keep the code clean as we add functionality.",
    "We want to initialize the value in the MetaBlockField component with the value of sidebar_plugin_meta_block_field, and keep it updated when that value changes.",
    "The useSelect function is used to fetch data when the component loads and will update if the data changes. Here is the code update with useSelect:",
    "The wp.data.useSelect function is from the @wordpress/data package, so wp-data needs to be added as a dependency in the wp_register_script function in PHP.",
    "Note: The getEditedPostAttribute call is used to retrieve the most recent values of the post, including user editions that haven’t been yet saved.",
    "Confirm it’s working by updating the code, reloading, and opening the sidebar. The input’s content is no longer Initial value but a void string. Users can’t type values yet, but you can check that the component is updated if the value in the store changes. Open the browser’s console, execute",
    "You can observe the content changing in the input component.",
    "The last step is to update the meta field when the input content changes.\nThe useDispatch function takes a store name as its only argument and returns methods that you can use to update the store, in this case we’ll use editPost",
    "After the update, when the user types, the input control calls editPost and updates the editor store on each keystroke.",
    "Update the JavaScript, load the sidebar, and type in the input field. You can confirm it is saved by typing something in the input control and executing the JavaScript snippet in your browser’s development console:",
    "The message displayed should be what you typed in the input.",
    "When saving a post, you can confirm it is stored properly in the database by reloading after a save and confirming the input control is initialized with the last value you typed.",
    "Documentation for working with the @wordpress/data package.",
    "Functions used in this guide:",
    "You now have a custom sidebar that you can use to update post_meta content.",
    "A complete example is available, download the plugin-sidebar example from the gutenberg-examples repository.",
    "Notices are informational UI displayed near the top of admin pages. WordPress core, themes, and plugins all use notices to indicate the result of an action, or to draw the user’s attention to necessary information.",
    "In the classic editor, notices hooked onto the admin_notices action can render whatever HTML they’d like. In the block editor, notices are restricted to a more formal API.",
    "In the classic editor, here’s an example of the “Post draft updated” notice:",
    "Producing an equivalent “Post draft updated” notice would require code like this:",
    "Importantly, the admin_notices hook allows a developer to render whatever HTML they’d like. One advantage is that the developer has a great amount of flexibility. The key disadvantage is that arbitrary HTML makes future iterations on notices more difficult, if not possible, because the iterations need to accommodate for arbitrary HTML. This is why the block editor has a formal API.",
    "In the block editor, here’s an example of the “Post published” notice:",
    "Producing an equivalent “Post published” notice would require code like this:",
    "You’ll want to use this Notices Data API when producing a notice from within the JavaScript application lifecycle.",
    "To better understand the specific code example above:",
    "Check out the Loading JavaScript tutorial for a primer on how to load your custom JavaScript into the block editor.",
    "The block editor offers a complete API for generating notices. The official documentation is a great place to review what’s possible.",
    "For a full list of the available actions and selectors, refer to the Notices Data Handbook page.",
    "Complementary to Phase 2 Scope.",
    "This document outlines some of the features currently in development or being considered for the project. It should not be confused with the product roadmap for WordPress itself, even if some areas naturally overlap. The main purpose of it is to give visibility to some of the key problems remaining to be solved and as an invitation for those wanting to collaborate on some of the more complex issues to learn about what needs help.",
    "Gutenberg is already in use by millions of sites through WordPress, so in order to make substantial changes to the design or updating specifications it is advisable to consider a discussion process (“Request for Comments”) showing both an understanding of the impact, both positives and negatives, trade offs and opportunities.",
    "The projects outlined above indicate areas of interest but not necessarily development priorities. Sometimes, a product need will accelerate a resolution (as is the case of the block registry), other times community interest might be the driving force.",
    "TextControl components let users enter and edit text.",
    "TextControls are best used for free text entry. If you have a set of predefined options you want users to select from, it’s best to use a more constrained component, such as a SelectControl, RadioControl, CheckboxControl, or RangeControl.",
    "Because TextControls are single-line fields, they are not suitable for collecting long responses. For those, use a text area instead.",
    "TextControls should:",
    "Label text is used to inform users as to what information is requested for a text field. Every text field should have a label. Label text should be above the input field, and always visible.",
    "Containers improve the discoverability of text fields by creating contrast between the text field and surrounding content.",
    "Do\nA stroke around the container clearly indicates that users can input information.",
    "Don’t\nDon’t use unclear visual markers to indicate a text field.",
    "Render a user interface to input the name of an additional css class.",
    "The set of props accepted by the component will be specified below.\nProps not included in this set will be applied to the input element.",
    "If this property is added, a label will be generated using label property as the content.",
    "If true, the label will only be visible to screen readers.",
    "If this property is added, a help text will be generated using help property as the content.",
    "Type of the input element to render. Defaults to “text”.",
    "The current value of the input.",
    "The class that will be added with “components-base-control” to the classes of the wrapper div.\nIf no className is passed only components-base-control is used.",
    "A function that receives the value of the input.",
    "Primitives to be used cross-platform.",
    "Install the module",
    "This package assumes that your code will run in an ES2015+ environment. If you’re using an environment that has limited or no support for such language features and APIs, you should include the polyfill shipped in @wordpress/babel-preset-default in your code.",
    "This is an individual package that’s part of the Gutenberg project. The project is organized as a monorepo. It’s made up of multiple self-contained software packages, each with a specific purpose. The packages in this monorepo are published to npm and used by WordPress as well as other software projects.",
    "To find out more about contributing to this package or Gutenberg as a whole, please read the project’s main contributor guide.",
    "“Block” is the abstract term used to describe units of markup that, composed together, form the content or layout of a webpage. The idea combines concepts of what in WordPress today we achieve with shortcodes, custom HTML, and embed discovery into a single consistent API and user experience.",
    "For more context, refer to What Are Little Blocks Made Of? from the Make WordPress Design blog.",
    "Given a block object, returns a copy of the block object, optionally merging new attributes and/or replacing its inner blocks.",
    "Parameters",
    "Returns",
    "Returns a block object given its type and attributes.",
    "Given an array of InnerBlocks templates or Block Objects, returns an array of created Blocks from them. It handles the case of having InnerBlocks as Blocks by converting them to the proper format to continue recursively.",
    "Checks whether a list of blocks matches a template by comparing the block names.",
    "Given an array of transforms, returns the highest-priority transform where the predicate function returns a truthy value. A higher-priority transform is one with a lower priority value (i.e. first in priority order). Returns null if the transforms set is empty or the predicate function returns a falsey value for all entries.",
    "Returns the block attributes of a registered block node given its type.",
    "Given a block object, returns the Block’s Inner HTML markup.",
    "Returns the block’s default classname from its name.",
    "Create a block object from the example API.",
    "Returns the block’s default menu item classname from its name.",
    "Returns the block support value for a feature, if defined.",
    "Returns normal block transforms for a given transform direction, optionally for a specific block by name, or an empty array if there are no transforms. If no block name is provided, returns transforms for all blocks. A normal transform object includes blockName as a property.",
    "Returns a registered block type.",
    "Returns all registered blocks.",
    "Returns an array with the child blocks of a given block.",
    "Retrieves the default block name.",
    "Retrieves name of block handling non-block content, or undefined if no handler has been defined.",
    "Retrieves name of block used for handling grouping interactions.",
    "Undocumented declaration.",
    "Returns an array of block types that the set of blocks received as argument can be transformed into.",
    "Given a block type containing a save render implementation and attributes, returns the static markup to be saved.",
    "Given a block type containing a save render implementation and attributes, returns the enhanced element to be saved or string when raw HTML expected.",
    "Retrieves name of block handling unregistered block types, or undefined if no handler has been defined.",
    "Returns true if the block defines support for a feature, or false otherwise.",
    "Returns a boolean indicating if a block has child blocks or not.",
    "Returns a boolean indicating if a block has at least one child block with inserter support.",
    "Determines whether or not the given block is a reusable block. This is a special block type that is used to point to a global block stored via the API.",
    "Determines whether or not the given block is a template part. This is a special block type that allows composing a page template out of reusable design elements.",
    "Determines whether the block’s attributes are equal to the default attributes which means the block is unmodified.",
    "Determines whether the block is a default block and its attributes are equal to the default attributes which means the block is unmodified.",
    "Deprecated Use validateBlock instead to avoid data loss.",
    "Returns true if the parsed block is valid given the input content. A block is considered valid if, when serialized with assumed attributes, the content matches the original value.",
    "Logs to console in development environments when invalid.",
    "Function that checks if the parameter is a valid icon.",
    "Function that receives an icon as set by the blocks during the registration and returns a new icon object that is normalized so we can rely on just on possible icon structure in the codebase.",
    "Utilizes an optimized token-driven parser based on the Gutenberg grammar spec defined through a parsing expression grammar to take advantage of the regular cadence provided by block delimiters — composed syntactically through HTML comments — which, given a general HTML document as an input, returns a block list array representation.",
    "This is a recursive-descent parser that scans linearly once through the input document. Instead of directly recursing it utilizes a trampoline mechanism to prevent stack overflow. This initial pass is mainly interested in separating and isolating the blocks serialized in the document and manifestly not in the content within the blocks.",
    "Related",
    "Given a block’s raw content and an attribute’s schema returns the attribute’s value depending on its source.",
    "Converts an HTML string to known blocks. Strips everything else.",
    "Converts an HTML string to known blocks.",
    "Registers a new block collection to group blocks in the same namespace in the inserter.",
    "Usage",
    "Registers a new block style for the given block.",
    "For more information on connecting the styles with CSS the official documentation.",
    "Registers a new block provided a unique name and an object defining its behavior. Once registered, the block is made available as an option to any editor interface where blocks are implemented.",
    "For more in-depth information on registering a custom block see the Create a block tutorial.",
    "Registers a new block variation for the given block type.",
    "For more information on block variations see the official documentation .",
    "Takes a block or set of blocks and returns the serialized post content.",
    "Serializes a block node into the native HTML-comment-powered block format. CAVEAT: This function is intended for re-serializing blocks as parsed by valid parsers and skips any validation steps. This is NOT a generic serialization function for in-memory blocks. For most purposes, see the following functions available in the @wordpress/blocks package:",
    "Sets the block categories.",
    "Assigns the default block name.",
    "Assigns name of block for handling non-block content.",
    "Assigns name of block for handling block grouping interactions.",
    "This function lets you select a different block to group other blocks in instead of the default core/group block. This function must be used in a component or when the DOM is fully loaded. See https://developer.wordpress.org/block-editor/reference-guides/packages/packages-dom-ready/",
    "Assigns name of block handling unregistered block types.",
    "Store definition for the blocks namespace.",
    "Type",
    "Switch one or more blocks into one or more blocks of the new block type.",
    "Synchronize a block list with a block template.",
    "Synchronizing a block list with a block template means that we loop over the blocks keep the block as is if it matches the block at the same position in the template (If it has the same name) and if doesn’t match, we create a new block based on the template. Extra blocks not present in the template are removed.",
    "Unregisters a block style for the given block.",
    "Unregisters a block.",
    "Unregisters a block variation defined for the given block type.",
    "Updates a category.",
    "Returns an object with isValid property set to true if the parsed block is valid given the input content. A block is considered valid if, when serialized with assumed attributes, the content matches the original value. If block is invalid, this function returns all validations issues as well.",
    "Deprecated",
    "A Higher Order Component used to inject BlockContent using context to the wrapped component.",
    "Edit Post Module for WordPress.",
    "This package is meant to be used only with WordPress core. Feel free to use it in your own project but please keep in mind that it might never get fully documented.",
    "Extending the editor UI can be accomplished with the registerPlugin API, allowing you to define all your plugin’s UI elements in one place.",
    "Refer to the plugins module documentation for more information.",
    "The components exported through the API can be used with the registerPlugin (see documentation) API.\nThey can be found in the global variable wp.editPost when defining wp-edit-post as a script dependency.",
    "Initializes and returns an instance of Editor.",
    "Renders a new item in the block settings menu.",
    "Renders items below the Status & Availability panel in the Document Sidebar.",
    "Renders a menu item in Plugins group in More Menu drop down, and can be used to as a button or link depending on the props provided. The text within the component appears as the menu item label.",
    "Renders provided content to the post-publish panel in the publish flow (side panel that opens after a user publishes the post).",
    "Renders a row in the Summary panel of the Document sidebar. It should be noted that this is named and implemented around the function it serves and not its location, which may change in future iterations.",
    "Renders provided content to the pre-publish side panel in the publish flow (side panel that opens when a user first pushes “Publish” from the main editor).",
    "Renders a sidebar when activated. The contents within the PluginSidebar will appear as content within the sidebar. It also automatically renders a corresponding PluginSidebarMenuItem component when isPinnable flag is set to true. If you wish to display the sidebar, you can with use the PluginSidebarMoreMenuItem component or the wp.data.dispatch API:",
    "Renders a menu item in Plugins group in More Menu drop down, and can be used to activate the corresponding PluginSidebar component. The text within the component appears as the menu item label.",
    "Used to reinitialize the editor after an error. Now it’s a deprecated noop function.",
    "Store definition for the edit post namespace.",
    "Plugins module for WordPress.",
    "Returns a registered plugin settings.",
    "Returns all registered plugins without a scope or for a given scope.",
    "A component that renders all plugin fills in a hidden div.",
    "Registers a plugin to the editor.",
    "Unregisters a plugin by name.",
    "A Higher Order Component used to inject Plugin context to the wrapped component.",
    "With each major release of WordPress a new version of Gutenberg is included. This has caused confusion over time as people have tried to figure out how to best debug problems and report bugs appropriately. To make this easier we have made this document to serve as a canonical list of the Gutenberg versions integrated into each major WordPress release. Of note, during the beta period of a WordPress release, additional bug fixes from later Gutenberg releases than those noted are added into the WordPress release where it is needed. If you want details about what’s in each Gutenberg release outside of the high level items shared as part of major WordPress releases, please review the release notes shared on Make Core.",
    "If anything looks incorrect here, please bring it up in #core-editor in WordPress.org slack.",
    "The following snippet explains how the Gutenberg repository is structured omitting irrelevant or obvious items with further explanations:",
    "This is a living document explaining how we collaboratively manage the Gutenberg repository. If you’d like to suggest a change, please open an issue for discussion or submit a pull request to the document.",
    "This document covers:",
    "A healthy issue list is one where issues are relevant and actionable. Relevant in the sense that they relate to the project’s current priorities. Actionable in the sense that it’s clear what action(s) need to be taken to resolve the issue.",
    "Any issues that are irrelevant or not actionable should be closed, because they get in the way of making progress on the project. Imagine the issue list as a desk: the more clutter you have on it, the more difficult it is to use the space to get work done.",
    "All issues should have one or more labels.",
    "Workflow labels start with “Needs” and may be applied as needed. Ideally, each workflow label will have a group that follows it, such as the Accessibility Team for Needs Accessibility Feedback, the Testing Team for Needs Testing, etc.",
    "Priority High and Priority OMGWTFBBQ issues should have an assignee and/or be in an active milestone.",
    "Help requests or ‘how to’ questions should be posted in a relevant support forum as a first step. If something might be a bug but it’s not clear, the Support Team or a forum volunteer can help troubleshoot the case to help get all the right information needed for an effective bug report.",
    "Here are some labels you might commonly see:",
    "Check out the label directory for a listing of all labels.",
    "We put issues into milestones to better categorize them. Issues are added to milestones starting with WordPress and pull requests are added to milestones ending in (Gutenberg).",
    "Here are some milestones you might see:",
    "To keep the issue list healthy, it needs to be triaged regularly. Triage is the practice of reviewing existing issues to make sure they’re relevant, actionable, and have all the information they need.",
    "Anyone can help triage, although you’ll need contributor permission on the Gutenberg repository to modify an issue’s labels or edit its title.",
    "See the Triage Contributors guide for details.",
    "Gutenberg follows a feature branch pull request workflow for all code and documentation changes. At a high-level, the process looks like this:",
    "For labeling and naming pull requests, here are guidelines to consider that make compiling the changelog more efficient and organized. These guidelines are particularly relevant for regular contributors. Don’t let getting the following right be a blocker for sharing your work – mistakes are expected and easy to fix!",
    "Along with this process, there are a few important points to mention:",
    "Every pull request goes through a manual code review, in addition to automated tests. The objectives for the code review are best thought of as:",
    "As a reviewer, your feedback should be focused on the idea, not the person. Seek to understand, be respectful, and focus on constructive dialog.",
    "As a contributor, your responsibility is to learn from suggestions and iterate your pull request should it be needed based on feedback. Seek to collaborate and produce the best possible contribution to the greater whole.",
    "Code reviews are encouraged by everyone who is willing to attempt one. If you review a pull request and are confident in the changes, approve it. If you don’t feel totally confident it is ready for merging, add your review with a comment that says it should have another set of eyes on it before final approval. This can help filter out obvious bugs and simplify reviews for core members. Following the later reviews will also help improve your reviewing confidence in the future.",
    "If you are not yet comfortable leaving a full review, try commenting on a PR. Questions about functionality or the reasoning behind a change are helpful too. You could also comment on changes to parts of the code you understand, without leaving a full review.",
    "If you struggle with getting a review, see: How To Get Your Pull Request Reviewed?",
    "If your pull request impacts the design/UI, you need to label appropriately to alert design. To request a design review, add the Needs Design Feedback label to your PR. If there are any PRs that require an update to the design/UI, please use the Figma Library Update label.",
    "As a guide, changes that should be reviewed:",
    "A pull request can generally be merged once it is:",
    "The final pull request merge decision is made by the @wordpress/gutenberg-core team.",
    "All members of the WordPress organization on GitHub have the ability to review and merge pull requests. If you have reviewed a PR and are confident in the code, approve the pull request and comment pinging @wordpress/gutenberg-core or a specific core member who has been involved in the PR. Once they confirm there are no objections, you are free to merge the PR into trunk.",
    "Most pull requests will be automatically assigned a release milestone, but please make sure your merged pull request was assigned one. Doing so creates the historical legacy of what code landed when, and makes it possible for all project contributors (even non-technical ones) to access this information.",
    "Sometimes, a pull request may not be mergeable, no matter how much additional effort is applied to it (e.g. out of scope). In these cases, it’s best to communicate with the contributor graciously while describing why the pull request was closed, this encourages productive future involvement.",
    "Make sure to:",
    "If you’d like a template to follow:",
    "Thanks ____ for the time you’ve spent on this pull request.",
    "I’m closing this pull request because ____. To clarify further, ____.",
    "For more details, please see ____ and ____.",
    "Two GitHub teams are used in the project.",
    "Gutenberg: A team composed of contributors with at least 2–3 meaningful contributions to the project.",
    "If you meet this criterion of several meaningful contributions having been accepted into the repository and would like to be added to the Gutenberg team, feel free to ask in the #core-editor Slack channel.",
    "We use GitHub projects to keep track of details that aren’t immediately actionable, but that we want to keep around for future reference.",
    "Some key projects include:",
    "This is a guide on how to test accessibility on Gutenberg. This is a living document that can be improved over time with new approaches and techniques.",
    "Make sure you have set up your local environment following the instructions on Getting Started.",
    "In addition to mouse, make sure the interface is fully accessible for keyboard-only users. Try to interact with your changes using only the keyboard:",
    "If the elements can be focused using arrow keys, but not Tab or Shift+Tab, consider grouping them using one of the WAI-ARIA composite subclass roles, such as toolbar, menu and listbox.",
    "If the interaction is complex or confusing to you, consider that it’s also going to impact keyboard-only users.",
    "According to the WebAIM: Screen Reader User Survey #8 Results, these are the most common screen reader and browser combinations:",
    "When testing with screen readers, try to use some of the combinations at the top of this list. For example, when testing with VoiceOver, it’s preferable to use Safari.",
    "NVDA is a free screen reader for Windows and the most popular one.",
    "After installing it, you can activate NVDA by opening the app as you would do with other programs. An icon will appear on the System Tray where you have access to more options. It’s recommended to enable the “Speech viewer” dialog so it’s easier to demonstrate what’s being announced by NVDA when you take screenshots.",
    "While in the Gutenberg editor, with NVDA activated, you can press Insert+F7 to open the Elements List where you can find elements grouped by their types, such as links, headings, form fields, buttons and landmarks.",
    "Make sure the elements have proper labels and prefer to navigate through landmarks and then use Tab and arrow keys to move through the elements within the landmarks.",
    "VoiceOver is the native screen reader on macOS. You can enable it on System Preferences > Accessibility > VoiceOver > Enable VoiceOver or by quickly pressing Touch ID three times while holding the Command key.",
    "While in the Gutenberg editor, with VoiceOver activated, you can press Control+Option+U to open the Rotor and find more easily the different regions and elements on the page. This is also a good way to make sure elements are labelled correctly. If a name on this list doesn’t make sense, it should be improved.",
    "Prefer to select a region or another larger area to begin with instead of individual elements on the Rotor so you can better test the navigation within that region.",
    "Once you find the region you want to interact with, you can use Control+Option plus right or left arrow keys to move to the next or previous elements on the page. Then, follow the instructions that VoiceOver will announce.",
    "The Gutenberg plugin is translated via the general plugin translation system (GlotPress) at https://translate.wordpress.org. Review the GlotPress translation process documentation for additional information.",
    "To translate Gutenberg in your locale or language, select your locale here and translate Development (which contains the plugin’s string) and/or Development Readme (please translate what you see in the Details tab of the plugin page).",
    "A Global Translation Editor (GTE) or Project Translation Editor (PTE) with suitable rights will process your translations in due time.",
    "Language packs are automatically generated once 95% of the plugin’s strings are translated and approved for a locale.",
    "The inclusion of Gutenberg into WordPress core means that more than 51% of WordPress installations running a translated WordPress installation have Gutenberg’s translated strings compiled into the core language pack as well.",
    "To keep the repository healthy, it needs to be triaged regularly. Triage is the practice of reviewing existing issues and pull requests to make sure they’re relevant, actionable, and have all the information they need. Anyone can help triage, although you’ll need to be a member of the triage team for the Gutenberg repository to modify an issue’s labels or edit its title.",
    "The triage team is an open group of people with a particular role of making sure triage is done consistently across the Gutenberg repo. There are various types of triage which happen:",
    "These are the expectations of being a triage team member:",
    "If you would like to join this team, simply ask in #core-editor Slack at any time.",
    "To start simply choose from one of these filtered lists below. Note: You can find most of these filters by selecting the “Sort” option from the overall Issues page.",
    "When triaging, either one of the lists above or issues in general, work through issues one-by-one. Here are some steps you can perform for each issue:",
    "Commonly Used Labels",
    "Generally speaking, the following labels are very useful for triaging issues and will likely be the ones you use the most consistently. You can view all possible labels here.",
    "Determining Priority Labels",
    "If you have enough knowledge about the report at hand and feel confident in doing so, you can consider adding priority. Note that it’s on purpose that no priority label infers a normal level.",
    "Issues are closed for the following reasons:",
    "Here are some guidelines to follow when doing triage specifically around the time of a release. This is important to differentiate compared to general triage so problematic, release blocking bugs are properly identified and solutions are found.",
    "Along with the general triage flows listed previously, there are some specific additions to the flows for more design-centric triage for design minded folks participating in triage.",
    "Reminders:",
    "For more detailed information about weekly design triage and to join in, please review this guide.",
    "Guidelines for writing multi-line/step instructions or narrative introductions/orientation to pages or features.",
    "This will obviously vary quite a lot depending on the context, but here are some general tips:",
    "They’re more conversational, and a simple way to make text sound friendlier and less formal. (And they save a bit of space as well: a win-win.)",
    "This happens frequently in two specific instances. First, when writing in the passive voice:",
    "This block can be used to display single images.",
    "Any time you see phrases like “can be” or “is used”: halt. You’re writing in the passive voice. Try going active for a snappier (and shorter) sentence:",
    "This block displays single images.",
    "Second, this happens when we hedge instead of making declarative statements:",
    "The gallery block can help you display multiple images in an elegant layout.",
    "Does it or doesn’t it? We’re making this software: we’re allowed to be declarative about what it is and does:",
    "The gallery block displays multiple images in an elegant layout.",
    "We also all do this a lot with the phrase “allows you to.”",
    "Preformatted text allows you to keep your tabs and line breaks.",
    "Features don’t allow anyone to do anything; they’re just tools that do specific things to achieve an end. Just say what they do:",
    "Preformatted text preserves your tabs and line breaks.",
    "The more direct sentences are almost always clearer. Scan your copy for the words “can,” “be,” “might,” “allows you to,” and “helps”—they’re the most common culprits, and looking for those words specifically is a way to locate phrasing you can tighten up.",
    "It is not for us to decide what is simple: it’s for the user to decide. If we say something is easy and the user doesn’t have an easy experience, it undermines their trust in us and what we’re building. The same goes for “just”—many of us know to avoid “simple,” but still use “just” all the time. “Just click here.” “Just enter your username.” It’s the same thing: it implies that something will be no big deal, but we can’t know what the user will find to be a big deal.",
    "It’s also safer and more helpful to be specific. “Easy” and “simple” are shorthand for explanations that we haven’t written; whenever you see them, take a minute to think about what they’re standing in for. Maybe “It’s easy to add a block by hitting ‘enter’” really means “You can add more content to the page without taking your hands off the keyboard.” Great! Say the specific thing instead of relying on “easy.”",
    "This isn’t to say that you should banish these words from your vocabulary. You might want to write a tooltip describing how the cover image block now requires less configuration, or an email about how we’re building a tool for quick creation of custom blocks, and you could legitimately say that the cover image block has been simplified or that we’re working to make custom block creation easier—there, the terms are descriptive and relative. But be on the lookout for ways you might be using (or overusing) them to make absolute claims that something is easy or simple, and use those as opportunities to be more specific and clear.",
    "Any time text or instructions uses “we” a lot, it means the focus of the text is on the people behind the software and not the people using the software. Sometimes that’s what you actually want—but it’s usually not. The focus should typically be on the user, what they need, and how they benefit rather than “what we did” or “what we want.”",
    "We’re the only ones that care about what we did or want; the user just wants software that works. If you see a lot of “we”s, think about whether you should reframe what you’re writing to focus on the benefits to and successes of the user.",
    "Guidelines for (duh) writing bulleted lists.",
    "Parallel structure makes lists easier to read quickly—their predictability takes some cognitive load off the reader.",
    "GOOD:",
    "What can you do with this block? Lots of things!",
    "Every bullet is a full sentence, and ends with a period. (If your list is a bunch of one- or two-word items, those can often just turn into a single regular sentence—easier to read, and space-saving.) Every line begins with a verb that tells the user what the block can do. The subject of the sentence is always the user.",
    "A user can absorb this list quickly because once they read the first item, they understand how to read the rest and know what information they’ll find.",
    "LESS GOOD:",
    "Here, every line has different phrasing (some start with a verb, some with a noun) and the subject of the sentence changes (sometimes it’s you, sometimes it’s the block). Some lines have added description, some don’t. There’s an incomplete sentence, and punctuation is inconsistent.",
    "Reading this list takes more work because the reader has to parse each bullet anew. They can’t assume each bullet will contain similar information.",
    "Note: this doesn’t mean every bullet has to be super short and start with an action verb! “Predictable” doesn’t have to mean “simple.” It just means that each bullet should have the same sentence structure. This list would also be fine:",
    "Here, each bullet starts with a more user-focused verb and includes a piece of supplemental information for more interest. The punctuation varies a bit, which keeps the lines from feeling too formulaic, but since the basic structure of each is the same, they remain easy to read.",
    "Do you have to start with a verb? No. But if you’re at a loss, you usually can’t go wrong with a verb (especially since bulleted lists are often describing a series of actions or possible actions).",
    "In a simple list that’s meant to be purely instructional (e.g., in UI copy where you just need the user to make a decision), it might be fine to start every bullet with the same verb:",
    "To continue, choose an action:",
    "If your list is more persuasive (e.g., trying to convince someone to use a feature by listing its benefits) or includes multi-step instructions, you’ll want to vary your verbs to keep the reader engaged with more interesting language, as in the example above:",
    "These aren’t hard-and-fast rules—you might choose the use the same verb in a persuasive list to be more focused and powerful, for example. But they’re good starting places for solid lists.",
    "What can you do with this block? Lots of things! Here are some examples of ways you can use it.",
    "Find the balance between being as clear as possible and trusting a user. On one hand, we know that people don’t always read instructions; on the other, redundancy can make the user feel like we think they’re stupid.",
    "Use it to focus readers on the key information in a bulleted list. This is especially useful when your bullets include some supplemental but ultimately secondary information.",
    "“Key information” is, well, key: bold draws the eye, so stick to the most vital piece of information in a given bullet:",
    "On the flipside, bolding too many things creates visual confusion:",
    "When lists are short and basic, don’t bother—bolding just adds busy-ness.",
    "The lack of words creates its own focus; you don’t have to add any more.",
    "Guidelines for writing one-line feature descriptions, or short descriptions to clarify options.",
    "If the user doesn’t understand what using a particular option will result in, it doesn’t matter how clever your pun is. Wordplay and idioms are frequently unclear, and easily misunderstood. If you use them at all, they should be as supplemental information— never to explain the main idea—and they should be something you’re fairly certain will be understandable to a pretty wide range of people.",
    "Active voice is typically the better way to go, and cutting out the bulky phrasing is particularly important when you’ve got limited space and you need people to be able to make decisions and act. Often you can shorten a UI instruction phrase to be both shorter and clearer:",
    "When you click X, Y happens.",
    "vs.",
    "Click X to do Y.",
    "While it can feel like adding the extra words helps walk a user through the product, the extra words just serve to obscure the point being communicated:",
    "When you click the “settings” button, the pop-up will display the advanced settings that are available.",
    "Click “settings” to access the advanced settings.",
    "Similar phrases are “Once you do X…” or “If you want to do X…” Sometimes there are decision points where “If you want to do X…” is entirely appropriate because there are different paths the user can take based on their goal. But, we often use it to mean “Here is a thing you can do,” which you can express more simply as: “To do X…”",
    "When an action depends on the user having completed some prior action, be specific about what’s required and what happens next. We often default to “when you’re ready.”\nReady for what? Be specific about whatever the prerequisites are.",
    "“When you’re ready” can mean:",
    "And when something means everything, it actually means nothing. The more specific instructions are, the more useful they are, and the more trust the person following them will have in the product.",
    "Clarity above all, yes, and space is often limited here—but UI text can still be interesting to read.",
    "Single lines of description can still be complete sentences.",
    "List. Numbered or bulleted.",
    "Add a list, either numbered or bulleted.",
    "You can still use contractions.",
    "Add a list. We will provide formatting options.",
    "Add a bulleted list—we’ll give you some formatting options.",
    "You can still use punctuation—em dashes, colons, semicolons—to control the flow of your words, link ideas, and create pauses.",
    "Add a list—numbered or bulleted. Your choice!",
    "You can still try to avoid jargon in favor of plain language.",
    "Add unordered or ordered list.",
    "(And because it bears repeating: no wordplay, please! “Personality” can—and in UI instructions, should—be subtle. We’re talking about text that sounds like it was said by a human being, not forced attempts at whimsy.)",
    "When it comes to headlines and subheads, there are two ways to capitalize:",
    "In Title Case, the First Letter of Almost Every Word Is Capitalized",
    "In sentence case, only the first letter of the line is capitalized",
    "Feature names and dashboard sections typically use title case (think “Site Stats” or “Recently Published”), whereas feature labels typically use sentence case (like “Show buttons on” or “Comment Likes are,” where “Likes” is capitalized because it’s the feature name, but the overall label is using sentence case).",
    "When you’re looking at a full page of UI copy, make sure you’re being consistent across all of it, and that all similar kinds of copy—headlines, tooltips, buttons, etc.—are using the same case.",
    "Guidelines for writing error messages that are understandable and useful.",
    "Voice and tone can say as much as the individual words themselves. Error messages have to convey a significant amount of information and usually need to be fairly short, but try not to sacrifice tone, or to go too far in either a negative or positive direction.",
    "Let’s say someone’s trying to publish a post, but their user role doesn’t allow them to do that. Here are some ways we could—but should not—communicate that:",
    "Your user role is incorrect.",
    "Here, we sound distant and uncaring.",
    "Stop! You do not have permission to do this.",
    "Here, we sound unnecessarily alarmist and stern.",
    "Oopsie, we can’t let you do that!",
    "Here, we sound too cute.",
    "We can stay direct, positive, and friendly, even in error messages. How? With tips two through four!",
    "A good error message doesn’t just alert someone to the fact that something is wrong.",
    "Okay, fine. Why does that matter? What do I do about it? How does this message help me? I need to know why my user role matters, and how to get the role I need so I can complete the action I want to complete. An error message that doesn’t provide any instruction leaves the user without a path forward; they can’t avoid repeating the action that led to the error if we don’t tell them now.",
    "Your user role is incorrect. Contact a site administrator.",
    "Maybe we’re getting somewhere here: now I know there’s something I can do about things, which is good.",
    "Then again, maybe we’re not: I still don’t know what my role is, or why it matters. Also, now I’m not sure what a site administrator is, who mine is, or how to contact them.",
    "All the information in this error message is technically entirely correct, but that doesn’t mean it communicates anything useful. If the goal is understanding and resolution, technical accuracy doesn’t always get us there.",
    "“Your account does not have permission to publish posts” doesn’t use the language of the user roles UI, but it does explain what’s gone wrong and I can understand it even if I don’t know what a user role is. And since I understand, I’m also better placed to understand the resolution, even if the message ended here: I can see that I need to get permission.",
    "Consistency with existing UI language is great, but not when it gets in the way of understanding.",
    "It might seem obvious to us that the user got this message when they tried to publish something or change a setting that they don’t have permission for. It might not be so obvious to the user: people click around a lot, especially when we’re unsure how to do something, and we don’t always remember what page or setting we were just looking at (or why!).",
    "A good error message also includes some context that orients the user. “Your account does not have permission to publish posts” reminds them that they were trying to publish a post, and that that’s the particular stumbling block that caused the error.",
    "A guide on how to get started contributing documentation to the Gutenberg project.",
    "The Make WordPress Docs blog is the primary spot for the latest information around WordPress documentation: including announcements, product goals, meeting notes, meeting agendas, and more.",
    "Real-time discussions for documentation take place in the #docs channel in Make WordPress Slack (registration required). Weekly meetings for the Documentation team are on Tuesdays at 14:00UTC.",
    "The Gutenberg project uses GitHub for managing code and tracking issues. The main repository is at: https://github.com/WordPress/gutenberg. To find documentation issues to work on, browse issues with documentation label.",
    "There are two major sets of documentation for the Gutenberg project:",
    "The rest of this document covers contributing to the block editor handbook.",
    "The block editor handbook is a mix of markdown files in the /docs/ directory of the Gutenberg project repository and generated documentation from the packages.",
    "An automated job publishes the docs every 15 minutes to the block editor handbook site.",
    "See the Git Workflow documentation for how to use git to deploy changes using pull requests. Additionally, see the video walk-through and the accompanying slides for contributing documentation to Gutenberg.",
    "The handbook is organized into four sections based on the functional types of documents. The Documentation System does a great job explaining the needs and functions of each type, but in short they are:",
    "A how to guide template is available to provide a common structure to guides. If starting a new how to guide, copy the markdown from the template to get started.",
    "The template is based on examples from The Good Docs Project, see their template repository for additional examples to help you create quality documentation.",
    "To update an existing page:",
    "To add a new document requires a working JavaScript development environment to build the documentation, see the JavaScript build setup documentation:",
    "If you forget to run, npm run docs:build your PR will fail the static analysis check, since the manifest.json file is an uncommitted local change that must be committed.",
    "Package documentation is generated automatically by the documentation tool by pulling the contents of the README.md file located in the root of the package. Sometimes however, it is preferable to split the contents of the README out into smaller, easier to read portions.",
    "This can be accomplished by creating a docs directory in the package and adding toc.json file that contains references other markdown files also contained in the docs directory. The toc.json file should contain an array of pages to be added as sub-pages of the main README file. The formatting follows the manifest.json file that is generated automatically.",
    "In order for these pages to be nested under the main package name, be sure to set the parent property correctly. See the example below that adds child pages to the @wordpress/create-block section.",
    "It’s likely at some point you’ll want to link to other internal documentation pages. It’s worth emphasizing all documents can be browsed in different contexts:",
    "To create links that work in all contexts, you must use absolute path links without the `https://github.com/WordPress/gutenberg` prefix. You can reference files using the following patterns:",
    "This way they will be properly handled in all three aforementioned contexts.",
    "Use the full directory and filename from the Gutenberg repository, not the published path; the Block Editor Handbook creates short URLs—you can see this in the tutorials section. Likewise, the readme.md portion is dropped in the handbook, but should be included in links.",
    "An example, the link to this page is: /docs/contributors/documentation/README.md",
    "The code example in markdown should be wrapped in three tick marks ``` and should additionally include a language specifier. See this GitHub documentation around fenced code blocks.",
    "A unique feature to the Gutenberg documentation is the codetabs toggle, this allows two versions of code to be shown at once. This is used for showing both JSX and Plain code samples. For example, on this block tutorial page.",
    "Here is an example codetabs section:",
    "The preferred format for code examples is JSX, this should be the default view. The example placed first in source will be shown as the default.",
    "Note: It is not required to include plain JavaScript code examples for every guide. The recommendation is to include plain code for beginner tutorials or short examples, but the majority of code in Gutenberg packages and across the larger React and JavaScript ecosystem are in JSX that requires a build process.",
    "The Block Editor handbook supports the same notice styles as other WordPress handbooks. However, the shortcode implementation is not ideal with the different locations the block editor handbook documentation is published (npm, GitHub).",
    "The recommended way to implement in markdown is to use the raw HTML and callout callout-LEVEL classes. For example:",
    "The following classes are available: info, tip, alert, warning",
    "You should configure your editor to use Prettier to auto-format markdown documents. See the Getting Started documentation for complete details.",
    "An example config for using Visual Studio Code and the Prettier extensions:",
    "Copy Guidelines for writing instructions, documentations, or other contributions to Gutenberg project.",
    "Tone and Voice Guide from WordPress Documentation.",
    "Released under GPL license, made by Cristel Rossignol.",
    "Download the SVG logo.",
    "Mockup Sketch files are available in the User Interface section.",
    "At the core of Gutenberg lies the concept of the block. From a technical point of view, blocks both raise the level of abstraction from a single document to a collection of meaningful elements, and they replace ambiguity—inherent in HTML—with explicit structure.",
    "From a user perspective, blocks allow any kind of content, media, or functionality to be directly added to their site in a more consistent and usable way. The “add block” button gives the user access to an entire library of options all in one place, rather than having to hunt through menus or know shortcodes.",
    "But most importantly, Gutenberg is built on the principle of direct manipulation, which means that the primary options for how an element is displayed are controlled in the context of the block itself. This is a big shift from the traditional WordPress model, where options that were often buried deep in layers of navigation menus controlled the elements on a page through indirect mechanisms.",
    "So, for example, a user can add an image, write its caption, change its width and layout, add a link around it, all from within the block interface in the canvas. The same principle should apply to more complex blocks, like a “navigation menu”, with the user being able to add, edit, move, and finalize the full presentation of their navigation.",
    "What does this mean for designers and developers? The block structure plus the principle of direct manipulation mean thinking differently about how to design and develop WordPress components. Let’s take another look at the architecture of a block:",
    "The placeholder content in the content area of the block can be thought of as a guide or interface for users to follow a set of instructions or “fill in the blanks” (more on placeholders later). Since the content area represents what will actually appear on the site, interaction here hews closest to the principle of direct manipulation and will be most intuitive to the user. This should be thought of as the primary interface for adding and manipulating content and adjusting how it is displayed.",
    "Basic block settings won’t always make sense in the context of the placeholder / content UI. As a secondary option, options that are critical to the functionality of a block can live in the block toolbar. The block toolbar is one step removed from direct manipulation, but is still highly contextual and visible on all screen sizes, so it is a great secondary option.",
    "The Settings Sidebar is not visible by default on a small / mobile screen, and may also be collapsed even in a desktop view. Therefore, it should not be relied on for anything that is necessary for the basic operation of the block. Pick good defaults, make important actions available in the block toolbar, and think of the sidebar as something that only power users may discover.",
    "A guide on how to get started contributing design to the Gutenberg project.",
    "The Make WordPress Design blog is the primary spot for the latest information around WordPress Design Team: including announcements, product goals, meeting notes, meeting agendas, and more.",
    "Real-time discussions for design take place in the #design channel in Make WordPress Slack (registration required). Weekly meetings for the Design team are on Wednesdays at 19:00UTC.",
    "The Gutenberg project uses GitHub for managing code and tracking issues. The main repository is at: https://github.com/WordPress/gutenberg.",
    "If you’d like to contribute to the design or front-end, feel free to contribute to tickets labeled Needs Design or Needs Design Feedback. We could use your thoughtful replies, mockups, animatics, sketches, doodles. Proposed changes are best done as minimal and specific iterations on the work that precedes it so we can compare.",
    "The WordPress Design team uses Figma to collaborate and share work. If you’d like to contribute, join the #design channel in Slack and ask the team to set you up with a free Figma account. This will give you access to a helpful library of components used in WordPress.",
    "This section outlines the design principles and patterns of the editor interface—to explain the background of the design, inform future improvements, and help people design great blocks.",
    "Gutenberg’s all-encompassing goal is a post- and page-building experience that makes it easy to create rich layouts. The block editor was the first product launched following this methodology for working with content.",
    "From the kickoff post:",
    "The editor will endeavor to create a new page and post building experience that makes writing rich posts effortless, and has “blocks” to make easy what today might take shortcodes, custom HTML, or “mystery meat” embed discovery.",
    "We can extract a few key principles from this:",
    "One thing that sets WordPress apart from other systems is that it allows users to create as rich a post layout as they can imagine — as long as they know HTML and CSS and build a custom theme.",
    "Gutenberg reshapes the editor into a tool that allows users to write rich posts and build beautiful layouts in a few clicks — no technical knowledge needed. WordPress will become a powerful and flexible content tool that’s accessible to all.",
    "Gutenberg wants to make it easier to author rich content. This means ensuring good defaults, bundling advanced layout options into blocks, and making the most important actions immediately available. Authoring content with WordPress should be accessible to anyone.",
    "Everything on a WordPress website becomes a block: text, images, galleries, widgets, shortcodes, and even chunks of custom HTML, whether added by plugins or otherwise. Users will only have to learn a single interface —— the block interface.",
    "All blocks are created equal. They all live in the same inserter interface. Recency, search, tabs, and grouping ensure that the most-used blocks are within easy reach.",
    "Drag-and-drop is secondary. For greater accessibility and platform compatibility, drag-and-drop interactions are used as an additive enhancement on top of explicit actions like click, tab, and space.",
    "Placeholders are key. If a block can have a neutral placeholder state, it should. An image placeholder block shows a button to open the media library, and a text placeholder block shows a writing prompt. By embracing placeholders we can predefine editable layouts, so all users have to do is fill in the blanks.",
    "Direct manipulation is intuitive. The block interface allows users to manipulate content directly on the page. Plugin and theme authors will support and extend this experience by building their own custom blocks.",
    "Code editing shouldn’t be necessary for customization. Customizing traditionally required complicated markup, and complicated markup is easy to break. With Gutenberg, customizing becomes more intuitive — and safer. A developer will be able to provide custom blocks that directly render portions of a layout (a three column grid of features, for instance) and clearly specify what can be directly edited by the user. That means the user can update text, swap images, reduce the number of columns, without having to ask a developer, or worrying about breaking things.",
    "The initial phase of Gutenberg as described in the kickoff goal is primarily limited to the content area (specifically post_content) of posts and pages. Within those confines, we are embracing the web as a vertical river of content by appending blocks sequentially, then adding layout options to each block.",
    "That said, there isn’t any fixed limit to the kind of layouts Gutenberg will be able to create. It’s very possible for Gutenberg to grow beyond the confines of post and page content, to include the whole page — one could think of a theme template as a comma-separated list of blocks, like this:",
    "Every block nested inside the content block would be rearrangeable. Every block would be editable. Every block would use the same API, and both the editor and the theme would load the same style.css file directly. In the end, both the editor/page builder and theme/front-end would appear near-identical, allowing for a true WYSIWYG experience.",
    "This concept is speculative, but it’s one direction Gutenberg could go in the future.",
    "Sometimes we publish a Pull Request and no one reviews our work. What to do?",
    "Attracting a review largely isn’t about the code – it is about making the reviewing easy.",
    "If you published a Pull Request that isn’t getting any comments or reviews, try one of the strategies used by core contributors:",
    "Approving a 2000-line-long PR takes months and feels overwhelming.",
    "Approving a 50-line long PR takes days or hours and feels easy.",
    "Large batches slow you down. Ship your work in small chunks to merge more and learn faster.",
    "Clarify:\n* What problem are you solving?\n* How does your PR solve it?\n* What feedback do you need?\n* What’s out of scope?\n* What’s unintuitive?\n* How to test?",
    "Summarize any related issues and PRs.",
    "It’s easier than asking others to go and figure it out.",
    "All contributions are competing for attention. Make your stand out.",
    "The easiest way? Say why it matters:",
    "❌ A new react hook to get data\n✅ useEntityRecord: get data with 10x less boilerplate",
    "Then prove it with code examples, visuals, and screencasts.",
    "Post a link to your PR in related issues & PRs.",
    "Ping commenters of related issues, previous committers, and tech leads.",
    "Bring it up on the #core-editor channel of the WordPress.org slack. The easiest way to get feedback is to speak out during the open floor section of the weekly Core Editor meeting.",
    "Assign relevant labels, milestones, and projects (or ask someone).",
    "It’s the easiest way to get on others’ radar.",
    "Look up the PRs of commenters of related issues, previous committers, and tech leads. Then review them.",
    "Is their work unfamiliar? Do:",
    "Risk adds friction – an approval can backfire later.",
    "Clarity is like grease. Clearly document:",
    "Some PRs naturally get more traction than others.",
    "Double down on these.",
    "Some Issues are more topical than others (e.g. those listed in the goals for an upcoming release) and thus will garner more attention. By focusing on these it will be easier to attract reviewers.",
    "How to get there quickly? Help with an active project from the WordPress roadmap",
    "For features included in the Gutenberg plugin, the deprecation policy is intended to support backward compatibility for two minor plugin releases, when possible. Features and code included in a stable release of WordPress are not included in this deprecation timeline, and are instead subject to the versioning policies of the WordPress project. The current deprecations are listed below and are grouped by the version at which they will be removed completely. If your plugin depends on these behaviors, you must update to the recommended alternative before the noted version.",
    "Historically, WordPress has been known for preserving backward compatibility across versions. Gutenberg follows this example wherever possible in its production public APIs. There are rare occasions where breaking backward compatibility is unavoidable and in those cases the breakage:",
    "The Gutenberg code base is composed of two different types of packages:",
    "Backward compatibility guarantees only apply to the production packages, as updates happen through WordPress upgrades.",
    "Production packages use the wp global variable to provide APIs to third-party developers. These APIs can be JavaScript functions, variables and React components.",
    "Class names and DOM nodes used inside the tree of React components are not considered part of the public API and can be modified.",
    "Changes to these should be done with caution as it can affect the styling and behavior of third-party code (Even if they should not rely on these in the first place). Keep the old ones if possible. If not, document the changes and write a dev note.",
    "As the project evolves, flaws of existing APIs are discovered, or updates are required to support new features. When this happens, we try to guarantee that existing APIs don’t break and build new alternative APIs.",
    "To encourage third-party developers to adopt the new APIs instead, we can use the deprecated helper to show a message explaining the deprecation and propose the alternative whenever the old API is used.",
    "Make it more clear when the feature was deprecated. Use the since and plugin options of the helper method.",
    "Dev notes are posts published on the make/core site prior to WordPress releases to inform third-party developers about important changes to the developer APIs, these changes can include:",
    "The native version of the editor references two types of string:\n1. Strings used in web and native platforms.\n2. Strings used only in the native platform.",
    "Regarding the first type, these strings are translated following the same process described for the web version in this guide, however for the latter, it’s required to provide your own translations.",
    "In order to identify these strings, you can use the script extract-used-strings located in packages/react-native-editor/bin/extract-used-strings.js to generate a JSON object that contains all the strings referenced including the platforms where they are used, as well as the files that reference it. Here you can see the format:",
    "This command also supports passing extra plugins, in case the React Native bundle of the editor is generated including other plugins.",
    "It’s important to note that the JSON object contains all used strings, so in order to identify the ones only used in the native platform, it’s required to provide your own script/process to extract them. This can easily be done by going through the strings and filtering out the ones that include the “web” platform.",
    "Extract used strings:",
    "NOTE: We need to pass absolute paths, otherwise it uses packages/react-native-editor as root path for relative paths.",
    "Extract used strings including extra plugins:",
    "Once you have the list of used strings in the native platform, the strings have to be translated, however, this process is out of the scope of the native version so you have to provide your own translations.",
    "The process for injecting the translations data into the editor is via the translations initial prop which is passed to the editor during its initialization:\n– Android reference\n– iOS reference",
    "The mechanism for integrating the provided translations to the mobile client, via the mentioned translations initial prop, is not described here, as it’s specific to the mobile client and could be achieved in different ways. Nevertheless, it’s important that they’re provided by the mentioned initial prop, as the editor is in charge of merging them with the translations already included in the editor.",
    "NOTE: Keep in mind that those strings that match with ones already included in the editor will be overridden.",
    "A translation file is basically a JSON object that contains key-value items with the translation for each individual string. This content is fetched from translate.wordpress.org that holds translations for WordPress and a list of different plugins like Gutenberg.",
    "These files can be cached under a folder and optimized. Additionally, an index file is generated that acts as the entry point to import and fetches the plugin translations.",
    "Fetched translations contain all the translatable plugin strings, including those not used in the native version of the editor. The file sizes, however, can be reduced by filtering out the strings not referenced in the used strings JSON file.",
    "By default, when installing dependencies, un-optimized translations might be downloaded for Gutenberg and located in the i18n-cache folder if the cache is not present.",
    "The strings included in these translation files are imported in the editor upon its initialization (reference) and will be merged with the extra translations provided by the translations initial prop.",
    "Fetch un-optimized translations:",
    "NOTE: We need to pass absolute paths, otherwise it uses packages/react-native-editor as root path  for relative paths.",
    "Fetch optimized translations:",
    "Integration testing is defined as a type of testing where different parts are tested as a group. In our case, the parts that we want to test are the different components that are required to be rendered for a specific block or editor logic. In the end, they are very similar to unit tests as they are run with the same command using the Jest library. The main difference is that for the integration tests, we’re going to use a specific library react-native-testing-library for testing how the editor renders the different components.",
    "A test can be structured with the following parts:",
    "We also include examples of common tasks as well as tips in the following sections:",
    "This part usually is covered by using the Jest callbacks beforeAll and beforeEach, the purpose is to prepare everything that the test might require like registering blocks or mocking parts of the logic.",
    "Here is an example of a common pattern if we expect all core blocks to be available:",
    "Before introducing the testing logic, we have to render the components that we want to test on. Depending on if we want to use the scoped component or entire editor approach, this part will be different.",
    "Here is an example of rendering the Cover block (extracted from this code):",
    "Here is an example of rendering the Buttons block (extracted from this code):",
    "Once the components are rendered, it’s time to query them. An important note about this topic is that we should test from the user’s perspective, this means that ideally we should query by elements that the user has access to like texts or accessibility labels.",
    "When querying we should follow this priority order:",
    "Here are some examples:",
    "Note that either a plain string or a regular expression can be passed into these queries. A regular expression is best for querying part of a string (e.g. any element whose accessibility label contains Unsupported Block. Row 1). Note that special characters such as . need to be escaped.",
    "After rendering the components or firing an event, side effects might happen due to potential state updates so the element we’re looking for might not be yet rendered. In this case, we would need to wait for the element to be available and for this purpose, we can use the waitFor function, which periodically executes the provided callback to determine whether the element appeared or not.",
    "In most cases we’ll use the waitFor function, but it’s important to note that it should be restricted to those queries that actually require waiting for the element to be available.",
    "NOTE: The react-native-testing-library package provides the query* and find* functions for this purpose too, but we should avoid using them for now because there’s a known issue that would make the test fail.",
    "It’s also possible to query elements contained in other elements via the within function, here is an example:",
    "As important as querying an element is to trigger events to simulate the user interaction, for this purpose we can use the fireEvent function (documentation).",
    "Here is an example of a press event:",
    "Press event:",
    "We can also trigger any type of event, including custom events, in the following example you can see how we trigger the onValueChange event (code reference) for the Slider component:",
    "Custom event – onValueChange:",
    "After querying elements and firing events, we must verify that the logic works as expected. For this purpose we can use the same expect function from Jest that we use in unit tests. It is recommended to use the custom toBeVisible matcher to ensure the element is defined, is a valid React element, and visible.",
    "Here is an example:",
    "Additionally when rendering the entire editor, we can also verify if the HTML output is what we expect:",
    "And finally, we have to clean up any potential modifications we’ve made that could affect the following tests. Here is an example of a typical cleanup after registering blocks that implies unregistering all blocks:",
    "In the spirit of making easier writing integration tests for the native version, you can find a list of helper functions in this README.",
    "A common way to query a block is by its accessibility label, here is an example:",
    "For further information about the accessibility label of a block, you can check the code of the function getAccessibleBlockLabel.",
    "Here is an example of how to insert a Paragraph block:",
    "The block settings can be accessed by tapping the “Open Settings” button after selecting the block, here is an example:",
    "When using the scoped component approach, we need first to render the SlotFillProvider and the BottomSheetSettings (note that we’re passing the isVisible prop to force the bottom sheet to be displayed) along with the block:",
    "See examples:",
    "The FlatList component renders its items depending on the scroll position, the view and content size. This means that when rendering this component it might happen that some of the items can’t be queried because they haven’t been rendered yet. To address this issue we have to explicitly fire an event to make the FlatList render all the items.",
    "Here is an example of the FlatList used for rendering the block list in the inserter menu:",
    "Sliders found in bottom sheets should be queried using their testID:",
    "Note that a slider’s testID is “Slider ” + label. So for a slider with a label of “Border Radius”, testID is “Slider Border Radius”.",
    "One caveat when adding blocks is that if they contain inner blocks, these inner blocks are not rendered. The following example shows how we can make a Buttons block render its inner Button blocks (assumes we’ve already obtained a reference to the Buttons block as buttonsBlock):",
    "If you have trouble locating an element’s identifier, you may wish to use Xcode’s Accessibility Inspector. Most identifiers are cross-platform, so even though the tests are run on Android by default, the Accessibility Inspector can be used to find the right identifier.",
    "Omitting the await before a waitFor can lead to scenarios where tests pass but are not testing the intended behaviour. For example, if toBeDefined is used to assert the result of a call to waitFor, the assertion will pass because waitFor returns a value, even though it is not the ReactTestInstance we meant to check for. For this reason, it is recommended to use the custom matcher toBeVisible which guards against this type of false positive.",
    "The default timeout for the waitFor function is set to 1000 ms, so far this value is enough for all the render logic we’re testing, however, if while testing we notice that an element requires more time to be rendered we should increase it.",
    "Some components already have unit tests that cover component rendering, although it’s not mandatory, in these cases, it would be nice to analyze the potential migration to an integration test.",
    "In case we want to keep both, we’ll add the word “integration” to the integration test file to avoid naming conflicts, here is an example: packages/block-library/src/missing/test/edit-integration.native.js.",
    "By default, all tests run in Jest use the Android platform, so in case we need to test a specific behaviour related to a different platform, we would need to support platform test files.",
    "In case we only need to test logic controlled by the Platform object, we can mock the module with the following code (in this case it’s changing the platform to iOS):",
    "Are you interested in contributing to the native mobile editor? This guide is a detailed walk through designed to get you up and running!",
    "Note that these instructions are primarily focused on the macOS environment. For other environments, the React Native quickstart documentation has helpful pointers and steps for getting set up.",
    "If you’re working in multiple JS projects, a node version manager may make sense. A manager will let you switch between different node and npm versions of your choosing.",
    "We recommend nvm.",
    "After installing nvm, run the following from the top-level directory of the cloned project:",
    "Then install dependencies:",
    "If you have an existing Gutenberg checkout be sure to fully clean node_modules and re-install dependencies.\nThis may help avoid errors in the future.",
    "CocoaPods is required to fetch React and third-party dependencies. The steps to install it vary depending on how Ruby is managed on your machine.",
    "If you’re using the default Ruby available with MacOS, you’ll need to use the sudo command to install gems like Cocoapods:",
    "Note, Mac M1 is not directly compatible with Cocoapods. If you encounter issues, try running these commands to install the ffi package, which will enable pods to be installed with the proper architecture:",
    "It may not be necessary to manually install Cocoapods or the ffi package if you’re using a Ruby Version manager. Please refer to your chosen manager’s documentation for guidance.",
    "rbenv is the recommended manager if you’re running Gutenberg from within the WordPress iOS app (vs. only the demo app).",
    "Install Xcode via the app store and then open it up:",
    "react-native doctor can be used to identify anything that’s missing from your development environment. From your Gutenberg checkout, or relative to /packages/react-native-editor folder, run:",
    "See if doctor can fix both “common” and “iOS” issues. (Don’t worry if “Android” still has ❌s at this stage, we’ll get to those later!)",
    "Once all common and iOS issues are resolved, try:",
    "In another terminal type:",
    "After waiting for everything to build, the demo app should be running from the iOS simulator:",
    "The JDK recommended in the React Native documentation is called Azul Zulu. It can be installed using Homebrew. To install it, run the following commands in a terminal after installing Homebrew:",
    "If you already have a JDK installed on your system, it should be JDK 11 or newer.",
    "To compile the Android app, download Android Studio.",
    "Next, open an existing project and select the Gutenberg folder you cloned.",
    "From here, click on the cube icon that’s highlighted in the following screenshot to access the SDK Manager. Another way to the SDK Manager is to navigate to Tools > SDK Manager:",
    "We can download SDK platforms, packages and other tools on this screen. Specific versions are hidden behind the “Show package details” checkbox, check it, since our build requires specific versions for E2E and development:",
    "Check all related packages from build.gradle. Then click on “Apply” to download items. There may be other related dependencies from build.gradle files in node_modules.",
    "If you don’t want to dig through files, stack traces will complain of missing packages, but it does take quite a number of tries if you go through this route.",
    "Export the following env variables and update $PATH. We can normally add this to our ~/.zshrc file if we’re using zsh\nin our terminal, or ~/.bash_profile if the terminal is still using bash.",
    "Save then source, or open a new terminal to pick up changes.",
    "or",
    "If the SDK path can’t be found, you can verify its location by visiting Android Studio > Preferences > System Settings > Android SDK",
    "Next, let’s create a virtual device image. Click on the phone icon with an android to the bottom-right.",
    "This brings up the “Android Virtual Device Manager” or (AVD). Click on “Create Virtual Device”. Pick a phone type of your choice:",
    "Pick the target SDK version. This is the targetSdkVersion set in the build.gradle file.",
    "There are some advanced settings we can toggle, but these are optional. Click finish.",
    "Start metro:",
    "In another terminal run the following to launch the demo app in the Android emulator (if the emulator isn’t already running, it’ll also be launched as part of this command):",
    "After a bit of a wait, we’ll see something like this:",
    "Appium has it own doctor tool. Run this with:",
    "Resolve any required dependencies.",
    "If we know we can run the iOS local environment without issue, E2Es for iOS are straightforward. Stop any running metro processes. This was launched previously with npm run native start:reset.",
    "Then in terminal type:",
    "Passing a filename should also work to run a subset of tests:",
    "If all things go well, it should look like:",
    "Create a new virtual device() that matches the device specified in packages/react-native-editor/device-tests/helpers/caps.js At the time of this writing, this would be a Pixel 3 XL image, using Android 9 (API 28).",
    "Start the virtual device first. Go back to the AVD by clicking on the phone icon, then click the green play button.",
    "Make sure no metro processes are running. This was launched previously with npm run native start:reset.",
    "Then in a terminal run:",
    "After a bit of a wait we should see:",
    "Welcome! This is the Getting Started guide for the native mobile port of the block editor, targeting Android and iOS devices. Overall, it’s a React Native library to be used in parent greenfield or brownfield apps. Continue reading for information on how to build, test, and run it.",
    "For a developer experience closer to the one the project maintainers current have, make sure you have the following tools installed:",
    "Note that the OS platform used by the maintainers is macOS but the tools and setup should be usable in other platforms too.",
    "Note that the commands described here should be run in the top-level directory of the cloned project. Before running the demo app, you need to download and install the project dependencies. This is done via the following command:",
    "Runs the packager (Metro) in development mode. The packager stays running to serve the app bundle to the clients that request it.",
    "With the packager running, open another terminal window and use the following command to compile and run the Android app:",
    "The app should now open in a connected device or a running emulator and fetch the JavaScript code from the running packager.",
    "To compile and run the iOS variant of the app using the default simulator device, use:",
    "which will attempt to open your app in the iOS Simulator if you’re on a Mac and have it installed.",
    "To compile and run the app using a different device simulator, use the following, noting the double sets of -- to pass the simulator option down to the react-native CLI.",
    "For example, if you’d like to run in an iPhone Xs Max, try:",
    "To see a list of all of your available iOS devices, use xcrun simctl list devices.",
    "If the Android emulator doesn’t start correctly, or compiling fails with Could not initialize class org.codehaus.groovy.runtime.InvokerHelper or similar, it may help to double check the set up of your development environment against the latest requirements in React Native’s documentation. With Android Studio, for example, you will need to configure the ANDROID_HOME environment variable and ensure that your version of JDK matches the latest requirements.",
    "Some times, and especially when tweaking anything in the package.json, Babel configuration (.babelrc) or the Jest configuration (jest.config.js), your changes might seem to not take effect as expected. On those times, you might need to stop the metro bunder process and restart it with npm run native start:reset. Other times, you might want to reinstall the NPM packages from scratch and the npm run native clean:install script can be handy.",
    "Although you’re not required to use Visual Studio Code for developing gutenberg-mobile, it is the recommended IDE and we have some configuration for it.",
    "When you first open the project in Visual Studio, you will be prompted to install some recommended extensions. This will help with some things like type checking and debugging.",
    "One of the extensions we are using is the React Native Tools. This allows you to run the packager from VSCode or launch the application on iOS or Android. It also adds some debug configurations so you can set breakpoints and debug the application directly from VSCode. Take a look at the extension documentation for more details.",
    "Use the following command to run the test suite:",
    "It will run the jest test runner on your tests. The tests are running on the desktop against Node.js.",
    "To run the tests with debugger support, start it with the following CLI command:",
    "Then, open chrome://inspect in Chrome to attach the debugger (look into the “Remote Target” section). While testing/developing, feel free to sprinkle debugger statements anywhere in the code that you’d like the debugger to break.",
    "This project is set up to use jest for tests. You can configure whatever testing strategy you like, but jest works out of the box. Create test files in directories called __tests__ or with the .test.js extension to have the files loaded by jest. See an example test here. The jest documentation is also a wonderful resource, as is the React Native testing tutorial.",
    "This repository uses Appium to run UI tests. The tests live in __device-tests__ and are written using Appium to run tests against simulators and real devices. To run these you’ll need to check off a few things:",
    "Then, to run the UI tests on iOS:",
    "and for Android:",
    "To run a single test instead of the entire suite, use npm run native device-tests:local. Here’s an example that runs only gutenberg-editor-paragraph.test.js:",
    "Note: You might experience problems that seem to be related to the tests starting the Appium server, e.g. errors that say Connection Refused, Connection Reset or The requested environment is not available. For now, you can manually start the Appium server via Appium Inspector or the CLI, then change the port number in the tests while (optionally) commenting out related code in the beforeAll and afterAll block.",
    "For a more detailed outline of the UI tests and how to get started writing one, please visit the UI Test documentation and our contributing guide.",
    "You might want to use Visual Studio Code as an editor. The project includes the configuration needed to use the above codestyle and linting tools automatically.",
    "The Gutenberg repository includes the source for the React Native based editor for mobile.",
    "Contributors need to ensure that they update any affected native mobile files during code refactorings because we cannot yet rely on automated tooling to do this for us. For example, renaming a function or a prop should also be performed in the native modules too, otherwise, the mobile client will break. We have added some mobile specific CI tests as safeguards in place in PRs, but we’re still far from done. Please bear with us and thank you in advance. ❤️🙇‍",
    "The majority of the code shared with native mobile is in the very same JavaScript module and SASS style files. In the cases where the code paths need to diverge, a .native.js or .native.scss variant of the file is created. In some cases, platform specific files can be also found for Android (.android.js) or iOS (.ios.js).",
    "For instructions on how to run the Gutenberg Mobile Demo App on Android or iOS, see Getting Started for the React Native based Mobile Gutenberg",
    "Also, the mobile client is packaged and released via the official WordPress apps. Even though the build pipeline is slightly different then the mobile demo apps and lives in its own repo for now (here’s the native mobile repo), the source code itself is taken directly from this repo and the “web” side codepaths.",
    "If you encounter a failed Android/iOS test on your pull request, we recommend the following steps:",
    "Follow the instructions in Native mobile testing to locally debug the native mobile unit tests when needed.",
    "Further information about this topic can be found in the React Native Internationalization Guide.",
    "npm run other:cherry-pick automates cherry-picking Pull Requests with a specific label into the current branch.",
    "It’s especially useful for major WordPress releases as by default the script looks for merged Pull Requests with the Backport to WP Beta/RC label.",
    "You can also use it in different scenarios by passing a custom label as the first argument. See the Gutenberg plugin release example at the end of this document.",
    "Running npm run other:cherry-pick yields the following prompt:",
    "Here’s what happens once you agree:",
    "This run was successful, yay! You can use this moment to confirm the correct PRs were cherry-picked.",
    "What if the cherry-picks didn’t apply cleanly? The script would apply the rest and retry.\nIf some cherry-picks still failed, the script would skip them and let you know which conflicts require a manual resolution.",
    "Either way, here’s what happens once you proceed past the cherry-picking stage:",
    "The commenting part is optional and only possible if you have the gh console utility installed.",
    "Yes! Pass it as the first argument:",
    "In the future, it would be great if the script automatically selected the\nrelevant label based on the currently selected branch:",
    "This Repository is used to perform several types of releases. This document serves as a checklist for each one of these. It is helpful if you’d like to understand the different workflows.",
    "To release a stable version of the Gutenberg plugin you need to be part of the Gutenberg development team. On top of that, you need approval from a member of the Gutenberg Core team for the final step of the release process (upload to the WordPress.org plugin repo — see below). If you aren’t a member yourself, make sure to contact one ahead of time so they’ll be around at the time of the release. You can ping in the #core-editor Slack channel.",
    "To release WordPress’s npm packages, similar requirements apply.",
    "We release a new major version approximately every two weeks. The current and next versions are tracked in GitHub milestones, along with each version’s tagging date (the day when the release candidate is to be tagged).",
    "One week after the first release candidate, the stable version is created based on the last release candidate and any necessary regression fixes. Once the stable version is released, the release post is published, including a performance audit.",
    "If critical bugs are discovered on stable versions of the plugin, patch versions can be released at any time.",
    "The plugin release process is entirely automated and happens solely on GitHub — i.e. it doesn’t require any steps to be run locally on your machine.",
    "For your convenience, here’s an 11-minute video walkthrough that demonstrates the release process. It’s recommended to watch this if you’re unfamiliar with it. The process is also documented in the following paragraphs.",
    "In order to start the release process, go to Gutenberg’s GitHub repository’s Actions tab, and locate the “Build Gutenberg Plugin Zip” action. Note the blue banner that says “This workflow has a workflow_dispatch event trigger.”, and expand the “Run workflow” dropdown on its right hand side.",
    "To release a release candidate (RC) version of the plugin, enter rc. To release a stable version, enter stable. In each case, press the green “Run workflow” button.",
    "This will trigger a GitHub Actions (GHA) workflow that bumps the plugin version, builds the Gutenberg plugin .zip file, creates a release draft, and attaches the plugin .zip file to it. This part of the process typically takes a little under six minutes. You’ll see that workflow appear at the top of the list, right under the blue banner. Once it’s finished, it’ll change its status icon from a yellow dot to a green checkmark. You can follow along in a more detailed view by clicking on the workflow.",
    "As part of the release candidate (RC) process, all of the @wordpress packages are published to NPM. You may see messaging after the “Build Gutenberg Plugin Zip” action action has created the draft release that the “Publish npm packages” action requires someone with appropriate permissions to trigger the action.",
    "This message is misleading and no action is required by the release coordinator. The process is automated and it will automatically run after the release notes are published.",
    "As soon as the workflow has finished, you’ll find the release draft under Gutenberg Releases. The draft is pre-populated with changelog entries based on previous release candidates for this version and any changes that have since been cherry-picked to the release branch. Thus, when releasing the first stable version of a series, delete any RC version headers (that are only there for your information) and move the more recent changes to the correct section (see below).",
    "The changelog draft will be partially pre-organized (based on GitHub labels) into sections and, within those, into “features.” Take some time to read the generated notes and then edit them to ensure legibility and accuracy.",
    "Don’t rush this part. It’s important to ensure the release notes are as organized as possible, and it doesn’t need to be completed in one go. You can save the draft and come back to it later.",
    "When editing the notes, you should be sure to:",
    "You can find some more tips on writing the release notes and post in the section below.",
    "At any point after the release candidate has been published but before the final stable release, some bugs related to this release might be fixed and committed to trunk. These fixes won’t automatically be incorporated into the final stable release, including them is a manual process.",
    "There are a couple of ways a release coordinator might be made aware of these bugs:",
    "The cherry-picking process is handled as follows:",
    "Once the commits have been cherry-picked, remove the Backport to Gutenberg RC label and update the milestone to the current release for all cherry-picked PRs.",
    "If you decide that the fixes deserve another release candidate before the stable version is published, create one by following the instructions above. Let other contributors know that a new release candidate has been released in the #core-editor Slack channel.",
    "Only once you’re happy with the shape of the release notes, press the green “Publish release” button. This will create a git tag for the version, publish the release, and trigger another GHA workflow with a twofold purpose:",
    "The last step needs approval by a member of the Gutenberg Core team. Locate the “Upload Gutenberg plugin to WordPress.org plugin repo” workflow for the new version, and have it approved.",
    "Once approved, the new Gutenberg version will be available to WordPress users all over the globe. You should check that folks can install the latest version from their WordPress Dashboard.",
    "Once released, all that’s left to do is writing a release post on make.wordpress.org/core. You can find some tips on that below.",
    "The release notes draft is auto-generated by a script that looks for pull requests for the current milestone, and:",
    "This is intended to be a starting point for release notes, and manually reviewing and curating the changelog entries is still required. The release candidate changelog is reused in the stable release and greatly helps select the highlights; because depending on the release it can be a very time-consuming process, it is recommended to start this process as soon as the milestone is closed and the release candidate is published.",
    "Guidelines for proof-reading include:",
    "Once the changelog is cleaned up, the next step is to choose a few changes to highlight in the release post. These highlights usually focus on new features and enhancements, including performance and accessibility ones, but can also include important API changes or critical bug fixes.",
    "Given the big scope of Gutenberg and the high number of pull requests merged in each milestone, it is not uncommon to overlook impactful changes worth highlighting; because of this, this step is a collaborative effort between the release manager, design, and Gutenberg Core team members.",
    "Because of the nature of the release post content, responsibilities are divided in this step. While the post can either be drafted by the release manager or delegated to another core member agreed upon in advance, visual assets are created by the design team.",
    "When possible, the highlighted changes in the release post should include an animation (video or GIF) or a static image of them in use. Choosing between an animation or a static image will depend on the best way to showcase each highlight: while animations are better to demonstrate workflows, more direct highlights can be shown with an image; having too many video players adds a layer of friction for users to see the highlight, whereas too many simultaneous animated GIFs can distract and overwhelm the reader.",
    "These visual assets should maintain consistency with previous release posts; using lean, white themes helps in this regard and visually integrate well with the make.wordpress.org/core blog aesthetics. Including copyrighted material should be avoided, and browser plugins that can be seen in the browser canvas (spell checkers, form fillers, etc.) disabled when capturing the assets.",
    "The post should also include a performance audit at the end, comparing the current Gutenberg release with both the previous one and the latest WordPress major version. There are GitHub worfklows in place to do this comparison as part of the Continuous Integration setup, so the performance audit results can be found at the workflow run generated by the release commit in the Performance Tests workflows page, with the job name Compare performance with current WordPress Core and previous Gutenberg versions.",
    "If the GitHub workflow fails, the performance audit can be executed locally using bin/plugin/cli.js perf and passing the branches to run the performance suite against as parameters. In addition, the current major WP version can be passed to avoid running tests against the WP trunk. Example:",
    "The performance values usually displayed in the release post are:",
    "Once the post content is ready, an author already having permissions to post in make.wordpress.org/core will create a new draft and import the content; this post should be published after the actual release, helping external media to echo and amplify the release news. Remember asking for peer review is encouraged by the make/core posting guidelines!",
    "Occasionally it’s necessary to create a minor release (i.e. X.Y.Z) of the Plugin. This is usually done to expedite fixes for bad regressions or bugs. The Backport to Gutenberg Minor Release is usually used to identify PRs that need to be included in a minor release, but as release coordinator you may also be notified more informally through slack. Even so, it’s good to ensure all relevant PRs have the correct label.",
    "As you proceed with the following process, it’s worth bearing in mind that such minor releases are not created as branches in their own right (e.g. release/12.5.0) but are simply tags.",
    "The method for minor releases is nearly identical to the main Plugin release process (see above) but has some notable exceptions. Please make sure to read the whole of this guide before proceeding.",
    "The minor release should only contain the specific commits required. To do this you should checkout the previous major stable (i.e. non-RC) release branch (e.g. release/12.5) locally and then cherry pick any commits that you require into that branch.",
    "The cherry-picking process can be automated with the npm run cherry-pick script, but be sure to use the Backport to Gutenberg Minor Release label when running the script.",
    "You must also ensure that all PRs being included are assigned to the Github Milestone on which the minor release is based. Bear in mind, that when PRs are merged they are automatically assigned a milestone for the next stable release. Therefore you will need to go back through each PR in Github and re-assign the Milestone.",
    "For example, if you are releasing version 12.5.4, then all PRs picked for that release must be unassigned from the 12.6 Milestone and instead assigned to the 12.5 Milestone.",
    "Once cherry picking is complete, you can also remove the Backport to Gutenberg Minor Release label from the PRs.",
    "Once you have the stable release branch in order and the correct Milestone assigned to your PRs you can push the branch to Github and continue with the release process using the Github website GUI.",
    "Go to Gutenberg’s GitHub repository’s Actions tab, and locate the “Build Gutenberg Plugin Zip” action. You should now carefully choose the next action based on information about the current Plugin release version:",
    "If the previous release version was stable (X.Y.Z – e.g. 12.5.0, 12.5.1 .etc) leave the Use workflow from field as trunk and then specify stable in the text input field. The workflow will automatically create a minor release, with z incremented (x.y.(z+1)) as required.",
    "If however, the previous release was an RC (e.g. X.Y.0-rc.1) you will need to manually select the stable version’s release branch (e.g. 12.5.0) when creating the release. Failure to do this will cause the workflow to release the next major stable version (e.g. 12.6.0) which is not what you want.",
    "To do this, when running the Workflow, select the appropriate release/ branch from the Use workflow from dropdown (e.g. release/12.5) and specify stable in the text input field.",
    "Please note you cannot create minor releases for previous stable releases once a more recent stable release has been published as this would require significant changes to how we upload plugin versions to the WP.org plugin SVN repo). Always check the latest release version before you proceed (see this Issue for more information).",
    "The release draft was created but it was empty/contained an error message",
    "If you forget to assign the correct Milestone to your cherry picked PR(s) then the changelog may not be generated as you would expect.",
    "It is important to always manually verify that the PRs shown in the changelog match up with those cherry picked to the release branch.",
    "Moreover, if the release includes only a single PR, then failing to assign the PR to the correct Milestone will cause an error to be displayed when generating the changelog. In this case you can edit the release notes to include details of the missing PR (manually copying the format from a previous release).",
    "If for any reason the Milestone has been closed, you may reopen it for the purposes of the release.",
    "The draft release only contains 1 asset file. Other releases have x3.",
    "This is expected. The draft release will contain only the plugin zip. Only once the release is published will the remaining assets be generated and added to the release.",
    "Do I need to publish point releases to WordPress.org?",
    "Yes. The method for this is identical to the main Plugin release process. You will need a Gutenberg Core team member to approve the release workflow.",
    "The release process failed to cherry-pick version bump commit to the trunk branch.",
    "First, confirm that the step failed by checking the latest commits on trunk do not include the version bump commit. Then revert the version bump commit on the release branch – git revert --no-edit {commitHash}. Finally, push the changes and start the release process again.",
    "The Gutenberg repository follows the WordPress SVN repository’s branching strategy for every major WordPress release. In addition to that, it also contains two other special branches that control npm publishing workflows:",
    "Release types and their schedule:",
    "There is also an option to perform Standalone Bugfix Package Releases at will. It should be reserved only for critical bug fixes or security releases that must be published to npm outside of regular cycles.",
    "For each Gutenberg plugin release, we also publish to npm an updated version of WordPress packages. This is automated with the Release Tool that handles releases for the Gutenberg plugin. A successful RC1 release triggers the npm publishing job, and this needs to be approved by a Gutenberg Core team member. Locate the “Build Gutenberg Plugin Zip” workflow for the new version, and have it approved.",
    "We deliberately update the wp/latest branch within the Gutenberg repo with the content from the Gutenberg release release/X.Y (example release/12.7) branch at the time of the Gutenberg RC1 release. This is done to ensure that the wp/latest branch is as close as possible to the latest version of the Gutenberg plugin. It also practically removes the chances of conflicts while backporting to trunk commits with updates applied during publishing to package.json and CHANGELOG.md files. In the past, we had many issues in that aspect when doing npm publishing after the regular Gutenberg release a week later. When publishing the new package versions to npm, we pick at least the minor version bump to account for future bugfix or security releases.",
    "Behind the scenes, all steps are automated via ./bin/plugin/cli.js npm-latest command. For the record, the manual process would look very close to the following steps:",
    "The following workflow is needed when bug or security fixes need to be backported into WordPress Core. This can happen in a few use-cases:",
    "Now, the wp/X.Y branch is ready for publishing npm packages. In order to start the process, go to Gutenberg’s GitHub repository’s Actions tab, and locate the “Publish npm packages” action. Note the blue banner that says “This workflow has a workflow_dispatch event trigger.”, and expand the “Run workflow” dropdown on its right hand side.",
    "To publish packages to npm for the WordPress major release, select wp from the “Release type” dropdown and enter X.Y (example 5.2) in the “WordPress major release” input field. Finally, press the green “Run workflow” button. It triggers the npm publishing job, and this needs to be approved by a Gutenberg Core team member. Locate the “Publish npm packages” action for the current publishing, and have it approved.",
    "For the record, the manual process would look like the following:",
    "Note: For WordPress 5.0 and WordPress 5.1, a different release process was used. This means that when choosing npm package versions targeting these two releases, you won’t be able to use the next patch version number as it may have been already used. You should use the “metadata” modifier for these. For example, if the last published package version for this WordPress branch was 5.6.1, choose 5.6.1+patch.1 as a version.",
    "Now, the npm packages should be ready and a patch can be created and committed into the corresponding WordPress SVN branch.",
    "The following workflow is needed when packages require bug fixes or security releases to be published to npm outside of a regular release cycle.",
    "Note: Both the trunk and wp/latest branches are restricted and can only be pushed to by the Gutenberg Core team.",
    "Identify the commit hashes from the pull requests that need to be ported from the repo trunk branch to wp/latest",
    "The wp/latest branch now needs to be prepared to release and publish the packages to npm.",
    "Open a terminal and perform the following steps:",
    "Before porting commits check that the wp/latest branch does not have any outstanding packages waiting to be published:",
    "Now cherry-pick the commits from trunk to wp/latest, use -m 1 commithash if the commit was a pull request merge commit:",
    "Whilst waiting for the GitHub actions build for wp/latestbranch to pass, identify and begin updating the CHANGELOG.md files:",
    "Check the versions listed in the current CHANGELOG.md file, looking through the commit history of a package e.g @wordpress/scripts and look out for “chore(release): publish” and “Update changelogs” commits to determine recent version bumps, then looking at the commits since the most recent release should aid with discovering what changes have occurred since the last release.",
    "Note: You may discover the current version of each package is not up to date, if so updating the previously released versions would be appreciated.",
    "Now, the wp/latest branch is ready for publishing npm packages. In order to start the process, go to Gutenberg’s GitHub repository’s Actions tab, and locate the “Publish npm packages” action. Note the blue banner that says “This workflow has a workflow_dispatch event trigger.”, and expand the “Run workflow” dropdown on its right hand side.",
    "To publish packages to npm with bugfixes, select bugfix from the “Release type” dropdown and leave empty “WordPress major release” input field. Finally, press the green “Run workflow” button. It triggers the npm publishing job, and this needs to be approved by a Gutenberg Core team member. Locate the “Publish npm packages” action for the current publishing, and have it approved.",
    "Behind the scenes, the rest of the process is automated with ./bin/plugin/cli.js npm-bugfix command. For the record, the manual process would look very close to the following steps:",
    "As noted in the Synchronizing Gutenberg Plugin section, packages publishing happens every two weeks from the wp/latest branch. It’s also possible to use the development release to test the upcoming changes present in the trunk branch at any time. We are taking advantage of package distribution tags that make it possible to consume the future version of the codebase according to npm guidelines:",
    "By default, the latest tag is used by npm to identify the current version of a package, and npm install <pkg> (without any @<version> or @<tag> specifier) installs the latest tag. Typically, projects only use the latest tag for stable release versions, and use other tags for unstable versions such as prereleases.",
    "In our case, we use the next distribution tag for code. Developers that want to install such a version of the package need to type:",
    "In order to start the publishing process for development version of npm packages, go to Gutenberg’s GitHub repository’s Actions tab, and locate the “Publish npm packages” action. Note the blue banner that says “This workflow has a workflow_dispatch event trigger.”, and expand the “Run workflow” dropdown on its right hand side.",
    "To publish development packages to npm, select development from the “Release type” dropdown and leave empty “WordPress major release” input field. Finally, press the green “Run workflow” button. It triggers the npm publishing job, and this needs to be approved by a Gutenberg Core team member. Locate the “Publish npm packages” action for the current publishing, and have it approved.",
    "Behind the scenes, the release process is fully automated via ./bin/plugin/cli.js npm-next command. It ensures\nthe wp/next branch is synchronized with the latest release branch (release/X.Y) created for the Gutenberg plugin. To avoid collisions in the versioning of packages, we always include the newest commit’s sha, for example, @wordpress/block-editor@5.2.10-next.645224df70.0.",
    "This repository uses monorepo to manage WordPress modules and publish them with lerna as packages to npm. This enforces certain steps in the workflow which are described in details in packages documentation.",
    "Maintaining dozens of npm packages is difficult—it can be tough to keep track of changes. That’s why we use CHANGELOG.md files for each package to simplify the release process. As a contributor, you should add an entry to the aforementioned file each time you contribute adding production code as described in Maintaining Changelogs section.",
    "Publishing WordPress packages to npm is automated by synchronizing it with the bi-weekly Gutenberg plugin RC1 release. You can learn more about this process and other ways to publish new versions of npm packages in the Gutenberg Release Process document.",
    "The editor provides several vendor and internal scripts to plugin developers. Script names, handles, and descriptions are documented in the table below.",
    "The editor includes a number of packages to enable various pieces of functionality. Plugin developers can utilize them to create blocks, editor plugins, or generic plugins.",
    "The editor also uses some popular third-party packages and scripts. Plugin developers can use these scripts as well without bundling them in their code (and increasing file sizes).",
    "The editor also provides polyfills for certain features that may not be available in all modern browsers.\nIt is recommended to use the main wp-polyfill script handle which takes care of loading all the below mentioned polyfills.",
    "When using a JavaScript bundler like webpack, the scripts mentioned here\ncan be excluded from the bundle and provided by WordPress in the form of script dependencies see\nwp_enqueue_script.",
    "The\n@wordpress/dependency-extraction-webpack-plugin\nprovides a webpack plugin to help extract WordPress dependencies from bundles. @wordpress/scripts\nbuild script includes\nthe plugin by default.",
    "Deprecation utility for WordPress. Logs a message to notify developers about a deprecated feature.",
    "The deprecated action is fired with three parameters: the name of the deprecated feature, the options object passed to deprecated, and the message sent to the console.",
    "Logs a message to notify developers about a deprecated feature.",
    "Object map tracking messages which have been logged, for use in ensuring a message is only logged once.",
    "This library contains the default block serialization parser implementations for WordPress documents. It provides native PHP and JavaScript parsers that implement the specification from @wordpress/block-serialization-spec-parser and which normally operates on the document stored in post_content.",
    "Parser function, that converts input HTML into a block based structure.",
    "Input post:",
    "Parsing code:",
    "This is a recursive-descent parser that scans linearly once through the input document. Instead of directly recursing it utilizes a trampoline mechanism to prevent stack overflow. It minimizes data copying and passing through the use of globals for tracking state through the parse. Between every token (a block comment delimiter) we can instrument the parser and intervene should we want to; for example we might put a hard limit on how long we can be parsing a document or provide additional debugging diagnostics for a document.",
    "The spec parser is defined via a Parsing Expression Grammar (PEG) which answers many questions inherently that we must answer explicitly in this parser. The goal for this implementation is to match the characteristics of the PEG so that it can be directly swapped out and so that the only changes are better runtime performance and memory usage.",
    "Every serialized Gutenberg document is nominally an HTML document which, in addition to normal HTML, may also contain specially designed HTML comments — the block comment delimiters — which separate and isolate the blocks serialized in the document.",
    "This parser attempts to create a state-machine around the transitions triggered from those delimiters — the “tokens” of the grammar. Every time we find one we should only be doing either of:",
    "Those actions have different effects depending on the context; for instance, when we exit a block we either need to add it to the output block list or we need to append it as the next innerBlock on the parent block below it in the block stack (the place where we track open blocks). The details are documented below.",
    "The biggest challenge in this parser is making the right accounting of indices required to construct the innerHTML values for each block at every level of nesting depth. We take a simple approach:",
    "This parser operates much faster than the generated parser from the specification. Because we know more about the parsing than the PEG does we can take advantage of several tricks to improve our speed and memory usage:",
    "Further, tokenizing with a RegExp brings an additional advantage. The parser generated by the PEG provides predictable performance characteristics in exchange for control over tokenization rules — it doesn’t allow us to define RegExp patterns in the rules so as to guard against e.g. cataclysmic backtracking that would break the PEG guarantees.",
    "However, since our “token language” of the block comment delimiters is regular and can be trivially matched with RegExp patterns, we can do that here and then something magical happens: we jump out of PHP or JavaScript and into a highly-optimized RegExp engine written in C or C++ on the host system. We thereby leave the virtual machine and its overhead.",
    "Take a look at the below code. Could you understand what the test is trying to do at first glance?",
    "This is borrowed from the real code in gutenberg, with the test title and the comments removed and refactored into Playwright. Ideally, E2E tests should be self-documented and readable to end users; in the end, they are trying to resemble how end users interact with the app. However, there are a couple of red flags in the code.",
    "Popularized by Jest, snapshot testing is a great tool to help test our app when it makes sense. However, probably because it’s so powerful, it’s often overused by developers. There are already multiple articles about this. In this particular case, snapshot testing fails to reflect the developer’s intention. It’s not clear what the assertions are about without looking into other information. This makes the code harder to understand and creates a mental overhead for all the other readers other than the one who wrote it. As readers, we have to jump around the code to fully understand them. The added complexity of the code discourages contributors from changing the test to fit their needs. It could sometimes even confuse the authors and make them accidentally commit the wrong snapshots.",
    "Here’s the same test with the test title and comments. Now you know what these assertions are actually about.",
    "The developer’s intention is a bit more readable, but it still feels disconnected from the test. You might be tempted to try inline snapshots, which do solve the issue of having to jump around files, but they’re still not self-documented nor explicit. We can do better.",
    "Instead of writing the assertions in comments, we can try directly writing them out explicitly. With the help of editor.getBlocks, we can rewrite them into simpler and atomic assertions.",
    "These assertions are more readable and explicit. You can add additional assertions or split existing ones into multiple ones to highlight their importance. Whether to keep the comments is up to you, but it’s usually fine to omit them when the code is already readable without them.",
    "Due to the lack of inline snapshots in Playwright, some migrated tests are using string assertions (toBe) to simulate similar effects without having to create dozens of snapshot files.",
    "We can consider this pattern as a variant of snapshot testing, and we should follow the same rule when writing them. It’s often better to rewrite them using editor.getBlocks or other methods to make explicit assertions.",
    "Comparing the explicit assertions to snapshot testing, we’re definitely losing some test coverage in this test. Snapshot testing is still useful when we want to assert the full serialized content of the block. Fortunately, though, some tests in the integration test already assert the full content of each core block. They run in Node.js, making them way faster than repeating the same test in Playwright. Running 273 test cases in my machine only costs about 5.7 seconds. These sorts of tests work great at the unit or integration level, and we can run them much faster without losing test coverage.",
    "Snapshot testing should rarely be required in E2E tests, often there are better alternatives that leverage explicit assertions. For times when there isn’t any other suitable alternative, we should follow the best practices when using them.",
    "Huge snapshots are hard to read and difficult to review. Moreover, when everything is important then nothing is important. Huge snapshots prevent us from focusing on the important parts of the snapshots.",
    "If you find yourself creating multiple snapshots of similar contents in the same test, then it’s probably a sign that you want to make more atomic assertions instead. Rethink what you want to test, if the first snapshot is only just a reference for the second one, then what you want is likely the difference between the snapshots. Store the first result in a variable and assert the difference between the results instead.",
    "This document outlines a typical flow of migrating a Jest + Puppeteer test to Playwright. Note that the migration process is also a good opportunity to refactor or rewrite parts of the tests. Please read the best practices guide before starting the migration.",
    "Before migrating a test utility function, think twice about whether it’s necessary. Playwright offers a lot of readable and powerful APIs which make a lot of the utils obsolete. Try implementing the same thing inline directly in the test first. Only follow the below guide if that doesn’t work for you. Some examples of utils that deserve to be implemented in the e2e-test-utils-playwright package include complex browser APIs (like pageUtils.dragFiles and pageUtils.pressKeys) and APIs that set states (requestUtils.*).",
    "Note\n  The e2e-test-utils-playwright package is not meant to be a drop-in replacement of the Jest + Puppeteer’s e2e-test-utils package. Some utils are only created to ease the migration process, but they are not necessarily required.",
    "Playwright utilities are organized a little differently from those in the e2e-test-utils package. The e2e-test-utils-playwright package has the following folders that utils are divided up into:\n– admin – Utilities related to WordPress admin or WordPress admin’s user interface (e.g. visitAdminPage).\n– editor – Utilities for the block editor (e.g. clickBlockToolbarButton).\n– pageUtils – General utilities for interacting with the browser (e.g. pressKeys).\n– requestUtils – Utilities for making REST API requests (e.g. activatePlugin). These utilities are used for setup and teardown of tests.",
    "This living document serves to prescribe instructions and best practices for writing end-to-end (E2E) tests with Playwright in the Gutenberg project.",
    "See the dedicated guide if you’re working with the previous Jest + Puppeteer framework. See the [migration guide](https://github.com/WordPress/gutenberg/tree/HEAD/docs/contributors/code/e2e/migration.md) if you’re migrating tests from Jest + Puppeteer.",
    "If you’re developing in Linux, it currently requires testing Webkit browsers in headed mode. If you don’t want to or can’t run it with the GUI (e.g. if you don’t have a graphic interface), prepend the command with xvfb-run to run it in a virtual environment.",
    "Read the best practices guide for Playwright.",
    "In fact, any API that returns ElementHandle is discouraged. This includes $, $$, $eval, $$eval, etc. Locator is a much better API and can be used with playwright’s assertions. This also works great with Page Object Model since that locator is lazy and doesn’t return a promise.",
    "Use getByRole to construct the query wherever possible. It enables us to write accessible queries without having to rely on internal implementations.",
    "It can also be chained to perform complex queries:",
    "See the official documentation for more info on how to use them.",
    "To encourage better practices for querying elements, selectors are strict by default, meaning that it will throw an error if the query returns more than one element.",
    "e2e-test-utils are too bloated with too many utils. Most of them are simple enough to be inlined directly in tests. With the help of accessible selectors, simple utils are easier to write now. For utils that only take place on a certain page, use Page Object Model instead (with an exception of clearing states with requestUtils which are better placed in e2e-test-utils). Otherwise, only create an util if the action is complex and repetitive enough.",
    "As mentioned above, Page Object Model is the preferred way to create reusable utility functions on a certain page.",
    "The rationale behind using a POM is to group utils under namespaces to be easier to discover and use. In fact, PageUtils in the e2e-test-utils-playwright package is also a POM, which avoids the need for global variables, and utils can reference each other with this.",
    "It’s slow to set states manually before or after tests, especially when they’re repeated multiple times between tests. It’s recommended to set them via API calls. Use requestUtils.rest and requestUtils.batchRest instead to call the REST API (and add them to requestUtils if needed). We should still add a test for manually setting them, but that should only be tested once.",
    "Previously in our Jest + Puppeteer E2E tests, page and browser are exposed as global variables. This makes it harder to work with when we have multiple pages/tabs in the same test, or if we want to run multiple tests in parallel. @playwright/test has the concept of fixtures which allows us to inject page, browser, and other parameters into the tests.",
    "We can insert as many assertions in one test as needed. It’s better to make explicit assertions whenever possible. For instance, if we want to assert that a button exists before clicking on it, we can do expect( locator ).toBeVisible() before performing locator.click(). This makes the tests flow better and easier to read",
    "By default, tests are only run in chromium. You can tag tests to run them in different browsers. Use @browser anywhere in the test title to run it in that browser. Tests will always run in chromium by default, append -chromium to disable testing in chromium. Available browsers are chromium, firefox, and webkit.",
    "Gutenberg contains both PHP and JavaScript code, and encourages testing and code style linting for both.",
    "Aside from the joy testing will bring to your life, tests are important not only because they help to ensure that our application behaves as it should, but also because they provide concise examples of how to use a piece of code.",
    "Tests are also part of our code base, which means we apply to them the same standards we apply to all our application code.",
    "As with all code, tests have to be maintained. Writing tests for the sake of having a test isn’t the goal – rather we should try to strike the right balance between covering expected and unexpected behaviours, speedy execution and code maintenance.",
    "When writing tests consider the following:",
    "Tests for JavaScript use Jest as the test runner and its API for globals (describe, test, beforeEach and so on) assertions, mocks, spies and mock functions. If needed, you can also use React Testing Library for React component testing.",
    "It should be noted that in the past, React components were unit tested with Enzyme. However, React Testing Library (RTL) is now used for all existing and new tests instead.",
    "Assuming you’ve followed the instructions to install Node and project dependencies, tests can be run from the command-line with NPM:",
    "Linting is static code analysis used to enforce coding standards and to avoid potential errors. This project uses ESLint and TypeScript’s JavaScript type-checking to capture these issues. While the above npm test will execute both unit tests and code linting, code linting can be verified independently by running npm run lint. Some JavaScript issues can be fixed automatically by running npm run lint:js:fix.",
    "To improve your developer workflow, you should setup an editor linting integration. See the getting started documentation for additional information.",
    "To run unit tests only, without the linter, use npm run test:unit instead.",
    "Keep your tests in a test folder in your working directory. The test file should have the same name as the test subject file.",
    "Only test files (with at least one test case) should live directly under /test. If you need to add external mocks or fixtures, place them in a sub folder, for example:",
    "Given the previous folder structure, try to use relative paths when importing of the code you’re testing, as opposed to using project paths.",
    "Good",
    "import { bar } from '../bar';",
    "Not so good",
    "import { bar } from 'components/foo/bar';",
    "It will make your life easier should you decide to relocate your code to another position in the application directory.",
    "Use a describe block to group test cases. Each test case should ideally describe one behaviour only.",
    "In test cases, try to describe in plain words the expected behaviour. For UI components, this might entail describing expected behaviour from a user perspective rather than explaining code internals.",
    "The Jest API includes some nifty setup and teardown methods that allow you to perform tasks before and after each or all of your tests, or tests within a specific describe block.",
    "These methods can handle asynchronous code to allow setup that you normally cannot do inline. As with individual test cases, you can return a Promise and Jest will wait for it to resolve:",
    "afterEach and afterAll provide a perfect (and preferred) way to ‘clean up’ after our tests, for example, by resetting state data.",
    "Avoid placing clean up code after assertions since, if any of those tests fail, the clean up won’t take place and may cause failures in unrelated tests.",
    "Passing dependencies to a function as arguments can often make your code simpler to test. Where possible, avoid referencing dependencies in a higher scope.",
    "Here we’d have to import and use a value from VALID_VALUES_LIST in order to pass:",
    "expect( isValueValid( VALID_VALUES_LIST[ 0 ] ) ).toBe( true );",
    "The above assertion is testing two behaviours: 1) that the function can detect an item in a list, and 2) that it can detect an item in VALID_VALUES_LIST.",
    "But what if we don’t care what’s stored in VALID_VALUES_LIST, or if the list is fetched via an HTTP request, and we only want to test whether isValueValid can detect an item in a list?",
    "Because we’re passing the list as an argument, we can pass mock validValuesList values in our tests and, as a bonus, test a few more scenarios:",
    "expect( isValueValid( 'hulk', [ 'batman', 'superman' ] ) ).toBe( false );",
    "expect( isValueValid( 'hulk', null ) ).toBe( false );",
    "expect( isValueValid( 'hulk', [] ) ).toBe( false );",
    "expect( isValueValid( 'hulk', [ 'iron man', 'hulk' ] ) ).toBe( true );",
    "Often our code will use methods and properties from imported external and internal libraries in multiple places, which makes passing around arguments messy and impracticable. For these cases jest.mock offers a neat way to stub these dependencies.",
    "For instance, lets assume we have config module to control a great deal of functionality via feature flags.",
    "To test the behaviour under each condition, we stub the config object and use a jest mocking function to control the return value of isEnabled.",
    "We can use Jest spies to test code that calls global methods.",
    "Simulating user interactions is a great way to write tests from the user’s perspective, and therefore avoid testing implementation details.",
    "When writing tests with Testing Library, there are two main alternatives for simulating user interactions:",
    "The built-in fireEvent is a utility for dispatching DOM events. It dispatches exactly the events that are described in the test spec – even if those exact events never had been dispatched in a real interaction in a browser.",
    "On the other hand, the user-event library exposes higher-level methods (e.g. type, selectOptions, clear, doubleClick…), that dispatch events like they would happen if a user interacted with the document, and take care of any react-specific quirks.",
    "For the above reasons, the user-event library is recommended when writing tests for user interactions.",
    "Not so good: using fireEvent to dispatch DOM events.",
    "Good: using user-event to simulate user events.",
    "Integration testing is defined as a type of testing where different parts are tested as a group. In this case, the parts that we want to test are the different components that are required to be rendered for a specific block or editor logic. In the end, they are very similar to unit tests as they are run with the same command using the Jest library. The main difference is that for the integration tests the blocks are run within a special instance of the block editor.",
    "The advantage of this approach is that the bulk of a block editor’s functionality (block toolbar and inspector panel interactions, etc.) can be tested without having to fire up the full e2e test framework. This means the tests can run much faster and more reliably. It is suggested that as much of a block’s UI functionality as possible is covered with integration tests, with e2e tests used for interactions that require a full browser environment, eg. file uploads, drag and drop, etc.",
    "The Cover block is an example of a block that uses this level of testing to provide coverage for a large percentage of the editor interactions.",
    "To set up a jest file for integration tests:",
    "The initializeEditor function returns the output of the @testing-library/react render method. It will also accept an array of block metadata objects, allowing you to set up the editor with multiple blocks.",
    "The integration test editor module also exports a selectBlock which can be used to select the block to be tested by the aria-label on the block wrapper, eg. “Block: Cover”.",
    "This is an overview of snapshot testing and how to best leverage snapshot tests.",
    "When a snapshot test fails, it just means that a component’s rendering has changed. If that was unintended, then the snapshot test just prevented a bug 😊",
    "However, if the change was intentional, follow these steps to update the snapshot. Run the following to update the snapshots:",
    "Snapshots are just a representation of some data structure generated by tests. Snapshots are stored in files and committed alongside the tests. When the tests are run, the data structure generated is compared with the snapshot on file.",
    "It’s very easy to make a snapshot:",
    "This is the produced snapshot:",
    "You should never create or modify a snapshot directly, they are generated and updated by tests.",
    "Snapshot are mostly targeted at component testing. They make us conscious of changes to a component’s structure which makes them ideal for refactoring. If a snapshot is kept up to date over the course of a series of commits, the snapshot diffs record the evolution of a component’s structure. Pretty cool 😎",
    "Reducer tests are also a great fit for snapshots. They are often large, complex data structures that shouldn’t change unexpectedly, exactly what snapshots excel at!",
    "You might be blindsided by CI tests failing when snapshots don’t match. You’ll need to update snapshots if the changes are expected. The quick and dirty solution is to invoke Jest with --updateSnapshot. That can be done as follows:",
    "--testPathPattern is not required, but specifying a path will speed things up by running a subset of tests.",
    "It’s a great idea to keep npm run test:unit:watch running in the background as you work. Jest will run only the relevant tests for changed files, and when snapshot tests fail, just hit u to update a snapshot!",
    "Non-deterministic tests may not make consistent snapshots, so beware. When working with anything random, time-based, or otherwise non-deterministic, snapshots will be problematic.",
    "Connected components are tricky to work with. To snapshot a connected component you’ll probably want to export the unconnected component:",
    "The connected props will need to be manually provided. This is a good opportunity to audit the connected state.",
    "If you’re starting a refactor, snapshots are quite nice, you can add them as the first commit on a branch and watch as they evolve.",
    "Snapshots themselves don’t express anything about what we expect. Snapshots are best used in conjunction with other tests that describe our expectations, like in the example above:",
    "Another good technique is to use the toMatchDiffSnapshot function (provided by the snapshot-diff package), which allows to snapshot only the difference between two different states of the DOM. This approach is useful to test the effects of a prop change on the resulting DOM while generating a much smaller snapshot, like in this example:",
    "Similarly, the toMatchStyleDiffSnapshot function allows to snapshot only the difference between the styles associated to two different states of a component, like in this example:",
    "Sometimes we need to mock refs for some stories which use them. Check the following documents to learn more:",
    "In that case, you might see test failures and TypeError reported by Jest in the lines which try to access a property from ref.current.",
    "Running npm run test:unit:debug will start the tests in debug mode so a node inspector client can connect to the process and inspect the execution. Instructions for using Google Chrome or Visual Studio Code as an inspector client can be found in the wp-scripts documentation.",
    "Part of the unit-tests suite is a set of Jest tests run exercise native-mobile codepaths, developed in React Native. Since those tests run on Node, they can be launched locally on your development machine without the need for specific native Android or iOS dev tools or SDKs. It also means that they can be debugged using typical dev tools. Read on for instructions how to debug.",
    "To locally run the tests in debug mode, follow these steps:",
    "Contributors to Gutenberg will note that PRs include continuous integration E2E tests running the native mobile E2E tests on Android and iOS. For troubleshooting failed tests, check our guide on native mobile tests in continuous integration. More information on running these tests locally can be found in here.",
    "There is an ongoing effort to add integration tests to the native mobile project using the react-native-testing-library library. A guide to writing integration tests can be found here.",
    "Most existing End-to-end tests currently use Puppeteer as a headless Chromium driver to run the tests in packages/e2e-tests, and are otherwise still run by a Jest test runner.",
    "There’s an ongoing project to migrate them from Puppeteer to Playwright. It’s recommended to write new e2e tests in Playwright whenever possible. The sections below mostly apply to the old Jest + Puppeteer framework. See the dedicated guide if you’re writing tests with Playwright.**",
    "If you’re using the built-in local environment, you can run the e2e tests locally using this command:",
    "or interactively",
    "Sometimes it’s useful to observe the browser while running tests. Then, use this command:",
    "You can control the speed of execution with --puppeteer-slowmo:",
    "You can additionally have the devtools automatically open for interactive debugging in the browser:",
    "If using a different setup than wp-env, you first need to symlink the e2e test plugins to your test site, from your site’s plugins directory run:",
    "Then to run the tests, specify the base URL, username, and passwords for your site. For example, if your test site is at `http://wp.test`, use:",
    "If you find that end-to-end tests pass when run locally, but fail in GitHub Actions, you may be able to isolate a CPU- or network-bound race condition by simulating a slow CPU or network:",
    "THROTTLE_CPU is a slowdown factor (in this example, a 4x slowdown multiplier)",
    "See Chrome docs: setCPUThrottlingRate",
    "SLOW_NETWORK emulates a network speed equivalent to “Fast 3G” in the Chrome devtools.",
    "See Chrome docs: emulateNetworkConditions and NetworkManager.js",
    "OFFLINE emulates network disconnection.",
    "See Chrome docs: emulateNetworkConditions",
    "Every core block is required to have at least one set of fixture files for its main save function and one for each deprecation. These fixtures test the parsing and serialization of the block. See the integration tests fixtures readme for more information and instructions.",
    "A test is considered to be flaky when it can pass and fail across multiple retry attempts without any code changes. We auto retry failed tests at most twice on CI to detect and report them to GitHub issues automatically under the [Type] Flaky Test label via report-flaky-tests GitHub action. Note that a test that failed three times in a row is not counted as a flaky test and will not be reported to an issue.",
    "Tests for PHP use PHPUnit as the testing framework. If you’re using the built-in local environment, you can run the PHP tests locally using this command:",
    "To re-run tests automatically when files change (similar to Jest), run:",
    "Note: The phpunit commands require wp-env to be running and composer dependencies to be installed. The package script will start wp-env for you if it is not already running.",
    "In other environments, run composer run test and composer run test:watch.",
    "Code style in PHP is enforced using PHP_CodeSniffer. It is recommended that you install PHP_CodeSniffer and the WordPress Coding Standards for PHP_CodeSniffer ruleset using Composer. With Composer installed, run composer install from the project directory to install dependencies. The above npm run test:php will execute both unit tests and code linting. Code linting can be verified independently by running npm run lint:php.",
    "To run unit tests only, without the linter, use npm run test:unit:php instead.",
    "To ensure that the editor stays performant as we add features, we monitor the impact pull requests and releases can have on some key metrics:",
    "Performance tests are end-to-end tests running the editor and capturing these measures. Make sure you have an e2e testing environment ready.",
    "To set up the e2e testing environment, checkout the Gutenberg repository and switch to the branch that you would like to test. Run the following command to prepare the environment.",
    "To run the tests run the following command:",
    "This gives you the result for the current branch/code on the running environment.",
    "In addition to that, you can also compare the metrics across branches (or tags or commits) by running the following command ./bin/plugin/cli.js perf [branches], example:",
    "Finally, you can pass an additional --tests-branch argument to specify which branch’s performance test files you’d like to run. This is particularly useful when modifying/extending the perf tests:",
    "Note This command needs may take some time to perform the benchmark. While running make sure to avoid using your computer or have a lot of background process to minimize external factors that can impact the results across branches.",
    "This living document serves to prescribe coding guidelines specific to the Gutenberg project. Base coding guidelines follow the WordPress Coding Standards. The following sections outline additional patterns and conventions used in the Gutenberg project.",
    "To avoid class name collisions, class names must adhere to the following guidelines, which are loosely inspired by the BEM (Block, Element, Modifier) methodology.",
    "All class names assigned to an element must be prefixed with the name of the package, followed by a dash and the name of the directory in which the component resides. Any descendent of the component’s root element must append a dash-delimited descriptor, separated from the base by two consecutive underscores __.",
    "The root element is considered to be the highest ancestor element returned by the default export in the index.js. Notably, if your folder contains multiple files, each with their own default exported component, only the element rendered by that of index.js can be considered the root. All others should be treated as descendents.",
    "Consider the following component located at packages/components/src/notice/index.js:",
    "Components may be assigned with class names that indicate states (for example, an “active” tab or an “opened” panel). These modifiers should be applied as a separate class name, prefixed as an adjective expression by is- (is-active or is-opened). In rare cases, you may encounter variations of the modifier prefix, usually to improve readability (has-warning). Because a modifier class name is not contextualized to a specific component, it should always be written in stylesheets as accompanying the component being modified (.components-panel.is-opened).",
    "Consider again the Notices example. We may want to apply specific styling for dismissible notices. The classnames package can be a helpful utility for conditionally applying modifier class names.",
    "A component’s class name should never be used outside its own folder (with rare exceptions such as _z-index.scss). If you need to inherit styles of another component in your own components, you should render an instance of that other component. At worst, you should duplicate the styles within your own component’s stylesheet. This is intended to improve maintainability by isolating shared components as a reusable interface, reducing the surface area of similar UI elements by adapting a limited set of common components to support a varied set of use-cases.",
    "The build process will split SCSS from within the blocks library directory into two separate CSS files when Webpack runs.",
    "Styles placed in a style.scss file will be built into blocks/build/style.css, to load on the front end theme as well as in the editor. If you need additional styles specific to the block’s display in the editor, add them to an editor.scss.",
    "Examples of styles that appear in both the theme and the editor include gallery columns and drop caps.",
    "JavaScript in Gutenberg uses modern language features of the ECMAScript language specification as well as the JSX language syntax extension. These are enabled through a combination of preset configurations, notably @wordpress/babel-preset-default which is used as a preset in the project’s Babel configuration.",
    "While the staged process for introducing a new JavaScript language feature offers an opportunity to use new features before they are considered complete, the Gutenberg project and the @wordpress/babel-preset-default configuration will only target support for proposals which have reached Stage 4 (“Finished”).",
    "In the Gutenberg project, we use the ES2015 import syntax to enable us to create modular code with clear separations between code of a specific feature, code shared across distinct WordPress features, and third-party dependencies.",
    "These separations are identified by multi-line comments at the top of a file which imports code from another file or source.",
    "An external dependency is third-party code that is not maintained by WordPress contributors, but instead included in WordPress as a default script or referenced from an outside package manager like npm.",
    "To encourage reusability between features, our JavaScript is split into domain-specific modules which export one or more functions or objects. In the Gutenberg project, we’ve distinguished these modules under top-level directories. Each module serve an independent purpose, and often code is shared between them. For example, in order to localize its text, editor code will need to include functions from the i18n module.",
    "Within a specific feature, code is organized into separate files and folders. As is the case with external and WordPress dependencies, you can bring this code into scope by using the import keyword. The main distinction here is that when importing internal files, you should use relative paths specific to top-level directory you’re working in.",
    "Historically, Gutenberg has used the __experimental and __unstable prefixes to indicate that a given API is not yet stable and may be subject to change. This is a legacy convention which should be avoided in favor of the plugin-only API pattern or a private API pattern described below.",
    "The problem with using the prefixes was that these APIs rarely got stabilized or removed. As of June 2022, WordPress Core contained 280 publicly exported experimental APIs merged from the Gutenberg plugin during the major WordPress releases. Many plugins and themes started relying on these experimental APIs for essential features that couldn’t be accessed in any other way.",
    "The legacy __experimental APIs can’t be removed on a whim anymore. They became a part of the WordPress public API and fall under the WordPress Backwards Compatibility policy. Removing them involves a deprecation process. It may be relatively easy for some APIs, but it may require effort and span multiple WordPress releases for others.",
    "All in all, don’t use the __experimental prefix for new APIs. Use plugin-only APIs and private APIs instead.",
    "Plugin-only APIs are temporary values exported from a module whose existence is either pending future revision or provides an immediate means to an end.",
    "To External Consumers:",
    "There is no support commitment for plugin-only APIs. They can and will be removed or changed without advance warning, including as part of a minor or patch release. As an external consumer, you should avoid these APIs.",
    "To Project Contributors:",
    "An plugin-only API is one which is planned for eventual public availability, but is subject to further experimentation, testing, and discussion. It should be made stable or removed at the earliest opportunity.",
    "Plugin-only APIs are excluded from WordPress Core and only available in the Gutenberg Plugin:",
    "The public interface of such APIs is not yet finalized. Aside from references within the code, they APIs should neither be documented nor mentioned in any CHANGELOG. They should effectively be considered to not exist from an external perspective. In most cases, they should only be exposed to satisfy requirements between packages maintained in this repository.",
    "While a plugin-only API may often stabilize into a publicly-available API, there is no guarantee that it will.",
    "Each @wordpress package wanting to privately access or expose a private APIs can\ndo so by opting-in to @wordpress/private-apis:",
    "Each @wordpress package may only opt-in once. The process clearly communicates the extenders are not supposed\nto use it. This document will focus on the usage examples, but you can find out more about the @wordpress/private-apis package in the its README.md.",
    "Once the package opted-in, you can use the lock() and unlock() utilities:",
    "Keep reading to learn how to use lock() and unlock() to avoid publicly exporting\ndifferent kinds of private APIs.",
    "You can attach private selectors and actions to a public store:",
    "Remember to always register the private actions and selectors on the registered store.",
    "Sometimes that’s easy:",
    "However some package might call both createReduxStore and registerStore. In this case, always choose the store that gets registered:",
    "To add a private argument to a stable function you’ll need\nto prepare a stable and a private version of that function.\nThen, export the stable function and lock() the unstable function\ninside it:",
    "To add an private argument to a stable component you’ll need\nto prepare a stable and an private version of that component.\nThen, export the stable function and lock() the unstable function\ninside it:",
    "WordPress extenders cannot update the private block settings on their own. The updateSettings() actions of the @wordpress/block-editor store will filter out all the settings that are not a part of the public API. The only way to actually store them is via the private action __experimentalUpdateSettings().",
    "To privatize a block editor setting, add it to the privateSettings list in /packages/block-editor/src/store/actions.js:",
    "As of today, there is no way to restrict the block.json and theme.json APIs\nto the Gutenberg codebase. In the future, however, the new private APIs\nwill only apply to the core WordPress blocks and plugins and themes will not be\nable to access them.",
    "Finally, instead of introducing a new action creator, consider using a thunk:",
    "Some private APIs could benefit from community feedback and it makes sense to expose them to WordPress extenders. At the same time, it doesn’t make sense to turn them into a public API in WordPress core. What should you do?",
    "You can re-export that private API as a plugin-only API to expose it publicly only in the Gutenberg plugin:",
    "When possible, use shorthand notation when defining object property values:",
    "String literals should be declared with single-quotes unless the string itself contains a single-quote that would need to be escaped–in that case: use a double-quote. If the string contains a single-quote and a double-quote, you can use ES6 template strings to avoid escaping the quotes.",
    "Note: The single-quote character (') should never be used in place of an apostrophe (’) for words like it’s or haven’t in user-facing strings. For test code it’s still encouraged to use a real apostrophe.",
    "In general, avoid backslash-escaping quotes:",
    "You should use ES6 Template Strings over string concatenation whenever possible:",
    "Optional chaining is a new language feature introduced in version 2020 of the ECMAScript specification. While the feature can be very convenient for property access on objects which are potentially null-ish (null or undefined), there are a number of common pitfalls to be aware of when using optional chaining. These may be issues that linting and/or type-checking can help protect against at some point in the future. In the meantime, you will want to be cautious of the following items:",
    "It is preferred to implement all components as function components, using hooks to manage component state and lifecycle. With the exception of error boundaries, you should never encounter a situation where you must use a class component. Note that the WordPress guidance on Code Refactoring applies here: There needn’t be a concentrated effort to update class components in bulk. Instead, consider it as a good refactoring opportunity in combination with some other change.",
    "Gutenberg follows the WordPress JavaScript Documentation Standards, with additional guidelines relevant for its distinct use of import semantics in organizing files, the use of TypeScript tooling for types validation, and automated documentation generation using @wordpress/docgen.",
    "For additional guidance, consult the following resources:",
    "Define custom types using the JSDoc @typedef tag.",
    "A custom type should include a description, and should always include its base type.",
    "Custom types should be named as succinctly as possible, while still retaining clarity of meaning and avoiding conflict with other global or scoped types. A WP prefix should be applied to all custom types. Avoid superfluous or redundant prefixes and suffixes (for example, a Type suffix, or Custom prefix). Custom types are not global by default, so a custom type does not need to be excessively specific to a particular package. However, they should be named with enough specificity to avoid ambiguity or name collisions when brought into the same scope as another type.",
    "Note that there is no {Object} between @typedef and the type name. As @propertys below tells us that it is a type for objects, it is recommend to not use {Object} when you want to define types for your objects.",
    "Custom types can also be used to describe a set of predefined options. While the type union can be used with literal values as an inline type, it can be difficult to align tags while still respecting a maximum line length of 80 characters. Using a custom type to define a union type can afford the opportunity to describe the purpose of these options, and helps to avoid these line length issues.",
    "Note the use of quotes when defining a set of string literals. As in the JavaScript Coding Standards, single quotes should be used when assigning a string literal either as the type or as a default function parameter, or when specifying the path of an imported type.",
    "Use the TypeScript import function to import type declarations from other files or third-party dependencies.",
    "Since an imported type declaration can occupy an excess of the available line length and become verbose when referenced multiple times, you are encouraged to create an alias of the external type using a @typedef declaration at the top of the file, immediately following the import groupings.",
    "Note that all custom types defined in another file can be imported.",
    "When considering which types should be made available from a WordPress package, the @typedef statements in the package’s entry point script should be treated as effectively the same as its public API. It is important to be aware of this, both to avoid unintentionally exposing internal types on the public interface, and as a way to expose the public types of a project.",
    "In this snippet, the @typedef will support the usage of the previous example’s import('@wordpress/data').",
    "Many third-party dependencies will distribute their own TypeScript typings. For these, the import semantics should “just work”.",
    "<img src=\"https://user-images.githubusercontent.com/1779930/70167742-62198800-1695-11ea-9c21-82a91d4a60e2.png\" alt=\"Working Example: import type” />",
    "If you use a TypeScript integration for your editor, you can typically see that this works if the type resolves to anything other than the fallback any type.",
    "For packages which do not distribute their own TypeScript types, you are welcomed to install and use the DefinitelyTyped community-maintained types definitions, if one exists.",
    "When documenting a generic type such as Object, Function, Promise, etc., always include details about the expected record types.",
    "When an object is used as a dictionary, you can define its type in 2 ways: indexable interface ({[setting:string]:any}) or Record. When the name of the key for an object provides hints for developers what to do like setting, use indexable interface. If not, use Record.",
    "The function expression here uses TypeScript’s syntax for function types, which can be useful in providing more detailed information about the names and types of the expected parameters. For more information, consult the TypeScript @type tag function recommendations.",
    "In more advanced cases, you may define your own custom types as a generic type using the TypeScript @template tag.",
    "Similar to the “Custom Types” advice concerning type unions and with literal values, you can consider to create a custom type @typedef to better describe expected key values for object records, or to extract a complex function signature.",
    "You can express a nullable type using a leading ?. Use the nullable form of a type only if you’re describing either the type or an explicit null value. Do not use the nullable form as an indicator of an optional parameter.",
    "Similarly, use the undefined type only if you’re expecting an explicit value of undefined.",
    "If a parameter is optional, use the square-bracket notation. If an optional parameter has a default value which can be expressed as a default parameter in the function expression, it is not necessary to include the value in JSDoc. If the function parameter has an effective default value which requires complex logic and cannot be expressed using the default parameters syntax, you can choose to include the default value in the JSDoc.",
    "When a function does not include a return statement, it is said to have a void return value. It is not necessary to include a @return tag if the return type is void.",
    "If a function has multiple code paths where some (but not all) conditions result in a return statement, you can document this as a union type including the void type.",
    "When documenting a function type, you must always include the void return value type, as otherwise the function is inferred to return a mixed (“any”) value, not a void result.",
    "Because the documentation generated using the @wordpress/docgen tool will include @example tags if they are defined, it is considered a best practice to include usage examples for functions and components. This is especially important for documented members of a package’s public API.",
    "When documenting an example, use the markdown \\`\\`\\` code block to demarcate the beginning and end of the code sample. An example can span multiple lines.",
    "When possible, all components should be implemented as function components, using hooks for managing component lifecycle and state.",
    "Documenting a function component should be treated the same as any other function. The primary caveat in documenting a component is being aware that the function typically accepts only a single argument (the “props”), which may include many property members. Use the dot syntax for parameter properties to document individual prop types.",
    "For class components, there is no recommendation for documenting the props of the component. Gutenberg does not use or endorse the propTypes static class member.",
    "We use\nphpcs (PHP_CodeSniffer) with the WordPress Coding Standards ruleset to run a lot of automated checks against all PHP code in this project. This ensures that we are consistent with WordPress PHP coding standards.",
    "The easiest way to use PHPCS is local environment. Once that’s installed, you can check your PHP by running npm run lint:php.",
    "If you prefer to install PHPCS locally, you should use composer. Install composer on your computer, then run composer install. This will install phpcs and WordPress-Coding-Standards which you can then run via composer lint.",
    "This documentation is intended to help you get started using git with Gutenberg. Git is a powerful source code management tool; to learn git deeply, check out the Pro Git book available free online under CC BY-NC-SA 3.0 license.",
    "If you are unfamiliar with using git, it is worthwhile to explore and play with it. Try out the git tutorial as well as the git user manual for help getting started.",
    "The Gutenberg project follows a standard pull request process for contributions. See GitHub’s documentation for additional details about pull requests.",
    "An overview of the process for contributors is:",
    "See the repository management document for additional information on how the Gutenberg project uses GitHub.",
    "The workflow for code and documentation is the same, since both are managed in GitHub. You can watch a video walk-through of contributing documentation and the accompanying slides for contributing to Gutenberg.",
    "Here is a visual overview of the Git workflow:",
    "Step 1: Go to the Gutenberg repository on GitHub and click Fork. This creates a copy of the main Gutenberg repository to your account.",
    "Step 2: Clone your forked repository locally. It is located at: `https://github.com/YOUR-USER-NAME/gutenberg`. Cloning copies all the files to your computer. Open a terminal and run:",
    "This will create a directory called gutenberg with all the files for the project. It might take a couple of minutes because it is downloading the entire history of the Gutenberg project.",
    "Step 3: Create a branch for your change (see below for branch naming). For this example, the branch name is the complete string: update/my-branch",
    "Step 4: Make the code changes. Build, confirm, and test your change thoroughly. See coding guidelines and testing overview for guidance.",
    "Step 5: Commit your change with a good commit message. This will commit your change to your local copy of the repository.",
    "Step 6: Push your change up to GitHub. The change will be pushed to your fork of the repository on the GitHub",
    "Step 7: Go to your forked repository on GitHub — it will automatically detect the change and give you a link to create a pull request.",
    "Step 8: Create the pull request. This will create the request on the WordPress Gutenberg repository to integrate the change from your forked repository.",
    "Step 9: Keep up with new activity on the pull request. If any additional changes or updates are requested, then make the changes locally and push them up, following Steps 4-6.",
    "Do not make a new pull request for updates; by pushing your change to your repository it will update the same PR. In this sense, the PR is a pointer on the WordPress Gutenberg repository to your copy. So when you update your copy, the PR is also updated.",
    "That’s it! Once approved and merged, your change will be incorporated into the main repository. 🎉",
    "You should name your branches using a prefixes and short description, like this: [type]/[change].",
    "Suggested prefixes:",
    "For example, add/gallery-block means you’re working on adding a new gallery block.",
    "When many different people are working on a project simultaneously, pull requests can go stale quickly. A “stale” pull request is one that is no longer up to date with the main line of development, and it needs to be updated before it can be merged into the project.",
    "There are two ways to do this: merging and rebasing. In Gutenberg, the recommendation is to rebase. Rebasing means rewriting your changes as if they’re happening on top of the main line of development. This ensures the commit history is always clean and linear. Rebasing can be performed as many times as needed while you’re working on a pull request. Do share your work early on by opening a pull request and keeping your history rebase as you progress.",
    "The main line of development is known as the trunk branch. If you have a pull-request branch that cannot be merged into trunk due to a conflict (this can happen for long-running pull requests), then in the course of rebasing you’ll have to manually resolve any conflicts in your local copy. Learn more in section Perform a rebase of How to Rebase a Pull Request.",
    "Once you have resolved any conflicts locally you can update the pull request with git push --force-with-lease. Using the --force-with-lease parameter is important to guarantee that you don’t accidentally overwrite someone else’s work.",
    "To sum it up, you need to fetch any new changes in the repository, rebase your branch on top of trunk, and push the result back to the repository. These are the corresponding commands:",
    "Working on pull request starts with forking the Gutenberg repository, your separate working copy. Which can easily go out of sync as new pull requests are merged into the main repository. Here your working repository is a fork and the main Gutenberg repository is upstream. When working on new pull request you should always update your fork before you do git checkout -b my-new-branch to work on a feature or fix.",
    "You will need to add an upstream remote in order to keep your fork updated.",
    "To sync your fork, you first need to fetch the upstream changes and merge them into your local copy:",
    "Once your local copy is updated, push your changes to update your fork on GitHub:",
    "The above commands will update your trunk branch from upstream. To update any other branch replace trunk with the respective branch name.",
    "When looking for a commit that introduced a specific change, it might be helpful to ignore revisions that only contain styling or formatting changes.",
    "Fortunately, newer versions of git gained the ability to skip commits in history:",
    "All styling and formatting revisions are tracked using the .git-blame-ignore-revs file in the Gutenberg repository. You can use this file to ignore them all at once:",
    "The following guide is for setting up your local environment to contribute to the Gutenberg project. There is significant overlap between an environment to contribute and an environment used to extend the WordPress block editor. You can review the Development Environment tutorial for additional setup information.",
    "We recommend using the Node Version Manager (nvm) since it is the easiest way to install and manage node for macOS, Linux, and Windows 10 using WSL2. See our Development Tools guide or the Nodejs site for additional installation instructions.",
    "[Recommended] Docker Desktop\nWe recommend using the wp-env package for setting WordPress environment locally. You’ll need to install Docker to use wp-env. See the Development Environment tutorial for additional details.",
    "Note: To install Docker on Windows 10 Home Edition, follow the install instructions from Docker for Windows with WSL2.",
    "As an alternative to Docker setup, you can use Local, WampServer, or MAMP, or even use a remote server.",
    "Fork the Gutenberg repository, clone it to your computer and add the WordPress repository as upstream.",
    "Install the Gutenberg dependencies and build your code in development mode:",
    "Note: The install scripts require Python to be installed and in the path of the local system. This might be installed by default for your operating system, or require downloading and installing.",
    "There are two ways to build your code. While developing, you probably will want to use npm run dev to run continuous builds automatically as source files change. The dev build also includes additional warnings and errors to help troubleshoot while developing. Once you are happy with your changes, you can run npm run build to create optimized production build.",
    "Once built, Gutenberg is ready to be used as a WordPress plugin!",
    "To test a WordPress plugin, you need to have WordPress itself installed. If you already have a WordPress environment setup, use the above Gutenberg build as a standard WordPress plugin by putting the gutenberg directory in your wp-content/plugins/ directory.",
    "If you do not have a local WordPress environment setup, follow the steps in the rest of this section to create one.",
    "The wp-env package was developed with the Gutenberg project as a quick way to create a standard WordPress environment using Docker. It is also published as the @wordpress/env npm package.",
    "By default, wp-env can run in a plugin directory to create and run a WordPress environment, mounting and activating the plugin automatically. You can also configure wp-env to use existing installs, multiple plugins, or themes. See the wp-env package for complete documentation.",
    "Make sure Docker is running, and start wp-env from within the gutenberg directory:",
    "This script will create a Docker instance behind the scenes with the latest WordPress Docker image, and then will map the Gutenberg plugin code from your local copy to the environment as a Docker volume. This way, any changes you make to the code locally are reflected immediately in the WordPress instance.",
    "Note: npm run will use the wp-env / WordPress?? version specified within the Gutenberg project, making sure you are running the latest wp-env version.",
    "To stop the running environment:",
    "If everything went well, you should see the following message in your terminal:",
    "And if you open Docker dashboard by rightclicking the icon in the menu bar(on Mac) or system tray (on Linux and Windows) and selecting ‘Dashboard’, you will see that the script has downloaded some Docker Images, and is running a Docker Container with fully functional WordPress installation:",
    "To destroy the install completely:",
    "Explore the package documentation for additional commands.",
    "The WordPress installation should now be available at `http://localhost:8888`",
    "You can access the Dashboard at: http://localhost:8888/wp-admin/` using **Username**:admin, **Password**:password`. You’ll notice the Gutenberg plugin installed and activated, this is your local build.",
    "To access the MySQL database on the wp-env instance you will first need the connection details. To do this:",
    "MySQL is listening on port {MYSQL_PORT_NUMBER}",
    "Please note: the MySQL port number will change each time wp-env restarts. If you find you can no longer access your database, simply repeat the steps above to find the new port number and restore your connection.",
    "Tip: Sequel Ace is a useful GUI tool for accessing a MySQL database. Other tools are available and documented in this article on accessing the WordPress database.",
    "If you run into an issue, check the troubleshooting section in wp-env documentation.",
    "As an alternative to Docker and wp-env, you can also use Local, WampServer, or MAMP to run a local WordPress environment. To do so clone and install Gutenberg as a regular plugin in your installation by creating a symlink or copying the directory to the proper wp-content/plugins directory.",
    "You will also need some extra configuration to be able to run the e2e tests.",
    "Change the current directory to the plugins folder and symlink all e2e test plugins:",
    "You’ll need to run this again if new plugins are added. To run e2e tests:",
    "You’ll need to disable OPCache in order to correctly work on PHP files. To fix:",
    "By default, the web server (Apache) launched by MAMP will listen to all incoming connections, not just local ones. This means that anyone on the same local network (and, in certain cases, anyone on the Internet) can access your web server. This may be intentional and useful for testing sites on other devices, but most often this can be a privacy or security issue. Keep this in mind and don’t store sensitive information in this server.",
    "While it is possible to fix this, you should fix it at your own risk, since it breaks MAMP’s ability to parse web server configurations and, as a result, makes MAMP think that Apache is listening to the wrong port. Consider switching away from MAMP. Otherwise, you can use the following:",
    "You may like to create links in your plugins and themes directories to other folders, e.g.",
    "If so, you need to instruct Apache to allow following such links:",
    "Tools like MAMP tend to configure MySQL to use ports other than the default 3306, often preferring 8889. This may throw off WP-CLI, which will fail after trying to connect to the database. To remedy this, edit wp-config.php and change the DB_HOST constant from define( 'DB_HOST', 'localhost' ) to define( 'DB_HOST', '127.0.0.1:8889' ).",
    "You can use a remote server in development by building locally and then uploading the built files as a plugin to the remote server.",
    "To build: open a terminal (or if on Windows, a command prompt) and navigate to the repository you cloned. Now type npm ci to get the dependencies all set up. Once that finishes, you can type npm run build.",
    "After building the cloned gutenberg directory contains the complete plugin, you can upload the entire repository to your wp-content/plugins directory and activate the plugin from the WordPress admin.",
    "Another way to upload after building is to run npm run build:plugin-zip to create a plugin zip file — this requires bash and php to run. The script creates gutenberg.zip that you can use to install Gutenberg through the WordPress admin.",
    "Storybook is an open source tool for developing UI components in isolation for React, React Native and more. It makes building stunning UIs organized and efficient.",
    "The Gutenberg repository also includes Storybook integration that allows testing and developing in a WordPress-agnostic context. This is very helpful for developing reusable components and trying generic JavaScript modules without any backend dependency.",
    "You can launch Storybook by running npm run storybook:dev locally. It will open in your browser automatically.",
    "You can also test Storybook for the current trunk branch on GitHub Pages: https://wordpress.github.io/gutenberg/",
    "We recommend configuring your editor to automatically check for syntax and lint errors. This will help you save time as you develop by automatically fixing minor formatting issues. Here are some directions for setting up Visual Studio Code, a popular editor used by many of the core developers, these tools are also available for other editors.",
    "EditorConfig defines a standard configuration for setting up your editor, for example using tabs instead of spaces. You should install the EditorConfig for VS Code extension and it will automatically configure your editor to match the rules defined in .editorconfig.",
    "ESLint statically analyzes the code to find problems. The lint rules are integrated in the continuous integration process and must pass to be able to commit. You should install the ESLint Extension for Visual Studio Code, see eslint docs for more editor integrations.",
    "With the extension installed, ESLint will use the .eslintrc.js file in the root of the Gutenberg repository for formatting rules. It will highlight issues as you develop, you can also set the following preference to fix lint rules on save.",
    "Prettier is a tool that allows you to define an opinionated format, and automate fixing the code to match that format. Prettier and ESlint are similar, Prettier is more about formatting and style, while ESlint is for detecting coding errors.",
    "To use Prettier with Visual Studio Code, you should install the Prettier – Code formatter extension. You can then configure it to be the default formatter and to automatically fix issues on save, by adding the following to your settings. Note: depending on where you are viewing this document, the brackets may show as double, the proper format is just a single bracket.",
    "This will use the .prettierrc.js file included in the root of the Gutenberg repository. The config is included from the @wordpress/prettier-config package.",
    "If you only want to use this configuration with the Gutenberg project, create a directory called .vscode at the top-level of Gutenberg, and place your settings in a settings.json there. Visual Studio Code refers to this as Workplace Settings, and only apply to the project.",
    "For other editors, see Prettier’s Editor Integration docs",
    "TypeScript is a typed superset of JavaScript language. The Gutenberg project uses TypeScript via JSDoc to type check JavaScript files. If you use Visual Studio Code, TypeScript support is built-in, otherwise see TypeScript Editor Support for editor integrations.",
    "A guide on how to get started contributing code to the Gutenberg project.",
    "The Make WordPress Core blog is the primary spot for the latest information around WordPress development: including announcements, product goals, meeting notes, meeting agendas, and more.",
    "Real-time discussions for development take place in #core-editor and #core-js channels in Make WordPress Slack (registration required). Weekly meetings for the editor component are on Wednesdays at 14:00UTC, and for the JavaScript component on Tuesday at 15:00UTC, in their respective Slack channels.",
    "Browse the issues list to find issues to work on. The good first issue and good first review labels are good starting points.",
    "Welcome to the Gutenberg Project Contributor Guide. This guide is here to help you get setup and start contributing to the project. If you have any questions, you’ll find us in the #core-editor channel in the WordPress Core Slack, free to join.",
    "Gutenberg is a sub-project of Core WordPress. Please see the Core Contributor Handbook for additional information.",
    "Find the section below based on what you are looking to contribute:",
    "Design? See the design section.",
    "Documentation? See the documentation section",
    "Triage Support? See the triaging issues section",
    "Internationalization? See the localizing and translating section",
    "The Gutenberg project uses GitHub for managing code and tracking issues. Please see the following sections for the project methodologies using GitHub.",
    "Pull Requests",
    "Teams and Projects",
    "See the Contributing Guidelines for the rules around contributing: This includes the code of conduct and licensing information.",
    "A set of links and resources covering the history of the Gutenberg project, how it got started, sources of inspiration, and initial thinking.",
    "There was a survey done: https://make.wordpress.org/core/2017/04/07/editor-experience-survey-results/",
    "This includes a list of historical articles and influences on the Gutenberg project.",
    "An object describing the attributes shape of a block. The keys can be named as most appropriate to describe the state of a block type. The value for each key is a function which describes the strategy by which the attribute value should be extracted from the content of a saved post’s content. When processed, a new object is created, taking the form of the keys defined in the attribute sources, where each value is the result of the attribute source function.",
    "The object representation of the current state of a block in post content. When loading a saved post, this is determined by the attribute sources for the block type. These values can change over time during an editing session when the user modifies a block, and are used when determining how to serialize the block.",
    "The abstract term used to describe units of markup that, composed together, form the content or layout of a webpage. The idea combines concepts of what in WordPress today we achieve with shortcodes, custom HTML, and embed discovery into a single consistent API and user experience.",
    "The CSS styles that are part of the block, either via its stylesheet or via the block markup itself. For example, a class attached to the block markup is considered block styles.",
    "Compare to Global Styles. In contraposition to Global Styles, block styles are sometimes referred to as Local Styles.",
    "Learn more about Block Styles.",
    "An API for blocks to declare what features they support. By declaring support for a feature, the API would add additional attributes to the block and matching UI controls for most of the existing block supports.",
    "See Block Supports reference documentation for a deep dive into the API.",
    "A theme built in block forward way that allows Full Site Editing to work. The core of a block theme are its block templates and block template parts. To date, block theme templates have been HTML files of block markup that map to templates from the standard WordPress template hierarchy.",
    "These are not a WordPress taxonomy, but instead used internally to sort blocks in the Block Library.",
    "Primary interface for selecting from the available blocks, triggered by plus icon buttons on Blocks or in the top-left of the editor interface.",
    "A unique identifier for a block type, consisting of a plugin-specific namespace and a short label describing the block’s intent. e.g. core/image",
    "A template is a pre-defined arrangement of blocks, possibly with predefined attributes or placeholder content. You can provide a template for a post type, to give users a starting point when creating a new piece of content, or inside a custom block with the InnerBlocks component. At their core, templates are simply HTML files of block markup that map to templates from the standard WordPress template hierarchy, for example index, single or archive. This helps control the front-end defaults of a site that are not edited via the Page Editor or the Post Editor. See the templates documentation for more information.",
    "Building on Block Templates, these parts help set structure for reusable items like a Footer or Header that one typically sees in a WordPress site. They are primarily site structure and are never to be mixed with the post content editor. With Full Site Editing and block based themes, users can create their own arbitrary Template Parts, save those in the database for their site, and re-use them throughout their site. Template parts are equivalent – in blocks – of theme template parts. They are generally defined by a theme first, carry some semantic meaning (could be swapped between themes such as a header), and can only be inserted in the site editor context (within “templates”).",
    "In contrast with the blocks composing a particular post, a block type describes the blueprint by which any block of that type should behave. So while there may be many images within a post, each behaves consistent with a unified image block type definition.",
    "A block which embeds the TinyMCE editor as a block, TinyMCE was the base of the previous core editor. Older content created prior to the block editor will be loaded in to a single Classic block.",
    "A type of block where the content of which may change and cannot be determined at the time of saving a post, instead calculated any time the post is shown on the front of a site. These blocks may save fallback content or no content at all in their JavaScript implementation, instead deferring to a PHP block implementation for runtime rendering.",
    "This refers to a collection of features that ultimately allows users to edit their entire website using blocks as the starting point. This feature set includes everything from block patterns to global styles to templates to design tools for blocks (and more). First released in WordPress 5.9.",
    "The CSS styles generated by WordPress and enqueued as an embedded stylesheet in the front end of the site. The stylesheet ID is global-styles-inline-css. The contents of this stylesheet come from the default theme.json of WordPress, the theme’s theme.json, and the styles provided by the user via the global styles sidebar in the site editor.",
    "See theme.json reference docs, the how to guide, and an introduction to styles in the block editor.",
    "Compare to block styles.",
    "Deprecated term. See Settings Sidebar.",
    "See Block Styles.",
    "A block that allows you to edit a site’s navigation menu, both in terms of structure and design.",
    "Patterns are predefined layouts of blocks that can be inserted as starter content that are meant to be changed by the user every time. Once inserted, they exist as a local save and are not global.",
    "A sidebar region containing metadata fields for the post, including scheduling, visibility, terms, and featured image.",
    "A block that replicates the classic WP_Query and allows for further customization with additional functionality.",
    "A block that is saved and then can be shared as a reusable, repeatable piece of content.",
    "A common component enabling rich content editing including bold, italics, hyperlinks, etc.",
    "The process of converting a block’s attributes object into HTML markup, which occurs each time a block is edited.",
    "The panel on the right that contains the document and block settings. The sidebar is toggled using the Settings gear icon. Block settings are shown when a block is selected, otherwise document settings are shown.",
    "The cohesive experience that allows you to directly edit and navigate between various templates, template parts, styling options, and more.",
    "A type of block where the content of which is known at the time of saving a post. A static block will be saved with HTML markup directly in post content.",
    "A scaled down direct editing experience allowing you to edit/change/create the template a post/page uses.",
    "Blocks that accomplish everything possible in traditional templates using template tags (ex: Post Author Block). A full list can be found here.",
    "TinyMCE is a web-based JavaScript WYSIWYG (What You See Is What You Get) editor.",
    "A set of button controls. In the context of a block, usually referring to the toolbar of block controls shown above the selected block.",
    "What follows is a set of questions that have come up from the last few years of Gutenberg development. If you have any questions you’d like to have answered and included here, just open up a GitHub issue with your question. We’d love the chance to answer and provide clarity to questions we might not have thought to answer. For a look back historically, please see Matt’s November 2018 post WordPress 5.0: A Gutenberg FAQ.",
    "“Gutenberg” is the name of the project to create a new editor experience for WordPress — contributors have been working on it since January 2017 and it’s one of the most significant changes to WordPress in years. It’s built on the idea of using “blocks” to write and design posts and pages. This will serve as the foundation for future improvements to WordPress, including blocks as a way not just to design posts and pages, but also entire sites. The overall goal is to simplify the first-time user experience of WordPress — for those who are writing, editing, publishing, and designing web pages. The editing experience is intended to give users a better visual representation of what their post or page will look like when they hit publish. Originally, this was the kickoff goal:",
    "The editor will endeavour to create a new page and post building experience that makes writing rich posts effortless, and has “blocks” to make it easy what today might take shortcodes, custom HTML, or “mystery meat” embed discovery.",
    "Key takeaways include the following points:",
    "Gutenberg is developed on GitHub under the WordPress organization. The block editor has been available in core WordPress since 5.0. If you want to test upcoming features from Gutenberg project, it is available in the plugin repository.",
    "There are four phases of Gutenberg which you can see on the official WordPress roadmap. As of writing this, we’re currently in phase 2:",
    "The editor focus started in early 2017 with the first three months spent designing, planning, prototyping, and testing prototypes, to help us inform how to approach this project. The first plugin was launched during WordCamp Europe in June 2017.",
    "Gutenberg was first merged into WordPress 5.0 in December 2018. See the versions in WordPress page for a complete list of Gutenberg plugin versions merged into WordPress core releases.",
    "The Editor is where most of the action happens in WordPress’s daily use, and it was a place where we could polish and perfect the block experience in a contained environment. Further, as an open-source project, we believe that it is critical for WordPress to continue to innovate and keep working to make the core experience intuitive and enjoyable for all users. As a community project, Gutenberg has the potential to do just that, and we’re excited to pursue this goal together. If you’d like to test, contribute, or offer feedback, we welcome you to share what you find on GitHub.",
    "The classic WordPress editor is an open text window—it’s always been a wonderful blank canvas for writing, but when it comes to building posts and pages with images, multimedia, embedded content from social media, polls, and other elements, it required a mix of different approaches that were not always intuitive:",
    "As we thought about these uses and how to make them obvious and consistent, we began to embrace the concept of “blocks.” All of the above items could be blocks: easy to search and understand, and easy to dynamically shift around the page. The block concept is very powerful, and when designed thoughtfully, can offer an outstanding editing and publishing experience. Ultimately, the idea with blocks is to create a new common language across WordPress, a new way to connect users to plugins, and replace a number of older content types — things like shortcodes and widgets — that one usually has to be well-versed in the idiosyncrasies of WordPress to understand.",
    "Our goal with Gutenberg is not just to create a seamless post- and page-building experience. We also want to ensure that it provides a seamless writing experience. To test this out yourself, head to this demo and give it a try!",
    "No. TinyMCE is only used for the “Classic” block.",
    "Yes. There are a lot! There is a help modal showing all available keyboard shortcuts.",
    "You can see the whole list going to the top right corner menu of the new editor and clicking on “Keyboard Shortcuts” (or by using the keyboard shortcut Shift+Alt+H on Linux/Windows and ⌃⌥H on macOS).",
    "This is the canonical list of keyboard shortcuts:",
    "Here is a brief animation illustrating how to find and use the keyboard shortcuts:",
    "Yes, a columns block is available in Gutenberg.",
    "Yes, it is supported. You can have multiple levels of nesting – blocks within blocks within blocks. See the Nested Block Tutorial for more information.",
    "Yes, you can drag and drop blocks to rearrange their order.",
    "The best place to start is the Create a Block Tutorial.",
    "No, we are designing Gutenberg primarily as a replacement for the post and page editing screens. That said, front-end editing is often confused with an editor that looks exactly like the front end. And that is something that Gutenberg will allow as themes customize individual blocks and provide those styles to the editor. Since content is designed to be distributed across so many different experiences—from desktop and mobile to full-text feeds and syndicated article platforms—we believe it’s not ideal to create or design posts from just one front-end experience.",
    "See the Meta Box Tutorial for more information on using Meta boxes with the new block editor.",
    "The main extension point we want to emphasize is creating new blocks. Blocks are added to the block editor using plugins, see the Create a Block Tutorial to get started.",
    "Indeed. There are multiple ways in which custom post types can leverage Gutenberg. The plan is to allow them to specify the blocks they support, as well as defining a default block for the post type. It’s not currently the case, but if a post type disables the content field, the “advanced” section at the bottom would fill the page.",
    "Yes. Blocks can provide their own styles, which themes can add to or override, or they can provide no styles at all and rely fully on what the theme provides.",
    "Blocks are able to provide base structural CSS styles, and themes can add styles on top of this. Some blocks, like a Separator (<hr/>), likely don’t need any front-end styles, while others, like a Gallery, need a few.",
    "Other features, like the new wide and full-wide alignment options, are simply CSS classes applied to blocks that offer this alignment. We are looking at how a theme can opt in to this feature, for example using add_theme_support.",
    "This is currently a work in progress and we recommend reviewing the block based theme documentation to learn more.",
    "No, block variations are different versions of a single base block, sharing a similar functionality, but with slight differences in their implementation, or settings (attributes, InnerBlocks,etc). Block variations are transparent for users, and once there is a registered block variation, it will appear as a new block. For example, the embed block registers different block variations to embed content from specific providers.",
    "Meanwhile, block styles allow you to provide alternative styles to existing blocks, and they work by adding a className to the block’s wrapper. Once a block has registered block styles, a block style selector will appear in its sidebar so that users can choose among the different registered styles.",
    "Regular editor styles are opt-in and work as is in most cases. Themes can also load extra stylesheets by using the following hook:",
    "See: Editor Styles",
    "Gutenberg works in modern browsers.",
    "The list of supported browsers can be found in the Make WordPress handbook. The term “modern browsers” generally refers to the current and previous two versions of each major browser.",
    "Since WordPress 5.8, Gutenberg no longer supports any version of Internet Explorer.",
    "The goal of Gutenberg is not to put anyone out of business. It’s to evolve WordPress so there’s more business to be had in the future, for everyone.",
    "Aside from enabling a rich post and page building experience, a meta goal is to move WordPress forward as a platform. Not only by modernizing the UI, but by modernizing the foundation.",
    "We realize it’s a big change. We also think there will be many new opportunities for plugins. WordPress is likely to ship with a range of basic blocks, but there will be plenty of room for highly tailored premium plugins to augment existing blocks or add new blocks to the mix.",
    "There is a “Classic” block, which is virtually the same as the current editor, except in block form.",
    "There is also the Classic Editor plugin which restores the previous editor, see the plugin for more information. The WordPress Core team has committed to supporting the Classic Editor plugin until December 2021.",
    "Custom TinyMCE buttons still work in the “Classic” block, which is a block version of the classic editor you know today.",
    "Gutenberg comes with a new universal inserter tool, which gives you access to every block available, searchable, sorted by recency and categories. This inserter tool levels the playing field for every plugin that adds content to the editor, and provides a single interface to learn how to use.",
    "Shortcodes continue to work as they do now.",
    "However we see the block as an evolution of the [shortcode]. Instead of having to type out code, you can use the universal inserter tray to pick a block and get a richer interface for both configuring the block and previewing it. We would recommend people eventually upgrade their shortcodes to be blocks.",
    "We think so for a variety of reasons including but not limited to:",
    "Ultimately, Blocks are designed to be visually representative of the final look, and, with the launch of the Block Directory in 5.5, they will become the expected way in which users will discover and insert content in WordPress.",
    "Accessibility is not an afterthought. Not every aspect of Gutenberg is accessible at the moment. You can check logged issues here. We understand that WordPress is for everyone, and that accessibility is about inclusion. This is a key value for us.",
    "If you would like to contribute to the accessibility of Gutenberg, we can always use more people to test and contribute.",
    "Our approach—as outlined in the technical overview introduction—is to augment the existing data format in a way that doesn’t break the decade-and-a-half-fabric of content WordPress provides. In other terms, this optimizes for a format that prioritizes human readability (the HTML document of the web) and easy-to-render-anywhere over a machine convenient file (JSON in post-meta) that benefits the editing context primarily.",
    "This also gives us the flexibility to store those blocks that are inherently separate from the content stream (reusable pieces like widgets or small post type elements) elsewhere, and just keep token references for their placement.",
    "We suggest you look at the Gutenberg key concepts to learn more about how this aspect of the project works.",
    "In JS:",
    "In PHP:",
    "The WordPress Design team uses Figma to collaborate and share work. If you’d like to contribute, join the #design channel in Slack and ask the team to set you up with a free Figma account. This will give you access to a helpful library of components used in WordPress. They are stable, fully supported, up to date, and ready for use in designs and prototypes.",
    "Getting started with Figma",
    "Top Online Tutorials to Learn Figma for UI/UX Design",
    "Take a Tour Around Figma",
    "Getting started with Figma files and projects",
    "What are files?",
    "What are projects?",
    "Video tutorial",
    "FAQ",
    "Getting started with components",
    "What are components?",
    "How to turn on the WordPress Components library in Figma",
    "How to refine or contribute to the WordPress components React library (Coming soon)",
    "WordPress components in Figma mirror the live React components. Documentation for how to refine or contribute to WordPress components in React is coming soon.",
    "If you have questions, please don’t hesitate to ask in the #design channel on the WordPress community Slack.",
    "Animation can help reinforce a sense of hierarchy and spatial orientation. This document goes into principles you should follow when you add animation.",
    "In creating consistent animations, we have to establish physical rules for how elements behave when animated. When all animations follow these rules, they feel consistent, related, and predictable. An animation should match user expectations, if it doesn’t, it’s probably not the right animation for the job.",
    "Reuse animations if one already exists for your task.",
    "The generic Animate component is used to animate different parts of the interface. See the component documentation for more details about the available animations.",
    "The following are best practices for designing a new block, with recommendations and detailed descriptions of existing blocks to illustrate our approach to creating blocks.",
    "Since the block itself represents what will actually appear on the site, interaction here hews closest to the principle of direct manipulation and will be most intuitive to the user. This should be thought of as the primary interface for adding and manipulating content and adjusting how it is displayed. There are two ways of interacting here:",
    "Basic block settings won’t always make sense in the context of the placeholder/content UI. As a secondary option, options that are critical to the functionality of a block can live in the block toolbar. The Block Toolbar is still highly contextual and visible on all screen sizes. One notable constraint with the Block Toolbar is that it is icon-based UI, so any controls that live in the Block Toolbar need to be ones that can effectively be communicated via an icon or icon group.",
    "The Block Toolbar groups controls in segments, hierarchically. The first segment contains block type controls, such as the block switcher, the drag handle, and the mover control. The second group contains common and specific block tools that affect the entire block, followed by inline formatting, and the “More” menu. Optionally “Meta” or “Other” groups can separate some tools in their own segment.",
    "The Settings Sidebar is not visible by default on a small / mobile screen, and may also be collapsed in a desktop view. Therefore, it should not be relied on for anything that is necessary for the basic operation of the block. Pick good defaults, make important actions available in the block toolbar, and think of the Settings Sidebar as something that most users should not need to open.",
    "In addition, use sections and headers in the Settings Sidebar if there are more than a handful of options, in order to allow users to easily scan and understand the options available.",
    "Each Settings Sidebar comes with an “Advanced” section by default. This area houses an “Additional CSS Class” field, and should be used to house other power user controls.",
    "Setup states, sometimes referred to as “placeholders”, can be used to walk users through an initial process before showing the live preview state of the block. The setup process gathers information from the user that is needed to render the block. A block’s setup state is indicated with a grey background to provide clear differentiation for the user. Not all blocks have setup states — for example, the Paragraph block.",
    "A setup state is not necessary if:",
    "Use a setup state if:",
    "For blocks that do have setup states, once the user has gone through the setup process, the placeholder is replaced with the live preview state of that block.",
    "When the block is selected, additional controls may be revealed to customize the block’s contents. For example, when the image gallery is selected, it reveals controls to remove or add images.",
    "In most cases, a block’s setup state is only shown once and then further customization is done via the live preview state. However, in some cases it might be desirable to allow the user to return to the setup state — for example, if all the block content has been deleted or via a link from the block’s toolbar or sidebar.",
    "Group toolbar controls in logical segments. Don’t add a segment for each.",
    "A block should have a straightforward, short name so users can easily find it in the block library. A block named “YouTube” is easy to find and understand. The same block, named “Embedded Video (YouTube)”, would be less clear and harder to find in the block library.",
    "When referring to a block in documentation or UI, use title case for the block title and lowercase for the “block” descriptor. For example:",
    "Blocks should have an identifying icon, ideally using a single color. Try to avoid using the same icon used by an existing block. The core block icons are based on Material Design Icons. Look to that icon set, or to Dashicons for style inspiration.",
    "Do:\nUse concise block names.",
    "Don’t:\nAvoid long, multi-line block names.",
    "Every block should include a description that clearly explains the block’s function. The description will display in the Settings Sidebar.",
    "You can add a description by using the description attribute in the registerBlockType function.",
    "Stick to a single imperative sentence with an action + subject format. Examples:",
    "Do:\nUse a short, simple block description.",
    "Don’t:\nAvoid long descriptions and branding.",
    "If your block requires a user to configure some options before you can display it, you should provide an instructive placeholder state.",
    "Do:\nProvide an instructive placeholder state.",
    "Don’t:\nAvoid branding and relying on the title alone to convey instructions.",
    "When unselected, your block should preview its content as closely to the front-end output as possible.",
    "When selected, your block may surface additional options like input fields or buttons to configure the block directly, especially when they are necessary for basic operation.",
    "Do:\nFor controls that are essential for the operation of the block, provide them directly inside the block edit view.",
    "Don’t:\nDo not put controls that are essential to the block in the sidebar, otherwise the block will appear non-functional to mobile users or desktop users who have dismissed the sidebar.",
    "The “Block” tab of the Settings Sidebar can contain additional block options and configuration. Keep in mind that a user can dismiss the sidebar and never use it. You should not put critical options in the Sidebar.",
    "Do:\nBecause the Drop Cap feature is not necessary for the basic operation of the block, you can put it to the Block tab as optional configuration.",
    "Check how your block looks, feels, and works on as many devices and screen sizes as you can.",
    "Check how your block looks with dark backgrounds in the editor.",
    "To demonstrate some of these practices, here are a few annotated examples of default Gutenberg blocks:",
    "The most basic unit of the editor. The Paragraph block is a simple input field.",
    "Basic image block.",
    "Future improvements to the Image block could include getting rid of the media modal in place of letting users select images directly from the placeholder itself. In general, try to avoid modals.",
    "Has no placeholder as it works immediately upon insertion. The default inserted state shows the last 5 posts.",
    "Note that the Block Toolbar does not include the Block Chip in this case, since there are no similar blocks to switch to.",
    "Latest Posts is fully functional as soon as it’s inserted because it comes with good defaults.",
    "The block editor’s general layout uses a bar at the top, with content below.",
    "The Toolbar contains document-level actions: Editor/Select modes, save status, global actions for undo/redo/insert, the settings toggle, and publish options.",
    "The Content Area contains the document itself.",
    "The Settings Sidebar contains additional settings for the document (tags, categories, schedule etc.) and for blocks in the “Block” tab. A cog button in the toolbar hides the Settings Sidebar, allowing the user to enjoy a more immersive writing experience. On small screens, the sidebar is hidden by default.",
    "The block itself is the most basic unit of the editor. Generally speaking, everything is a block. Users build posts and pages using blocks, mimicking the vertical flow of the underlying HTML markup.",
    "By surfacing each section of the document as a manipulatable block, we surface block-specific features contextually. This is inspired by desktop app conventions, and allows for a breadth of advanced features without weighing down the UI.",
    "A selected block shows a number of contextual actions:",
    "The block interface has basic actions. The block editor aims for good, common defaults, so users should be able to create a complete document without actually needing the advanced actions in the Settings Sidebar.",
    "The Block Toolbar highlights commonly-used actions. The Block Icon lives in the block toolbar, and contains high-level controls for the selected block. It primarily allows users to transform a block into another type of compatible block. Some blocks also use the block icon for users to choose from a set of alternate block styles.",
    "The Block Formatting options let users adjust block-level settings, and the Inline Formatting options allow adjustments to elements inside the block. When a block is long, the block toolbar pins itself to the top of the screen as the user scrolls down the page.",
    "Blocks can be moved up and down via the Block Mover icons. Additional block actions are available via an ellipsis menu: deleting and duplicating blocks, as well as advanced actions like “Edit as HTML” and “Convert to Reusable Block.”",
    "An unselected block does not show the block toolbar or any other contextual controls. In effect, an unselected block is a preview of the content itself:",
    "Please note that selection and focus can be different. An image block can be selected while the focus is on the caption field.",
    "The sidebar has two tabs, Document and Block:",
    "Each tab has sets of editable fields (Sidebar Sections) that users can toggle open or closed.",
    "If a block requires advanced configuration, those settings should live in the Settings Sidebar. Don’t put anything in the sidebar block tab that is necessary for the basic operation of your block; your user might dismiss the sidebar for an immersive writing experience. Pick good defaults, and make important actions available in the block toolbar.",
    "Actions that could go in the block tab of the sidebar could be:",
    "The Block Library appears when someone inserts a block, whether via the toolbar, or contextually within the content area. Inside, blocks are organized into expandable sections. The block library’s search bar auto-filters the list of blocks as the user types. Users can choose a block by selecting the Block Button or the Block Name.",
    "This document introduces the main concepts related to styles that affect the user content in the block editor. It points to the relevant reference guides and tutorials for readers to dig deeper into each one of the ideas presented. It’s aimed to block authors and people working in the block editor project.",
    "By creating a post in the block editor the user is creating a number of artifacts: a HTML document plus a number of CSS stylesheets, either embedded in the document or external.",
    "The final HTML document is the result of a few things:",
    "The stylesheets loaded in the front end include:",
    "Since the introduction of the block editor in WordPress 5.0, there were tools for the users to “add styles” to specific blocks. By using these tools, the user would attach new classes or inline styles to the blocks, modifying their visual aspect.",
    "By default, blocks come with a given HTML markup. Think of the paragraph block, for example:",
    "In its simplest form, any style rule that targets the p selector will apply styles to this block, whether it comes from a block, a theme, etc.",
    "The user may change the state of this block by applying different styles: a text alignment, a color, a font size, a line height, etc. These states are reflected in the HTML markup of the block in the form of HTML attributes, mainly through the class or style attributes, though it can be any other the block author sees fit.",
    "After some user modifications to the block, the initial markup may become something like this:",
    "This is what we refer to as “user-provided block styles”, also know as “local styles” or “serialized styles”. Essentially, each tool (font size, color, etc) ends up adding some classes and/or inline styles to the block markup. The CSS styling for these classes is part of the block, global, or theme stylesheets.",
    "The ability to modify a block state coupled with the fact that a block can live within any other block (think of a paragraph within a group), creates a vast amount of potential states and style possibilities.",
    "If you follow the block tutorial you can learn up about the different parts of the block API presented here in more detail and also build your own block. This is an introduction to the general concepts of how a block can let users edit its state.",
    "To build an experience like the one described above a block author needs a few pieces:",
    "In essence, these are the essential mechanics a block author needs to care about for their block to be able to be styled by the user. While this can be done completely manually, there’s an API that automates this process for common style needs: block supports.",
    "Block Supports is an API that allows a block to declare what features it supports. By adding some info to their block.json file, the block tells the system what kind of actions a user can do to it.",
    "The paragraph declares support for font size in its block.json. This means the block will show a UI control for users to tweak its font size, unless it’s disabled by the theme (learn more about how themes can disable UI controls in the theme.json reference). The system will also take care of setting up the UI control data (the font size of the block if it has one already assigned, the list of available font sizes to show), and will serialize the block data into HTML markup upon user changes (attach classes and inline styles appropriately).",
    "By using the block supports mechanism via block.json, the block author is able to create the same experience as before just by writing a couple of lines. Check the tutorials for adding block supports to static and dynamic blocks.",
    "Besides the benefit of having to do less work to achieve the same results, there’s a few other advantages:",
    "While the Block Supports API provides value, it also comes with some limitations a block author needs to be aware of. To better visualize what they are, let’s run with the following example of a table block:",
    "One of the limitations is that, from all the styles available, there can be only one instance of any them in use by the block. Following the example, the table block can only have a single font size. If the block author wanted to have three different font sizes (head, body, and footer) it can’t do it using the current block supports API. See this issue for more detailed info and ways forward.",
    "The block supports API only serializes the font size value to the wrapper, resulting in the following HTML <table class=\"has-small-font-size\"> . The current block supports API doesn’t serialize this value to a different node, for example, the <tbody>.",
    "This is an active area of work you can follow in the tracking issue. The linked proposal is exploring a different way to serialize the user changes: instead of each block support serializing its own data (for example, classes such as has-small-font-size, has-green-color) the idea is the block would get a single class instead (for example, wp-style-UUID) and the CSS styling for that class will be generated in the server by WordPress.",
    "While work continues in that proposal, there’s an escape hatch, an experimental option block authors can use. Any block support can skip the serialization to HTML markup by using __experimentalSkipSerialization. For example:",
    "This means that the typography block support will do all of the things (create a UI control, bind the block attribute to the control, etc) except serializing the user values into the HTML markup. The classes and inline styles will not be automatically applied to the wrapper and it is the block author’s responsibility to implement this in the edit, save, and render_callback functions. See this issue for examples of how it was done for some blocks provided by WordPress.",
    "Note that, if __experimentalSkipSerialization is enabled for a group (typography, color, spacing) it affects all block supports within this group. In the example above all the properties within the typography group will be affected (e.g. fontSize, lineHeight, fontFamily .etc).",
    "To enable for a single property only, you may use an array to declare which properties are to be skipped. In the example below, only fontSize will skip serialization, leaving other items within the typography group (e.g. lineHeight, fontFamily .etc) unaffected.",
    "Support for this feature was added in this PR.",
    "Global Styles refers to a mechanism that generates site-wide styles. Unlike the block styles described in the previous section, these are not serialized into the post content and are not attached to the block HTML. Instead, the output of this system is a new stylesheet with id global-styles-inline-css.",
    "This mechanism was introduced in WordPress 5.8. At the time, it only took data from WordPress and the active theme. WordPress 5.9 expanded the system to also take style data from users.",
    "This is the general data flow:",
    "The process of generating the stylesheet has, in essence, three steps:",
    "The data can come from three different origins: WordPress defaults, the active theme, or the user. All three of them use the same theme.json format.",
    "Data from WordPress and the active theme is retrieved from the corresponding theme.json file. Data from the user is pulled from the database, where it’s stored after the user saves the changes they did via the global styles sidebar in the site editor.",
    "The goal of this phase is to build a consolidated structure.",
    "There are two important processes going on in this phase. First, the system needs to normalize all the incoming data, as different origins may be using different versions of the theme.json format. For example, a theme may be using v1 while the WordPress base is using the latest version. Second, the system needs to decide how to merge the input into a single structure. This will be the focus of the following sections.",
    "Different parts of the incoming theme.json structure are treated differently. The data present in the styles section is blended together following this logic: user data overrides theme data, and theme data overrides WordPress data.",
    "For example, if we had the following three theme.json structures coming from WordPress, the theme, and the user respectively:",
    "The result after the consolidation would be:",
    "The settings section works differently than styles. Most of the settings are only used to configure the editor and have no effect on the global styles. Only a few of them are part of the resulting stylesheet: the presets.",
    "Presets are the predefined styles that are shown to the user in different parts of the UI: the color palette or the font sizes, for example. They comprise the following settings: color.duotone, color.gradients, color.palette, typography.fontFamilies, typography.fontSizes. Unlike styles, presets from an origin don’t override values from other origins. Instead, all of them are stored in the consolidated structure.",
    "For example, if we have the following theme.json structures coming from WordPress, the theme, and the user respectively:",
    "The last phase of generating the stylesheet is converting the consolidated data into CSS style rules.",
    "The styles section can be thought of as a structured representation of CSS rules, each chunk representing a CSS rule:",
    "For example, the following theme.json structure:",
    "is converted to the following CSS:",
    "From the settings section, all the values of any given presets will be converted to a CSS Custom Property that follows this naming structure: --wp--preset--<category>-<slug>. The selectors follow the same rules described in the styles section above.",
    "For example, the following theme.json",
    "Will be converted to the following CSS style rule:",
    "In addition to the CSS Custom Properties, all presets but duotone generate CSS classes for each value. The example above will generate the following CSS classes as well:",
    "By default, the selector assigned to a block is .wp-block-<block-name>. However, blocks can change this should they need. They can provide a CSS selector via the __experimentalSelector property in its block.json.",
    "If blocks do this, they need to be registered in the server using the block.json, otherwise, the global styles code doesn’t have access to that information and will use the default CSS selector for the block.",
    "Every chunk of styles can only use a single selector.",
    "This is particularly relevant if the block is using __experimentalSkipSerialization to serialize the different style properties to different nodes other than the wrapper. See “Current limitations of blocks supports” for more.",
    "Similarly to block supports, there can be only one instance of any style in use by the block. For example, the block can only have a single font size. See related “Current limitations of block supports”.",
    "The global styles UI in the site editor has a screen for per-block styles. The list of blocks is generated dynamically using the block supports from the block.json of blocks. If a block wants to be listed there, it needs to use the block supports mechanism.",
    "In addition to styles at the individual block level and in global styles, there is the concept of layout styles that are output for both blocks-based and classic themes.",
    "The layout block support is an experimental approach for outputting common layout styles that are shared between blocks that are used for creating layouts. Layout styles are useful for providing common styling for any block that is a container for other blocks. Examples of blocks that depend on these layout styles include Group, Row, Columns, Buttons, and Social Icons.",
    "While the feature is part of WordPress core, it is still flagged as experimental in the sense that the features and output are still undergoing active development. It is therefore not yet a stable feature from the perspective of 3rd party blocks, as the API is likely to change. The feature is enabled in core blocks via the __experimentalLayout setting under supports in a block’s block.json file.",
    "There are two primary places where Layout styles are output:",
    "Base layout styles are those styles that are common to all blocks that opt in to a particular layout type. Examples of common base layout styling include setting display: flex for blocks that use the Flex layout type (such as Buttons and Social Icons), and providing default max-width for constrained layouts.",
    "Base layout styles are output from within the main PHP class that handles global styles, and form part of the global styles stylesheet. In order to provide support for core blocks in classic themes, these styles are always output, irrespective of whether the theme provides its own theme.json file.",
    "Common layout definitions are stored in the core theme.json file, but are not intended to be extended or overridden by themes.",
    "When a block that opts in to the experimental layout support is rendered, two things are processed and added to the output via layout.php:",
    "There are currently three layout types in use:",
    "For controlling spacing between blocks, and enabling block spacing controls see: What is blockGap and how can I use it?.",
    "The layout block support is designed to enable control over layout features from within the block and site editors. Where possible, try to use the features of the blocks to determine particular layout requirements rather than relying upon additional stylesheets.",
    "For themes that wish to target container blocks in order to add or adjust particular styles, the block’s class name is often the best class name to use. Class names such as wp-block-group or wp-block-columns are usually reliable class names for targeting a particular block.",
    "For targeting a block that uses a particular layout type, avoid targeting wp-container- as container classes may not always be present in the rendered markup.",
    "Work is currently underway to expand stable semantic classnames in Layout block support output. The task is being discussed in this issue.",
    "The current semantic class names that can be output by the Layout block support are:",
    "Layout styles output is switched on by default because the styles are required by core structural blocks. However, themes can opt out of generated block layout styles while retaining semantic class name output by using the disable-layout-styles block support. Such themes will be responsible for providing all their own layout styles. See the entry under Theme Support.",
    "This document will explain the internals of how templates and templates parts are rendered in the frontend and edited in the backend. For an introduction about block themes and Full site editing templates, refer to the block theme documentation.",
    "Just like the regular templates, the block templates live initially as files in the theme folder but the main difference is that the user can edit these templates in the UI in the Site Editor.",
    "When a user edits a template (or template-part), the initial theme template file is kept as is but a forked version of the template is saved to the wp_template custom post type (or wp_template_part for template parts).",
    "These capabilities mean that at any point in time, a mix of template files (from the theme) and CPT templates (the edited templates) are used to render the frontend of the site.",
    "In order to simplify the algorithm used to edit and render the templates from two different places, we performed an operation called “template synchronization”.",
    "The synchronization consists of duplicating the theme templates in the wp_template (and wp_template_part) custom templates with an auto-draft status. When a user edits these templates, the status is updated to publish.",
    "This means:",
    "The synchronization is important for two different flows:",
    "Since block themes make use of templates that can refer to each other and that can be saved to a custom post type, it becomes possible to mix templates and template parts from different themes. For example:",
    "Enabling these flows will require well thought UIs and experience. For the current phase of Full-site editing, we’re starting by forbidding these possibilities and making template and template-parts theme specific.",
    "That said, it is still important to keep track of where the template and template part come from initially. From which theme, it’s based. We do so by saving a theme post meta containing the theme identifier for each template and template part CPT entry.",
    "In the future, we might consider allowing the user to mix template and template parts with different theme post meta values.",
    "A lightweight & efficient EventManager for JavaScript.",
    "In your JavaScript project, use hooks as follows:",
    "In the above example, we are creating a custom instance of the Hooks object and registering hooks there. The package also creates a default global instance that’s accessible through the defaultHooks named exports, and its methods are also separately exported one-by-one.",
    "In the WordPress context, that enables API functions to be called via the global wp.hooks object, like wp.hooks.addAction(), etc.",
    "One notable difference between the JS and PHP hooks API is that in the JS version, addAction() and addFilter() also need to include a namespace as the second argument. Namespace uniquely identifies a callback in the form vendor/plugin/function.",
    "Whenever an action or filter is added or removed, a matching hookAdded or hookRemoved action is triggered.",
    "In non-minified builds developers can register a filter or action that will be called on all hooks, for example: addAction( 'all', 'namespace', callbackFunction );. Useful for debugging, the code supporting the all hook is stripped from the production code for performance reasons.",
    "WordPress word count utility.",
    "Count some words.",
    "wp-env lets you easily set up a local WordPress environment for building and testing plugins and themes. It’s simple to install and requires no configuration.",
    "Ensure that Docker is running, then:",
    "The local environment will be available at http://localhost:8888 (Username: admin, Password: password).",
    "The database credentials are: user root, password password. For a comprehensive guide on connecting directly to the database, refer to Accessing the MySQL Database.",
    "wp-env requires Docker to be installed. There are instructions available for installing Docker on Windows, macOS, and Linux.",
    "Node.js and npm are required. The latest LTS version of Node.js is used to develop wp-env and is recommended.",
    "After confirming that the prerequisites are installed, you can install wp-env globally like so:",
    "You’re now ready to use wp-env!",
    "If your project already has a package.json, it’s also possible to use wp-env as a local package. First install wp-env locally as a dev dependency:",
    "At this point, you can use the local, project-level version of wp-env via npx, a utility automatically installed with npm.npx finds binaries like wp-env installed through node modules. As an example: npx wp-env start --update.",
    "If you don’t wish to use npx, modify your package.json and add an extra command to npm scripts (https://docs.npmjs.com/misc/scripts):",
    "When installing wp-env in this way, all wp-env commands detailed in these docs must be prefixed with npm run, for example:",
    "instead of:",
    "First, ensure that Docker is running. You can do this by clicking on the Docker icon in the system tray or menu bar.",
    "Then, change to a directory that contains a WordPress plugin or theme:",
    "Then, start the local environment:",
    "Finally, navigate to http://localhost:8888 in your web browser to see WordPress running with the local WordPress plugin or theme running and activated. Default login credentials are username: admin password: password.",
    "To stop the local environment:",
    "Many common problems can be fixed by running through the following troubleshooting steps in order:",
    "First, check that wp-env is running. One way to do this is to have Docker print a table with the currently running containers:",
    "In this table, by default, you should see three entries: wordpress with port 8888, tests-wordpress with port 8889 and mariadb with port 3306.",
    "By default wp-env uses port 8888, meaning that the local environment will be available at http://localhost:8888.",
    "You can configure the port that wp-env uses so that it doesn’t clash with another server by specifying the WP_ENV_PORT environment variable when starting wp-env:",
    "Running docker ps and inspecting the PORTS column allows you to determine which port wp-env is currently using.",
    "You may also specify the port numbers in your .wp-env.json file, but the environment variables will take precedence.",
    "Restarting wp-env will restart the underlying Docker containers which can fix many issues.",
    "To restart wp-env, just run wp-env start again. It will automatically stop and start the container. If you also pass the --update argument, it will download updates and configure WordPress again.",
    "Restarting Docker will restart the underlying Docker containers and volumes which can fix many issues.",
    "To restart Docker:",
    "Once restarted, start wp-env again:",
    "Resetting the database which the local environment uses can fix many issues, especially when they are related to the WordPress installation.",
    "To reset the database:",
    "⚠️ WARNING: This will permanently delete any posts, pages, media, etc. in the local WordPress installation.",
    "When all else fails, you can use wp-env destroy to forcibly remove all of the underlying Docker containers, volumes, and files. This will allow you to start from scratch.",
    "To do so:",
    "wp-env uses docker behind the scenes. Inspecting the generated docker-compose file can help to understand what’s going on.",
    "Start wp-env in debug mode",
    "wp-env will output its config which includes dockerComposeConfigPath.",
    "Out of the box wp-env includes the WordPress’ PHPUnit test files corresponding to the version of WordPress installed. There is an environment variable, WP_TESTS_DIR, which points to the location of these files within each container. By including these files in the environment, we remove the need for you to use a package or install and mount them yourself. If you do not want to use these files, you should ignore the WP_TESTS_DIR environment variable and load them from the location of your choosing.",
    "While we do provide a default wp-tests-config.php file within the environment, there may be cases where you want to use your own. WordPress provides a WP_TESTS_CONFIG_FILE_PATH constant that you can use to change the wp-config.php file used for testing. Set this to a desired path in your bootstrap.php file and the file you’ve chosen will be used instead of the one included in the environment.",
    "Xdebug is installed in the wp-env environment, but it is turned off by default. To enable Xdebug, you can use the --xdebug flag with the wp-env start command. Here is a reference to how the flag works:",
    "When you’re running wp-env using npm run, like when working in the Gutenberg repo or when wp-env is a local project dependency, don’t forget to add an extra double dash before the --xdebug command:",
    "If you forget about that, the --xdebug parameter will be passed to npm instead of the wp-env start command and it will be ignored.",
    "You can see a reference on each of the Xdebug modes and what they do in the Xdebug documentation.",
    "Since we are only installing Xdebug 3, Xdebug is only supported for PHP versions greater than or equal to 7.2 (the default). Xdebug won’t be installed if phpVersion is set to a legacy version.",
    "To connect to Xdebug from your IDE, you can use these IDE settings. This bit of JSON was tested for VS Code’s launch.json format (which you can learn more about here) along with this PHP Debug extension. Its path mapping also points to a specific plugin — you should update this to point to the source you are working with inside of the wp-env instance.",
    "You should only have to translate port and pathMappings to the format used by your own IDE.",
    "After you create a .vscode/launch.json file in your repository, you probably want to add it to your global gitignore file so that it stays private for you and is not committed to the repository.",
    "Once your IDEs Xdebug settings have been enabled, you should just have to launch the debugger, put a breakpoint on any line of PHP code, and then refresh your browser!",
    "Here is a summary:",
    "wp-env creates generated files in the wp-env home directory. By default, this is ~/.wp-env. The exception is Linux, where files are placed at ~/wp-env for compatibility with Snap Packages. The wp-env home directory contains a subdirectory for each project named /$md5_of_project_path. To change the wp-env home directory, set the WP_ENV_HOME environment variable. For example, running WP_ENV_HOME=\"something\" wp-env start will download the project files to the directory ./something/$md5_of_project_path (relative to the current directory).",
    "The start command installs and initializes the WordPress environment, which includes downloading any specified remote sources. By default, wp-env will not update or re-configure the environment except when the configuration file changes. Tell wp-env to update sources and apply the configuration options again with wp-env start --update. This will not overwrite any existing content.",
    "The run command can be used to open shell sessions or invoke WP-CLI commands.",
    "For example, to ask `WP-CLI` for its help text:",
    "“`sh\nwp-env run cli “wp –help”\n“`",
    "Without the quotation marks, `wp-env` will print its own help text instead of\npassing it to the container. If you experience any problems where the command\nis not being passed correctly, fall back to using quotation marks.",
    "NOTE: Depending on your host OS, you may experience errors when trying to install plugins or themes (e.g. Warning: Could not create directory.). This is typically because the user ID used within the container does not have write access to the mounted directories created by wp-env. To resolve this, run the docker-compose command directly from the directory created by wp-env and add -u $(id -u) and -e HOME=/tmp the run command as options:",
    "Outputs the absolute path to the WordPress environment files.",
    "You can customize the WordPress installation, plugins and themes that the development environment will use by specifying a .wp-env.json file in the directory that you run wp-env from.",
    ".wp-env.json supports fields for options applicable to both the tests and development instances.",
    "Note: the port number environment variables (WP_ENV_PORT and WP_ENV_TESTS_PORT) take precedent over the .wp-env.json values.",
    "Several types of strings can be passed into the core, plugins, themes, and mappings fields.",
    "Remote sources will be downloaded into a temporary directory located in ~/.wp-env.",
    "Additionally, the key env is available to override any of the above options on an individual-environment basis. For example, take the following .wp-env.json file:",
    "On the development instance, cwd will be mapped as a plugin, one-theme will be mapped as a theme, KEY_1 will be set to true, and KEY_2 will be set to false. Also note that the default port, 8888, will be used as well.",
    "On the tests instance, cwd is still mapped as a plugin, but no theme is mapped. Additionally, while KEY_2 is still set to false, KEY_1 is overridden and set to false. 3000 overrides the default port as well.",
    "This gives you a lot of power to change the options applicable to each environment.",
    "Any fields here will take precedence over .wp-env.json. This file is useful when ignored from version control, to persist local development overrides. Note that options like plugins and themes are not merged. As a result, if you set plugins in your override file, this will override all of the plugins listed in the base-level config. The only keys which are merged are config and mappings. This means that you can set your own wp-config values without losing any of the default values.",
    "On the development instance, these wp-config values are defined by default:",
    "On the test instance, all of the above are still defined, but WP_DEBUG and SCRIPT_DEBUG are set to false.",
    "These can be overridden by setting a value within the config configuration. Setting it to null will prevent the constant being defined entirely.",
    "Additionally, the values referencing a URL include the specified port for the given environment. So if you set testsPort: 3000, port: 2000, WP_HOME (for example) will be http://localhost:3000` on the tests instance andhttp://localhost:2000` on the development instance.",
    "This is useful for plugin development.",
    "This is useful for plugin development when upstream Core changes need to be tested. This can also be set via the environment variable WP_ENV_CORE.",
    "This is useful for working on plugins and WordPress Core at the same time.",
    "If you are running a build of wordpress-develop, point core to the build directory.",
    "If you are running wordpress-develop in a dev mode (e.g. the watch command dev or the dev build build:dev), then point core to the src directory.",
    "This is useful for integration testing: that is, testing how old versions of WordPress and different combinations of plugins and themes impact each other.",
    "You can add mu-plugins via the mapping config. The mapping config also allows you to mount a directory to any location in the wordpress install, so you could even mount a subdirectory. Note here that theme-1, will not be activated.",
    "Since all plugins in the plugins key are activated by default, you should use the mappings key to avoid this behavior. This might be helpful if you have a test plugin that should not be activated all the time.",
    "If you need a plugin active in one environment but not the other, you can use env.<envName> to set options specific to one environment. Here, we activate cwd and a test plugin on the tests instance. This plugin is not activated on any other instances.",
    "You can tell wp-env to use a custom port number so that your instance does not conflict with other wp-env instances.",
    "You can tell wp-env to use a specific PHP version for compatibility and testing. This can also be set via the environment variable WP_ENV_PHP_VERSION.",
    "Simple interface to introduce animations to components.",
    "This animation is meant for popover/modal content, such as menus appearing. It shows the height and width of the animated element scaling from 0 to full size, from its point of origin.",
    "This animation is meant to be used to indicate that activity is happening in the background. It is an infinitely-looping fade from 50% to full opacity. This animation has no options, and should be removed as soon as its relevant operation is completed.",
    "This animation is meant for sidebars and sliding menus. It shows the height and width of the animated element moving from a hidden position to its normal one.",
    "WordPress Prettier shareable config for Prettier.",
    "Note: This package requires Node.js 14.0.0 or later. It is not compatible with older versions.",
    "Add this to your package.json file:",
    "Alternatively, add this to .prettierrc file:",
    "Or add this to .prettierrc.js file:",
    "Let’s get you started creating your first block for the WordPress Block Editor. We will create a simple block that allows the user to type a message and style it.",
    "The tutorial includes setting up your development environment, tools, and getting comfortable with the new development model. If you are already comfortable, try the quick start below, otherwise step through whatever part of the tutorial you need.",
    "The first thing you need is a development environment and tools. This includes setting up your WordPress environment, Node, NPM, and your code editor. If you need help, see the setting up your development environment documentation.",
    "The @wordpress/create-block package exists to create the necessary block scaffolding to get you started. See create-block package documentation for additional features. This quick start assumes you have a development environment with node installed, and a WordPress site.",
    "From your plugins directory, to create your block run:",
    "Remember that you should use Node.js v14. Other versions may result in an error in the terminal. See Node Development Tools for more info.",
    "The npx command runs a command from a remote package, in this case our create-block package that will create a new directory called gutenpride, installs the necessary files, and builds the block plugin. If you want an interactive mode that prompts you for details, run the command without the gutenpride name.",
    "You now need to activate the plugin from inside wp-admin plugins page.",
    "After activated, go to the block editor and use the inserter to search and add your new block.",
    "The create a block tutorials breaks down to the following sections.",
    "You can create a single block that nests other blocks using the InnerBlocks component. This is used in the Columns block, Social Links block, or any block you want to contain other blocks.",
    "Note: A single block can only contain one InnerBlocks component.",
    "Here is the basic InnerBlocks usage.",
    "Using the ALLOWED_BLOCKS property, you can define the set of blocks allowed in your InnerBlock. This restricts the blocks that can be included only to those listed, all other blocks will not show in the inserter.",
    "By default, InnerBlocks expects its blocks to be shown in a vertical list. A valid use-case is to style inner blocks to appear horizontally, for instance by adding CSS flex or grid properties to the inner blocks wrapper. When blocks are styled in such a way, the orientation prop can be set to indicate that a horizontal layout is being used:",
    "Specifying this prop does not affect the layout of the inner blocks, but results in the block mover icons in the child blocks being displayed horizontally, and also ensures that drag and drop works correctly.",
    "Use the template property to define a set of blocks that prefill the InnerBlocks component when inserted. You can set attributes on the blocks to define their use. The example below shows a book review template using InnerBlocks component and setting placeholders values to show the block usage.",
    "Use the templateLock property to lock down the template. Using all locks the template completely so no changes can be made. Using insert prevents additional blocks from being inserted, but existing blocks can be reordered. See templateLock documentation for additional information.",
    "Unrelated to InnerBlocks but worth mentioning here, you can create a post template by post type, that preloads the block editor with a set of blocks.",
    "The InnerBlocks template is for the component in the single block that you created, the rest of the post can include any blocks the user likes. Using a post template, can lock the entire post to just the template you define.",
    "A common pattern for using InnerBlocks is to create a custom block that will be included only in the InnerBlocks.",
    "An example of this is the Columns block, that creates a single parent block called columns and then creates an child block called column. The parent block is defined to only allow the child blocks. See Column code for reference.",
    "When defining a child block, use the parent block setting to define which block is the parent. This prevents the block showing in the inserter outside of the InnerBlock it is defined for.",
    "Another example is using the ancestors block setting to define a block that must be present as an ancestor, but it doesn’t need to be the direct parent (like with parent). This prevents the block from showing in the inserter if the ancestor is not in the tree, but other blocks can be added in between, like a Columns or Group block. See Comment Author Name code for reference.",
    "You can use a react hook called useInnerBlocksProps instead of the InnerBlocks component. This hook allows you to take more control over the markup of inner blocks areas.",
    "The useInnerBlocksProps is exported from the @wordpress/block-editor package same as the InnerBlocks component itself and supports everything the component does. It also works like the useBlockProps hook.",
    "Here is the basic useInnerBlocksProps hook usage.",
    "This hook can also pass objects returned from the useBlockProps hook to the useInnerBlocksProps hook. This reduces the number of elements we need to create.",
    "The above code will render to the following markup in the editor:",
    "Another benefit to using the hook approach is using the returned value, which is just an object, and deconstruct to get the react children from the object. This property contains the actual child inner blocks thus we can place elements on the same level as our inner blocks.",
    "@wordpress/private-apis enables sharing private __experimental APIs across @wordpress packages without\npublicly exposing them to WordPress extenders.",
    "Every @wordpress package wanting to privately access or expose experimental APIs must opt-in to @wordpress/private-apis:",
    "Each package may only opt in once. The function name communicates that plugins are not supposed to use it.",
    "The function will throw an error if the following conditions are not met:",
    "Once the opt-in is complete, the obtained lock() and unlock() utilities enable hiding __experimental APIs from the naked eye:",
    "Use lock() and unlock() to privately distribute the __experimental APIs across @wordpress packages:",
    "See the Experimental and Unstable APIs chapter of Coding Guidelines to learn how lock() and unlock() can help\nyou ship private experimental functions, arguments, components, properties, actions, selectors.",
    "A determined developer who would want to use the private experimental APIs at all costs would have to:",
    "Dangerously opting in to using these APIs by theme and plugin developers is not recommended. Furthermore, the WordPress Core philosophy to strive to maintain backward compatibility for third-party developers does not apply to experimental APIs registered via this package.",
    "The consent string for opting in to these APIs may change at any time and without notice. This change will break existing third-party code. Such a change may occur in either a major or minor release.",
    "This is a collection of reusable scripts tailored for WordPress development. For convenience, every tool provided in this package comes with an integrated recommended configuration.",
    "When working seamlessly, sophisticated command-line interfaces help to turn work with a project into a more pleasant experience. However, it’s a misleading assumption that developers can easily pick the proper tools in the first place and then ensure that they play along with each other, including all their extensions. Besides, it’s still not enough because developers are left on their own to keep all configurations and dependent tools up to date. This problem multiplies when they support more than one project which shares the same setup.",
    "Fortunately, there is a pattern that can simplify maintainers life – reusable scripts. The idea boils down to moving all the necessary configurations and scripts to one single tool dependency. In most cases, it should be possible to accomplish all tasks using the default settings, but some customization is allowed, too. With all that in place, updating all projects should become a very straightforward task.",
    "This package is inspired by react-scripts and kcd-scripts.",
    "You only need to install one npm module:",
    "Note: This package requires Node.js 14.0.0 or later, and npm 6.14.4 or later. It is not compatible with older versions.",
    "This package offers a command-line interface and exposes a binary called wp-scripts so you can call it directly with npx – an npm package runner. However, this module is designed to be configured using the scripts section in the package.json file of your project. This comprehensive example demonstrates the most of the capabilities included.",
    "It might also be a good idea to get familiar with the JavaScript Build Setup tutorial for setting up a development environment to use ESNext syntax. It gives a very in-depth explanation of how to use the build and start scripts.",
    "When using the start or build commands, the source code directory ( the default is ./src) and its subdirectories are scanned for the existence of block.json files. If one or more are found, they are treated a entry points and will be output into corresponding folders in the build directory. This allows for the creation of multiple blocks that use a single build process. The source directory can be customized using the --webpack-src-dir flag.",
    "To update an existing project to a new version of @wordpress/scripts, open the changelog, find the version you’re currently on (check package.json in the top-level directory of your project), and apply the migration instructions for the newer versions.",
    "In most cases bumping the @wordpress/scripts version in package.json and running npm install in the root folder of your project should be enough, but it’s good to check the changelog for potential breaking changes. There is also packages-update script included in this package that aims to automate the process of updating WordPress dependencies in your projects.",
    "We commit to keeping the breaking changes minimal so you can upgrade @wordpress/scripts as seamless as possible.",
    "Transforms your code according the configuration provided so it’s ready for production and optimized for the best performance.",
    "This script exits after producing a single build. For incremental builds, better suited for development, see the start script.",
    "The entry points for your project get detected by scanning all script fields in block.json files located in the src directory. The script fields in block.json should pass relative paths to block.json in the same folder.",
    "The fallback entry point is src/index.js (other supported extensions: .jsx, .ts, and .tsx) in case there is no block.json file found. In that scenario, the output generated will be written to build/index.js.",
    "This is how you execute the script with presented setup:",
    "This script automatically use the optimized config but sometimes you may want to specify some custom options:",
    "This script uses webpack behind the scenes. It’ll look for a webpack config in the top-level directory of your package and will use it if it finds one. If none is found, it’ll use the default config provided by @wordpress/scripts packages. Learn more in the Advanced Usage section.",
    "Checks if the current node, npm (or yarn) versions match the given semantic version ranges. If the given version is not satisfied, information about installing the needed version is printed and the program exits with an error code.",
    "It uses check-node-version behind the scenes with the recommended configuration provided. The default requirements are set to the same Node.js and npm versions as listed in the installation section for this package. You can specify your own ranges as described in check-node-version docs. Learn more in the Advanced Usage section.",
    "Validates that all dependencies of a project are compatible with the project’s own license.",
    "Flags:",
    "It helps to enforce coding style guidelines for your files (enabled by default for JavaScript, JSON, TypeScript, YAML) by formatting source code in a consistent way.",
    "When you run commands similar to the npm run format:src example above, you can provide a file, a directory, or glob syntax or any combination of them.",
    "By default, files located in build, node_modules, and vendor folders are ignored. You can customize the list of ignored files and directories by adding them to a .prettierignore file in your project.",
    "Helps enforce coding style guidelines for your JavaScript and TypeScript files.",
    "When you run commands similar to the npm run lint:js:src example above, you can provide a file, a directory, or glob syntax or any combination of them. See more examples.",
    "By default, files located in build, node_modules, and vendor folders are ignored.",
    "It uses eslint with the set of recommended rules defined in @wordpress/eslint-plugin npm package. You can override default rules with your own as described in eslint docs. Learn more in the Advanced Usage section.",
    "Helps enforce standards for your package.json files.",
    "This is how you execute those scripts using the presented setup:",
    "When you run commands similar to the npm run lint:pkg-json:src example above, you can provide one or multiple directories to scan as well. See more examples.",
    "It uses npm-package-json-lint with the set of recommended rules defined in @wordpress/npm-package-json-lint-config npm package. You can override default rules with your own as described in npm-package-json-lint wiki. Learn more in the Advanced Usage section.",
    "Uses markdownlint to lint the markup of markdown files to enforce standards.",
    "It uses markdownlint with the .markdownlint.json configuration. This configuration tunes the linting rules to match WordPress standard, you can override with your own config, see markdownlint-cli for command-line parameters.",
    "Helps enforce coding style guidelines for your style files.",
    "When you run commands similar to the npm run lint:css:src example above, be sure to include the quotation marks around file globs. This ensures that you can use the powers of globby (like the ** globstar) regardless of your shell. See more examples.",
    "It uses stylelint with the @wordpress/stylelint-config configuration per the WordPress CSS Coding Standards. You can override them with your own rules as described in stylelint user guide. Learn more in the Advanced Usage section.",
    "Updates the WordPress packages used in the project to their latest version.",
    "This script provides the following custom options:",
    "The command detects project dependencies that have name starting with @wordpress/ by scanning the package.json file. By default, it executes npm install @wordpress/package1@latest @wordpress/package2@latest ... --save to change the package versions to the latest one. You can chose a different dist-tag than latest by using the --dist-tag option when running the command.",
    "Creates a zip file for a WordPress plugin.",
    "By default, it uses Plugin Handbook best practices to discover files.",
    "In the case where the plugin author wants to customize the files included in the zip file, they can provide the files field in the package.json file as documented in the npm-packlist package, example:",
    "It reuses the same logic as npm pack command to create an npm package tarball.",
    "Transforms your code according the configuration provided so it’s ready for development. The script will automatically rebuild if you make changes to the code, and you will see the build errors in the console.",
    "For single builds, better suited for production, see the build script.",
    "Launches the End-To-End (E2E) test runner. Writing tests can be done using the Jest API in combination with the Puppeteer API:",
    "Jest is a delightful JavaScript Testing Framework with a focus on simplicity.",
    "Puppeteer is a Node library which provides a high-level API to control Chrome or Chromium over the DevTools Protocol. Puppeteer runs headless by default, but can be configured to run full (non-headless) Chrome or Chromium.",
    "Jest will look for test files with any of the following popular naming conventions:",
    "This script automatically detects the best config to start Puppeteer but sometimes you may need to specify custom options:",
    "We enforce that all tests run serially in the current process using –runInBand Jest CLI option to avoid conflicts between tests caused by the fact that they share the same WordPress instance.",
    "When tests fail, both a screenshot and an HTML snapshot will be taken of the page and stored in the artifacts/ directory at the root of your project. These snapshots may help debug failed tests during development or when running tests in a CI environment.",
    "The artifacts/ directory can be customized by setting the WP_ARTIFACTS_PATH environment variable to the relative path of the desired directory within your project’s root. For example: to change the default directory from artifacts/ to my/custom/artifacts, you could use WP_ARTIFACTS_PATH=my/custom/artifacts npm run test:e2e.",
    "It uses Jest behind the scenes and you are able to use all of its CLI options. You can also run ./node_modules/.bin/wp-scripts test:e2e --help or npm run test:e2e:help (as mentioned above) to view all of the available options. Learn more in the Advanced Usage section.",
    "Should there be any situation where you want to provide your own Jest config, you can do so.",
    "Alias: test-unit-jest",
    "Launches the unit test runner. Writing tests can be done using the Jest API.",
    "It uses Jest behind the scenes and you are able to use all of its CLI options. You can also run ./node_modules/.bin/wp-scripts test:unit --help or npm run test:unit:help (as mentioned above) to view all of the available options. By default, it uses the set of recommended options defined in @wordpress/jest-preset-default npm package. You can override them with your own options as described in Jest documentation. Learn more in the Advanced Usage section.",
    "wp-scripts supports the full array of Node.js CLI options. They can be passed after the wp-scripts command and before the script name.",
    "One common use-case for passing Node.js options is debugging your tests.",
    "Tests can be debugged by any inspector client that supports the Chrome DevTools Protocol.",
    "Follow the instructions for debugging Node.js with your favorite supported browser or IDE. When the instructions say to use node --inspect script.js or node --inspect-brk script.js, simply use wp-scripts --inspect script or wp-scripts --inspect-brk script instead.",
    "Google Chrome and Visual Studio Code are used as examples below.",
    "Place debugger; statements in any test and run wp-scripts --inspect-brk test-unit-js --runInBand --no-cache (or npm run test:unit:debug from above).",
    "Then open about:inspect in Google Chrome and select inspect on your process.",
    "A breakpoint will be set at the first line of the script (this is done to give you time to open the developer tools and to prevent Jest from executing before you have time to do so). Click the resume button in the upper right panel of the dev tools to continue execution. When Jest executes the test that contains the debugger statement, execution will pause and you can examine the current scope and call stack.",
    "Debugging npm scripts is supported out of the box for Visual Studio Code as of version 1.23 and can be used to debug Jest unit tests.",
    "Make sure wp-scripts --inspect-brk test-unit-js --runInBand --no-cache is saved as test:unit:debug in your package.json file to run tests in Visual Studio Code.",
    "When debugging, set a breakpoint in your tests by clicking on a line in the editor’s left margin by the line numbers.",
    "Then open npm scripts in the explorer or run Explorer: Focus on NPM Scripts View in the command palette to see the npm scripts. To start the tests, click the debug icon next to test:unit:debug.",
    "The tests will start running, and execution will pause on your selected line so you can inspect the current scope and call stack within the editor.",
    "See Debugging in Visual Studio Code for more details on using the Visual Studio Code debugger.",
    "Since e2e tests run both in the node context and the (usually headless) browser context, not all lines of code can have breakpoints set within the inspector client—only the node context is debugged in the inspector client.",
    "The code executed in the node context includes all of the test files excluding code within page.evaluate functions. The page.evaluate functions and the rest of your app code is executed within the browser context.",
    "Test code (node context) can be debugged normally using the instructions above.",
    "To also debug the browser context, run wp-scripts --inspect-brk test-e2e --puppeteer-devtools. The --puppeteer-devtools option (or the PUPPETEER_DEVTOOLS=\"true\" environment variable when used with PUPPETEER_HEADLESS=\"false\") will disable headless mode and launch the browser with the devtools already open. Breakpoints can then be set in the browser context using these devtools.",
    "For more e2e debugging tips check out the Puppeteer debugging docs.",
    "In general, this package should be used with the set of recommended config files. While it’s possible to override every single config file provided, if you have to do it, it means that your use case is far more complicated than anticipated. If that happens, it would be better to avoid using the whole abstraction layer and set up your project with full control over tooling used.",
    "The build and start commands use webpack behind the scenes. webpack is a tool that helps you transform your code into something else. For example: it can take code written in ESNext and output ES5 compatible code that is minified for production.",
    "@wordpress/scripts bundles the default webpack config used as a base by the WordPress editor. These are the defaults:",
    "When you run the build using the default command wp-scripts build (also applies to start) in addition to the JavaScript file index.js generated in the build folder, you should see two more files:",
    "You can also have multiple entry points as described in the docs for the script:",
    "If you do so, then CSS files generated will follow the names of the entry points: entry-one.css and entry-two.css.",
    "Avoid using style keyword in an entry point name, this might break your build process.",
    "You can also bundle CSS modules by prefixing .module to the extension, e.g. style.module.scss. Otherwise, these files are handled like all other style.scss. They will also be extracted into style-index.css.",
    "It is possible to reference font (woff, woff2, eot, ttf and otf) and image (bmp, png, jpg, jpeg, gif and wepb) files from CSS that is controlled by webpack as explained in the previous section.",
    "Should there be any situation where you want to provide your own webpack config, you can do so. The build and start commands will use your provided file when:",
    "To extend the provided webpack config, or replace subsections within the provided webpack config, you can provide your own webpack.config.js file, require the provided webpack.config.js file, and use the spread operator to import all of or part of the provided configuration.",
    "In the example below, a webpack.config.js file is added to the root folder extending the provided webpack config to include custom logic to parse module’s source and convert it to a JavaScript object using toml. It may be useful to import toml or other non-JSON files as JSON, without specific loaders:",
    "If you follow this approach, please, be aware that:",
    "Viewport is a module for responding to changes in the browser viewport size. It registers its own data module, updated in response to browser media queries on a standard set of supported breakpoints. This data and the included higher-order components can be used in your own modules and components to implement viewport-dependent behaviors.",
    "The standard set of breakpoint thresholds is as follows:",
    "The Viewport module registers itself under the core/viewport data namespace and is exposed from the package as store.",
    "The isViewportMatch selector accepts a single string argument query. It consists of an optional operator and breakpoint name, separated with a space. The operator can be < or >=, defaulting to >=.",
    "This package provides a set of HOCs to author components whose behavior should vary depending on the viewport.",
    "Higher-order component creator, creating a new component which renders if the viewport query is satisfied.",
    "Store definition for the viewport namespace.",
    "Higher-order component creator, creating a new component which renders with the given prop names, where the value passed to the underlying component is the result of the query assigned as the object’s value.",
    "A collection of utilities to manipulate URLs.",
    "Appends arguments as querystring to the provided URL. If the URL already includes query arguments, the arguments are merged with (and take precedent over) the existing set.",
    "Generates URL-encoded query string using input query data.",
    "It is intended to behave equivalent as PHP’s http_build_query, configured with encoding type PHP_QUERY_RFC3986 (spaces as %20).",
    "Performs some basic cleanup of a string for use as a post slug.",
    "This replicates some of what sanitize_title() does in WordPress core, but is only designed to approximate what the slug will be.",
    "Converts Latin-1 Supplement and Latin Extended-A letters to basic Latin letters. Removes combining diacritical marks. Converts whitespace, periods, and forward slashes to hyphens. Removes any remaining non-word characters except hyphens. Converts remaining string to lowercase. It does not account for octets, HTML entities, or other encoded characters.",
    "Returns a URL for display.",
    "Returns the authority part of the URL.",
    "Returns the filename part of the URL.",
    "Returns the fragment part of the URL.",
    "Returns the path part of the URL.",
    "Returns the path part and query string part of the URL.",
    "Returns the protocol part of the URL.",
    "Returns a single query argument of the url",
    "Returns an object of query arguments of the given URL. If the given URL is invalid or has no querystring, an empty object is returned.",
    "Returns the query string part of the URL.",
    "Determines whether the URL contains a given query arg.",
    "Determines whether the given string looks like an email.",
    "Determines whether the given string looks like a URL.",
    "Checks for invalid characters within the provided authority.",
    "Checks for invalid characters within the provided fragment.",
    "Checks for invalid characters within the provided path.",
    "Tests if a url protocol is valid.",
    "Checks for invalid characters within the provided query string.",
    "Given a path, returns a normalized path where equal query parameter values will be treated as identical, regardless of order they appear in the original text.",
    "Prepends “http://” to a url, if it looks like something that is meant to be a TLD.",
    "Prepends “https://” to a url, if it looks like something that is meant to be a TLD.",
    "Note: this will not replace “http://” with “<https://”>.",
    "Removes arguments from the query string of the url",
    "Safely decodes a URI with decodeURI. Returns the URI unmodified if decodeURI throws an error.",
    "Safely decodes a URI component with decodeURIComponent. Returns the URI component unmodified if decodeURIComponent throws an error.",
    "Constructable, plain JavaScript DOMTokenList implementation, supporting non-browser runtimes.",
    "Construct a new token list, optionally with an initial value. A value with an interface matching DOMTokenList is returned.",
    "All methods of DOMTokenList are implemented.",
    "Note the following implementation divergences from the specification:",
    "While it could be used in one’s implementation, this is not intended to serve as a polyfill for Element#classList or other instances of DOMTokenList.",
    "The implementation of the DOMTokenList interface provided through @wordpress/token-list is broadly compatible in environments supporting ES5 (IE8 and newer). That being said, due to its internal implementation leveraging arrays for TokenList#entries, TokenList#forEach, TokenList#keys, and TokenList#values, you may need to assure that these functions are supported or polyfilled if you intend to use them.",
    "TokenList’s own internal implementation of the DOMTokenList interface does not leverage any of these functions, so it is not necessary to polyfill them for basic usage.",
    "Shortcode module for WordPress.",
    "Parse shortcode attributes.",
    "Shortcodes accept many types of attributes. These can chiefly be divided into named and numeric attributes:",
    "Named attributes are assigned on a key/value basis, while numeric attributes are treated as an array.",
    "Named attributes can be formatted as either name=\"value\", name='value', or name=value. Numeric attributes can be formatted as \"value\" or just value.",
    "Creates a shortcode instance.",
    "To access a raw representation of a shortcode, pass an options object, containing a tag string, a string or object of attrs, a string indicating the type of the shortcode (‘single’, ‘self-closing’, or ‘closed’), and a content string.",
    "Generate a Shortcode Object from a RegExp match.",
    "Accepts a match object from calling regexp.exec() on a RegExp generated by regexp(). match can also be set to the arguments from a callback passed to regexp.replace().",
    "Find the next matching shortcode.",
    "Generate a RegExp to identify a shortcode.",
    "The base regex is functionally equivalent to the one found in get_shortcode_regex() in wp-includes/shortcodes.php.",
    "Capture groups:",
    "Replace matching shortcodes in a block of text.",
    "Generate a string from shortcode parameters.",
    "Creates a shortcode instance and returns a string.",
    "Accepts the same options as the shortcode() constructor, containing a tag string, a string or object of attrs, a boolean indicating whether to format the shortcode using a single tag, and a content string.",
    "Blocks are an abstract unit for structuring and interacting with content. When composed together they create the content for a webpage. Everything from a paragraph, to a video, to the site title is represented as a block.",
    "Blocks come in many different forms but also provide a consistent interface. They can be inserted, moved, reordered, copied, duplicated, transformed, deleted, dragged, and combined. Blocks can also be reused, allowing them to be shared across posts and post types and/or used multiple times in the same post. If it helps, you can think of blocks as a more graceful shortcode, with rich formatting tools for users to compose content.",
    "The settings and content of a block can be customized in three main places: the block canvas, the block toolbar, and the block inspector.",
    "Blocks are meant to be combined in different ways. Blocks are hierarchical in that a block can be nested within another block. Nested blocks and its container are also called children and parent respectively. For example, a Columns block can be the parent block to multiple child blocks in each of its columns. The API that governs child block usage is named InnerBlocks.",
    "Blocks understand content as attributes and are serializable to HTML. To this point, there is a new Block Grammar. Distilled, the block grammar is an HTML comment, either a self-closing tag or with a beginning tag and ending tag. In the main tag, depending on the block type and user customizations, there can be a JSON object. This raw form of the block is referred to as serialized.",
    "Blocks can be static or dynamic. Static blocks contain rendered content and an object of Attributes used to re-render based on changes. Dynamic blocks require server-side data and rendering while the post content is being generated (rendering).",
    "Each block contains Attributes or configuration settings, which can be sourced from raw HTML in the content via meta or other customizable origins.",
    "More on Data format and data flow.",
    "Blocks have the ability to be transformed into other block types. This allows basic operations like converting a paragraph into a heading, but also more intricate ones like multiple images becoming a gallery. Block transforms work for single blocks and for multi-block selections. Internal block variations are also possible transformation targets.",
    "Given a block type, a block variation is a predefined set of its initial attributes. This API allows creating a single block from which multiple configurations are possible. Variations provide different possible interfaces, including showing up as entirely new blocks in the library, or as presets when inserting a new block. Read the API documentation for more details.",
    "More on Blocks",
    "A reusable blocks is an instance of a block (or multiple blocks) that can be inserted and edited in multiples places, remaining in sync everywhere. If a reusable block is edited in one place, those changes are reflected across all posts and pages that block is used. Examples of reusable blocks include a block consisting of a heading whose content and a custom color that would be appear on multiple pages of the site and sidebar widgets that would appear on every page.",
    "Any edits to a reusable block will appear on every other use of that block, saving time from having to make the same edit on different posts.",
    "Internally, reusable blocks are stored as a hidden post type (wp_block) and are dynamic blocks that “ref” or reference the post_id and return the post_content for that block.",
    "A block pattern is a group of blocks that have been combined together creating a design pattern. These design patterns provide a starting point for building more advanced pages and layouts quickly, instead of inserting individual blocks. A block pattern can be as small as a single block or as large as a full page of content. Unlike reusable blocks, once a pattern is inserted it doesn’t remain in sync with the original content as the blocks contained are meant to be edited and customized by the user. Underneath the surface, patterns are just regular blocks composed together. Themes can register patterns to offer users quick starting points with a design language familiar to that theme’s aesthetics.",
    "While the post editor concentrates on the content of a post, the template editor allows declaring and editing an entire site using blocks, from header to footer. Templates are broken down between templates (that describe a full page) and template parts (that describe reusable areas within a template, including semantic areas like header, sidebar, and footer).",
    "These templates and template parts can be composed together and registered by a theme. They are also entirely editable by users using the block editor; a collection of blocks that interact with different properties and settings of the site (like the site title, description, logo, navigation, etc) are especially useful when editing templates and template parts. Customized templates are saved in a wp_template post type. Block templates include both static pages and dynamic ones, like archives, singular, home, 404, etc.",
    "Note: custom post types can also be initialized with a starting post_content template that should not be confused with the theme template system described above.",
    "More on Site editing templates.",
    "Styles, formerly known as Global Styles and as such referenced in the code, is both an interface that users access through the editor and a configuration system done through a theme.json file. This file absorbs most of the configuration aspects usually scattered through various add_theme_support calls to simplify communicating with the editor. It thus aims to improve declaring what settings should be enabled, what specific tools a theme offers (like a custom color palette), the available design tools present, and an infrastructure that allows to coordinate the styles coming from WordPress, the active theme, and the user.",
    "Learn more about Global Styles.",
    "This module contains helper functions to convert HTML or a DOM tree into a rich text value and back, and to modify the value with functions that are similar to String methods, plus some additional ones for formatting.",
    "The Rich Text package is designed to aid in the manipulation of plain text strings in order that they can represent complex formatting.",
    "By using a RichTextValue value object (referred to from here on as value) it is possible to separate text from formatting, thereby affording the ability to easily search and manipulate rich formats.",
    "Examples of rich formats include:",
    "The value object is comprised of the following:",
    "You should not attempt to create your own value objects. Rather you should rely on the built in methods of the @wordpress/rich-text package to build these for you.",
    "It is important to understand how a value represents richly formatted text. Here is an example to illustrate.",
    "If text is formatted from position 2-5 in bold (core/bold) and from position 2-8 with a link (core/link), then you’ll find:",
    "Here’s how that would look:",
    "Let’s continue to consider the above example with the text Hello world.",
    "If, as a user, I make a selection of the word Hello this would result in a value object with start and end as 0 and 5 respectively.",
    "In general, this is useful for knowing which portion of the text is selected. However, we need to consider that selections may also be “collapsed”.",
    "A collapsed selection is one where start and end values are identical (e.g. start: 4, end: 4). This happens when no characters are selected, but there is a caret present. This most often occurs when a user places the cursor/caret within a string of text but does not make a selection.",
    "Given that the selection has no “range” (i.e. there is no difference between start and end indices), finding the currently selected portion of text from collapsed values can be challenging.",
    "Apply a format object to a Rich Text value from the given startIndex to the given endIndex. Indices are retrieved from the selection if none are provided.",
    "Combine all Rich Text values into one. This is similar to String.prototype.concat.",
    "Create a RichText value from an Element tree (DOM), an HTML string or a plain text string, with optionally a Range object to set the selection. If called without any input, an empty value will be created. If multilineTag is provided, any content of direct children whose type matches multilineTag will be separated by two newlines. The optional functions can be used to filter out content.",
    "A value will have the following shape, which you are strongly encouraged not to modify without the use of helper functions:",
    "As you can see, text and formatting are separated. text holds the text, including any replacement characters for objects and lines. formats, objects and lines are all sparse arrays of the same length as text. It holds information about the formatting at the relevant text indices. Finally start and end state which text indices are selected. They are only provided if a Range was given.",
    "Gets the format object by type at the start of the selection. This can be used to get e.g. the URL of a link format at the current selection, but also to check if a format is active at the selection. Returns undefined if there is no format at the selection.",
    "Gets the all format objects at the start of the selection.",
    "Gets the active object, if there is any.",
    "Get the textual content of a Rich Text value. This is similar to Element.textContent.",
    "Insert a Rich Text value, an HTML string, or a plain text string, into a Rich Text value at the given startIndex. Any content between startIndex and endIndex will be removed. Indices are retrieved from the selection if none are provided.",
    "Insert a format as an object into a Rich Text value at the given startIndex. Any content between startIndex and endIndex will be removed. Indices are retrieved from the selection if none are provided.",
    "Check if the selection of a Rich Text value is collapsed or not. Collapsed means that no characters are selected, but there is a caret present. If there is no selection, undefined will be returned. This is similar to window.getSelection().isCollapsed().",
    "Check if a Rich Text value is Empty, meaning it contains no text or any objects (such as images).",
    "Combine an array of Rich Text values into one, optionally separated by separator, which can be a Rich Text value, HTML string, or plain text string. This is similar to Array.prototype.join.",
    "Registers a new format provided a unique name and an object defining its behavior.",
    "Remove content from a Rich Text value between the given startIndex and endIndex. Indices are retrieved from the selection if none are provided.",
    "Remove any format object from a Rich Text value by type from the given startIndex to the given endIndex. Indices are retrieved from the selection if none are provided.",
    "Search a Rich Text value and replace the match(es) with replacement. This is similar to String.prototype.replace.",
    "Slice a Rich Text value from startIndex to endIndex. Indices are retrieved from the selection if none are provided. This is similar to String.prototype.slice.",
    "Split a Rich Text value in two at the given startIndex and endIndex, or split at the given separator. This is similar to String.prototype.split. Indices are retrieved from the selection if none are provided.",
    "Store definition for the rich-text namespace.",
    "Toggles a format object to a Rich Text value at the current selection.",
    "Create an HTML string from a Rich Text value. If a multilineTag is provided, text separated by a line separator will be wrapped in it.",
    "Unregisters a format.",
    "This hook, to be used in a format type’s Edit component, returns the active element that is formatted, or a virtual element for the selection range if no format is active. The returned value is meant to be used for positioning UI, e.g. by passing it to the Popover component via the anchor prop.",
    "This hook, to be used in a format type’s Edit component, returns the active element that is formatted, or the selection range if no format is active. The returned value is meant to be used for positioning UI, e.g. by passing it to the Popover component.",
    "Redux middleware for generator coroutines.",
    "Install Node if you do not already have it available.",
    "Install the module to your project using npm:",
    "@wordpress/redux-routine leverages both Promises and Generators, two modern features of the JavaScript language. If you need to support older browsers (Internet Explorer 11 or earlier), you will need to provide your own polyfills.",
    "The default export of @wordpress/redux-routine is a function which, given an object of control handlers, returns a Redux middleware function.",
    "For example, consider a common case where we need to issue a network request. We can define the network request as a control handler when creating our middleware.",
    "In this example, when we dispatch retrieveTemperature, it will trigger the control handler to take effect, issuing the network request and assigning the result into the result variable. Only once the\nrequest has completed does the action creator procede to return the SET_TEMPERATURE action type.",
    "Creates a Redux middleware, given an object of controls where each key is an action type for which to act upon, the value a function which returns either a promise which is to resolve when evaluation of the action should continue, or a value. The value or resolved promise value is assigned on the return value of the yield assignment. If the control handler returns undefined, the execution is not continued.",
    "@wordpress/redux-routine shares many of the same motivations as other similar generator-based Redux side effects solutions, including redux-saga. Where it differs is in being less opinionated by virtue of its minimalism. It includes no default controls, offers no tooling around splitting logic flows, and does not include any error handling out of the box. This is intended in promoting approachability to developers who seek to bring asynchronous or conditional continuation flows to their applications without a steep learning curve.",
    "The primary motivations include, among others:",
    "Since your action creators will return an iterable generator of plain action objects, they are trivial to test.",
    "Consider again our above example:",
    "A test case (using Node’s assert built-in module) may be written as:",
    "If your action creator does not assign the yielded result into a variable, you can also use Array.from to create an array from the result of the action creator.",
    "Package used to add import/export links to the listing page of the reusable blocks.",
    "Keycodes utilities for WordPress, used to check the key pressed in events like onKeyDown. Contains keycodes constants for keyboard keys like DOWN, UP, ENTER, etc.",
    "Check which key was used in an onKeyDown event:",
    "Keycode for ALT key.",
    "Keycode for BACKSPACE key.",
    "Keycode for COMMAND/META key.",
    "Keycode for CTRL key.",
    "Keycode for DELETE key.",
    "An object that contains functions to display shortcuts.",
    "Return an array of the parts of a keyboard shortcut chord for display.",
    "Keycode for DOWN key.",
    "Keycode for END key.",
    "Keycode for ENTER key.",
    "Keycode for ESCAPE key.",
    "Keycode for F10 key.",
    "Keycode for HOME key.",
    "Return true if platform is MacOS.",
    "An object that contains functions to check if a keyboard event matches a predefined shortcut combination.",
    "Keycode for LEFT key.",
    "Object that contains functions that return the available modifier depending on platform.",
    "Keycode for PAGEDOWN key.",
    "Keycode for PAGEUP key.",
    "An object that contains functions to get raw shortcuts.",
    "These are intended for user with the KeyboardShortcuts.",
    "Keycode for RIGHT key.",
    "Keycode for SHIFT key.",
    "An object that contains functions to return an aria label for a keyboard shortcut.",
    "Keycode for SPACE key.",
    "Keycode for TAB key.",
    "Keycode for UP key.",
    "Keycode for ZERO key.",
    "A function for performing a shallow comparison between two objects or arrays. Two values have shallow equality when all of their members are strictly equal to the corresponding member of the other.",
    "The default export of @wordpress/is-shallow-equal is a function which accepts two objects or arrays:",
    "You can import a specific implementation if you already know the types of values you are working with:",
    "Shallow comparison differs from deep comparison by the fact that it compares members from each as being strictly equal to the other, meaning that arrays and objects will be compared by their references, not by their values (see also Object Equality in JavaScript.) In situations where nested objects must be compared by value, consider using fast-deep-equal instead.",
    "Shallow equality utilities are already a dime a dozen. Since these operations are often at the core of critical hot code paths, the WordPress contributors had specific requirements that were found to only be partially satisfied by existing solutions.",
    "In particular, it should…",
    "The following results were produced under Node v10.15.3 (LTS) on a MacBook Pro (Late 2016) 2.9 GHz Intel Core i7.",
    "@wordpress/is-shallow-equal (type specific) (object, equal) x 4,519,009 ops/sec ±1.09% (90 runs sampled) >@wordpress/is-shallow-equal (type specific) (object, same) x 795,527,700 ops/sec ±0.24% (93 runs sampled) >@wordpress/is-shallow-equal (type specific) (object, unequal) x 4,841,640 ops/sec ±0.94% (93 runs sampled) >@wordpress/is-shallow-equal (type specific) (array, equal) x 106,393,795 ops/sec ±0.16% (94 runs sampled) >@wordpress/is-shallow-equal (type specific) (array, same) x 800,741,511 ops/sec ±0.22% (95 runs sampled) >@wordpress/is-shallow-equal (type specific) (array, unequal) x 49,178,977 ops/sec ±1.99% (82 runs sampled)",
    "@wordpress/is-shallow-equal (object, equal) x 4,449,367 ops/sec ±0.31% (91 runs sampled) >@wordpress/is-shallow-equal (object, same) x 796,677,179 ops/sec ±0.23% (94 runs sampled) >@wordpress/is-shallow-equal (object, unequal) x 4,989,529 ops/sec ±0.30% (91 runs sampled) >@wordpress/is-shallow-equal (array, equal) x 44,840,546 ops/sec ±1.18% (89 runs sampled) >@wordpress/is-shallow-equal (array, same) x 794,344,723 ops/sec ±0.24% (91 runs sampled) >@wordpress/is-shallow-equal (array, unequal) x 49,860,115 ops/sec ±1.73% (85 runs sampled)",
    "shallowequal (object, equal) x 3,702,126 ops/sec ±0.87% (92 runs sampled) >shallowequal (object, same) x 796,649,597 ops/sec ±0.21% (92 runs sampled) >shallowequal (object, unequal) x 4,027,885 ops/sec ±0.31% (96 runs sampled) >shallowequal (array, equal) x 1,684,977 ops/sec ±0.37% (94 runs sampled) >shallowequal (array, same) x 794,287,091 ops/sec ±0.26% (91 runs sampled) >shallowequal (array, unequal) x 1,738,554 ops/sec ±0.29% (91 runs sampled)",
    "shallow-equal (type specific) (object, equal) x 4,669,656 ops/sec ±0.34% (92 runs sampled) >shallow-equal (type specific) (object, same) x 799,610,214 ops/sec ±0.20% (95 runs sampled) >shallow-equal (type specific) (object, unequal) x 4,908,591 ops/sec ±0.49% (93 runs sampled) >shallow-equal (type specific) (array, equal) x 104,711,254 ops/sec ±0.65% (91 runs sampled) >shallow-equal (type specific) (array, same) x 798,454,281 ops/sec ±0.29% (94 runs sampled) >shallow-equal (type specific) (array, unequal) x 48,764,338 ops/sec ±1.48% (84 runs sampled)",
    "is-equal-shallow (object, equal) x 5,068,750 ops/sec ±0.28% (92 runs sampled) >is-equal-shallow (object, same) x 17,231,997 ops/sec ±0.42% (92 runs sampled) >is-equal-shallow (object, unequal) x 5,524,878 ops/sec ±0.41% (92 runs sampled) >is-equal-shallow (array, equal) x 1,067,063 ops/sec ±0.40% (92 runs sampled) >is-equal-shallow (array, same) x 1,074,356 ops/sec ±0.20% (94 runs sampled) >is-equal-shallow (array, unequal) x 1,758,859 ops/sec ±0.44% (92 runs sampled)",
    "shallow-equals (object, equal) x 8,380,550 ops/sec ±0.31% (90 runs sampled) >shallow-equals (object, same) x 27,583,073 ops/sec ±0.60% (91 runs sampled) >shallow-equals (object, unequal) x 8,954,268 ops/sec ±0.71% (92 runs sampled) >shallow-equals (array, equal) x 104,437,640 ops/sec ±0.22% (96 runs sampled) >shallow-equals (array, same) x 141,850,542 ops/sec ±0.25% (93 runs sampled) >shallow-equals (array, unequal) x 47,964,211 ops/sec ±1.51% (84 runs sampled)",
    "fbjs/lib/shallowEqual (object, equal) x 3,366,709 ops/sec ±0.35% (93 runs sampled) >fbjs/lib/shallowEqual (object, same) x 794,825,194 ops/sec ±0.24% (94 runs sampled) >fbjs/lib/shallowEqual (object, unequal) x 3,612,268 ops/sec ±0.37% (94 runs sampled) >fbjs/lib/shallowEqual (array, equal) x 1,613,800 ops/sec ±0.23% (90 runs sampled) >fbjs/lib/shallowEqual (array, same) x 794,861,384 ops/sec ±0.24% (93 runs sampled) >fbjs/lib/shallowEqual (array, unequal) x 1,648,398 ops/sec ±0.77% (92 runs sampled)",
    "You can run the benchmarks yourselves by cloning the repository, installing dependencies, and running the benchmark/index.js script:",
    "Internationalization utilities for client-side localization. See How to Internationalize Your Plugin for server-side documentation.",
    "Install the module:",
    "For a complete example, see the Internationalization section of the Block Editor Handbook.",
    "Create an i18n instance",
    "Default, singleton instance of I18n.",
    "Returns locale data by domain in a Jed-formatted JSON object shape.",
    "Check if there is a translation for a given string (in singular form).",
    "Check if current locale is RTL.",
    "RTL (Right To Left) is a locale property indicating that text is written from right to left. For example, the he locale (for Hebrew) specifies right-to-left. Arabic (ar) is another common language written RTL. The opposite of RTL, LTR (Left To Right) is used in other languages, including English (en, en-US, en-GB, etc.), Spanish (es), and French (fr).",
    "Resets all current Tannin instance locale data and sets the specified locale data for the domain. Accepts data in a Jed-formatted JSON object shape.",
    "Merges locale data into the Tannin instance by domain. Accepts data in a Jed-formatted JSON object shape.",
    "Returns a formatted string. If an error occurs in applying the format, the original format string is returned.",
    "Subscribes to changes of locale data",
    "Translates and retrieves the singular or plural form based on the supplied number.",
    "Translates and retrieves the singular or plural form based on the supplied number, with gettext context.",
    "Retrieve translated string with gettext context.",
    "Retrieve the translation of text.",
    "HTML entity utilities for WordPress.",
    "Decodes the HTML entities from a given string.",
    "Escape HTML utils.",
    "Returns a string with ampersands escaped. Note that this is an imperfect implementation, where only ampersands which do not appear as a pattern of named, decimal, or hexadecimal character references are escaped. Invalid named references (i.e. ambiguous ampersand) are still permitted.",
    "Returns an escaped attribute value.",
    "Note we also escape the greater than symbol, as this is used by wptexturize to\nsplit HTML strings. This is a WordPress specific fix",
    "Note that if a resolution for Trac#45387 comes to fruition, it is no longer\nnecessary for __unstableEscapeGreaterThan to be used.",
    "See: https://core.trac.wordpress.org/ticket/45387",
    "Returns an escaped Editable HTML element value. This is different from escapeHTML, because for editable HTML, ALL ampersands must be escaped in order to render the content correctly on the page.",
    "Returns an escaped HTML element value.",
    "Returns a string with less-than sign replaced.",
    "Returns a string with quotation marks replaced.",
    "Returns true if the given attribute name is valid, or false otherwise.",
    "This module utilizes components from the @wordpress/block-editor package. Having an awareness of the concept of a WordPress post, it associates the loading and saving mechanism of the value representing blocks to a post and its content. It also provides various components relevant for working with a post object in the context of an editor (e.g., a post title input component). This package can support editing posts of any post type and does not assume that rendering happens in any particular WordPress screen or layout arrangement.",
    "The logic flow concerning the editor includes: inferring a block representation of the post content (parsing); describing the state of a post (representation); rendering of the post to the DOM (rendering); attaching controls to manipulate the content a.k.a blocks (UI).",
    "The goal of the editor element is to let the user manipulate the content of their posts in a deterministic way—organized through the presence of blocks of content. Usually, in a declarative flow, the pieces that compose a post would be represented in a certain order and the machine would be able to generate an output view from it with the necessary UI controls. However, we don’t begin in WordPress with a representation of the state of the post that is conductive to this expression nor one that even has any knowledge of blocks because content is stored in a serialized way in a single field.",
    "Such a crucial step is handled by the grammar parsing which takes the serialized content of the post and infers an ordered block list using, preferably, syntax hints present in HTML comments. The editor is initialized with a state representation of the block nodes generated by the parsing of the raw content of a post element: wp.blocks.parse( post.content.raw ).",
    "The visual editor is thus a component that contains and renders the list of block nodes from the internal state into the page. This removes any trace of imperative handling when it comes to finding a block and manipulating a block. As a matter of fact, the visual editor or the text editor are just two different—equally valid—views of the same representation of state. The internal representation of the post content is updated as blocks are updated and it is serialized back to be saved in post_content.",
    "Individual blocks are handled by the VisualBlock component, which attaches event handlers and renders the edit function of a block definition to the document with the corresponding attributes and local state. The edit function is the markup shape of a component while in editing mode.",
    "Because many blocks share the same complex behaviors, reusable components are made available to simplify implementations of your block’s edit function.",
    "When returned by your block’s edit implementation, renders a toolbar of icon buttons. This is useful for block-level modifications to be made available when a block is selected. For example, if your block supports alignment, you may want to display alignment options in the selected block’s toolbar.",
    "Note in this example that we render AlignmentToolbar as a child of the BlockControls element. This is another pre-configured component you can use to simplify block text alignment.",
    "Alternatively, you can create your own toolbar controls by passing an array of controls as a prop to the BlockControls component. Each control should be an object with the following properties:",
    "To create divisions between sets of controls within the same BlockControls element, passing controls instead as a nested array (array of arrays of objects). A divider will be shown between each set of controls.",
    "Render a rich contenteditable input, providing users the option to add emphasis to content or links to content. It behaves similarly to a controlled component, except that onChange is triggered less frequently than would be expected from a traditional input field, usually when the user exits the field.",
    "The following properties (non-exhaustive list) are made available:",
    "Execute callback after the DOM is loaded.",
    "Specify a function to execute when the DOM is fully loaded.",
    "See https://make.wordpress.org/core/handbook/best-practices/browser-support/",
    "DOM utilities module for WordPress.",
    "Get the rectangle for the selection in a container.",
    "Check whether the current document has a selection. This includes focus in input fields, textareas, and general rich-text selection.",
    "Check whether the current document has selected text. This applies to ranges of text in the document, and not selection inside <input> and <textarea> elements.",
    "See: https://developer.mozilla.org/en-US/docs/Web/API/Window/getSelection#Related_objects.",
    "Check whether the current document has any sort of (uncollapsed) selection. This includes ranges of text across elements and any selection inside textual <input> and <textarea> elements.",
    "Object grouping focusable and tabbable utils under the keys with the same name.",
    "Gets all files from a DataTransfer object.",
    "Returns the closest positioned element, or null under any of the conditions of the offsetParent specification. Unlike offsetParent, this function is not limited to HTMLElement and accepts any Node (e.g. Node.TEXT_NODE).",
    "Get schema of possible paths for phrasing content.",
    "Get the rectangle of a given Range. Returns null if no suitable rectangle can be found.",
    "Given a DOM node, finds the closest scrollable container node or the node itself, if scrollable.",
    "Given two DOM nodes, inserts the former in the DOM as the next sibling of the latter.",
    "Recursively checks if an element is empty. An element is not empty if it contains text or contains elements with attributes such as images.",
    "Check whether the contents of the element have been entirely selected. Returns true if there is no possibility of selection.",
    "Detects if element is a form element.",
    "Check whether the selection is horizontally at the edge of the container.",
    "Check whether the given element is an input field of type number.",
    "Find out whether or not the given node is phrasing content.",
    "Whether the element’s text direction is right-to-left.",
    "Check whether the given element is a text field, where text field is defined by the ability to select within the input, or that it is contenteditable.",
    "See: https://html.spec.whatwg.org/#textFieldSelection",
    "Check whether the selection is vertically at the edge of the container.",
    "Places the caret at start or end of a given element.",
    "Places the caret at the top or bottom of a given element.",
    "Given a DOM node, removes it from the DOM.",
    "Given a schema, unwraps or removes nodes, attributes and classes on HTML.",
    "Given two DOM nodes, replaces the former with the latter in the DOM.",
    "Replaces the given node with a new node with the given tag name.",
    "Strips scripts and on* attributes from HTML.",
    "Unwrap the given node. This means any child nodes are moved to the parent.",
    "Wraps the given node with a new node with the given tag name.",
    "Date module for WordPress.",
    "Formats a date (like date() in PHP).",
    "Formats a date (like wp_date() in PHP), translating it into site’s locale.",
    "Backward Compatibility Notice: if timezone is set to true, the function behaves like gmdateI18n.",
    "Formats a date. Does not alter the date’s timezone.",
    "Create and return a JavaScript Date Object from a date string in the WP timezone.",
    "Returns the currently defined date settings.",
    "Formats a date (like date() in PHP), in the UTC timezone.",
    "Formats a date (like wp_date() in PHP), translating it into site’s locale and using the UTC timezone.",
    "Check whether a date is considered in the future according to the WordPress settings.",
    "Adds a locale to moment, using the format supplied by wp_localize_script().",
    "Core Data is a data module intended to simplify access to and manipulation of core WordPress entities. It registers its own store and provides a number of selectors which resolve data from the WordPress REST API automatically, along with dispatching action creators to manipulate data. Core data is shipped with TypeScript definitions for WordPress data types.",
    "Used in combination with features of the data module such as subscribe or higher-order components, it enables a developer to easily add data into the logic and display of their plugin.",
    "Below is an example of a component which simply renders a list of authors:",
    "The following set of dispatching action creators are available on the object returned by wp.data.dispatch( 'core' ):",
    "Returns an action object used in adding new entities.",
    "Action triggered to delete an entity record.",
    "Returns an action object that triggers an edit to an entity record.",
    "Returns an action object used in signalling that entity records have been received.",
    "Deprecated since WP 5.9, this is not useful anymore, use the selector direclty.",
    "Returns an action object used in signalling that the index has been received.",
    "Deprecated since WP 5.9, use receiveUserPermission instead.",
    "Returns an action object used in signalling that Upload permissions have been received.",
    "Action triggered to redo the last undoed edit to an entity record, if any.",
    "Action triggered to save an entity record’s edits.",
    "Action triggered to save an entity record.",
    "Action triggered to undo the last edit to an entity record, if any.",
    "The following selectors are available on the object returned by wp.data.select( 'core' ):",
    "Returns whether the current user can perform the given action on the given REST resource.",
    "Calling this may trigger an OPTIONS request to the REST API via the canUser() resolver.",
    "https://developer.wordpress.org/rest-api/reference/",
    "Returns whether the current user can edit the given entity.",
    "Deprecated since 11.3. Callers should use select( 'core' ).getUsers({ who: 'authors' }) instead.",
    "Returns all available authors.",
    "Returns the autosave for the post and author.",
    "Returns the latest autosaves for the post.",
    "May return multiple autosaves since the backend stores one autosave per author for each post.",
    "Retrieve the list of registered block pattern categories.",
    "Retrieve the list of registered block patterns.",
    "Return the current theme.",
    "Returns the current user.",
    "Returns the specified entity record, merged with its edits.",
    "Returns the embed preview for the given URL.",
    "Deprecated since WordPress 6.0. Use getEntitiesConfig instead",
    "Returns the loaded entities for the given kind.",
    "Deprecated since WordPress 6.0. Use getEntityConfig instead",
    "Returns the entity config given its kind and name.",
    "Returns the Entity’s record object by key. Returns null if the value is not yet received, undefined if the value entity is known to not exist, or the entity object if it exists and is received.",
    "Returns the specified entity record’s edits.",
    "Returns the specified entity record’s non transient edits.",
    "Transient edits don’t create an undo level, and are not considered for change detection. They are defined in the entity’s config.",
    "Returns the Entity’s records.",
    "Returns the specified entity record’s last delete error.",
    "Returns the specified entity record’s last save error.",
    "Returns the entity’s record object by key, with its attributes mapped to their raw values.",
    "Returns the next edit from the current undo offset for the entity records edits history, if any.",
    "Returns a new reference when edited values have changed. This is useful in inferring where an edit has been made between states by comparison of the return values using strict equality.",
    "Return theme supports data in the index.",
    "Returns the previous edit from the current undo offset for the entity records edits history, if any.",
    "Returns all the users returned by a query ID.",
    "Returns true if the specified entity record has edits, and false otherwise.",
    "Returns true if records have been received for the given set of parameters, or false otherwise.",
    "Returns true if the REST request for autosaves has completed.",
    "Returns true if there is a next edit from the current undo offset for the entity records edits history, and false otherwise.",
    "Returns true if there is a previous edit from the current undo offset for the entity records edits history, and false otherwise.",
    "Returns true if the specified entity record is autosaving, and false otherwise.",
    "Returns true if the specified entity record is deleting, and false otherwise.",
    "Determines if the returned preview is an oEmbed link fallback.",
    "WordPress can be configured to return a simple link to a URL if it is not embeddable. We need to be able to determine if a URL is embeddable or not, based on what we get back from the oEmbed preview API.",
    "Returns true if a request is in progress for embed preview data, or false otherwise.",
    "Returns true if the specified entity record is saving, and false otherwise.",
    "The following set of react hooks available to import from the @wordpress/core-data package:",
    "Resolves the specified entity record.",
    "In the above example, when PageTitleDisplay is rendered into an\napplication, the page and the resolution details will be retrieved from\nthe store state using getEntityRecord(), or resolved if missing.",
    "In the above example, updating and saving the page title is handled\nvia the edit() and save() mutation helpers provided by\nuseEntityRecord();",
    "Changelog",
    "6.1.0 Introduced in WordPress core.",
    "Resolves the specified entity records.",
    "In the above example, when PageTitlesList is rendered into an\napplication, the list of records and the resolution details will be retrieved from\nthe store state using getEntityRecords(), or resolved if missing.",
    "Resolves resource permissions.",
    "In the above example, when PagesList is rendered into an\napplication, the appropriate permissions and the resolution details will be retrieved from\nthe store state using canUser(), or resolved if missing.",
    "The compose package is a collection of handy Hooks and Higher Order Components (HOCs) you can use to wrap your WordPress components and provide some basic features like: state, instance id, pure…",
    "The compose function is inspired by flowRight from Lodash and works the same way. It comes from functional programming, and allows you to compose any number of functions. You might also think of this as layering functions; compose will execute the last function first, then sequentially move back through the previous functions passing the result of each function upward.",
    "An example that illustrates it for two functions:",
    "Here’s a simplified example of compose in use from Gutenberg’s PluginSidebar component:",
    "Using compose:",
    "Without compose, the code would look like this:",
    "For more details, you can refer to each Higher Order Component’s README file. Available components are located here.",
    "Composes multiple higher-order components into a single higher-order component. Performs right-to-left function composition, where each successive invocation is supplied the return value of the previous.",
    "This is inspired by lodash‘s flowRight function.",
    "Given a function mapping a component to an enhanced component and modifier name, returns the enhanced component augmented with a generated displayName.",
    "A simplified and properly typed version of lodash’s debounce, that always uses timers instead of sometimes using rAF.",
    "Creates a debounced function that delays invoking func until after wait milliseconds have elapsed since the last time the debounced function was invoked. The debounced function comes with a cancel method to cancel delayed func invocations and a flush method to immediately invoke them. Provide options to indicate whether func should be invoked on the leading and/or trailing edge of the wait timeout. The func is invoked with the last arguments provided to the debounced function. Subsequent calls to the debounced function return the result of the last func invocation.",
    "Note: If leading and trailing options are true, func is invoked on the trailing edge of the timeout only if the debounced function is invoked more than once during the wait timeout.",
    "If wait is 0 and leading is false, func invocation is deferred until the next tick, similar to setTimeout with a timeout of 0.",
    "Higher-order component creator, creating a new component which renders if the given condition is satisfied or with the given optional prop name.",
    "Composes multiple higher-order components into a single higher-order component. Performs left-to-right function composition, where each successive invocation is supplied the return value of the previous.",
    "This is inspired by lodash‘s flow function.",
    "Given a component returns the enhanced component augmented with a component only re-rendering when its props/state change",
    "A simplified and properly typed version of lodash’s throttle, that always uses timers instead of sometimes using rAF.",
    "Creates a throttled function that only invokes func at most once per every wait milliseconds. The throttled function comes with a cancel method to cancel delayed func invocations and a flush method to immediately invoke them. Provide options to indicate whether func should be invoked on the leading and/or trailing edge of the wait timeout. The func is invoked with the last arguments provided to the throttled function. Subsequent calls to the throttled function return the result of the last func invocation.",
    "Note: If leading and trailing options are true, func is invoked on the trailing edge of the timeout only if the throttled function is invoked more than once during the wait timeout.",
    "React hook returns an array which items get asynchronously appended from a source array. This behavior is useful if we want to render a list of items asynchronously for performance reasons.",
    "In Dialogs/modals, the tabbing must be constrained to the content of the wrapper element. This hook adds the behavior to the returned ref.",
    "Copies the text to the clipboard when the element is clicked.",
    "Copies the given text to the clipboard when the element is clicked.",
    "Debounces a function similar to Lodash’s debounce. A new debounced function will be returned and any scheduled calls cancelled if any of the arguments change, including the function to debounce, so please wrap functions created on render in components in useCallback.",
    "In some circumstances, such as block previews, all focusable DOM elements (input fields, links, buttons, etc.) need to be disabled. This hook adds the behavior to disable nested DOM elements to the returned ref.",
    "If you can, prefer the use of the inert HTML attribute.",
    "Dispatches a bubbling focus event when the iframe receives focus. Use onFocus as usual on the iframe or a parent element.",
    "Hook used to focus the first tabbable element on mount.",
    "When opening modals/sidebars/dialogs, the focus must move to the opened area and return to the previously focused element when closed. The current hook implements the returning behavior.",
    "Provides a unique instance ID.",
    "Preferred over direct usage of useLayoutEffect when supporting server rendered components (SSR) because currently React throws a warning when using useLayoutEffect in that environment.",
    "Attach a keyboard shortcut handler.",
    "Runs a media query and returns its value when it changes.",
    "Merges refs into one ref callback.",
    "It also ensures that the merged ref callbacks are only called when they change (as a result of a useCallback dependency update) OR when the ref value changes, just as React does when passing a single ref callback to the component.",
    "As expected, if you pass a new function on every render, the ref callback will be called after every render.",
    "If you don’t wish a ref callback to be called after every render, wrap it with useCallback( callback, dependencies ). When a dependency changes, the old ref callback will be called with null and the new ref callback will be called with the same value.",
    "To make ref callbacks easier to use, you can also pass the result of useRefEffect, which makes cleanup easier by allowing you to return a cleanup function instead of handling null.",
    "It’s also possible to disable a ref (and its behaviour) by simply not passing the ref.",
    "Use something’s value from the previous render. Based on https://usehooks.com/usePrevious/.",
    "Hook returning whether the user has a preference for reduced motion.",
    "Effect-like ref callback. Just like with useEffect, this allows you to return a cleanup function to be run if the ref changes or one of the dependencies changes. The ref is provided as an argument to the callback functions. The main difference between this and useEffect is that the useEffect callback is not called when the ref changes, but this is. Pass the returned ref callback as the component’s ref and merge multiple refs with useMergeRefs.",
    "It’s worth noting that if the dependencies array is empty, there’s not strictly a need to clean up event handlers for example, because the node is to be removed. It is necessary if you add dependencies because the ref callback will be called multiple times for the same node.",
    "Hook which allows to listen the resize event of any target element when it changes sizes. _Note: useResizeObserver will report null until after first render.",
    "Throttles a function similar to Lodash’s throttle. A new throttled function will be returned and any scheduled calls cancelled if any of the arguments change, including the function to throttle, so please wrap functions created on render in components in useCallback.",
    "Returns true if the viewport matches the given query, or false otherwise.",
    "Hook that performs a shallow comparison between the preview value of an object and the new one, if there’s a difference, it prints it to the console. this is useful in performance related work, to check why a component re-renders.",
    "Higher-order component creator which, given an object of DOM event types and values corresponding to a callback function name on the component, will create or update a window event handler to invoke the callback when an event occurs. On behalf of the consuming developer, the higher-order component manages unbinding when the component unmounts, and binding at most a single event handler for the entire application.",
    "A Higher Order Component used to be provide a unique instance ID by component.",
    "A higher-order component used to provide and manage delayed function calls that ought to be bound to a component’s lifecycle.",
    "Deprecated Use useState instead.",
    "A Higher Order Component used to provide and manage internal component state via props.",
    "A block template is defined as a list of block items. Such blocks can have predefined attributes, placeholder content, and be static or dynamic. Block templates allow specifying a default initial state for an editor session.",
    "The scope of templates include:",
    "Planned additions:",
    "Templates can be declared in JS or in PHP as an array of blockTypes (block name and optional attributes).",
    "The first example in PHP creates a template for posts that includes an image block to start, you can add as many or as few blocks to your template as needed.",
    "PHP example:",
    "The following example in JavaScript creates a new block using InnerBlocks and templates, when inserted creates a set of blocks based off the template.",
    "See the Meta Block Tutorial for a full example of a template in use.",
    "To find a comprehensive list of all block attributes that you can define in a template, consult the block’s block.json file, and look at the attributes and supports values.",
    "For example, packages/block-library/src/heading/block.json shows that the block has a level attribute, and supports the anchor parameter.",
    "If you don’t have the Gutenberg plugin installed, you can find block.json files inside wp-includes/blocks/heading/block.json.",
    "A custom post type can register its own template during registration:",
    "Sometimes the intention might be to lock the template on the UI so that the blocks presented cannot be manipulated. This is achieved with a template_lock property.",
    "Options:",
    "Lock settings can be inherited by InnerBlocks. If templateLock is not set in an InnerBlocks area, the locking of the parent InnerBlocks area is used. If the block is a top level block, the locking configuration of the current post type is used.",
    "Alongside template level locking, you can lock individual blocks; you can do this using a lock attribute on the attributes level. Block-level lock takes priority over the templateLock feature. Currently, you can lock moving and removing blocks.",
    "You can use this with templateLock to lock all blocks except a single block by using false in remove or move.",
    "Container blocks like the columns blocks also support templates. This is achieved by assigning a nested template to the block.",
    "This package includes a library of generic WordPress components to be used for creating common UI elements shared between screens and features of the WordPress dashboard.",
    "Within Gutenberg, these components can be accessed by importing from the components root directory:",
    "Many components include CSS to add style, you will need to add in order to appear correctly. Within WordPress, add the wp-components stylesheet as a dependency of your plugin’s stylesheet. See wp_enqueue_style documentation for how to specify dependencies.",
    "In non-WordPress projects, link to the build-style/style.css file directly, it is located at node_modules/@wordpress/components/build-style/style.css.",
    "If you’re using Popover or Tooltip components outside of the editor, make sure they are rendered within a SlotFillProvider and with a Popover.Slot somewhere up the element tree.",
    "By default, the Popover component will render inline i.e. within its\nparent to which it should anchor. Depending upon the context in which the\nPopover is being consumed, this might lead to incorrect positioning. For\nexample, when being nested within another popover.",
    "This issue can be solved by rendering popovers to a specific location in the DOM via the\nPopover.Slot. For this to work, you will need your use of the Popover\ncomponent and its Slot to be wrapped in a SlotFill provider.",
    "A Popover is also used as the underlying mechanism to display Tooltip components.\nSo the same considerations should be applied to them.",
    "The following example illustrates how you can wrap a component using a\nPopover and have those popovers render to a single location in the DOM.",
    "You can browse the components docs and examples at https://wordpress.github.io/gutenberg/",
    "This package also has its own contributing information where you can find additional details.",
    "This library contains the grammar file (grammar.pegjs) for WordPress posts which is a block serialization specification which is used to generate the actual parser which is also bundled in this package.",
    "PEG parser generators are available in many languages, though different libraries may require some translation of this grammar into their syntax. For more information see:",
    "Block library for the WordPress editor.",
    "Function to register core blocks provided by the block editor.",
    "⚠️ Adding new blocks to this package requires additional steps!",
    "Then add blinkingParagraph to the list in the getAllBlocks() function.",
    "If it’s experimental, add the following property to block.json:",
    "Add init.js file to the directory of the new block:",
    "This file is used when using the option to register individual block from the @wordpress/block-library package.",
    "If a view.js file (or a file prefixed with view, e.g. view-example.js) is present in the block’s directory, this file will be built along other assets, making it available to load from the browser. You only need to reference a view.min.js (notice the different file extension) file in the block.json file as follows:",
    "This file will get automatically loaded when the static block is present on the front end. For dynamic block, you need to manually enqueue the view script in render_callback of the block, example:",
    "Blob utilities for WordPress.",
    "Create a blob URL from a file.",
    "Retrieve a file based on a blob URL. The file must have been created by createBlobURL and not removed by revokeBlobURL, otherwise it will return undefined.",
    "Retrieve a blob type based on URL. The file must have been created by createBlobURL and not removed by revokeBlobURL, otherwise it will return undefined.",
    "Check whether a url is a blob url.",
    "Remove the resource and file cache from memory.",
    "There exists a rich ecosystem of tooling available for web-based end-to-end automated testing. Thus, it’s a common question: “Why does Gutenberg use Puppeteer instead of (Cypress, Selenium, Playwright, etc)?”. Given some historical unreliability of the build results associated with end-to-end tests, it’s especially natural to weigh this question in considering whether our tools are providing more value than the effort required in maintaining them. While we should always be comfortable in reevaluating earlier decisions, there were and continue to be many reasons that Puppeteer is the best compromise of the options available for end-to-end testing.",
    "These include:",
    "For more context, refer to the following resources:",
    "Performance is a key feature for editor applications and the Block editor is not an exception.",
    "To ensure the block editor stays performant across releases and development, we monitor some key metrics using performance benchmark job.",
    "Loading Time: The time it takes to load an editor page. This includes time the server takes to respond, times to first paint, first contentful paint, DOM content load complete, load complete and first block render.\nTyping Time: The time it takes for the browser to respond while typing on the editor.\nBlock Selection Time: The time it takes for the browser to respond after a user selects block. (Inserting a block is also equivalent to selecting a block. Monitoring the selection is sufficient to cover both metrics).",
    "Data Module Async Mode",
    "The Data Module of the WordPress Packages and the Block Editor is based on Redux. It means the state is kept globally and whenever a change happens, the components (UI) relying on that state may update.",
    "As the number of rendered components grows (for example on long posts), the performance suffers because of the global state acting as an event dispatcher to all components. This is a common pitfall in Redux applications and the issue is solved on Gutenberg using the Data Modules Async Mode.",
    "The Async mode is the idea that you can decide whether to refresh/rerender a part of the React component tree synchronously or asynchronously.",
    "Rendering asynchronously in this context means that if a change is triggered in the global state, the subscribers (components) are not called synchronously, instead, we wait for the browser to be idle and perform the updates to React Tree.",
    "Based on the idea that when editing a given block, it is very rare that an update to that block affects other parts of the content, the block editor canvas only renders the selected block is synchronous mode, all the remaining blocks are rendered asynchronously. This ensures that the editor stays responsive as the post grows.",
    "A tool to compare performance across multiple branches/tags/commits is provided. You can run it locally like so: ./bin/plugin/cli.js perf [branches], example:",
    "To get the most accurate results, it’s is important to use the exact same version of the tests and environment (theme…) when running the tests, the only thing that need to be different between the branches is the Gutenberg plugin version (or branch used to build the plugin).",
    "To achieve that the command first prepares the following folder structure:",
    "Once the directory above is in place, the performance command loop over the performance test suites (post editor and site editor) and does the following:",
    "1- Start the environment for branch1\n 2- Run the performance test for the current suite\n 3- Stop the environment for branch1\n 4- Repeat the first 3 steps for all other branches\n 5- Repeat the previous 4 steps 3 times.\n 6- Compute medians for all the performance metrics of the current suite.",
    "Once all the test suites are executed, a summary report is printed.",
    "The WordPress block editor is based around the idea that you can combine independent blocks together to write your post or build your page. Blocks can also use and interact with each other. This makes it very modular and flexible.",
    "But the Block Editor does not embrace modularity for its behavior and output only. The Gutenberg repository is also built from the ground up as several reusable and independent modules or packages, that, combined together, lead to the application and interface we all know. These modules are known as WordPress packages and are published and updated regularly on the npm package repository.",
    "These packages are used to power the Block Editor, but they can be used to power any page in the WordPress Admin or outside.",
    "Using a modular architecture has several benefits for all the actors involved:",
    "Almost everything in the Gutenberg repository is built into a package. We can split these packages into two different types:",
    "These are the packages that ship in WordPress itself as JavaScript scripts. These constitute the actual production code that runs on your browsers. As an example, there’s a components package serving as a reusable set of React components used to prototype and build interfaces quickly. There’s also an api-fetch package that can be used to call WordPress Rest APIs.",
    "Third-party developers can use these production packages in two different ways:",
    "Script dependencies definition can be a tedious task for developers. Mistakes and oversight can happen easily. If you want to learn how you can automate this task. Check the @wordpress/scripts and @wordpress/dependency-extraction-webpack-plugin documentation.",
    "Some production packages provide stylesheets to function properly.",
    "In the context of existing WordPress pages, if you omit to define the scripts or styles dependencies properly, your plugin might still work properly if these scripts and styles are already loaded there by WordPress or by other plugins, but it’s highly recommended to define all your dependencies exhaustively if you want to avoid potential breakage in future versions.",
    "Some WordPress production packages define data stores to handle their state. These stores can also be used by third-party plugins and themes to retrieve data and to manipulate it. The name of these data stores is also normalized following this format core/package-name (E.g. the @wordpress/block-editor package defines and uses the core/block-editor data store).",
    "If you’re using one of these stores to access and manipulate WordPress data in your plugins, don’t forget to add the corresponding WordPress script to your own script dependencies for your plugin to work properly. (For instance, if you’re retrieving data from the core/block-editor store, you should add the wp-block-editor package to your script dependencies like shown above).",
    "These are packages used in development mode to help developers with daily tasks to develop, build and ship JavaScript applications, WordPress plugins and themes. They include tools for linting your codebase, building it, testing it…",
    "It’s often surprising to new contributors to discover that the post editor is constructed as a layered abstraction of three separate packages @wordpress/edit-post, @wordpress/editor, and @wordpress/block-editor.",
    "The above Why? section should provide some context for how individual packages aim to satisfy specific requirements. That applies to these packages as well:",
    "Structured this way, these packages can be used in a variety of combinations outside the use-case of the “New Post” screen:",
    "A block editor post is the proper block-aware representation of a post: a collection of semantically consistent descriptions of what each block is and what its essential data is. This representation only ever exists in memory. It is the chase in the typesetter’s workshop, ever-shifting as sorts are attached and repositioned.",
    "A block editor post is not the artifact it produces, namely the post_content. The latter is the printed page, optimized for the reader but retaining its invisible markings for later editing.",
    "The input and output of the block editor is a tree of block objects with the current format:",
    "Each block object has an id, a set of attributes and potentially a list of child blocks.",
    "Note the attributes keys and types, the allowed inner blocks are defined by the block type. For example, the core quote block has a cite string attribute representing the cite content while a heading block has a numeric level attribute, representing the level of the heading (1 to 6).",
    "During the lifecycle of the block in the editor, the block object can receive extra metadata:",
    "Examples",
    "This data model, however, is something that lives in memory while editing a post. It’s not visible to the page viewer when rendered, just like a printed page has no trace of the structure of the letters that produced it in the press.",
    "Since the whole WordPress ecosystem has an expectation for receiving HTML when rendering or editing a post, the block editor transforms its data into something that can be saved in post_content through serialization. This assures that there’s a single source of truth for the content, and that this source remains readable and compatible with all the tools that interact with WordPress content at the present. Were we to store the object tree separately, we would face the risk of post_content and the tree getting out of sync and the problem of data duplication in both places.",
    "Thus, the serialization process converts the block tree into HTML using HTML comments as explicit block delimiters—which can contain the attributes in non-HTML form. This is the act of printing invisible marks on the printed page that leave a trace of the original structured intention.",
    "This is one end of the process. The other is how to recreate the collection of blocks whenever a post is to be edited again. A formal grammar defines how the serialized representation of a block editor post should be loaded, just as some basic rules define how to turn the tree into an HTML-like string. The block editor’s posts aren’t designed to be edited by hand; they aren’t designed to be edited as HTML documents because the block editor posts aren’t HTML in essence.",
    "They just happen, incidentally, to be stored inside of post_content in a way in which they require no transformation in order to be viewable by any legacy system. It’s true that loading the stored HTML into a browser without the corresponding machinery might degrade the experience, and if it included dynamic blocks of content, the dynamic elements may not load, server-generated content may not appear, and interactive content may remain static. However, it at least protects against not being able to view block editor posts on themes and installations that are blocks-unaware, and it provides the most accessible way to the content. In other words, the post remains mostly intact even if the saved HTML is rendered as is.",
    "We chose instead to try to find a way to keep the formality, explicitness, and unambiguity in the existing HTML syntax. Within the HTML there were a number of options.",
    "Of these options, a novel approach was suggested: by storing data in HTML comments, we would know that we wouldn’t break the rest of the HTML in the document, that browsers should ignore it, and that we could simplify our approach to parsing the document.",
    "Unique to HTML comments is the fact that they cannot legitimately exist in ambiguous places, such as inside of HTML attributes like <img alt='data-id=\"14\"'>. Comments are also quite permissive. Whereas HTML attributes are complicated to parse properly, comments are quite easily described by a leading <!-- followed by anything except -- until the first -->. This simplicity and permissiveness means that the parser can be implemented in several ways without needing to understand HTML properly, and we have the liberty to use more convenient syntax inside of the comment—we only need to escape double-hyphen sequences. We take advantage of this in how we store block attributes: as JSON literals inside the comment.",
    "After running this through the parser, we’re left with a simple object we can manipulate idiomatically, and we don’t have to worry about escaping or unescaping the data. It’s handled for us through the serialization process. Because the comments are so different from other HTML tags and because we can perform a first-pass to extract the top-level blocks, we don’t actually depend on having fully valid HTML!",
    "This has dramatic implications for how simple and performant we can make our parser. These explicit boundaries also protect damage in a single block from bleeding into other blocks or tarnishing the entire document. It also allows the system to identify unrecognized blocks before rendering them.",
    "N.B.: The defining aspects of blocks are their semantics and the isolation mechanism they provide: in other words, their identity. On the other hand, where their data is stored is a more liberal aspect. Blocks support more than just static local data (via JSON literals inside the HTML comment or within the block’s HTML), and more mechanisms (e.g., global blocks or otherwise resorting to storage in complementary WP_Post objects) are expected. See attributes for details.",
    "When blocks are saved to the content after the editing session, its attributes—depending on the nature of the block—are serialized to these explicit comment delimiters.",
    "A purely dynamic block that is to be server-rendered before display could look like this:",
    "In summary, the block editor workflow parses the saved document to an in-memory tree of blocks, using token delimiters to help. During editing, all manipulations happen within the block tree. The process ends by serializing the blocks back to the post_content.",
    "The workflow process relies on a serialization/parser pair to persist posts. Hypothetically, the post data structure could be stored using a plugin or retrieved from a remote JSON file to be converted to the block tree.",
    "Internationalization is the process to provide multiple language support to software, in this case WordPress. Internationalization is often abbreviated as i18n, where 18 stands for the number of letters between the first i and the last n.",
    "Providing i18n support to your plugin and theme allows it to reach the largest possible audience, even without requiring you to provide the additional language translations. When you upload your software to WordPress.org, all JS and PHP files will automatically be parsed. Any detected translation strings are added to translate.wordpress.org to allow the community to translate, ensuring WordPress plugins and themes are available in as many languages as possible.",
    "For PHP, WordPress has a long established process, see How to Internationalize Your Plugin. The release of WordPress 5.0 brings a similar process for translation to JavaScript code.",
    "WordPress 5.0 introduced the wp-i18n JavaScript package that provides the functions needed to add translatable strings as you would in PHP.",
    "First, add wp-i18n as a dependency when registering your script:",
    "In your code, you can include the i18n functions. The most common function is __ (a double underscore) which provides translation of a simple string. Here is a basic block example:",
    "In the above example, the function will use the first argument for the string to be translated. The second argument is the text domain which must match the text domain slug specified by your plugin.",
    "Common functions available, these mirror their PHP counterparts are:",
    "After all strings in your code is wrapped, the final step is to tell WordPress your JavaScript contains translations, using the wp_set_script_translations()  function.",
    "This is all you need to make your plugin JavaScript code translatable.",
    "When you set script translations for a handle WordPress will automatically figure out if a translations file exists on translate.wordpress.org, and if so ensure that it’s loaded into wp.i18n before your script runs. With translate.wordpress.org, plugin authors also do not need to worry about setting up their own infrastructure for translations and can rely on a global community with dozens of active locales. Read more about WordPress Translations.",
    "You can create and ship your own translations with your plugin, if you have sufficient knowledge of the language(s) you can ensure the translations are available.",
    "The translation files must be in the JED 1.x JSON format.",
    "To create a JED translation file, first you need to extract the strings from the text. Typically, the language files all live in a directory called languages in your plugin. Using WP-CLI, you create a .pot file using the following command from within your plugin directory:",
    "This will create the file myguten.pot which contains all the translatable strings from your project.",
    "Here, msgid is the string to be translated, and msgstr is the actual translation. In the POT file, msgstr will always be empty.",
    "This POT file can then be used as the template for new translations. You should copy the file using the language code you are going to translate, this example will use the Esperanto (eo) language:",
    "For this simple example, you can simply edit the .po file in your editor and add the translation to all the msgstr sets. For a larger, more complex set of translation, the GlotPress and Poedit tools exist to help.",
    "You need also to add the Language: eo parameter. Here is full myguten-eo.po translated file",
    "The last step to create the translation file is to convert the myguten-eo.po to the JSON format needed. For this, you can use WP-CLI’s wp i18n make-json command, which requires WP-CLI v2.2.0 and later.",
    "This will generate the JSON file myguten-eo-[md5].json with the contents:",
    "The final part is to tell WordPress where it can look to find the translation file. The wp_set_script_translations function accepts an optional third argument that is the path it will first check for translations. For example:",
    "WordPress will check for a file in that path with the format ${domain}-${locale}-${handle}.json as the source of translations. Alternatively, instead of the registered handle you can use the md5 hash of the relative path of the file, ${domain}-${locale} in the form of ${domain}-${locale}-${md5}.json.",
    "Using make-json automatically names the file with the md5 hash, so it is ready as-is. You could rename the file to use the handle instead, in which case the file name would be myguten-eo-myguten-script.json.",
    "You will need to set your WordPress installation to Esperanto language. Go to Settings > General and change your site language to Esperanto.",
    "With the language set, create a new post, add the block, and you will see the translations used.",
    "The outputs of the translation functions (__(), _x(), _n(), and _nx()) are filterable, see i18n Filters for full information.",
    "Let’s look at the big picture and the architectural and UX principles of the block editor and the Gutenberg repository.",
    "Namespace: core/viewport.",
    "The actions in this package shouldn’t be used directly.",
    "Nothing to document.",
    "Namespace: core/rich-text.",
    "Returns a format type by name.",
    "Gets the format type, if any, that can handle a bare element (without a data-format-type attribute), given the tag name of this element.",
    "Gets the format type, if any, that can handle an element, given its classes.",
    "Returns all the available format types.",
    "Returns an action object used in signalling that format types have been added.",
    "Returns an action object used to remove a registered format type.",
    "Namespace: core/reusable-blocks.",
    "Namespace: core/nux.",
    "Returns whether or not tips are globally enabled.",
    "Returns an object describing the guide, if any, that the given tip is a part\nof.",
    "Determines whether or not the given tip is showing. Tips are hidden if they\nare disabled, have been dismissed, or are not the current tip in any\nguide that they have been added to.",
    "Returns an action object that, when dispatched, prevents all tips from\nshowing again.",
    "Returns an action object that, when dispatched, dismisses the given tip. A\ndismissed tip will not show again.",
    "Returns an action object that, when dispatched, makes all tips show again.",
    "Returns an action object that, when dispatched, presents a guide that takes\nthe user through a series of tips step by step.",
    "Namespace: core/preferences.",
    "Returns a boolean indicating whether a prefer is active for a particular scope.",
    "Returns an action object used in signalling that a preference should be set to a value",
    "Returns an action object used in signalling that preference defaults should be set.",
    "Sets the persistence layer.",
    "When a persistence layer is set, the preferences store will:",
    "setPersistenceLayer should ideally be dispatched at the start of an application’s lifecycle, before any other actions have been dispatched to the preferences store.",
    "Returns an action object used in signalling that a preference should be toggled.",
    "Namespace: core/notices.",
    "Returns all notices as an array, optionally for a given context. Defaults to the global context.",
    "Returns an action object used in signalling that an error notice is to be created. Refer to createNotice for options documentation.",
    "Returns an action object used in signalling that an info notice is to be created. Refer to createNotice for options documentation.",
    "Returns an action object used in signalling that a notice is to be created.",
    "Returns an action object used in signalling that a success notice is to be created. Refer to createNotice for options documentation.",
    "Returns an action object used in signalling that a warning notice is to be created. Refer to createNotice for options documentation.",
    "Returns an action object used in signalling that a notice is to be removed.",
    "Namespace: core/keyboard-shortcuts.",
    "Returns the raw representation of all the keyboard combinations of a given shortcut name.",
    "Returns the shortcut names list for a given category name.",
    "Returns the aliases for a given shortcut name.",
    "Returns the shortcut description given its name.",
    "Returns the main key combination for a given shortcut name.",
    "Returns a string representing the main key combination for a given shortcut name.",
    "Returns an action object used to register a new keyboard shortcut.",
    "Returns an action object used to unregister a keyboard shortcut.",
    "Namespace: core/editor.",
    "Returns whether or not the user has the unfiltered_html capability.",
    "Returns true if a previous post save was attempted but failed, or false otherwise.",
    "Returns true if a previous post save was attempted successfully, or false otherwise.",
    "Returns the active post lock.",
    "Deprecated since 5.6. Callers should use the getAutosave( postType, postId, userId ) selector from the ‘@wordpress/core-data’ package and access properties on the returned autosave object using getPostRawValue.",
    "Returns an attribute value of the current autosave revision for a post, or null if there is no autosave for the post.",
    "Returns the post currently being edited in its last known saved state, not including unsaved edits. Returns an object containing relevant default post values if the post has not yet been saved.",
    "Returns an attribute value of the saved post.",
    "Returns the ID of the post currently being edited, or null if the post has not yet been saved.",
    "Returns the last revision ID of the post currently being edited, or null if the post has no revisions.",
    "Returns the number of revisions of the post currently being edited.",
    "Returns the post type of the post currently being edited.",
    "Returns a single attribute of the post being edited, preferring the unsaved edit if one exists, but falling back to the attribute for the last known saved state of the post.",
    "Returns the content of the post being edited.",
    "Returns the post preview link",
    "Returns the slug for the post being edited, preferring a manually edited value if one exists, then a sanitized version of the current post title, and finally the post ID.",
    "Returns the current visibility of the post being edited, preferring the unsaved value if different than the saved post. The return value is one of “private”, “password”, or “public”.",
    "Return the current block list.",
    "Returns the current selection.",
    "Deprecated since Gutenberg 10.0.0.",
    "Returns the current selection end.",
    "Returns the current selection start.",
    "Returns the post editor settings.",
    "Returns the permalink for the post.",
    "Returns the permalink for a post, split into it’s three parts: the prefix, the postName, and the suffix.",
    "Returns any post values which have been changed in the editor but not yet been saved.",
    "Returns details about the post lock user.",
    "Returns a post type label depending on the current post.",
    "Deprecated since Gutenberg 9.7.0.",
    "Returns state object prior to a specified optimist transaction ID, or null if the transaction corresponding to the given ID cannot be found.",
    "Returns a suggested post format for the current post, inferred only if there is a single block within the post and it is of a type known to match a default post format. Returns null if the format cannot be determined.",
    "Returns true if content includes unsaved changes, or false otherwise.",
    "Returns true if any future editor history snapshots exist, or false otherwise.",
    "Returns true if any past editor history snapshots exist, or false otherwise.",
    "Returns true if there are unsaved edits for entities other than the editor’s post, and false otherwise.",
    "Returns true if an optimistic transaction is pending commit, for which the before state satisfies the given predicate function.",
    "Returns true if the post is autosaving, or false otherwise.",
    "Returns true if there are no unsaved values for the current edit session and if the currently edited post is new (has never been saved before).",
    "Returns true if post is pending review.",
    "Return true if the current post has already been published.",
    "Returns true if post is already scheduled.",
    "Returns true if the post is currently being deleted, or false otherwise.",
    "Returns true if the post can be autosaved, or false otherwise.",
    "Return true if the post being edited is being scheduled. Preferring the unsaved status values.",
    "Returns whether the current post should be considered to have a “floating” date (i.e. that it would publish “Immediately” rather than at a set time).",
    "Unlike in the PHP backend, the REST API returns a full date string for posts where the 0000-00-00T00:00:00 placeholder is present in the database. To infer that a post is set to publish “Immediately” we check whether the date and modified date are the same.",
    "Returns true if there are unsaved values for the current edit session, or false if the editing state matches the saved or new post.",
    "Returns true if the edited post has content. A post has content if it has at least one saveable block or otherwise has a non-empty content property assigned.",
    "Returns true if the currently edited post is yet to be saved, or false if the post has been saved.",
    "Return true if the post being edited can be published.",
    "Returns true if the post can be saved, or false otherwise. A post must contain a title, an excerpt, or non-empty content to be valid for save.",
    "Returns whether the permalink is editable or not.",
    "Returns whether post autosaving is locked.",
    "Returns whether the post is locked.",
    "Returns whether the edition of the post has been taken over.",
    "Returns whether post saving is locked.",
    "Returns true if the post is being previewed, or false otherwise.",
    "Returns true if the post is being published, or false otherwise.",
    "Returns whether the pre-publish panel should be shown or skipped when the user clicks the “publish” button.",
    "Returns true if non-post entities are currently being saved, or false otherwise.",
    "Returns true if the post is currently being saved, or false otherwise.",
    "Action that autosaves the current post. This includes server-side autosaving (default) and client-side (a.k.a. local) autosaving (e.g. on the Web, the post might be committed to Session Storage).",
    "Deprecated Since WordPress 6.0",
    "Action that creates an undo history record.",
    "Disables the publish sidebar.",
    "Returns an action object used in signalling that attributes of the post have been edited.",
    "Enable the publish sidebar.",
    "Action that locks post autosaving.",
    "Action that locks post saving.",
    "Action that restores last popped state in undo history.",
    "Deprecated Since WordPress 6.0.",
    "Action for refreshing the current post.",
    "Returns an action object used to signal that the blocks have been updated.",
    "Returns an action object used in signalling that the latest version of the post has been received, either by initialization or save.",
    "Action for saving the current post in the editor.",
    "Returns an action generator used in signalling that editor has initialized with the specified post object and editor settings.",
    "Returns an action object used to setup the editor state when first opening an editor.",
    "Action for trashing the current post in the editor.",
    "Action that pops a record from undo history and undoes the edit.",
    "Action that unlocks post autosaving.",
    "Action that unlocks post saving.",
    "Returns an action object used in signalling that a patch of updates for the latest version of the post have been received.",
    "Action that locks the editor.",
    "Namespace: core/edit-widgets.",
    "Returns true if a block can be inserted into a widget area.",
    "Returns all edited widget area entity records.",
    "Gets whether the widget area is opened.",
    "Given a child client id, returns the parent widget area block.",
    "Returns all blocks representing reference widgets.",
    "Returns API widget data for a particular widget ID.",
    "Returns widgetArea containing a block identify by given widgetId",
    "Returns all API widget areas.",
    "Returns all API widgets.",
    "Returns true if the inserter is opened.",
    "Returns true if the list view is opened.",
    "Returns true if any widget area is currently being saved.",
    "Returns an action object signalling that the user closed the sidebar.",
    "Action that handles moving a block between widget areas",
    "Persists a stub post with given ID to core data store. The post is meant to be in-memory only and shouldn’t be saved via the API.",
    "Converts all the blocks from edited widget areas into widgets, and submits a batch request to save everything at once.",
    "Creates a snackbar notice on either success or error.",
    "Converts all the blocks from a widget area specified by ID into widgets, and submits a batch request to save everything at once.",
    "Converts all the blocks from specified widget areas into widgets, and submits a batch request to save everything at once.",
    "Returns an action object used to open/close the inserter.",
    "Returns an action object used to open/close the list view.",
    "Sets the open state of the widget area.",
    "Sets the open state of all the widget areas.",
    "Sets the clientId stored for a particular widgetId.",
    "Namespace: core/edit-site.",
    "Returns whether the current user can create media or not.",
    "Returns the template parts and their blocks for the current edited template.",
    "Returns the edited post’s context object.",
    "Returns the ID of the currently edited template or template part.",
    "Returns the current edited post type (wp_template or wp_template_part).",
    "Returns the current editing mode.",
    "Returns the current page object.",
    "Returns any available Reusable blocks.",
    "Returns the settings, taking into account active features and permissions.",
    "Returns whether the given feature is enabled or not.",
    "Returns the current opened/closed state of the inserter panel.",
    "Returns the current opened/closed state of the list view panel.",
    "Returns the current opened/closed state of the save panel.",
    "Action that adds a new template and sets it as the current template.",
    "Action that closes the sidebar.",
    "Action that opens an editor sidebar.",
    "Opens the navigation panel and sets its active menu at the same time.",
    "Action that removes a template.",
    "Reverts a template to its original theme-provided file.",
    "Set’s the current block editor context.",
    "Opens or closes the inserter.",
    "Sets whether the list view panel should be open.",
    "Sets whether the navigation panel should be open.",
    "Sets whether the save view panel should be open.",
    "Action that sets the active navigation panel menu.",
    "Resolves the template for a page and displays both. If no path is given, attempts to use the postId to generate a path like ?p=${ postId }.",
    "Action that sets a template, optionally fetching it from REST API.",
    "Action that sets a template part.",
    "Dispatches an action that toggles a feature flag.",
    "Returns an action object used to update the settings.",
    "Namespace: core/edit-post.",
    "Returns true if meta boxes are initialized.",
    "Returns the current active general sidebar name, or null if there is no general sidebar active. The active general sidebar is a unique name to identify either an editor or plugin sidebar.",
    "Examples:",
    "Returns an array of active meta box locations.",
    "Returns the list of all the available meta boxes.",
    "Retrieves the template of the currently edited post.",
    "Returns an array of blocks that are hidden.",
    "Returns the list of all the available meta boxes for a given location.",
    "Returns the preferences (these preferences are persisted locally).",
    "Returns true if the post is using Meta Boxes",
    "Returns true if the template editing mode is enabled.",
    "Returns true if the given panel is enabled, or false otherwise. Panels are enabled by default.",
    "Returns true if the given panel is open, or false otherwise. Panels are closed by default.",
    "Returns true if the given panel was programmatically removed, or false otherwise. All panels are not removed by default.",
    "Returns true if the editor sidebar is opened.",
    "Returns true if there is an active meta box in the given location, or false otherwise.",
    "Returns true if a metabox location is active and visible",
    "Returns true if a modal is active, or false otherwise.",
    "Returns true if the plugin item is pinned to the header. When the value is not set it defaults to true.",
    "Returns true if the plugin sidebar is opened.",
    "Returns true if the publish sidebar is opened.",
    "Returns true if the Meta Boxes are being saved.",
    "Returns an action object signalling that the user closed a modal.",
    "Returns an action object used in signalling that the user closed the publish sidebar.",
    "Update the provided block types to be hidden.",
    "Initializes WordPress postboxes script and the logic for saving meta boxes.",
    "Returns an action object used to signal a failed meta box update.",
    "Returns an action object used to signal a successful meta box update.",
    "Returns an action object used in signalling that the user opened an editor sidebar.",
    "Returns an action object used in signalling that the user opened a modal.",
    "Returns an action object used in signalling that the user opened the publish sidebar.",
    "Returns an action object used to remove a panel from the editor.",
    "Update a metabox.",
    "Stores info about which Meta boxes are available in which location.",
    "Returns an action object used to switch to template editing.",
    "Update the provided block types to be visible.",
    "Triggers an action used to switch editor mode.",
    "Returns an action object used to enable or disable a panel in the editor.",
    "Opens a closed panel and closes an open panel.",
    "Triggers an action used to toggle a feature flag.",
    "Triggers an action object used to toggle a plugin name flag.",
    "Returns an action object used in signalling that the user toggles the publish sidebar.",
    "Returns an action object used in signaling that a style should be auto-applied when a block is created.",
    "Namespace: core/customize-widgets.",
    "Namespace: core/blocks.",
    "Returns the active block variation for a given block based on its attributes. Variations are determined by their isActive property. Which is either an array of block attribute keys or a function.",
    "In case of an array of block attribute keys, the attributes are compared to the variation’s attributes using strict equality check.",
    "In case of function type, the function should accept a block’s attributes and the variation’s attributes and determines if a variation is active. A function that accepts a block’s attributes and the variation’s attributes and determines if a variation is active.",
    "Returns block styles by block name.",
    "Returns a block type by name.",
    "Returns all the available block types.",
    "Returns block variations by block name.",
    "Returns all the available block categories.",
    "Returns all the available collections.",
    "Returns the name of the default block name.",
    "Returns the default block variation for the given block type. When there are multiple variations annotated as the default one, the last added item is picked. This simplifies registering overrides. When there is no default variation set, it returns the first item.",
    "Returns the name of the block for handling non-block content.",
    "Returns the name of the block for handling the grouping of blocks.",
    "Returns the name of the block for handling unregistered blocks.",
    "Returns true if the block type by the given name or object value matches a search term, or false otherwise.",
    "The actions in this package shouldn’t be used directly. Instead, use the functions listed in the public API here",
    "This webpack plugin serves two purposes:",
    "This allows JavaScript bundles produced by webpack to leverage WordPress style dependency sharing without an error-prone process of manually maintaining a dependency list.",
    "Consult the webpack website for additional information on webpack concepts.",
    "Note: This package requires Node.js 14.0.0 or later. It also requires webpack 4.8.3 and newer. It is not compatible with older versions.",
    "Use this plugin as you would other webpack plugins:",
    "Note: Multiple instances of the plugin are not supported and may produced unexpected results. If you plan to extend the webpack configuration from @wordpress/scripts with your own DependencyExtractionWebpackPlugin, be sure to remove the default instance of the plugin:",
    "Each entry point in the webpack bundle will include an asset file that declares the WordPress script dependencies that should be enqueued. Such file also contains the unique version hash calculated based on the file content.",
    "By default, the following module requests are handled:",
    "Note: This plugin overlaps with the functionality provided by webpack externals. This plugin is intended to extract script handles from bundle compilation so that a list of script dependencies does not need to be manually maintained. If you don’t need to extract a list of script dependencies, use the externals option directly.",
    "This plugin is compatible with externals, but they may conflict. For example, adding { externals: { '@wordpress/blob': 'wp.blob' } } to webpack configuration will effectively hide the @wordpress/blob module from the plugin and it will not be included in dependency lists.",
    "An object can be passed to the constructor to customize the behavior, for example:",
    "The output format for the generated asset file. There are two options available: ‘php’ or ‘json’.",
    "The filename for the generated asset file. Accepts the same values as the Webpack output.filename option.",
    "By default, one asset file is created for each entry point. When this flag is set to true, all information about assets is combined into a single assets.(json|php) file generated in the output directory.",
    "This option is useful only when the combineAssets option is enabled. It allows providing a custom output file for the generated single assets file. It’s possible to provide a path that is relative to the output directory.",
    "Pass useDefaults: false to disable the default request handling.",
    "Force wp-polyfill to be included in each entry point’s dependency list. This would be the same as adding import '@wordpress/polyfill'; to each entry point.",
    "Report all externalized dependencies as an array in JSON format. It could be used for further manual or automated inspection.\nYou can provide a filename, or set it to true to report to a default externalized-dependencies.json.",
    "requestToExternal allows the module handling to be customized. The function should accept a module request string and may return a string representing the global variable to use. An array of strings may be used to access globals via an object path, e.g. wp.i18n may be represented as [ 'wp', 'i18n' ].",
    "requestToExternal provided via configuration has precedence over default external handling. Unhandled requests will be handled by the default unless useDefaults is set to false.",
    "All of the external modules handled by the plugin are expected to be WordPress script dependencies\nand will be added to the dependency list. requestToHandle allows the script handle included in the dependency list to be customized.",
    "If no string is returned, the script handle is assumed to be the same as the request.",
    "requestToHandle provided via configuration has precedence over the defaults. Unhandled requests will be handled by the default unless useDefaults is set to false.",
    "The functions requestToExternal and requestToHandle allow this module to handle arbitrary modules.",
    "requestToExternal is necessary to handle any module and maps a module request to a global name.",
    "requestToHandle maps the same module request to a script handle, the strings that will be included in the entrypoint.asset.php files.",
    "Enqueue your script as usual and read the script dependencies dynamically:",
    "Slot and Fill are a pair of components which enable developers to render elsewhere in a React element tree, a pattern often referred to as “portal” rendering. It is a pattern for component extensibility, where a single Slot may be occupied by an indeterminate number of Fills elsewhere in the application.",
    "Slot Fill is heavily inspired by the react-slot-fill library, but uses React’s own portal rendering API.",
    "At the root of your application, you must render a SlotFillProvider which coordinates Slot and Fill rendering.",
    "Then, render a Slot component anywhere in your application, giving it a name.",
    "Any Fill will automatically occupy this Slot space, even if rendered elsewhere in the application.",
    "You can either use the Fill component directly, or a wrapper component type as in the below example to abstract the slot name from consumer awareness.",
    "There is also createSlotFill helper method which was created to simplify the process of matching the corresponding Slot and Fill components:",
    "The SlotFillProvider component does not accept any props.",
    "Both Slot and Fill accept a name string prop, where a Slot with a given name will render the children of any associated Fills.",
    "Slot accepts a bubblesVirtually prop which changes the event bubbling behaviour:",
    "Slot with bubblesVirtually set to true also accept an optional className to add to the slot container.",
    "Slot also accepts optional children function prop, which takes fills as a param. It allows to perform additional processing and wrap fills conditionally.",
    "Tooltip is a React component to render floating help text relative to a node when it receives focus or when the user places the mouse cursor atop it. If the tooltip exceeds the bounds of the page in the direction it opens, its position will be flipped automatically.",
    "Accessibility note: the tooltip text is hidden from screen readers and assistive technologies that understand ARIA. To make it accessible, use an aria-label attribute on the same element the tooltip is applied to, preferably using the same text used for the tooltip.",
    "Render a Tooltip, passing as a child the element to which it should anchor:",
    "The component accepts the following props:",
    "The direction in which the tooltip should open relative to its parent node. Specify y- and x-axis as a space-separated string. Supports \"top\", \"bottom\" y axis, and \"left\", \"center\", \"right\" x axis.",
    "The element to which the tooltip should anchor.",
    "NOTE: You must pass only a single child. Tooltip renders itself as a clone of children with a Popover added as an additional child.",
    "The tooltip text to show on focus or hover.",
    "If shortcut is a string, it is expecting the display text. If shortcut is an object, it will accept the properties of display (string) and ariaLabel (string).",
    "Time in milliseconds to wait before showing tooltip after the tooltip’s visibility is toggled. This prop is currently only available for the web platforms.",
    "Whether the tooltip should be displayed on initial render. This prop is currently only available for the native mobile app built with React Native.",
    "Popover renders its content in a floating modal. If no explicit anchor is passed via props, it anchors to its parent element by default.",
    "The behavior of the popover when it exceeds the viewport’s edges can be controlled via its props.",
    "Render a Popover within the parent to which it should anchor.",
    "If a Popover is returned by your component, it will be shown. To hide the popover, simply omit it from your component’s render value.",
    "In order to pass an explicit anchor, you can use the anchor prop. When doing so, the anchor element should be stored in local state rather than a plain React ref to ensure reactive updating when it changes.",
    "If you want Popover elements to render to a specific location on the page to allow style cascade to take effect, you must render a Popover.Slot further up the element tree:",
    "The component accepts the following props. Props not included in this set will be applied to the element wrapping Popover content.",
    "The element that should be used by the Popover as its anchor. It can either be an Element or, alternatively, a VirtualElement — ie. an object with the getBoundingClientRect() and the ownerDocument properties defined.",
    "The element should be stored in state rather than a plain ref to ensure reactive updating when it changes.",
    "Note: this prop is deprecated. Please use the anchor prop instead.",
    "An object extending a DOMRect with an additional optional ownerDocument property, used to specify a fixed popover position.",
    "Used to specify a fixed popover position. It can be an Element, a React reference to an element, an object with a top and a bottom properties (both pointing to elements), or a range.",
    "Whether the popover should animate when opening.",
    "The children elements rendered as the popover’s content.",
    "Show the popover fullscreen on mobile viewports.",
    "Specifies whether the popover should flip across its axis if there isn’t space for it in the normal placement.",
    "When the using a ‘top’ placement, the popover will switch to a ‘bottom’ placement. When using a ‘left’ placement, the popover will switch to a `right’ placement.",
    "The popover will retain its alignment of ‘start’ or ‘end’ when flipping.",
    "By default, the first tabbable element in the popover will receive focus when it mounts. This is the same as setting this prop to \"firstElement\".",
    "Specifying a true value will focus the container instead.",
    "Specifying a false value disables the focus handling entirely (this should only be done when an appropriately accessible substitute behavior exists).",
    "A callback invoked when the focus leaves the opened popover. This should only be provided in advanced use-cases when a popover should close under specific circumstances (for example, if the new document.activeElement is content of or otherwise controlling popover visibility).",
    "When not provided, the onClose callback will be called instead.",
    "A function returning the same value as the one expected by the anchorRect prop, used to specify a dynamic popover position.",
    "Used to customize the header text shown when the popover is toggled to fullscreen on mobile viewports (see the expandOnMobile prop).",
    "Note: this prop is deprecated. Please use the variant prop with the 'toolbar' values instead.",
    "Used to enable a different visual style for the popover.",
    "Used to show/hide the arrow that points at the popover’s anchor.",
    "The distance (in px) between the anchor and the popover.",
    "A callback invoked when the popover should be closed.",
    "Used to specify the popover’s position with respect to its anchor.",
    "overlay is a special case that places the popover over the reference element.\nPlease note that other placement related props may not behave as excepted.",
    "Note: use the placement prop instead when possible.",
    "Legacy way to specify the popover’s position with respect to its anchor.",
    "Possible values:",
    "Adjusts the size of the popover to prevent its contents from going out of view when meeting the viewport edges.",
    "Specifies the popover’s style.",
    "Leave undefined for the default style. Possible values are:\n–   unstyled:  The popover is essentially without any visible style, it has no background, border, outline or drop shadow, but the popover contents are still displayed.\n–   toolbar: A style that has no elevation, but a high contrast with other elements. This matches the style of the Toolbar component.\n\n–   Required: No",
    "Namespace: core/block-editor.",
    "Checks if a given block has controlled inner blocks.",
    "Determines if the given block is allowed to be edited.",
    "Determines if the given blocks are allowed to be inserted into the block list.",
    "Determines if the given block type is allowed to be inserted into the block list.",
    "Determines if the given block type can be locked/unlocked by a user.",
    "Determines if the given block is allowed to be moved.",
    "Determines if the given blocks are allowed to be moved.",
    "Determines if the given block is allowed to be deleted.",
    "Determines if the given blocks are allowed to be removed.",
    "Returns true if the last change was an automatic change, false otherwise.",
    "Returns the client ID of the block adjacent one at the given reference startClientId and modifier directionality. Defaults start startClientId to the selected block, and direction as next block. Returns null if there is no adjacent block.",
    "Returns the list of allowed inserter blocks for inner blocks children.",
    "Returns a block given its client ID. This is a parsed copy of the block, containing its blockName, clientId, and current attributes state. This is not the block’s registration settings, which must be retrieved from the blocks module registration store.",
    "getBlock recurses through its inner blocks until all its children blocks have been retrieved. Note that getBlock will not return the child inner blocks of an inner block controller. This is because an inner block controller syncs itself with its own entity, and should therefore not be included with the blocks of a different entity. For example, say you call getBlocks( TP ) to get the blocks of a template part. If another template part is a child of TP, then the nested template part’s child blocks will not be returned. This way, the template block itself is considered part of the parent, but the children are not.",
    "Returns a block’s attributes given its client ID, or null if no block exists with the client ID.",
    "Returns the number of blocks currently present in the post.",
    "Given a block client ID, returns the root of the hierarchy from which the block is nested, return the block itself for root level blocks.",
    "Returns the index at which the block corresponding to the specified client ID occurs within the block order, or -1 if the block does not exist.",
    "Returns the insertion point, the index at which the new inserted block would be placed. Defaults to the last index.",
    "Returns the Block List settings of a block, if any exist.",
    "Returns the block’s editing mode, defaulting to “visual” if not explicitly assigned.",
    "Returns a block’s name given its client ID, or null if no block exists with the client ID.",
    "Given an array of block client IDs, returns the corresponding array of block names.",
    "Returns an array containing all block client IDs in the editor in the order they appear. Optionally accepts a root client ID of the block list for which the order should be returned, defaulting to the top-level block order.",
    "Given a block client ID, returns the list of all its parents from top to bottom.",
    "Given a block client ID and a block name, returns the list of all its parents from top to bottom, filtered by the given name(s). For example, if passed ‘core/group’ as the blockName, it will only return parents which are group blocks. If passed [ 'core/group', 'core/cover'], as the blockName, it will return parents which are group blocks and parents which are cover blocks.",
    "Given a block client ID, returns the root block from which the block is nested, an empty string for top-level blocks, or null if the block does not exist.",
    "Returns all block objects for the current post being edited as an array in the order they appear in the post. Note that this will exclude child blocks of nested inner block controllers.",
    "Given an array of block client IDs, returns the corresponding array of block objects.",
    "Returns the current block selection end. This value may be null, and it may represent either a singular block selection or multi-selection end. A selection is singular if its start and end match.",
    "Returns the current block selection start. This value may be null, and it may represent either a singular block selection or multi-selection start. A selection is singular if its start and end match.",
    "Determines the items that appear in the available block transforms list.",
    "Each item object contains what’s necessary to display a menu item in the transform list and handle its selection.",
    "The ‘frecency’ property is a heuristic (https://en.wikipedia.org/wiki/Frecency) that combines block usage frequenty and recency.",
    "Items are returned ordered descendingly by their ‘frecency’.",
    "Type Definition",
    "Properties",
    "Returns an array containing the clientIds of all descendants of the blocks given. Returned ids are ordered first by the order of the ids given, then by the order that they appear in the editor.",
    "Returns an array containing the clientIds of the top-level blocks and their descendants of any depth (for nested blocks). Ids are returned in the same order that they appear in the editor.",
    "Returns the client ids of any blocks being directly dragged.",
    "This does not include children of a parent being dragged.",
    "Returns the client ID of the first block in the multi-selection set, or null if there is no multi-selection.",
    "Returns the total number of blocks, or the total number of blocks with a specific name in a post. The number returned includes nested blocks.",
    "Determines the items that appear in the inserter. Includes both static items (e.g. a regular block type) and dynamic items (e.g. a reusable block).",
    "Each item object contains what’s necessary to display a button in the inserter and handle its selection.",
    "Items are returned ordered descendingly by their ‘utility’ and ‘frecency’.",
    "Returns the client ID of the last block in the multi-selection set, or null if there is no multi-selection.",
    "Given a block client ID, returns the lowest common ancestor with selected client ID.",
    "Returns the current multi-selection set of block client IDs, or an empty array if there is no multi-selection.",
    "Returns the current multi-selection set of blocks, or an empty array if there is no multi-selection.",
    "Returns the client ID of the block which ends the multi-selection set, or null if there is no multi-selection.",
    "This is not necessarily the last client ID in the selection.",
    "Returns the client ID of the block which begins the multi-selection set, or null if there is no multi-selection.",
    "This is not necessarily the first client ID in the selection.",
    "Returns the next block’s client ID from the given reference start ID. Defaults start to the selected block. Returns null if there is no next block.",
    "Returns the list of patterns based on their declared blockTypes and a block’s name. Patterns can use blockTypes to integrate in work flows like suggesting appropriate patterns in a Placeholder state(during insertion) or blocks transformations.",
    "Returns the previous block’s client ID from the given reference start ID. Defaults start to the selected block. Returns null if there is no previous block.",
    "Returns the currently selected block, or null if there is no selected block.",
    "Returns the currently selected block client ID, or null if there is no selected block.",
    "Returns the current selection set of block client IDs (multiselection or single selection).",
    "Returns the number of blocks currently selected in the post.",
    "Returns the initial caret position for the selected block. This position is to used to position the caret properly when the selected block changes. If the current block is not a RichText, having initial position set to 0 means “focus block”",
    "Returns the current selection end block client ID, attribute key and text offset.",
    "Returns the current selection start block client ID, attribute key and text offset.",
    "Returns the editor settings.",
    "Returns the defined block template",
    "Returns the defined block template lock. Optionally accepts a root block client ID as context, otherwise defaulting to the global context.",
    "Returns whether block moving mode is enabled.",
    "Returns true if one of the block’s inner blocks is dragged.",
    "Determines whether there are items to show in the inserter.",
    "Returns true if a multi-selection has been made, or false otherwise.",
    "Returns true if there is a single selected block, or false otherwise.",
    "Returns true if one of the block’s inner blocks is selected.",
    "Returns whether a parent/ancestor of the block is being dragged.",
    "Returns true if an ancestor of the block is multi-selected, or false otherwise.",
    "Returns whether the block is being dragged.",
    "Only returns true if the block is being directly dragged, not if the block is a child of a parent being dragged. See isAncestorBeingDragged for child blocks.",
    "Returns true if the current highlighted block matches the block clientId.",
    "Returns true if we should show the block insertion point.",
    "Returns true if the client ID occurs within the block multi-selection, or false otherwise.",
    "Returns true if the block corresponding to the specified client ID is currently selected and no multi-selection exists, or false otherwise.",
    "Returns whether a block is valid or not.",
    "Tells if the block is visible on the canvas or not.",
    "Returns true if the block corresponding to the specified client ID is currently selected but isn’t the last of the selected blocks. Here “last” refers to the block sequence in the document, not the sequence of multi-selection, which is why state.selectionEnd isn’t used.",
    "Returns true if the caret is within formatted text, or false otherwise.",
    "Returns true if the user is dragging blocks, or false otherwise.",
    "Returns true if a multi-selection exists, and the block corresponding to the specified client ID is the first block of the multi-selection set, or false otherwise.",
    "Returns true if the most recent block change is be considered persistent, or false otherwise. A persistent change is one committed by BlockEditorProvider via its onChange callback, in addition to onInput.",
    "Whether in the process of multi-selecting or not. This flag is only true while the multi-selection is being selected (by mouse move), and is false once the multi-selection has been settled.",
    "Returns whether the navigation mode is enabled.",
    "Selector that returns if multi-selection is enabled or not.",
    "Returns true if the user is typing, or false otherwise.",
    "Returns whether the blocks matches the template or not.",
    "Tells if the block with the passed clientId was just inserted.",
    "Action that clears the block selection.",
    "Action that duplicates a list of blocks.",
    "Returns an action object used in signalling that the caret has entered formatted text.",
    "Returns an action object used in signalling that the user caret has exited formatted text.",
    "Action that “flashes” the block with a given clientId by rhythmically highlighting it.",
    "Action that hides the insertion point.",
    "Action that inserts an empty block after a given block.",
    "Action that inserts an empty block before a given block.",
    "Action that inserts a single block, optionally at a specific index respective a root block list.",
    "Action that inserts an array of blocks, optionally at a specific index respective a root block list.",
    "Action that adds a new block of the default type to the block list.",
    "Action that merges two blocks.",
    "Action that moves given blocks to a new position.",
    "Action that moves given block to a new position.",
    "Action that changes block multi-selection.",
    "Returns an action object used in signalling that blocks have been received. Unlike resetBlocks, these should be appended to the existing known set, not replacing.",
    "Returns an action object used in signalling that the block with the specified client ID is to be removed.",
    "Yields action objects used in signalling that the blocks corresponding to the set of specified client IDs are to be removed.",
    "Action that replaces a single block with one or more replacement blocks.",
    "Action that replaces given blocks with one or more replacement blocks.",
    "Returns an action object used in signalling that the inner blocks with the specified client ID should be replaced.",
    "Action that resets blocks state to the specified array of blocks, taking precedence over any other content reflected as an edit in state.",
    "Returns an action object used in signalling that selection state should be reset to the specified selection.",
    "Returns an action object used in signalling that the block with the specified client ID has been selected, optionally accepting a position value reflecting its selection directionality. An initialPosition of -1 reflects a reverse selection.",
    "Action that changes the position of the user caret.",
    "Yields action objects used in signalling that the block following the given clientId should be selected.",
    "Yields action objects used in signalling that the block preceding the given clientId (or optionally, its first parent from bottom to top) should be selected.",
    "Action that enables or disables the block moving mode.",
    "Action that sets whether given blocks are visible on the canvas.",
    "Action that sets whether a block has controlled inner blocks.",
    "Action that enables or disables the navigation mode.",
    "Action that resets the template validity.",
    "Action that shows the insertion point.",
    "Returns an action object used in signalling that the user has begun to drag blocks.",
    "Action that starts block multi-selection.",
    "Returns an action object used in signalling that the user has begun to type.",
    "Returns an action object used in signalling that the user has stopped dragging blocks.",
    "Action that stops block multi-selection.",
    "Returns an action object used in signalling that the user has stopped typing.",
    "Action that synchronizes the template with the list of blocks.",
    "Action that toggles the highlighted block state.",
    "Returns an action object used to toggle the block editing mode between visual and HTML modes.",
    "Action that enables or disables block selection.",
    "Action that updates the block with the specified client ID.",
    "Action that updates attributes of multiple blocks with the specified client IDs.",
    "Action that changes the nested settings of a given block.",
    "Action that updates the block editor settings.",
    "Block validity is a function of blocks state (at the point of a reset) and the template setting. As a compromise to its placement across distinct parts of state, it is implemented here as a side effect of the block reset action.",
    "Namespace: core/block-directory.",
    "Returns the available uninstalled blocks.",
    "Returns the error notice for a given block.",
    "Returns all block error notices.",
    "Returns the block types that have been installed on the server in this session.",
    "Returns block types that have been installed on the server and used in the current post.",
    "Returns the block types that have been installed on the server but are not used in the current post.",
    "Returns true if a block plugin install is in progress.",
    "Returns true if application is requesting for downloadable blocks.",
    "Returns an action object used to add a block type to the “newly installed” tracking list.",
    "Sets the error notice to empty for specific block.",
    "Returns an action object used in signalling that the downloadable blocks have been requested and are loading.",
    "Action triggered to install a block plugin.",
    "Returns an action object used in signalling that the downloadable blocks have been updated.",
    "Returns an action object used to remove a block type from the “newly installed” tracking list.",
    "Sets an error notice to be displayed to the user for a given block.",
    "Returns an action object used to indicate install in progress.",
    "Action triggered to uninstall a block plugin.",
    "Namespace: core/annotations.",
    "Namespace: core.",
    "This package contains common functionality used by the widgets block editor in the Widgets screen and the Customizer.",
    "Utility for warning messages to the console based on a passed condition.",
    "Literal strings aren’t minified. Keeping them in your production bundle may increase the bundle size significantly.",
    "To prevent that, you should:",
    "This will make sure your warning calls are wrapped within a condition that checks if process.env.NODE_ENV !== 'production'.",
    "Use UglifyJS, Terser or any other JavaScript parser that performs dead code elimination. This is usually used in conjunction with JavaScript bundlers, such as webpack.",
    "When parsing the code in production mode, the warning call will be removed altogether.",
    "Shows a warning with message if environment is not production.",
    "stylelint configuration rules to ensure your CSS is compliant with the WordPress CSS Coding Standards.",
    "If you’ve installed @wordpress/stylelint-config locally within your project, just set your stylelint config to:",
    "If you’ve globally installed @wordpress/stylelint-config using the -g flag, then you’ll need to use the absolute path to @wordpress/stylelint-config in your config:",
    "In addition to the default preset, there is also a SCSS preset. This preset extends both @wordpress/stylelint-config and stylelint-config-recommended-scss.",
    "Simply add a \"rules\" key to your config and add your overrides there.",
    "For example, to change the indentation to four spaces and turn off the number-leading-zero rule:",
    "Block supports is the API that allows a block to declare support for certain features.",
    "Where a block declares support for a specific style group or property, e.g., “spacing” or “spacing.padding”, the block’s attributes are extended to include a style object.",
    "Using this object, the Style Engine can generate the classes and CSS required to style the block element.",
    "The global function wp_style_engine_get_styles accepts a style object as its first argument, and will output compiled CSS and an array of CSS declaration property/value pairs.",
    "When registering a block support, it is possible to pass an ‘apply’ callback in the block support config array to add or extend block support attributes with “class” or “style” properties.",
    "If a block has opted into the block support, the values of “class” and “style” will be applied to the block element’s “class” and “style” attributes accordingly when rendered in the frontend HTML. Note, this applies only to server-side rendered blocks, for example, the Site Title block.",
    "The callback receives $block_type and $block_attributes as arguments. The style attribute within $block_attributes only contains the raw style object, if any styles have been set for the block, and not any CSS or classnames to be applied to the block’s HTML elements.",
    "Here is where wp_style_engine_get_styles comes in handy: it will generate CSS and, if appropriate, classnames to be added to the “style” and “class” HTML attributes in the final rendered block markup.",
    "Here is a very simplified version of how the color block support works:",
    "It’s important to note that, for now, the Style Engine will only generate styles for the following, core block supports:",
    "In future releases, it will be possible to extend this list.",
    "Before passing the block style object to the Style Engine, you’ll need to take into account:",
    "If a block either:",
    "it’s likely that you’ll want to remove those style values from the style object before passing it to the Style Engine with help of two functions:",
    "We can now update the apply callback code above so that we’ll only return “style” and “class”, where a block has support and it doesn’t skip serialization:",
    "Many of theme.json’s presets will generate both CSS custom properties and CSS rules (consisting of a selector and the CSS declarations) on the frontend.",
    "Styling a block using these presets normally involves adding the selector to the “className” attribute of the block.",
    "For styles that can have preset values, such as text color and font family, the Style Engine knows how to construct the classnames using the preset slug.",
    "To discern CSS values from preset values however, the Style Engine expects a special format.",
    "Preset values must follow the pattern var:preset|<PRESET_TYPE>|<PRESET_SLUG>.",
    "When the Style Engine encounters these values, it will parse them and create a CSS value of var(--wp--preset--font-size--small) and/or generate a classname if required.",
    "If you don’t want the Style Engine to output the CSS custom vars as well, which you might not if you’re applying both the CSS and classnames to the block element, you can pass 'convert_vars_to_classnames' => true in the options array.",
    "Read more about global styles and preset CSS custom properties and theme supports.",
    "The Style Engine aims to provide a consistent API for rendering styling for blocks across both client-side and server-side applications.",
    "Initially, it will offer a single, centralized agent responsible for generating block styles, and, in later phases, it will also assume the responsibility of processing and rendering optimized frontend CSS.",
    "This package is new as of WordPress 6.1 and therefore in its infancy.",
    "Upcoming tasks on the roadmap include, but are not limited to, the following:",
    "For more information about the roadmap, please refer to Block editor styles: initiatives and goals and the Github project board.",
    "If you’re making changes or additions to the Style Engine, please take a moment to read the notes on contributing.",
    "Global public function to generate styles from a single style object, e.g., the value of a block’s attributes.style object or the top level styles in theme.json.",
    "See also Using the Style Engine to generate block supports styles.",
    "Returns\narray<string|array>|null",
    "It will return compiled CSS declarations for inline styles, or, where a selector is provided, a complete CSS rule.",
    "To enqueue a style for rendering in the site’s frontend, the $options array requires the following:",
    "wp_style_engine_get_styles will return the compiled CSS and CSS declarations array.",
    "As mentioned, wp_style_engine_get_styles() is useful whenever you wish to generate CSS and/or classnames from a block’s style object. A good example is using the Style Engine to generate block supports styles.",
    "In the following snippet, we’re taking the style object from a block’s attributes and passing it to the Style Engine to get the styles. By passing a context in the options, the Style Engine will store the styles for later retrieval, for example, should you wish to batch enqueue a set of CSS rules.",
    "Use this function to compile and return a stylesheet for any CSS rules. The Style Engine will automatically merge declarations and combine selectors.",
    "This function acts as a CSS compiler, but will also register the styles in a store where a context string is passed in the options.",
    "Returns\nstring A compiled CSS string based on $css_rules.",
    "Useful for when you wish to compile a bespoke set of CSS rules from a series of selector + declaration items.",
    "The Style Engine will return a sanitized and optimized stylesheet. By passing a context identifier in the options, the Style Engine will store the styles for later retrieval, for example, should you wish to batch enqueue a set of CSS rules.",
    "You can call wp_style_engine_get_stylesheet_from_css_rules() multiple times, and, so long as your styles use the same context identifier, they will be stored together.",
    "Returns compiled CSS from a stored context, if found.",
    "Returns\nstring A compiled CSS string from the stored CSS rules.",
    "Use this function to generate a stylesheet using all the styles stored under a specific context identifier.",
    "A use case would be when you wish to enqueue all stored styles for rendering to the frontend. The Style Engine will merge and deduplicate styles upon retrieval.",
    "Generates a stylesheet for a given style object and selector.",
    "Returns a JSON representation of the generated CSS rules.",
    "A guide to the terms and variable names referenced by the Style Engine package.",
    "ServerSideRender is a component used for server-side rendering a preview of dynamic blocks to display in the editor. Server-side rendering in a block’s edit function should be limited to blocks that are heavily dependent on existing PHP rendering logic that is heavily intertwined with data, particularly when there are no endpoints available.",
    "ServerSideRender may also be used when a legacy block is provided as a backward compatibility measure, rather than needing to re-write the deprecated code that the block may depend on.",
    "ServerSideRender should be regarded as a fallback or legacy mechanism, it is not appropriate for developing new features against.",
    "New blocks should be built in conjunction with any necessary REST API endpoints, so that JavaScript can be used for rendering client-side in the edit function. This gives the best user experience, instead of relying on using the PHP render_callback. The logic necessary for rendering should be included in the endpoint, so that both the client-side JavaScript and server-side PHP logic should require a minimal amount of differences.",
    "The props accepted by the component are described below.",
    "An object containing the attributes of the block to be server-side rendered.\nE.g: { displayAsDropdown: true }, { showHierarchy: true }, etc…",
    "The identifier of the block to be server-side rendered.\nExamples: “core/archives”, “core/latest-comments”, “core/rss”, etc…",
    "A class added to the DOM element that wraps the server side rendered block.\nExamples: “my-custom-server-side-rendered”.",
    "The HTTP request method to use, either ‘GET’ or ‘POST’. It’s ‘GET’ by default. The ‘POST’ value will cause an error on WP earlier than 5.5, unless ‘rest_endpoints’ is filtered in PHP to allow this. If ‘POST’, this sends the attributes in the request body, not in the URL. This can allow a bigger attributes object.",
    "Remove attributes and style properties applied by the block supports. This prevents duplication of styles in the block wrapper and the ServerSideRender components. Even if certain features skip serialization to HTML markup by __experimentalSkipSerialization, all attributes and style properties are removed.",
    "Query arguments to apply to the request URL.\nE.g: { post_id: 12 }.",
    "The component is rendered when the API response is empty. The component will receive the value of the API response, and all props passed into ServerSideRenderer.",
    "The component is rendered when the API response is an error. The component will receive the value of the API response, and all props passed into ServerSideRenderer.",
    "The component is rendered while the API request is being processed (loading state). The component will receive the value of the API response, and all props passed into ServerSideRenderer.",
    "Render core/archives preview.",
    "If imported from the wp global, an alias is required to work in JSX.",
    "Output uses the block’s render_callback function, set when defining the block.",
    "The API endpoint for getting the output for ServerSideRender is /wp/v2/block-renderer/:block. It will use the block’s render_callback method.",
    "If you pass attributes to ServerSideRender, the block must also be registered and have its attributes defined in PHP.",
    "Reusable blocks components and logic.",
    "This experimental module provides support for reusable blocks.",
    "Reusable blocks are WordPress entities and the following is enough to ensure they are available in the inserter:",
    "With the above configuration management features (such as creating new reusable blocks) are still missing from the editor. Enter @wordpress/reusable-blocks:",
    "This package also provides convenient utilities for managing reusable blocks through redux actions:",
    "Generate a readable non-minified JS file for each .min.js asset.",
    "The end result is that for each JS entrypoint, we get a set of readable and non-minimized .js file and a minimized .min.js. This allows Gutenberg to follow the WordPress convention of adding a .min.js suffix to minimized JS files, while still providing a readable and unminized files that play well with the WordPress i18n machinery.",
    "React bindings for @wordpress/i18n.",
    "The I18nProvider should be mounted above any localized components:",
    "You can also instantiate the provider without the i18n prop. In that case it will use the\ndefault I18n instance exported from @wordpress/i18n.",
    "React hook providing access to i18n functions. It exposes the __, _x, _n, _nx, isRTL and hasTranslation functions from @wordpress/i18n. Refer to their documentation there.",
    "React higher-order component that passes the i18n translate functions (the same set as exposed by the useI18n hook) to the wrapped component as props.",
    "This is a GitHub Action which contains various automation to assist with managing the Gutenberg GitHub repository:",
    "To use the action, include it in your workflow configuration file:",
    "None.",
    "This module allows you to run a queue of callback while on the browser’s idle time making sure the higher-priority work is performed first.",
    "Creates a context-aware queue that only executes the last task of a given context.",
    "A key/value store for application preferences.",
    "Many API calls require a ‘scope’ parameter that acts like a namespace. If you have multiple parameters with the same key but they apply to different parts of your application, using scopes is the best way to segregate them.",
    "Each preference is set against a key that should be a string.",
    "Values can be of any type, but the types supported may be limited by the persistence layer configure. For example if preferences are saved to browser localStorage in JSON format, only JSON serializable types should be used.",
    "Defaults are the value returned when a preference is undefined. These are not persisted, they are only kept in memory. They should be during the initialization of an application.",
    "Set the default preferences for any features on initialization by dispatching an action:",
    "Use the get selector to get a preference value, and the set action to update a preference:",
    "Use the toggle action to flip a boolean preference between true and false:",
    "By default, this package only stores values in-memory. But it can be configured to persist preferences to browser storage or a database via an optional persistence layer.",
    "Use the setPersistenceLayer action to configure how the store persists its preference values.",
    "For application that persist data to an asynchronous API, a concern is that loading preferences can lead to slower application start up.",
    "A recommendation is to pre-load any persistence layer data and keep it in a local cache particularly if you’re using an asynchronous API to persist data.",
    "Note: currently get is called only when setPersistenceLayer is triggered. This may change in the future, so it’s sensible to optimize get using a local cache, as shown in the example below.",
    "The PreferenceToggleMenuItem components can be used with a DropdownMenu to implement a menu for changing preferences.",
    "Also see the MoreMenuDropdown component from the @wordpress/interface package for implementing a more menu.",
    "The following set of dispatching action creators are available on the object returned by wp.data.dispatch( 'core/preferences' ):",
    "The following selectors are available on the object returned by wp.data.select( 'core/preferences' ):",
    "Toolbar can be used to group related options. To emphasize groups of related icon buttons, a toolbar should share a common container.",
    "Toolbars should:",
    "A toolbar’s state makes it clear which icon button is active. Hover and focus states express the available selection options for icon buttons in a toolbar.",
    "Toolbars that cannot be selected can either be given a disabled state, or be hidden.",
    "Toolbar will pass all HTML props to the underlying element. Additionally, you can pass the custom props specified below.",
    "Class to set on the container div.",
    "An accessible label for the toolbar.",
    "Persistence utilities for wordpress/preferences.",
    "Includes a persistence layer that saves data to WordPress user meta via the REST API. If for any reason data cannot be saved to the database, this persistence layer also uses local storage as a fallback.",
    "Call the create function to create a persistence layer.",
    "Next, configure the preferences package to use this persistence layer:",
    "Creates a persistence layer that stores data in WordPress user meta via the REST API.",
    "PostCSS plugin to generate theme colors.",
    "PostCSS sharable plugins preset for WordPress development.",
    "This package provides a demo application to simplify the environment setup required for the development of Gutenberg for native Android and iOS. The demo application allows running the mobile versions of Gutenberg blocks while avoiding the additional setup steps required by the WordPress Android and WordPress iOS apps.",
    "Please review Getting Started for the React Native based Mobile Gutenberg to learn how to set up and run this demo application.",
    "Gutenberg Mobile is an Open Source project covered by the GNU General Public License version 2.",
    "The NUX module exposes components, and wp.data methods useful for onboarding a new user to the WordPress admin interface. Specifically, it exposes tips and guides.",
    "A tip is a component that points to an element in the UI and contains text that explains the element’s functionality. The user can dismiss a tip, in which case it never shows again. The user can also disable tips entirely. Information about tips is persisted between sessions using localStorage.",
    "A guide allows a series of tips to be presented to the user one by one. When a user dismisses a tip that is in a guide, the next tip in the guide is shown.",
    "DotTip is a React component that renders a single tip on the screen. The tip will point to the React element that DotTip is nested within. Each tip is uniquely identified by a string passed to tipId.",
    "See the component’s README for more information.",
    "You can programmatically determine if a tip is visible using the isTipVisible select method.",
    "dismissTip is a dispatch method that allows you to programmatically dismiss a tip.",
    "Tips can be programatically disabled or enabled using the disableTips and enableTips dispatch methods. You can query the current setting by using the areTipsEnabled select method.",
    "Calling enableTips will also un-dismiss all previously dismissed tips.",
    "You can group a series of tips into a guide by calling the triggerGuide dispatch method. The given tips will then appear one by one.",
    "A tip cannot be added to more than one guide.",
    "getAssociatedGuide is a select method that returns useful information about the state of the guide that a tip is associated with.",
    "This package is not yet published to npm. You can use it locally:",
    "$ npm install ./gutenberg/packages/react-native-bridge --save",
    "$ react-native link @wordpress/react-native-bridge",
    "WordPress npm-package-json-lint shareable configuration.",
    "Or to a .npmpackagejsonlintrc.json file in the root of your repo:",
    "To add, modify, or override any npm-package-json-lint rules add this to your package.json file:",
    "This package provides a component, AztecView, that wraps around the Aztec Android and Aztec iOS libraries in a React Native component.\nThis component provides rich text editing capabilities that emulate a subset of the HTML functionality.",
    "Render a rich text area that displays the HTML content provided.",
    "Object with current HTML string to make editable and selection/caret position.",
    "The block type, should contain a tagName prop that indicates what is the HTML tag that this editor displays.",
    "By default, a line break will be inserted on Enter. If the editable field can contain multiple paragraphs, this property can be set to create new paragraphs on Enter.",
    "The formats that are currently active. This is reflected on current state of the cursor.",
    "If active disables the contextual menu that allows setting text attributes like Bold/Italic/Strikethrough.",
    "The maximum width an image that is part of content provided can have.",
    "The minimum width the component can have.",
    "The maximum width the component can have.",
    "The font family that will be used as default to display the HTML content.",
    "The font size that will be used as default to display the HTML content.",
    "The font weight that will be used as default to display the HTML content.",
    "The font style (bold, italic, ) that will be used as default to display the HTML content.",
    "When active removes the new line resulting from an enter keypress when that enter keypress is splitting the block.",
    "Text color.",
    "The color to use for the caret and for the selection background.",
    "Placeholder text to show when the field is empty.",
    "Placeholder text color.",
    "The alignment for the text displayed. Possible values: Left, Right, Center, Justify.",
    "Called when a key that belongs the triggerKeyCodes props is pressed.",
    "Called when then native component is focused on, for example when tapped.",
    "Called when then native component lost the focus.",
    "Called when then native component has content pasted in.",
    "Called when then native component size changed.",
    "Called when the vertical position of the caret changed. This can be used to scroll the container of the component to keep\nthe caret in focus.",
    "Called when then selection of the native component changed.",
    "On iOS we use a native view called RCTAztecView that inherits an Aztec TextView class.\nRCTAztecView adds the following custom behaviours to the TextView class:",
    "Android uses a native ReactAztecText\nview, which extends AztecText\nfrom the Aztec Library for Android. All interactions between\nthe native ReactAztecText view and the JavaScript code are handled by the ReactAztecManager\nview manager.",
    "GPL v2",
    "State management for notices.",
    "When imported, the notices module registers a data store on the core/notices namespace. In WordPress, this is accessed from wp.data.dispatch( 'core/notices' ).",
    "For more information about consuming from a data store, refer to the @wordpress/data documentation on Data Access and Manipulation.",
    "For a full list of actions and selectors available in the core/notices namespace, refer to the Notices Data Handbook page.",
    "The media utils package provides a set of artifacts to abstract media functionality that may be useful in situations where there is a need to deal with media uploads or with the media library, e.g., artifacts that extend or implement a block-editor.\nThis package is meant to be used by the WordPress core. It may not work as expected outside WordPress usages.",
    "Media upload util is a function that allows the invokers to upload files to the WordPress media library.\nAs an example, provided that myFiles is an array of file objects, onFileChange on onFileChange is a function that receives an array of objects containing the description of WordPress media items and handleFileError is a function that receives an object describing a possible error, the following code uploads a file to the WordPress media library:",
    "The following code uploads a file named foo.txt with foo as content to the media library and alerts its URL:",
    "Beware that first onFileChange is called with temporary blob URLs and then with the final URL’s this allows to show the result in an optimistic UI as if the upload was already completed. E.g.: when uploading an image, one can show the image right away in the UI even before the upload is complete.",
    "Media upload component provides a UI button that allows users to open the WordPress media library. It is normally used in conjunction with the filter editor.MediaUpload.\nThe component follows the interface specified in https://github.com/WordPress/gutenberg/blob/HEAD/packages/block-editor/src/components/media-upload/README.md, and more details regarding its usage can be checked there.",
    "Import an NPM module, even if not installed locally or defined as a dependency of the project. Uses a locally installed package if available. Otherwise, the package will be downloaded dynamically on-demand.",
    "NPM 6.9.0 or newer is required, since it uses the package aliases feature to maintain multiple versions of the same package.",
    "Usage is intended to mimic the behavior of the dynamic import function, receiving the name (and optional version specifier) of an NPM package and returning a promise which resolves to the required module.",
    "Note: Currently, this alignment to import is superficial, and the module resolution still uses CommonJS require, rather than the newer ES Modules support. Future versions of this package will likely support ES Modules, once an LTS release of Node.js including unflagged ES Modules support becomes available.",
    "The string passed to lazyImport can be formatted exactly as you would provide to npm install, including an optional version specifier (including version ranges). If the version specifier is omitted, it will be treated as equivalent to *, using the version of a locally installed package if available, otherwise installing the latest available version.",
    "If you’re using Node v14.3.0 or newer, you can also take advantage of top-level await to simplify top-level imports:",
    "lazyImport optionally accepts a second argument, an options object:",
    "Note that lazyImport can throw an error when offline and unable to install the dependency using NPM. You may want to anticipate this and provide remediation steps for a failed install, such as logging a warning messsage:",
    "Local path pointing to a file or directory that can be used when other script that main needs to be imported.",
    "Function to call if and when the module is being installed. Since installation can cause a delay in script execution, this can be useful to output logging information or display a spinner.",
    "An installation can be assumed to finish once the returned promise is resolved.",
    "DEPRECATED for webpack v5: please use output.library.export instead.",
    "Webpack plugin for exporting default property for selected libraries which use ES6 Modules. Implementation is based on the Webpack’s core plugin ExportPropertyMainTemplatePlugin. The only difference is that this plugin allows to include all entry point names where the default export of your entry point will be assigned to the library target.",
    "Note: This package requires Node.js 12.0.0 or later. It is not compatible with older versions. It works only with webpack v4.",
    "Construct an instance of LibraryExportDefaultPlugin in your Webpack configurations plugins entry, passing an array where values correspond to the entry point name.",
    "The following example selects boo entry point to be updated by the plugin. When compiled, the built file will ensure that default value exported for the chunk will be assigned to the global variable wp.boo. foo chunk will remain untouched.",
    "Keyboard shortcuts is a generic package that allows registering and modifying shortcuts.",
    "Handles callbacks added to context by useShortcut.",
    "Store definition for the keyboard shortcuts namespace.",
    "Axe (the Accessibility Engine) API integration with Jest and Puppeteer.",
    "Defines Jest async matcher to check whether a given Puppeteer’s page instance passes Axe accessibility tests.",
    "The simplest setup is to use Jest’s setupFilesAfterEnv config option:",
    "In your Jest test suite add the following code to the test’s body:",
    "It is also possible to pass optional params which allow Axe API to perform customized checks:",
    "Default Jest preset for WordPress development.",
    "Historically, this package used to use enzyme, but support was dropped in favor of @testing-library/react, primary reason being unblocking the upgrade to React 18.",
    "If you wish to use enzyme, you can still use it by manually providing the React 17 adapter, by following the steps below.",
    "To install the enzyme dependency, run:",
    "To install the React 17 adapter dependency, run:",
    "To use the React 17 adapter, use this in your setupFilesAfterEnv configuration:",
    "If you also use snapshot tests with enzyme, you might want to add support for serializing them, through the enzyme-to-json package.",
    "To install the dependency, run:",
    "Finally, you should add enzyme-to-json/serializer to the array of snapshotSerializers:",
    "Custom Jest matchers for the Console\nobject to test JavaScript code in WordPress.",
    "This package converts console.error, console.info, console.log and console.warn functions into mocks and tracks their calls.\nIt also enforces usage of one of the related matchers whenever tested code calls one of the mentioned console methods.\nIt means that you need to assert with .toHaveErrored() or .toHaveErroredWith( arg1, arg2, ... ) when console.error\ngets executed, and use the corresponding methods when console.info, console.log or console.warn are called.\nYour test will fail otherwise! This is a conscious design decision which helps to detect deprecation warnings when\nupgrading dependent libraries or smaller errors when refactoring code.",
    "Use .toHaveErrored to ensure that console.error function was called.",
    "For example, let’s say you have a drinkAll( flavor ) function that makes you drink all available beverages.\nYou might want to check if function calls console.error for 'octopus' instead, because 'octopus' flavor is really\nweird and why would anything be octopus-flavored? You can do that with this test suite:",
    "Use .toHaveErroredWith to ensure that console.error function was called with\nspecific arguments.",
    "For example, let’s say you have a drinkAll( flavor ) function again makes you drink all available beverages.\nYou might want to check if function calls console.error with a specific message for 'octopus' instead, because\n'octopus' flavor is really weird and why would anything be octopus-flavored? To make sure this works, you could write:",
    "Use .toHaveInformed to ensure that console.info function was called.",
    "Almost identical usage as .toHaveErrored().",
    "Use .toHaveInformedWith to ensure that console.info function was called with\nspecific arguments.",
    "Almost identical usage as .toHaveErroredWith().",
    "Use .toHaveLogged to ensure that console.log function was called.",
    "Use .toHaveLoggedWith to ensure that console.log function was called with\nspecific arguments.",
    "Use .toHaveWarned to ensure that console.warn function was called.",
    "Use .toHaveWarneddWith to ensure that console.warn function was called with\nspecific arguments.",
    "A ToolbarItem is a generic headless component that can be used to make any custom component a Toolbar item. It should be inside a Toolbar or ToolbarGroup when used to create general interfaces. If you’re using it to add controls to your custom block, you should consider using BlockControls.",
    "You can use the as prop with a custom component or any HTML element.",
    "You can pass children as function to get the ToolbarItem props and pass them to another component.",
    "If you’re working on a custom block and you want to add controls to the block toolbar, you should use BlockControls instead. Optionally wrapping it with ToolbarGroup.",
    "ToolbarButton can be used to add actions to a toolbar, usually inside a Toolbar or ToolbarGroup when used to create general interfaces. If you’re using it to add controls to your custom block, you should consider using BlockControls.",
    "It has similar features to the Button component. Using ToolbarButton will ensure the correct styling for a button in a toolbar, and also that keyboard interactions in a toolbar are consistent with the WAI-ARIA toolbar pattern.",
    "To create general interfaces, you’ll want to render ToolbarButton in a Toolbar component.",
    "This component accepts the same API of the Button component in addition to:",
    "An optional additional class name to apply to the button container.",
    "An optional subscript for the button.",
    "A ToolbarGroup can be used to create subgroups of controls inside a Toolbar.",
    "ToolbarGroup will pass all HTML props to the underlying element.",
    "The Interface Package contains the basis to start a new WordPress screen as Edit Post or Edit Site. The package offers a data store and a set of components. The store is useful to contain common data required by a screen (e.g., active areas). The information is persisted across screen reloads. The components allow one to implement functionality like a sidebar or menu items. Third-party plugins can extend them by default.",
    "This component was named after a complementary landmark – a supporting section of the document, designed to be complementary to the main content at a similar level in the DOM hierarchy, but remains meaningful when separated from the main content.",
    "ComplementaryArea and ComplementaryArea.Slot form a slot fill pair to render complementary areas. Multiple ComplementaryArea components representing different complementary areas may be rendered at the same time, but only one appears on the slot depending on which complementary area is enabled.",
    "It is possible to control which complementary is enabled by using the store:",
    "Below are some examples of how to control the active complementary area using the store:",
    "PinnedItems and PinnedItems.Slot form a slot fill pair to render pinned items (or areas) that act as a list of favorites similar to browser extensions listed in the Chrome Menu.",
    "Example usage: ComplementaryArea component makes use of PinnedItems and automatically adds a pinned item for the complementary areas marked as a favorite.",
    "The interface package provides some helpers for implementing editor preferences.",
    "Features are boolean values used for toggling specific editor features on or off.",
    "Set the default values for any features on editor initialization:",
    "Use the toggleFeature action and the isFeatureActive selector to toggle features within your app:",
    "The MoreMenuDropdown and MoreMenuFeatureToggle components help to implement an editor menu for changing preferences and feature values.",
    "WordPress Icons Library.",
    "Format library for the WordPress editor.",
    "ESLint plugin including configurations and custom rules for WordPress development.",
    "Note: This package requires node 14.0.0 or later, and npm 6.14.4 or later. It is not compatible with older versions.",
    "To opt-in to the default configuration, extend your own project’s .eslintrc file:",
    "Refer to the ESLint documentation on Shareable Configs for more information.",
    "The recommended preset will include rules governing an ES2015+ environment, and includes rules from the eslint-plugin-jsdoc, eslint-plugin-jsx-a11y, eslint-plugin-react, and other similar plugins.",
    "This preset offers an optional integration with the eslint-plugin-prettier package that runs Prettier code formatter and reports differences as individual ESLint issues. You can activate it by installing the prettier package separately with:",
    "Finally, this ruleset also includes an optional integration with the @typescript-eslint/eslint-plugin package that enables ESLint to support TypeScript language. You can activate it by installing the typescript package separately with:",
    "There is also recommended-with-formatting ruleset for projects that want to ensure that Prettier and TypeScript integration is never activated. This preset has the native ESLint code formatting rules enabled instead.",
    "Alternatively, you can opt-in to only the more granular rulesets offered by the plugin. These include:",
    "For example, if your project does not use React, you could consider extending including only the ESNext rules in your project using the following extends definition:",
    "These rules can be used additively, so you could extend both esnext and custom rulesets, but omit the react and jsx-a11y configurations.",
    "The granular rulesets will not define any environment globals. As such, if they are required for your project, you will need to define them yourself.",
    "If you are using WordPress’ .jshintrc JSHint configuration and you would like to take the first step to migrate to an ESLint equivalent it is also possible to define your own project’s .eslintrc file as:",
    "@wordpress/experiments  enables sharing private __experimental APIs across @wordpress packages without\npublicly exposing them to WordPress extenders.",
    "Every @wordpress package wanting to privately access or expose experimental APIs must opt-in to @wordpress/experiments:",
    "Widgets Page Module for WordPress.",
    "This package contains the first version of what may eventually become @wordpress/batch-processing package. Once imported, core/__experimental-batch-processing store gets registered. As the name says – it is highly experimental and considered a private API for now.",
    "The new Widgets screen in WordPress admin is another block editor, just like the Post editor or the experimental site editor. Hence it will be referred often as the Widgets editor.",
    "This editor manages widget areas and offers a way to add Gutenberg blocks to them, in addition to regular widgets. To support both widgets and blocks, the editor employs a translation mechanism between widget storage and block grammar.",
    "There is a widget block that acts as a block UI for the widget data. This block is instantiated by default with a list of all available widgets to choose from. The block wraps its functionality in two modes: edit and preview based on the selected widget. The widget block’s edit mode shows the standard Widget form, while the preview does a server-side render of the widget.",
    "There is a block widget that acts as a storage mechanism for blocks added to widget areas. This widget is a special case of the HTML widget, where the block data is stored as it is rendered by the block’s save function. All blocks added to widget areas are stored as these special HTML widgets, in one type of widget, the block widget.",
    "This mechanism, using a widget block to edit widgets as blocks and a block widget to store blocks as widgets, ensures 100% compatibility with the old Widgets screen. Thus, if the new Widget editor, which is block-based, breaks some widgets’ functionality that depends on the admin page’s HTML structure or jQuery events, it is easy to revert to the old screen and continue to edit the legacy widgets.",
    "Being just a block editor, the Widgets editor needs REST API entity management endpoints. For support, two new endpoints have been added: ./widgets and /sidebars. The ./widgets endpoint is used to load and save widgets and retrieve a server-side render of the widget’s edit form. The /sidebars endpoint is used to list widget areas and assign or remove a widget to or from a widget area. There is also an /widget-types endpoint listing what kind widgets are available, e.g. text widget, calendar widget etc",
    "In order to make the experience as seamless as possible for users, the following “magic” happens in the Widgets editor:",
    "Edit Site Page Module for WordPress.",
    "End-To-End (E2E) tests for WordPress.",
    "Note that there’s currently an ongoing project to migrate E2E tests to Playwright instead. This package is deprecated and will only accept bug fixes until fully migrated.",
    "The following commands are available on the Gutenberg repo:",
    "Makes e2e tests available to debug in a Chrome Browser.",
    "After running the command, tests will be available for debugging in Chrome by going to chrome://inspect/#devices and clicking inspect under the path to /test-e2e.js.",
    "Debugging in a Chrome browser can be replaced with vscode‘s debugger by adding the following configuration to .vscode/launch.json:",
    "This will run jest, targetting the spec file currently open in the editor. vscode‘s debugger can now be used to add breakpoints and inspect tests as you would in Chrome DevTools.",
    "End-To-End (E2E) test utils for WordPress.",
    "It works properly with the minimum version of Gutenberg 13.8.0 or the minimum version of WordPress 6.0.0.",
    "Activates an installed plugin.",
    "Activates an installed theme.",
    "Verifies if publish checks are enabled.",
    "Gets the editor canvas frame.",
    "Visits general settings page and changes the timezone to the given value.",
    "Clears the local storage.",
    "Clicks the default block appender.",
    "Clicks a block toolbar button.",
    "Clicks a button based on the text on the button.",
    "Searches for an item in the menu with the text provided and clicks it.",
    "Click on the close button of an open modal.",
    "Clicks on More Menu item, searches for the button with the text provided and clicks it.",
    "Closes the global inserter.",
    "Closes list view",
    "Creates a function to determine if a request is embedding a certain URL.",
    "Respond to a request with a JSON response.",
    "Create menus and all linked resources for the menu using the REST API.",
    "Creates new post.",
    "Opens the template editor with a newly created template.",
    "Creates a simple reusable block with a paragraph block.",
    "Creates new URL by parsing base URL, WPPath and query string.",
    "Creates a function to determine if a request is calling a URL with the substring present.",
    "Create a new user account.",
    "Deactivates an active plugin.",
    "Delete all menus using the REST API",
    "Delete all the templates of given type.",
    "Delete all the widgets in the widgets screen.",
    "Deletes a theme from the site, activating another theme if necessary.",
    "Delete a user account.",
    "Removes the focus loss listener that enableFocusLossObservation() adds.",
    "Disable auto-accepting any dialogs.",
    "Disables Pre-publish checks.",
    "Skips the welcome guide popping up to first time users of the site editor",
    "Clicks an element, drags a particular distance and releases the mouse button.",
    "Adds an event listener to the document which throws an error if there is a loss of focus.",
    "Enables event listener which auto-accepts all dialogs on the page.",
    "Enables Pre-publish checks.",
    "Verifies that the edit post/site/widgets sidebar is opened, and if it is not, opens it.",
    "Enters edit mode.",
    "Finds a sidebar panel with the provided title.",
    "Finds the button responsible for toggling the sidebar panel with the provided title.",
    "Returns an array of strings with all inserter item titles.",
    "Returns an array with all blocks; Equivalent to calling wp.data.select( ‘core/block-editor’ ).getBlocks();",
    "Returns an array of strings with all block titles, that the current selected block can be transformed into.",
    "Returns a string containing the block title associated with the provided block name.",
    "Returns a promise which resolves with the current post content (HTML string).",
    "Returns a promise which resolves with the edited post content (HTML string).",
    "Gets all block anchor nodes in the list view that match a given block name label.",
    "Returns a site option, from the options admin page.",
    "Returns a promise resolving to one of either a string or null. A string will be resolved if an error message is present in the contents of the page. If no error is present, a null value will be resolved instead. This requires the environment be configured to display errors.",
    "Returns a boolean indicating if the current selected block has a block switcher or not.",
    "Inserts a block matching a given search term via the global inserter.",
    "Inserts a Block Directory block matching a given search term via the global inserter.",
    "Inserts a pattern matching a given search term via the global inserter.",
    "Inserts a reusable block matching a given search term via the global inserter.",
    "Installs a plugin from the WP.org repository.",
    "Installs a theme from the WP.org repository.",
    "Checks if current URL is a WordPress path.",
    "Checks if the block that is focused is the default block.",
    "Checks whether a theme exists on the site.",
    "Performs log in with specified username and password.",
    "Performs log out.",
    "Mocks a request with the supplied mock object, or allows it to run with an optional transform, based on the deserialised JSON response for the request.",
    "Clicks on the button in the header which opens Document Settings sidebar when it is closed.",
    "Opens the global inserter.",
    "Opens a global styles panel.",
    "Opens list view",
    "Opens the preview page of an edited post.",
    "Opens the previous global styles panel.",
    "Opens the publish panel.",
    "Opens the Typography tools panel menu provided via block supports.",
    "Presses the given keyboard key a number of times in sequence.",
    "Performs a key press with modifier (Shift, Control, Meta, Alt), where each modifier is normalized to platform-specific modifier.",
    "Publishes the post, resolving once the request is complete (once a notice is displayed).",
    "Publishes the post without the pre-publish checks, resolving once the request is complete (once a notice is displayed).",
    "Clears all user meta preferences.",
    "Saves the post as a draft, resolving once the request is complete (once the “Saved” indicator is displayed).",
    "Searches for a block via the global inserter.",
    "Searches for a Block Directory block via the global inserter.",
    "Searches for a pattern via the global inserter.",
    "Searches for a reusable block via the global inserter.",
    "Given the clientId of a block, selects the block on the editor.",
    "Sets browser viewport to specified type.",
    "Sets the clipboard data that can be pasted with pressKeyWithModifier( 'primary', 'v' ).",
    "Sets a site option, from the options-general admin page.",
    "Sets code editor content",
    "Sets up mock checks and responses. Accepts a list of mock settings with the following properties:",
    "If none of the mock settings match the request, the request is allowed to continue.",
    "The block toolbar is not always visible while typing. Call this function to reveal it.",
    "Clicks on the block inspector tab button with the supplied label and waits for the tab switch.",
    "Switches editor mode.",
    "Switches the current user to the admin user (if the user running the test is not already the admin user).",
    "Switches the current user to whichever user we should be running the tests as (if we’re not already that user).",
    "Toggles the global inserter.",
    "Toggles the global styles sidebar (opens it if closed and closes it if open).",
    "Toggles the More Menu.",
    "Toggles a preference option with the given tab label and the option label.",
    "Converts editor’s block type.",
    "Navigates to the comments listing screen and bulk-trashes any comments which exist.",
    "Navigates to the post listing screen and bulk-trashes any posts which exist.",
    "Uninstalls a plugin.",
    "Visits admin page; if user is not logged in then it logging in it first, then visits admin page.",
    "Visits the Site Editor main page",
    "By default, it also skips the welcome guide. The option can be disabled if need be.",
    "Function that waits until the page viewport has the required dimensions. It is being used to address a problem where after using setViewport the execution may continue, without the new dimensions being applied. https://github.com/GoogleChrome/puppeteer/issues/1751",
    "Queries the WordPress data module.",
    "page.evaluate – used in the function – returns undefined when it encounters a non-serializable value. Since we store many different values in the data module, you can end up with an undefined result. Before using this function, make sure the data you are querying doesn’t contain non-serializable values, for example, functions, DOM element handles, etc.",
    "docgen helps you to generate the public API of your code. Given an entry point file, it outputs the ES6 export statements and their corresponding JSDoc comments in human-readable format. It also supports TypeScript via the TypeScript babel plugin.",
    "Some characteristics:",
    "This command will generate a file named entry-point-api.md containing all the exports and their JSDoc comments.",
    "@wordpress/docgen follows the default project-wide configuration of Babel. Like Babel, it will automatically search for a babel.config.json file, or an equivalent one using the supported extensions, in the project root directory.",
    "Without it, @wordpress/docgen runs with the default option. In other words, it cannot parse JSX or other advanced syntaxes.",
    "Entry point index.js:",
    "Output of npx docgen index.js would be index-api.js:",
    "Let the entry point be index.js:",
    "with ./count/index.js contents being:",
    "Entry point index.ts:",
    "Output of npx docgen index.ts would be index-api.js:",
    "The data controls module is a module intended to simplify implementation of common controls used with the @wordpress/data package.",
    "Note: It is assumed that the registry being used has the controls plugin enabled on it (see more details on controls here)",
    "The following controls are available on the object returned by the module:",
    "Dispatches a control action for triggering an api fetch call.",
    "The default export is what you use to register the controls with your custom store.",
    "Control for dispatching an action in a registered data store. Alias for the dispatch control in the @wordpress/data package.",
    "Control for resolving a selector in a registered data store. Alias for the resolveSelect built-in control in the @wordpress/data package.",
    "Control for calling a selector in a registered data store. Alias for the select built-in control in the @wordpress/data package.",
    "Dropdown is a React component to render a button that opens a floating content modal when clicked.",
    "This component takes care of updating the state of the dropdown menu (opened/closed), handles closing the menu when clicking outside and uses render props to render the button and the content.",
    "className of the global container",
    "If you want to target the dropdown menu for styling purposes, you need to provide a contentClassName because it’s not being rendered as a child of the container node.",
    "Opt-in prop to show popovers fullscreen on mobile.",
    "Set this to customize the text that is shown in the dropdown’s header when it is fullscreen on mobile.",
    "A callback invoked when the state of the popover changes from open to closed and vice versa.",
    "The callback receives a boolean as a parameter. If true, the popover will open. If false, the popover will close.",
    "Properties of popoverProps object will be passed as props to the Popover component.",
    "Use this object to access properties/features of the Popover component that are not already exposed in the Dropdown component, e.g.: the ability to have the popover without an arrow.",
    "A callback invoked to render the content of the dropdown menu.",
    "Required: Yes",
    "A callback invoked to render the Dropdown Toggle Button.",
    "Its props are the same as the renderContent props.",
    "The style of the global container",
    "Buttons let users take actions and make choices with a single click or tap.",
    "Buttons tell users what actions they can take and give them a way to interact with the interface. You’ll find them throughout a UI, particularly in places like:",
    "Buttons should:",
    "Buttons should be clear and predictable—users should be able to anticipate what will happen when they click a button. Never deceive a user by mislabeling a button.",
    "Buttons text should lead with a strong verb that encourages action, and add a noun that clarifies what will actually change. The only exceptions are common actions like Save, Close, Cancel, or OK. Otherwise, use the {verb}+{noun} format to ensure that your button gives the user enough information.",
    "Button text should also be quickly scannable — avoid unnecessary words and articles like the, an, or a.",
    "Link buttons have low emphasis. They don’t stand out much on the page, so they’re used for less-important actions. What’s less important can vary based on context, but it’s usually a supplementary action to the main action we want someone to take. Link buttons are also useful when you don’t want to distract from the content.",
    "Default buttons have medium emphasis. The button appearance helps differentiate them from the page background, so they’re useful when you want more emphasis than a link button offers.",
    "Primary buttons have high emphasis. Their color fill and shadow means they pop off the background.",
    "Since a high-emphasis button commands the most attention, a layout should contain a single primary button. This makes it clear that other buttons have less importance and helps users understand when an action requires their attention.",
    "All button types use text labels to describe the action that happens when a user taps a button. If there’s no text label, there needs to be a label added and an icon to signify what the button does.",
    "Do\nUse color to distinguish link button labels from other text.",
    "Don’t\nDon’t wrap button text. For maximum legibility, keep text labels on a single line.",
    "A layout should contain a single prominently-located button. If multiple buttons are required, a single high-emphasis button can be joined by medium- and low-emphasis buttons mapped to less-important actions. When using multiple buttons, make sure the available state of one button doesn’t look like the disabled state of another.",
    "A button’s level of emphasis helps determine its appearance, typography, and placement.",
    "Use button types to express different emphasis levels for all the actions a user can perform.",
    "This screen layout uses:",
    "Placement best practices:",
    "Renders a button with default style.",
    "The presence of a href prop determines whether an anchor element is rendered instead of a button.",
    "Props not included in this set will be applied to the a or button element.",
    "The button’s children.",
    "An optional additional class name to apply to the rendered button.",
    "An accessible description for the button.",
    "Whether the button is disabled. If true, this will force a button element to be rendered.",
    "Whether the button is focused.",
    "If provided, renders a instead of button.",
    "If provided, renders an Icon component inside the button.",
    "If provided with icon, sets the position of icon relative to the text. Available options are left|right.",
    "If provided with icon, sets the icon size. Please refer to the Icon component for more details regarding the default value of its size prop.",
    "Indicates activity while a action is being performed.",
    "Renders a red text-based button style to indicate destructive behavior.",
    "Renders a pressed button style.",
    "Decreases the size of the button.",
    "Sets the aria-label of the component, if none is provided. Sets the Tooltip content if showTooltip is provided.",
    "If provided with showTooltip, appends the Shortcut label to the tooltip content. If an object is provided, it should contain display and ariaLabel keys.",
    "If provided, renders a Tooltip component for the button.",
    "If provided with href, sets the target attribute to the a.",
    "If provided, displays the given text inside the button. If the button contains children elements, the text is displayed before them.",
    "If provided withshowTooltip, sets the position of the tooltip. Please refer to the Tooltip component for more details regarding the defaults.",
    "Specifies the button’s style. The accepted values are 'primary' (the primary button styles), 'secondary' (the default button styles), 'tertiary' (the text-based button styles), and 'link' (the link button styles).",
    "Widgets blocks in Customizer Module for WordPress.",
    "The new Widgets Customizer replaces Appearance > Customize > Widgets with block-based editors. The original Customizer is a Backbone app, but the new editor is a React app. One of the challenges is to integrate them together but make sure features from both sides still work.",
    "We extend the Customizer’s sections and controls in the /controls directory and inject some custom logic for the editor. We use React portal to render each editor in its section to reuse most of the styles and scripts provided by the Customizer.",
    "components/sidebar-block-editor is the entry point for each widget area’s block editor. component/sidebar-block-editor/sidebar-adapter.js is an adapter to talk to the Customize API and transform widget objects into widget instances.",
    "components/sidebar-block-editor/use-sidebar-block-editor.js is a custom React Hook to integrate the adapter into React and handle most of the translations between blocks and widgets. These allow us to implement basic editing features as well as real-time preview in a backwards-compatible way.",
    "Whenever the blocks change, we run through each block to determine if there are created, edited, or deleted blocks. We then convert them to their widget counterparts and call the Customize API to update them.",
    "For React developers, this can be thought of as a custom reconciler or a custom renderer for the Customizer. But instead of targeting DOM as the render target, we are targeting WordPress widgets using the Customize API.",
    "This is not the typical way the block editor is intended to be used. As a result, we have to also implement some missing features such as undo/redo and custom focus control. It is still a goal to make the block editor as easy to integrate into different systems as possible, so the integration in the Widgets Customizer can be a good experience for us to reflect some drawbacks in our current API and potentially improve them in the future.",
    "Are you looking for a way to share your project configuration? Creating an external project template hosted on npm or located in a local directory is possible. These npm packages can provide custom .mustache files that replace default files included in the tool for the WordPress plugin or/and the block. It’s also possible to override default configuration values used during the scaffolding process.",
    "Providing the main file (index.js by default) for the package that returns a configuration object is mandatory. Several options allow customizing the scaffolding process.",
    "This optional field allows overriding file templates related to the WordPress plugin shell. The path points to a location with template files ending with the .mustache extension (nested folders are also supported). When not set, the tool uses its own set of templates.",
    "This optional field allows overriding file templates related to the individual block. The path points to a location with template files ending with the .mustache extension (nested folders are also supported). When not set, the tool uses its own set of templates.",
    "This setting is useful when your template scaffolds a WordPress plugin that uses static assets like images or fonts, which should not be processed. It provides the path pointing to the location where assets are located. They will be copied to the assets subfolder in the generated plugin.",
    "It is possible to override the default template configuration using the defaultValues field.",
    "The following configurable variables are used with the template files. Template authors can change default values to use when users don’t provide their data.",
    "Project:",
    "Plugin header fields (learn more):",
    "Block metadata (learn more):",
    "Create Block is an officially supported tool for scaffolding a WordPress plugin that registers a block. It generates PHP, JS, CSS code, and everything you need to start the project. It also integrates a modern build setup with no configuration.",
    "It is largely inspired by create-react-app. Major kudos to @gaearon, the whole Facebook team, and the React community.",
    "Blocks are the fundamental elements of modern WordPress sites. Introduced in WordPress 5.0, they allow page and post builder-like functionality to every up-to-date WordPress website.",
    "Learn more about the Block API at the Gutenberg HandBook.",
    "The slug provided (todo-list in the example) defines the folder name for the scaffolded plugin and the internal block name. The WordPress plugin generated must be installed manually.",
    "(requires node version 14.0.0 or above, and npm version 6.14.4 or above)",
    "Watch a video introduction to create-block on Learn.wordpress.org",
    "The create-block command generates a project with PHP, JS, and CSS code for registering a block with a WordPress plugin.",
    "The name for a block is a unique string that identifies a block. Block Names are structured as namespace/slug, where namespace is the name of your plugin or theme.",
    "In most cases, we recommended pairing blocks with WordPress plugins rather than themes, because only using plugin ensures that all blocks still work when your theme changes.",
    "When no slug is provided, the script will run in interactive mode and will start prompting for the input required (slug, title, namespace…) to scaffold the project.",
    "The use of slug is optional.",
    "When provided it triggers the quick mode, where this slug is used:\n– as the block slug (required for its identification)\n– as the output location (folder name) for scaffolded files\n– as the name of the WordPress plugin.",
    "The rest of the configuration is set to all default values unless overridden with some options listed below.",
    "This argument specifies an external npm package as a template.",
    "This argument also allows to pick a local directory as a template.",
    "With this argument, create-block will generate a dynamic block based on the built-in template.",
    "With this argument, the create-block package outputs usage information.",
    "With this argument, the create-block package runs in No plugin mode which only scaffolds block files into the current directory.",
    "With this argument, the create-block package will add to the generated plugin the configuration and the script to run wp-env package within the plugin. This will allow you to easily set up a local WordPress environment (via Docker) for building and testing the generated plugin.",
    "The plugin folder created when executing this command, is a node package with a modern build setup that requires no configuration.",
    "A set of scripts is available from inside that folder (provided by the scripts package) to make your work easier. Click here for a full description of these commands.",
    "Note: You don’t need to install or configure tools like webpack, Babel or ESLint yourself. They are preconfigured and hidden so that you can focus on coding.",
    "For example, running the start script from inside the generated folder (npm start) would automatically start the build for development.",
    "Click here for information on External Project Templates",
    "DEPRECATED for webpack v5: please use output.filename instead.",
    "Webpack plugin for creating custom path template tags. Extend the default set of template tags with your own custom behavior. Hooks into Webpack’s compilation process to allow you to replace tags with a substitute value.",
    "Construct an instance of CustomTemplatedPathPlugin in your Webpack configurations plugins entry, passing an object where keys correspond to the template tag name. The value for each key is a function passed the original intended path and data corresponding to the asset.",
    "The following example creates a new basename tag to substitute the basename of each entry file in the build output file. When compiled, the built file will be output as build-entry.js.",
    "For more examples, refer to Webpack’s own TemplatedPathPlugin.js, which implements the base set of template tags.",
    "This is a template for @wordpress/create-block that is the finished version of the block in the official WordPress Tutorial for the block editor.",
    "This block template can be used by running the following command:",
    "Commands is a generic package that allows registering and modifying commands to be displayed using the commands menu (Also called cmd+k).",
    "WordPress Browserslist shareable config for Browserslist.",
    "Alternatively, add this to .browserslistrc file:",
    "This package when imported returns an array of supported browsers, for more configuration examples including Autoprefixer, Babel, ESLint, PostCSS, and stylelint see the Browserslist examples repo.",
    "This module allows you to create and use standalone block editors.",
    "In this example, we’re instantiating a block editor. A block editor is composed by a BlockEditorProvider wrapper component where you pass the current array of blocks and on each change the onInput or onChange callbacks are called depending on whether the change is considered persistent or not.",
    "Inside BlockEditorProvider, you can nest any of the available @wordpress/block-editor UI components to build the UI of your editor.",
    "In the example above we’re rendering the BlockList to show and edit the block list. For instance we could add a custom sidebar and use the BlockInspector component to be able to edit the advanced settings for the currently selected block. (See the API for the list of all the available components).",
    "The BlockTools component is used to render the toolbar for a selected block.",
    "In the example above, there’s no registered block type, in order to use the block editor successfully make sure to register some block types. For instance, registering the core block types can be done like so:",
    "Any components in this package that have a counterpart in @wordpress/components are an extension of those components.",
    "Unless you’re creating an editor, it is recommended that the components in @wordpress/components should be used rather than the ones in this package as these components have been customized for use in an editor and may result in unexpected behaviour if used outside of this context.",
    "Block breadcrumb component, displaying the hierarchy of the current block selection as a breadcrumb.",
    "Component which merges passed value with current consumed block context.",
    "BlockPreview renders a preview of a block or array of blocks.",
    "Renders the block’s configured title as a string, or empty if the title cannot be determined.",
    "Renders block tools (the block toolbar, select/navigation mode toolbar, the insertion point and a slot for the inline rich text toolbar). Must be wrapped around the block content and editor styles wrapper or iframe.",
    "Use ButtonBlockAppender instead.",
    "A higher-order component factory for creating a ‘withCustomColors’ HOC, which handles color logic for class generation color value, retrieval and color attribute setting.",
    "Use this higher-order component to work with a custom set of colors.",
    "Returns a class based on the context a color is being used and its slug.",
    "Provided an array of color objects as set by the theme or by the editor defaults, and the values of the defined color or custom color returns a color object describing the color.",
    "Provided an array of color objects as set by the theme or by the editor defaults, and a color value returns the color object matching that value or undefined.",
    "Computes a fluid font-size value that uses clamp(). A minimum and maximum font size OR a single font size can be specified.",
    "If a single font size is specified, it is scaled up and down by minimumFontSizeFactor and maximumFontSizeFactor to arrive at the minimum and maximum sizes.",
    "Converts a spacing preset into a custom value.",
    "Returns the font size object based on an array of named font sizes and the namedFontSize and customFontSize values. If namedFontSize is undefined or not found in fontSizes an object with just the size value based on customFontSize is returned.",
    "Returns a class based on fontSizeName.",
    "Returns the corresponding font size object for a given value.",
    "Retrieves the gradient slug per slug.",
    "Retrieves the gradient value per slug.",
    "Returns the px value of a cssUnit. The memoized version of getPxFromCssUnit;",
    "Provides the CSS class names and inline styles for a block’s typography support attributes.",
    "HeightControl renders a linked unit control and range control for adjusting the height of a block.",
    "Checks is given value is a spacing preset.",
    "Scrolls the multi block selection end into view if not in view already. This is important to do after selection by keyboard.",
    "Private @wordpress/block-editor APIs.",
    "The default editor settings",
    "Store definition for the block editor namespace.",
    "Block editor data store configuration.",
    "Applies a series of CSS rule transforms to wrap selectors inside a given class and/or rewrite URLs depending on the parameters passed.",
    "Ensures that the text selection keeps the same vertical distance from the viewport during keyboard events within this component. The vertical distance can vary. It is the last clicked or scrolled to position.",
    "Hook used to try to find a matching block variation and return the appropriate information for display reasons. In order to to try to find a match we need to things: 1. Block’s client id to extract it’s current attributes. 2. A block variation should have set isActive prop to a proper function.",
    "If for any reason a block variation match cannot be found, the returned information come from the Block Type. If no blockType is found with the provided clientId, returns null.",
    "The useBlockEditContext hook provides information about the block this hook is being used in. It returns an object with the name, isSelected state, and the clientId of the block. It is useful if you want to create custom hooks that need access to the current blocks clientId but don’t want to rely on the data getting passed in as a parameter.",
    "This hook is used to lightly mark an element as a block element. The element should be the outermost element of a block. Call this hook and pass the returned props to the element to mark as a block. If you define a ref for the element, it is important to pass the ref to this hook, which the hook in turn will pass to the component through the props it returns. Optionally, you can also pass any other props through this hook, and they will be merged and returned.",
    "Keeps an up-to-date copy of the passed value and returns it. If value becomes falsy, it will return the last truthy copy.",
    "This hook is used to lightly mark an element as an inner blocks wrapper element. Call this hook and pass the returned props to the element to mark as an inner blocks wrapper, automatically rendering inner blocks as children. If you define a ref for the element, it is important to pass the ref to this hook, which the hook in turn will pass to the component through the props it returns. Optionally, you can also pass any other props through this hook, and they will be merged and returned.",
    "Hook that retrieves the given setting for the block instance in use.",
    "It looks up the settings first in the block instance hierarchy. If none is found, it’ll look it up in the block editor store.",
    "A higher-order component, which handles color logic for class generation color value, retrieval and color attribute setting.",
    "For use with the default editor/theme color palette.",
    "Higher-order component, which handles font size logic for class generation, font size value retrieval, and font size change handling.",
    "Handles selection and navigation across blocks. This component should be wrapped around BlockList.",
    "Package used to extend editor with block directory features to search and install blocks.",
    "This package builds a standalone JS file. When loaded on a page with the block editor, it extends the block inserter to search for blocks from WordPress.org.",
    "To do this, it uses the __unstableInserterMenuExtension, a slot-fill area hooked into the block types list. When the user runs a search and there are no results currently installed, it fires off a request to WordPress.org for matching blocks. These are listed for the user to install with a one-click process that installs, activates, and injects the block into the post. When the post is saved, if the block was not used, it will be silently uninstalled to avoid clutter.",
    "See also the API endpoints for searching WordPress.org: /wp/v2/block-directory/search, and installing & activating plugins: /wp/v2/plugins/.",
    "The following set of dispatching action creators are available on the object returned by wp.data.dispatch( 'core/block-directory' ):",
    "The following selectors are available on the object returned by wp.data.select( 'core/block-directory' ):",
    "Base SCSS utilities and variables for WordPress.",
    "In your application’s SCSS file, include styles like so:",
    "If you use Webpack for your SCSS pipeline, you can use ~ to resolve to node_modules:",
    "To make that work with sass or node-sass NPM modules without Webpack, you’d have to use includePaths option:",
    "Default Babel preset for WordPress development.",
    "The preset includes configuration which enable language features and syntax extensions targeted for support by WordPress. This includes ECMAScript proposals which have reached Stage 4 (“Finished”), as well as the JSX syntax extension. For more information, refer to the JavaScript Coding Guidelines.",
    "There are a number of methods to configure Babel. See Babel’s Configuration documentation for more information. To use this preset, simply reference @wordpress/babel-preset-default in the presets option in your Babel configuration.",
    "For example, using .babelrc:",
    "This preset is an opinionated configuration. If you would like to add to or change this configuration, you can do so by expanding your Babel configuration to include plugins or presets which override those included through this preset. It may help to familiarize yourself the implementation of the configuration to see which specific plugins are enabled by default through this preset.",
    "For example, if you’d like to use a new language feature proposal which has not reached the stability requirements of WordPress, you can add those as additional plugins in your Babel configuration:",
    "There is a complementary build/polyfill.js (minified version – build/polyfill.min.js) file available that polyfills ECMAScript features missing in the browsers supported by the WordPress project (#31279). It’s a drop-in replacement for the deprecated @babel/polyfill package, and it’s also based on core-js project.",
    "This needs to be included before all your compiled Babel code. You can either prepend it to your compiled code or include it in a <script> before it.",
    "If you need to use a proposal that is not Stage 4, this polyfill will not automatically import those for you. You will have to import those from another polyfill like core-js individually.",
    "Babel plugin used to scan JavaScript files for use of localization functions. It then compiles these into a gettext POT formatted file as a template for translation. By default the output file will be written to gettext.pot of the root project directory. This can be overridden using the \"output\" option of the plugin.",
    "Babel transform plugin for automatically injecting an import to be used as the pragma for the React JSX Transform plugin.",
    "JSX is merely a syntactic sugar for a function call, typically to React.createElement when used with React. As such, it requires that the function referenced by this transform be within the scope of the file where the JSX occurs. In a typical React project, this means React must be imported in any file where JSX exists.",
    "Babel Plugin Import JSX Pragma automates this process by introducing the necessary import automatically wherever JSX exists, allowing you to use JSX in your code without thinking to ensure the transformed function is within scope. It respects existing import statements, as well as scope variable declarations.",
    "Install the module to your project using npm.",
    "Refer to the Babel Plugins documentation if you don’t yet have experience working with Babel plugins.",
    "Include @wordpress/babel-plugin-import-jsx-pragma (and @babel/plugin-transform-react-jsx) as plugins in your Babel configuration. If you don’t include both you will receive errors when encountering JSX tokens.",
    "Note: @wordpress/babel-plugin-import-jsx-pragma is included in @wordpress/babel-preset-default (default preset for WordPress development) starting from v4.0.0. If you are using this preset, you shouldn’t include this plugin in your Babel config.",
    "As the @babel/plugin-transform-react-jsx plugin offers options to customize the pragma to which the transform references, there are equivalent options to assign for customizing the imports generated.",
    "For example, if you are using the @wordpress/element package, you may want to use the following configuration:",
    "Type: String",
    "Name of variable required to be in scope for use by the JSX pragma. For the default pragma of React.createElement, the React variable must be within scope.",
    "Name of variable required to be in scope for <></> Fragment JSX. Named <Fragment /> elements\nexpect Fragment to be in scope and will not add the import.",
    "The module from which the scope variable is to be imported when missing.",
    "Type: Boolean",
    "Whether the scopeVariable is the default import of the source module. Note that this has no impact\non scopeVariableFrag.",
    "JavaScript port of WordPress’s automatic paragraph function autop and the removep reverse behavior.",
    "Replaces double line-breaks with paragraph elements.",
    "A group of regex replaces used to identify text formatted with newlines and replace double line-breaks with HTML paragraph tags. The remaining linebreaks after conversion become <br /> tags, unless br is set to ‘false’.",
    "Replaces <p> tags with two line breaks. “Opposite” of autop().",
    "Replaces <p> tags with two line breaks except where the <p> has attributes. Unifies whitespace. Indents <li>, <dt> and <dd> for better readability.",
    "Utility to make WordPress REST API requests. It’s a wrapper around window.fetch.",
    "apiFetch supports and passes through all options of the fetch global.",
    "Additionally, the following options are available:",
    "Shorthand to be used in place of url, appended to the REST API root URL for the current site.",
    "Absolute URL to the endpoint from which to fetch.",
    "Unlike fetch, the Promise return value of apiFetch will resolve to the parsed JSON result. Disable this behavior by passing parse as false.",
    "Sent on POST or PUT requests only. Shorthand to be used in place of body, accepts an object value to be stringified to JSON.",
    "Aborting a request can be achieved through the use of AbortController in the same way as you would when using the native fetch API.",
    "For legacy browsers that don’t support AbortController, you can either:",
    "the api-fetch package supports middlewares. Middlewares are functions you can use to wrap the apiFetch calls to perform any pre/post process to the API requests.",
    "The api-fetch package provides built-in middlewares you can use to provide a nonce and a custom rootURL.",
    "Nonce middleware",
    "The function returned by createNonceMiddleware includes a nonce property corresponding to the actively used nonce. You may also assign to this property if you have a fresh nonce value to use.",
    "Root URL middleware",
    "The api-fetch package uses window.fetch for making the requests but you can use a custom fetch handler by using the setFetchHandler method. The custom fetch handler will receive the options passed to the apiFetch calls.",
    "The example below uses a custom fetch handler for making all the requests with axios.",
    "Annotate content in the Gutenberg editor.",
    "You need to include wp-annotations as a dependency of the JavaScript file in which you wish to use the Annotations API.",
    "See this page for more detailed usage instructions.",
    "Accessibility utilities for WordPress.",
    "Create the live regions.",
    "Allows you to easily announce dynamic interface updates to screen readers using ARIA live regions. This module is inspired by the speak function in wp-a11y.js.",
    "For context I’ll quote this article on WordPress.org by @joedolson:",
    "In modern web development, updating discrete regions of a screen with JavaScript is common. The use of AJAX responses in modern JavaScript-based User Interfaces allows web developers to create beautiful interfaces similar to Desktop applications that don’t require pages to reload or refresh.",
    "JavaScript can create great usability improvements for most users – but when content is updated dynamically, it has the potential to introduce accessibility issues. This is one of the steps you can take to handle that problem.",
    "When a portion of a page is updated with JavaScript, the update is usually highlighted with animation and bright colors, and is easy to see. But if you don’t have the ability to see the screen, you don’t know this has happened, unless the updated region is marked as an ARIA-live region.",
    "If this isn’t marked, there’s no notification for screen readers. But it’s also possible that all the region content will be announced after an update, if the ARIA live region is too large. You want to provide users with just a simple, concise message.",
    "That’s what wp.a11y.speak() is meant for. It’s a simple tool that creates and appends an ARIA live notifications area to the  element where developers can dispatch text messages. Assistive technologies will automatically announce any text change in this area. This ARIA live region has an ARIA role of “status” so it has an implicit aria-live value of polite and an implicit aria-atomic value of true.",
    "This means assistive technologies will notify users of updates but generally do not interrupt the current task, and updates take low priority. If you’re creating an application with higher priority updates (such as a notification that their current session is about to expire, for example), then you’ll want to create your own method with an aria-live value of assertive.",
    "See https://make.wordpress.org/design/handbook/design-guide/browser-support/",
    "Block Supports is the API that allows a block to declare support for certain features.",
    "Opting into any of these features will register additional attributes on the block and provide the UI to manipulate that attribute.",
    "In order for the attribute to get applied to the block the generated properties get added to the wrapping element of the block. They get added to the object you get returned from the useBlockProps hook.",
    "BlockEdit function:",
    "save function:",
    "For dynamic blocks that get rendered via a render_callback in PHP you can use the get_block_wrapper_attributes() function. It returns a string containing all the generated properties and needs to get output in the opening tag of the wrapping block element.",
    "render_callback function:",
    "Anchors let you link directly to a specific block on a page. This property adds a field to define an id for the block and a button to copy the direct link.",
    "This property adds block controls which allow to change block’s alignment.",
    "When the block declares support for align, the attributes definition is extended to include an align attribute with a string type. By default, no alignment is assigned. The block can apply a default alignment by specifying its own align attribute with a default e.g.:",
    "This property allows to enable wide alignment for your theme. To disable this behavior for a single block, set this flag to false.",
    "ARIA-labels let you define an accessible label for elements. This property allows enabling the definition of an aria-label for the block, without exposing a UI field.",
    "By default, the class .wp-block-your-block-name is added to the root element of your saved markup. This helps having a consistent mechanism for styling blocks that themes and plugins can rely on. If, for whatever reason, a class is not desired on the markup, this functionality can be disabled.",
    "This value signals that a block supports some of the properties related to color. When it does, the block editor will show UI controls for the user to set their values.",
    "Note that the background and text keys have a default value of true, so if the color property is present they’ll also be considered enabled:",
    "It’s possible to disable them individually:",
    "This property adds UI controls which allow the user to apply a solid background color to a block.",
    "When color support is declared, this property is enabled by default (along with text), so simply setting color will enable background color.",
    "To disable background support while keeping other color supports enabled, set to false.",
    "When the block declares support for color.background, the attributes definition is extended to include two new attributes: backgroundColor and style:",
    "When a user chooses from the list of preset background colors, the preset slug is stored in the backgroundColor attribute.",
    "Background color presets are sourced from the editor-color-palette theme support.",
    "The block can apply a default preset background color by specifying its own attribute with a default e.g.:",
    "When a custom background color is selected (i.e. using the custom color picker), the custom color value is stored in the style.color.background attribute.",
    "The block can apply a default custom background color by specifying its own attribute with a default e.g.:",
    "Note: Deprecated since WordPress 6.3.",
    "This property has been replaced by filter.duotone.",
    "This property adds UI controls which allow the user to apply a gradient background to a block.",
    "Gradient presets are sourced from editor-gradient-presets theme support.",
    "When the block declares support for color.gradient, the attributes definition is extended to include two new attributes: gradient and style:",
    "When a user chooses from the list of preset gradients, the preset slug is stored in the gradient attribute.",
    "The block can apply a default preset gradient by specifying its own attribute with a default e.g.:",
    "When a custom gradient is selected (i.e. using the custom gradient picker), the custom gradient value is stored in the style.color.gradient attribute.",
    "The block can apply a default custom gradient by specifying its own attribute with a default e.g.:",
    "This property adds block controls which allow the user to set link color in a block, link color is disabled by default.",
    "To enable link color support, set to true.",
    "Link color presets are sourced from the editor-color-palette theme support.",
    "When the block declares support for color.link, the attributes definition is extended to include the style attribute:",
    "When a link color is selected, the color value is stored in the style.elements.link.color.text attribute.",
    "The block can apply a default link color by specifying its own attribute with a default e.g.:",
    "This property adds block controls which allow the user to set text color in a block.",
    "When color support is declared, this property is enabled by default (along with background), so simply setting color will enable text color.",
    "To disable text color support while keeping other color supports enabled, set to false.",
    "Text color presets are sourced from the editor-color-palette theme support.",
    "When the block declares support for color.text, the attributes definition is extended to include two new attributes: textColor and style:",
    "When a user chooses from the list of preset text colors, the preset slug is stored in the textColor attribute.",
    "The block can apply a default preset text color by specifying its own attribute with a default e.g.:",
    "When a custom text color is selected (i.e. using the custom color picker), the custom color value is stored in the style.color.text attribute.",
    "The block can apply a default custom text color by specifying its own attribute with a default e.g.:",
    "This property adds a field to define a custom className for the block’s wrapper.",
    "When the style picker is shown, the user can set a default style for a block type based on the block’s currently active style. If you prefer not to make this option available, set this property to false.",
    "Note: Since WordPress 6.2.",
    "This value signals that a block supports some of the CSS style properties related to dimensions. When it does, the block editor will show UI controls for the user to set their values if the theme declares support.",
    "When a block declares support for a specific dimensions property, its attributes definition is extended to include the style attribute.",
    "This value signals that a block supports some of the properties related to filters. When it does, the block editor will show UI controls for the user to set their values.",
    "This property adds UI controls which allow the user to apply a duotone filter to\na block or part of a block.",
    "The filter can be applied to an element inside the block by setting the selectors.filter.duotone selector.",
    "Duotone presets are sourced from color.duotone in theme.json.",
    "When the block declares support for filter.duotone, the attributes definition is extended to include the attribute style:",
    "The block can apply a default duotone color by specifying its own attribute with a default e.g.:",
    "By default, a block’s markup can be edited individually. To disable this behavior, set html to false.",
    "By default, all blocks will appear in the inserter, block transforms menu, Style Book, etc. To hide a block from all parts of the user interface so that it can only be inserted programmatically, set inserter to false.",
    "A non-multiple block can be inserted into each post, one time only. For example, the built-in ‘More’ block cannot be inserted again if it already exists in the post being edited. A non-multiple block’s icon is automatically dimmed (unclickable) to prevent multiple instances.",
    "A block may want to disable the ability of being converted into a reusable block. By default all blocks can be converted to a reusable block. If supports reusable is set to false, the option to convert the block into a reusable block will not appear.",
    "A block may want to disable the ability to toggle the lock state. It can be locked/unlocked by a user from the block “Options” dropdown by default. To disable this behavior, set lock to false.",
    "This value signals that a block supports some of the CSS style properties related to position. When it does, the block editor will show UI controls for the user to set their values if the theme declares support.",
    "Note that sticky position controls are currently only available for blocks set at the root level of the document. Setting a block to the sticky position will stick the block to its most immediate parent when the user scrolls the page.",
    "When the block declares support for a specific position property, its attributes definition is extended to include the style attribute.",
    "This value signals that a block supports some of the CSS style properties related to spacing. When it does, the block editor will show UI controls for the user to set their values if the theme declares support.",
    "When the block declares support for a specific spacing property, its attributes definition is extended to include the style attribute.",
    "A spacing property may define an array of allowable sides – ‘top’, ‘right’, ‘bottom’, ‘left’ – that can be configured. When such arbitrary sides are defined, only UI controls for those sides are displayed.",
    "Axial sides are defined with the vertical and horizontal terms, and display a single UI control for each axial pair (for example, vertical controls both the top and bottom sides). A spacing property may support arbitrary individual sides or axial sides, but not a mix of both.",
    "Note: blockGap accepts vertical and horizontal axial sides, which adjust gap column and row values. blockGap doesn’t support arbitrary sides.",
    "The presence of this object signals that a block supports some typography related properties. When it does, the block editor will show a typography UI allowing the user to control their values.",
    "This value signals that a block supports the font-size CSS style property. When it does, the block editor will show an UI control for the user to set its value.",
    "The values shown in this control are the ones declared by the theme via the editor-font-sizes theme support, or the default ones if none are provided.",
    "When the block declares support for fontSize, the attributes definition is extended to include two new attributes: fontSize and style:",
    "This value signals that a block supports the line-height CSS style property. When it does, the block editor will show an UI control for the user to set its value if the theme declares support.",
    "When the block declares support for lineHeight, the attributes definition is extended to include a new attribute style of object type with no default assigned. It stores the custom value set by the user. The block can apply a default style by specifying its own style attribute with a default e.g.:",
    "ButtonGroup can be used to group any related buttons together. To emphasize related buttons, a group should share a common container.",
    "Do\nOnly one option in a button group can be selected and active at a time. Selecting one option deselects any other.",
    "Button groups should:",
    "Active and available button groups",
    "A button group’s state makes it clear which button is active. Hover and focus states express the available selection options for buttons in a button group.",
    "Disabled button groups",
    "Button groups that cannot be selected can either be given a disabled state, or be hidden.",
    "Allows you to render a raw icon without any initial styling or wrappers.",
    "The component accepts the following props. Any additional props are passed through to the underlying icon element.",
    "The icon to render. Supported values are: Dashicons (specified as strings), functions, WPComponent instances and null.",
    "The size (width and height) of the icon.",
    "Dynamically creates a Web App manifest and registers the service worker for the admin.",
    "WordPress exposes a list of JavaScript packages and tools for WordPress development.",
    "JavaScript packages are available as a registered script in WordPress and can be accessed using the wp global variable.",
    "If you wanted to use the PlainText component from the block editor module, first you would specify wp-block-editor as a dependency when you enqueue your script:",
    "After the dependency is declared, you can access the module in your JavaScript code using the global wp like so:",
    "All the packages are also available on npm if you want to bundle them in your code.",
    "Using the same PlainText example, you would install the block editor module with npm:",
    "Once installed, you can access the component in your code using:",
    "There is a way to quickly install a version of the individual WordPress package used with a given WordPress major version using npm distribution tags (example for WordPress 5.8.x):",
    "It’s also possible to update all existing WordPress packages in the project with a single command:",
    "All major WordPress versions starting from 5.7.x are supported (e.g., wp-5.7 or wp-6.0). Each individual dist-tag always points to the latest bug fix release for that major version line.",
    "ZStack allows you to stack things along the Z-axis.",
    "Layers children elements on top of each other (first: highest z-index, last: lowest z-index).",
    "Reverse the layer ordering (first: lowest z-index, last: highest z-index).",
    "The amount of space between each child element. Its value is automatically inverted (i.e. from positive to negative, and viceversa) when switching from LTR to RTL.",
    "The children to stack.",
    "VisuallyHidden is a component used to render text intended to be visually hidden, but will show for alternate devices, for example a screen reader.",
    "The element that VisuallyHidden renders has the style position: absolute. When using this component be careful of the stacking context. Even though VisuallyHidden isn’t visible, it can still affect layout. An example of this is that VisuallyHidden may ignore overflow styles of ancestor elements because it instead adopts the overflow of its stacking context. One known side-effect can be an unexpected scrollbar appearing. To fix this kind of issue, introduce a stacking context on a more immediate parent of VisuallyHidden. Adding position: relative is often an easy way to do this.",
    "VStack (or Vertical Stack) is a layout component that arranges child elements in a vertical line.",
    "VStack can render anything inside.",
    "Determines how the child elements are aligned.",
    "The direction flow of the children content can be adjusted with direction. column will align children vertically and row will align children horizontally.",
    "Expands to the maximum available width (if horizontal) or height (if vertical).",
    "Horizontally aligns content if the direction is row, or vertically aligns content if the direction is column.\nIn the example below, flex-start will align the children content to the left.",
    "The amount of space between each child element. Spacing in between each child can be adjusted by using spacing.\nThe value of spacing works as a multiplier to the library’s grid system (base of 4px).",
    "Determines if children should wrap.",
    "When a Spacer is used within an VStack, the Spacer adaptively expands to take up the remaining space.",
    "Spacer can also be used in-between items to push them apart.",
    "UnitControl allows the user to set a numeric quantity as well as a unit (e.g. px).",
    "If true, the unit <select> is hidden.",
    "If true, the ENTER key press is required in order to trigger an onChange. If enabled, a change is also triggered when tabbing away (onBlur).",
    "If true, and the selected unit provides a default value, this value is set when changing units.",
    "Determines if the unit <select> is tabbable.",
    "The position of the label (top, side, bottom, or edge).",
    "Callback invoked when either the quantity or unit inputs fire the blur event.",
    "Callback invoked when either the quantity or unit inputs fire the focus event.",
    "Callback when the value changes.",
    "Callback when the unit changes.",
    "Adjusts the size of the input.\nSizes include: default, small",
    "Deprecated: Current unit value.\nInstead, provide a unit with a value through the value prop.",
    "Collection of available units.",
    "A default value (in the example above, 10 for %), if defined, is set as the new value when a unit changes. This is helpful in scenarios where changing a unit may cause drastic results, such as changing from px to vh.",
    "Current value. If passed as a string, the current unit will be inferred from this value.\nFor example, a value of 50% will set the current unit to %.",
    "Truncate is a typography primitive that trims text content. For almost all cases, it is recommended that Text, Heading, or Subheading is used to render text content. However, Truncate is available for custom implementations.",
    "The ellipsis string when truncating the text by the limit prop’s value.",
    "Determines where to truncate. For example, we can truncate text right in the middle. To do this, we need to set ellipsizeMode to middle and a text limit.",
    "Required: No",
    "Determines the max number of characters to be displayed before the rest of the text gets truncated. Requires ellipsizeMode to assume values different from auto and none.",
    "Clamps the text content to the specified numberOfLines, adding an ellipsis at the end. Note: this feature ignores the value of the ellipsis prop and always displays the default … ellipsis.",
    "TreeSelect component is used to generate select input fields.",
    "Render a user interface to select the parent page in a hierarchy of pages:",
    "The set of props accepted by the component will be specified below.\nProps not included in this set will be applied to the SelectControl component being used.",
    "If this property is added, an option will be added with this label to represent empty selection.",
    "A function that receives the id of the new node element that is being selected.",
    "The id of the currently selected node.",
    "An array containing the tree objects with the possible nodes the user can select.",
    "TreeGrid, TreeGridRow, and TreeGridCell are components used to create a tree hierarchy. They’re not visually styled components, but instead help with adding keyboard navigation and roving tabindex behaviors to tree grid structures.",
    "A tree grid is a hierarchical 2 dimensional UI component, for example it could be used to implement a file system browser.",
    "A tree grid allows the user to navigate using arrow keys. Up/down to navigate vertically across rows, and left/right to navigate horizontally between focusables in a row.",
    "For more information on a tree grid, see the following links:",
    "The TreeGrid renders both a table and tbody element, and is intended to be used with TreeGridRow (tr) and TreeGridCell (td) to build out a grid.",
    "Aside from the documented callback functions, any props specified will be passed to the table element rendered by TreeGrid.",
    "TreeGrid should always have children.",
    "Callback that fires when focus is shifted from one row to another via the Up and Down keys. Callback is also fired on Home and End keys which move focus from the beginning row to the end row.\nThe callback is passed the event, the start row element that the focus was on originally, and\nthe destination row element after the focus has moved.",
    "A callback that passes in the row element to be collapsed.",
    "A callback that passes in the row element to be expanded.",
    "Additional props other than those specified below will be passed to the tr element rendered by TreeGridRow, so for example, it is possible to also set a className on a row.",
    "An integer value designating the level in the hierarchical tree structure. Counting starts at 1. A value of 1 indicates the root level of the structure.",
    "An integer value that represents the position in the set. A set is the count of elements at a specific level. Counting starts at 1.",
    "An integer value that represents the total number of items in the set, at this specific level of the hierarchy.",
    "An optional value that designates whether a row is expanded or collapsed. Currently this value only sets the correct aria-expanded property on a row, it has no other built-in behavior.",
    "TreeGridCell accepts no specific props. Any props specified will be passed to the td element rendered by TreeGridCell.",
    "TreeGridCell renders children using a function:",
    "Props passed as an argument to the render prop must be passed to the child focusable component/element within the cell. If a component is used, it must correctly handle the onFocus, tabIndex, and ref props, passing these to the element it renders. These props are used to handle the roving tabindex functionality of the tree grid.",
    "These panels provide progressive discovery options for their children. For\nexample the controls provided via block supports.",
    "The ToolsPanel creates a container with a header including a\ndropdown menu. The menu is generated automatically from the panel’s children\nmatching the ToolsPanelItem component type.",
    "Each menu item allows for the display of the corresponding child to be\ntoggled on or off. The control’s onSelect and onDeselect callbacks are fired\nallowing for greater control over the child e.g. resetting block attributes when\na block support control is toggled off.",
    "Whether a child control is initially displayed or not is dependent upon\nif there has previously been a value set or the child has been flagged as\ndisplaying by default through the isShownByDefault prop. Determining whether a\nchild has a value is done via the hasValue function provided through the\nchild’s props.",
    "Components that are not wrapped within a ToolsPanelItem are still rendered\nhowever they will not be represented within, or controlled by, the ToolsPanel\nmenu. An example scenario that benefits from this could be displaying\nintroduction or help text within a panel.",
    "The ToolsPanel has a two-column grid layout. By default, ToolsPanelItem\ncomponents within the panel are styled to span both columns as this fits the\nmajority of use-cases. Most non-control elements, such as help text, will be\nrendered as children of the related control’s ToolsPanelItem and not require\nadditional styling.",
    "Suppose an element is related to multiple controls (e.g. a contrast checker), or\nthe panel itself (e.g. a panel description). In that case, these will be\nrendered into the panel without a wrapping ToolsPanelItem. They’ll then only\nspan a single column by default. If this is undesirable, those elements will\nlikely need a small style tweak, e.g. grid-column: 1 / -1;",
    "The usage example below will illustrate a non-ToolsPanelItem description\nparagraph, controls that should display in a single row, and others spanning\nboth columns.",
    "Flags that the items in this ToolsPanel will be contained within an inner\nwrapper element allowing the panel to lay them out accordingly.",
    "The heading level of the panel’s header.",
    "Text to be displayed within the panel’s header and as the aria-label for the\npanel’s dropdown menu.",
    "If a panelId is set, it is passed through the ToolsPanelContext and used\nto restrict panel items. When a panelId is set, items can only register\nthemselves if the panelId is explicitly null or the item’s panelId matches\nexactly.",
    "A function to call when the Reset all menu option is selected. As an argument, it receives an array containing the resetAllFilter callbacks of all the valid registered ToolsPanelItems.",
    "Advises the ToolsPanel that all of its ToolsPanelItem children should render\nplaceholder content (instead of null) when they are toggled off and hidden.",
    "This component acts as a wrapper and controls the display of items to be contained\nwithin a ToolsPanel. An item is displayed if it is flagged as a default control\nor the corresponding panel menu item, provided via context, is toggled on for\nthis item.",
    "See tools-panel/README.md#usage\nfor how to use ToolsPanelItem.",
    "This is called when building the ToolsPanel menu to determine the item’s\ninitial checked state.",
    "This prop identifies the current item as being displayed by default. This means\nit will show regardless of whether it has a value set or is toggled on in the\npanel’s menu.",
    "The supplied label is dual purpose.\nIt is used as:\n1. the human-readable label for the panel’s dropdown menu\n2. a key to locate the corresponding item in the panel’s menu context to\ndetermine if the panel item should be displayed.",
    "A panel item’s label should be unique among all items within a single panel.",
    "Called when this item is deselected in the ToolsPanel menu. This is normally\nused to reset the panel item control’s value.",
    "A callback to take action when this item is selected in the ToolsPanel menu.",
    "Panel items will ensure they are only registering with their intended panel by\ncomparing the panelId props set on both the item and the panel itself, or if the panelId is explicitly null. This\nallows items to be injected from a shared source.",
    "A ToolsPanel will collect each item’s resetAllFilter and pass an array of\nthese functions through to the panel’s resetAll callback. They can then be\niterated over to perform additional tasks.",
    "This component renders a tools panel’s header including a menu.",
    "This component is generated automatically by its parent\nToolsPanel.",
    "Text to be displayed within the panel header. It is also passed along as the\nlabel for the panel header’s DropdownMenu.",
    "The resetAll prop provides the callback to execute when the “Reset all” menu\nitem is selected. Its purpose is to facilitate resetting any control values\nfor items contained within this header’s panel.",
    "This is executed when an individual control’s menu item is toggled. It\nwill update the panel’s menu item state and call the panel item’s onSelect or\nonDeselect callbacks as appropriate.",
    "ToolbarDropdownMenu can be used to add actions to a toolbar, usually inside a Toolbar or ToolbarGroup when used to create general interfaces. If you’re using it to add controls to your custom block, you should consider using BlockControls.",
    "It has similar features to the DropdownMenu component. Using ToolbarDropdownMenu will ensure that keyboard interactions in a toolbar are consistent with the WAI-ARIA toolbar pattern.",
    "If you’re working on a custom block and you want to add controls to the block toolbar, you should use BlockControls instead.",
    "This component accepts the same API of the DropdownMenu component.",
    "ToggleGroupControl is a form component that lets users choose options represented in horizontal segments. To render options for this control use ToggleGroupControlOption component.",
    "This component is intended for selecting a single persistent value from a set of options, similar to a how a radio button group would work. If you simply want a toggle to switch between views, use a TabPanel instead.",
    "Only use this control when you know for sure the labels of items inside won’t wrap. For items with longer labels, you can consider a SelectControl or a CustomSelectControl component instead.",
    "Determines if segments should be rendered with equal widths.",
    "Whether an option can be deselected by clicking it again.",
    "Renders ToggleGroupControl as a (CSS) block element, spanning the entire width of the available space. This is the recommended style when the options are text-based and not icons.",
    "Label for the form element.",
    "Callback when a segment is selected.",
    "The value of the ToggleGroupControl.",
    "ToggleGroupControlOption is a form component and is meant to be used as a child of ToggleGroupControl.",
    "Label for the option. If needed, the aria-label prop can be used in addition to specify a different label for assistive technologies.",
    "The value of the ToggleGroupControlOption.",
    "Whether to show a tooltip when hovering over the option. The tooltip will attempt to use the aria-label prop text first, then the label prop text if no aria-label prop is found.",
    "ToggleGroupControlOptionIcon is a form component which is meant to be used as a child of [ToggleGroupControl] and displays an icon(<(/packages/components/src/toggle-group-control/toggle-group-control/README.md)>).",
    "Icon displayed as the content of the option. Usually one of the icons from the @wordpress/icons package, or a custom React <svg> icon.",
    "The text to accessibly label the icon option. Will also be shown in a tooltip.",
    "ToggleGroupControlOptionBase is a form component and is meant to be used as an internal, generic component for any children of ToggleGroupControl.",
    "The children elements.",
    "The value of the ToggleGroupControlOptionBase.",
    "Whether to show a tooltip when hovering over the option. The tooltip will only show if a label for it is provided using the aria-label prop.",
    "ToggleControl is used to generate a toggle user interface.",
    "Render a user interface to change fixed background setting.",
    "If this property is added, a help text will be generated using help property as the content.\nFor controlled components the help prop can also be a function which will return a help text\ndynamically depending on the boolean checked parameter.",
    "If checked is true the toggle will be checked. If checked is false the toggle will be unchecked.\nIf no value is passed the toggle will be an uncontrolled component with unchecked initial value.",
    "If disabled is true the toggle will be disabled and apply the appropriate styles.",
    "A function that receives the checked state (boolean) as input.",
    "The class that will be added with components-base-control and components-toggle-control to the classes of the wrapper div. If no className is passed only components-base-control and components-toggle-control are used.",
    "TextareaControls are TextControls that allow for multiple lines of text, and wrap overflow text onto a new line. They are a fixed height and scroll vertically when the cursor reaches the bottom of the field.",
    "Use TextareaControl when you need to encourage users enter an amount of text that’s longer than a single line. (A bigger box can encourage people to be more verbose, where a smaller one encourages them to be succinct.)",
    "TextareaControl should:",
    "Do not use TextareaControl if you need to let users enter shorter answers (no longer than a single line), such as a phone number or name. In this case, you should use Text Control.",
    "Do",
    "Use TextareaControl to let users to enter text longer than a single line.",
    "Don’t",
    "Use TextareaControl for shorter answers.",
    "Do\nUse a stroke around the container, which clearly indicates that users can input information.",
    "Don’t\nUse unclear visual markers to indicate a text field.",
    "Label text is used to inform users as to what information is requested for a text field. Every text field should have a label. Label text should be above the input field, and always visible. Write labels in sentence capitalization.",
    "When text input isn’t accepted, an error message can display instructions on how to fix it. Error messages are displayed below the input line, replacing helper text until fixed.",
    "The set of props accepted by the component will be specified below.",
    "Props not included in this set will be applied to the textarea element.",
    "A function that receives the new value of the textarea each time it changes.",
    "The number of rows the textarea should contain.",
    "The current value of the textarea.",
    "Text is a core component that renders text in the library, using the library’s typography system.",
    "Text can be used to render any text-content, like an HTML p or span.",
    "Type: boolean,\"large\",\"medium\",\"small\",\"xSmall\"",
    "Automatically calculate the appropriate line-height value for contents that render text and Control elements (e.g. TextInput).",
    "Type: CSSProperties['textAlign']",
    "Adjusts the text alignment.",
    "Type: CSSProperties['color']",
    "Adjusts the text color.",
    "Type: CSSProperties['display']",
    "Adjusts the CSS display.",
    "Type: string",
    "The ellipsis string when truncate is set.",
    "Type: \"auto\",\"head\",\"tail\",\"middle\"",
    "Type: boolean",
    "Escape characters in highlightWords which are meaningful in regular expressions.",
    "Determines if highlightWords should be case sensitive.",
    "Array of search words. String search terms are automatically cast to RegExps unless highlightEscape is true.",
    "Type: any[]",
    "Letters or words within Text can be highlighted using highlightWords.",
    "Sets Text to have display: block.",
    "Renders a destructive color.",
    "Type: number",
    "Determines the max characters when truncate is set.",
    "Type: CSSProperties['lineHeight']",
    "Adjusts all text line-height based on the typography system.",
    "Clamps the text content to the specifiec numberOfLines, adding the ellipsis at the end.",
    "The Text color can be adapted to a background color for optimal readability. optimizeReadabilityFor can accept CSS variables, in addition to standard CSS color values (e.g. Hex, RGB, HSL, etc…).",
    "Type: CSSProperties['fontSize'],TextSize",
    "Adjusts text size based on the typography system. Text can render a wide range of font sizes, which are automatically calculated and adapted to the typography system. The size value can be a system preset, a number, or a custom unit value (string) such as 30em.",
    "Enables text truncation. When truncate is set,we are able to truncate the long text in a variety of ways.",
    "Uppercases the text content.",
    "Type: \"muted\"",
    "Adjusts style variation of the text.",
    "Type: CSSProperties['fontWeight'],TextWeight",
    "Adjusts font-weight of the text.",
    "Theme allows defining theme variables for components in the @wordpress/components package.",
    "Multiple Theme components can be nested in order to override specific theme variables.",
    "The accent color (used by components as the primary color). If an accent color is not defined, the default fallback value is the original WP Admin main theme color.",
    "Not all valid CSS color syntaxes are supported — in particular, keywords (like 'currentcolor', 'inherit', 'initial', 'revert', 'unset'…) and CSS custom properties (e.g. var(--my-custom-property)) are not supported values for this property.",
    "The background color.  If a component explicitly has a background, it will be this color. Otherwise, this color will simply be used to determine what the foreground colors should be. The actual background color will need to be set on the component’s container element. If a background color is not defined, the default fallback value is #fff.",
    "If you would like your custom component to be themeable as a child of the Theme component, it should use these color variables. (This is a work in progress, and this list of variables may change. We do not recommend using these variables in production at this time.)",
    "Highlights occurrences of a given string within another string of text. Wraps each match with a <mark> tag which provides browser default styling.",
    "Pass in the text and the highlight string to be matched against.",
    "In the example below, the string Gutenberg would be highlighted twice.",
    "The component accepts the following props.",
    "The string to search for and highlight within the text. Case insensitive. Multiple matches.",
    "The string of text to be tested for occurrences of then given highlight.",
    "TabPanel is a React component to render an ARIA-compliant TabPanel.",
    "TabPanels organize content across different screens, data sets, and interactions. It has two sections: a list of tabs, and the view to show when tabs are chosen.",
    "TabPanels organize and allow navigation between groups of content that are related and at the same level of hierarchy.",
    "As a set, all tabs are unified by a shared topic. For clarity, each tab should contain content that is distinct from all the other tabs in a set.",
    "Tab labels appear in a single row, in the same typeface and size. Use text labels that clearly and succinctly describe the content of a tab, and make sure that a set of tabs contains a cohesive group of items that share a common characteristic.",
    "Tab labels can wrap to a second line, but do not add a second row of tabs.",
    "To differentiate an active tab from an inactive tab, apply an underline and color change to the active tab’s text and icon.",
    "Users can navigate between tabs by tapping the tab key on the keyboard.",
    "Place tabs above content. Tabs control the UI region displayed below them.",
    "The class to give to the outer container for the TabPanel",
    "The orientation of the tablist (vertical or horizontal)",
    "The function called when a tab has been selected. It is passed the tabName as an argument.",
    "An array of objects containing the following properties:",
    "Note: Other fields may be added to the object and accessed from the child function if desired.",
    "The class to add to the active tab",
    "The name of the tab to be selected upon mounting of component. If this prop is not set, the first tab will be selected by default.",
    "When true, the tab will be selected when receiving focus (automatic tab activation). When false, the tab will be selected only when clicked (manual tab activation). See the official W3C docs for more info.",
    "A function which renders the tabviews given the selected tab. The function is passed the active tab object as an argument as defined the tabs prop.",
    "Surface is a core component that renders a primary background color.",
    "In the example below, notice how the Surface renders in white (or dark gray if in dark mode).",
    "Determines the grid size for “dotted” and “grid” variants.",
    "Renders a bottom border.",
    "Renders a left border.",
    "Renders a right border.",
    "Renders a top border.",
    "Modifies the background color of Surface.",
    "Spinner is a component used to notify users that their action is being processed.",
    "The spinner component should:",
    "Spacer is a primitive layout component that providers inner (padding) or outer (margin) space in-between components. It can also be used to adaptively provide space within an HStack or VStack.",
    "Spacer comes with a bunch of shorthand props to adjust margin and padding. The values of these props work as a multiplier to the library’s grid system (base of 4px).",
    "Adjusts all margins.",
    "Adjusts bottom margin, potentially overriding the value from the more generic margin and marginY props.",
    "Adjusts left margin, potentially overriding the value from the more generic margin and marginX props.",
    "Adjusts right margin, potentially overriding the value from the more generic margin and marginX props.",
    "Adjusts top margin, potentially overriding the value from the more generic margin and marginY props.",
    "Adjusts left and right margins, potentially overriding the value from the more generic margin prop.",
    "Adjusts top and bottom margins, potentially overriding the value from the more generic margin prop.",
    "Adjusts all padding.",
    "Adjusts bottom padding, potentially overriding the value from the more generic padding and paddingY props.",
    "Adjusts left padding, potentially overriding the value from the more generic padding and paddingX props.",
    "Adjusts right padding, potentially overriding the value from the more generic padding and paddingX props.",
    "Adjusts top padding, potentially overriding the value from the more generic padding and paddingY props.",
    "Adjusts left and right padding, potentially overriding the value from the more generic padding prop.",
    "Adjusts top and bottom padding, potentially overriding the value from the more generic padding prop.",
    "Use Snackbars to communicate low priority, non-interruptive messages to the user.",
    "A Snackbar displays a succinct message that is cleared out after a small delay. It can also offer the user options, like viewing a published post but these options should also be available elsewhere in the UI.",
    "To display a plain snackbar, pass the message as a children prop:",
    "For more complex markup, you can pass any JSX element:",
    "The following props are used to control the display of the component.",
    "An array of action objects. Each member object should contain a label and either a url link string or onClick callback function.",
    "The displayed message of a notice. Also used as the spoken message for assistive technology, unless spokenMessage is provided as an alternative message.",
    "Whether to require user action to dismiss the snackbar. By default, this is dismissed on a timeout, without user interaction.",
    "The icon to render in the snackbar.",
    "A ref to the list that contains the snackbar.",
    "A callback executed when the snackbar is dismissed. It is distinct from onRemove, which looks like a callback but is actually the function to call to remove the snackbar from the UI.",
    "Function called when dismissing the notice.",
    "A politeness level for the notice’s spoken message. Should be provided as one of the valid options for an aria-live attribute value. Note that this value should be considered a suggestion; assistive technologies may override it based on internal heuristics.",
    "A value of 'assertive' is to be used for important, and usually time-sensitive, information. It will interrupt anything else the screen reader is announcing in that moment.",
    "A value of 'polite' is to be used for advisory information. It should not interrupt what the screen reader is announcing in that moment (the “speech queue”) or interrupt the current task.",
    "Used to provide a custom spoken message.",
    "The DropdownMenu displays a list of actions (each contained in a MenuItem, MenuItemsChoice, or MenuGroup) in a compact way. It appears in a Popover after the user has interacted with an element (a button or icon) or when they perform a specific action.",
    "Use a DropdownMenu when you want users to:",
    "If you need to display all the available options at all times, consider using a Toolbar instead.",
    "Do\nUse a DropdownMenu to display a list of actions after the user interacts with an icon.",
    "Don’t\nDon’t use a DropdownMenu for frequently used actions. Use a Toolbar instead.",
    "Generally, the parent button should have a triangular icon to the right of the icon or text to indicate that interacting with it will show a DropdownMenu. In rare cases where the parent button directly indicates that there’ll be more content (through the use of an ellipsis or “More” label), this can be omitted.",
    "The parent button should retain the same visual styling regardless of whether the DropdownMenu is displayed or not.",
    "The DropdownMenu should typically appear directly below, or below and to the left of, the parent button. If there isn’t enough space below to display the full DropdownMenu, it can be displayed instead above the parent button.",
    "DropdownMenu is a React component to render an expandable menu of buttons. It is similar in purpose to a <select> element, with the distinction that it does not maintain a value. Instead, each option behaves as an action button.",
    "Render a Dropdown Menu with a set of controls:",
    "Alternatively, specify a children function which returns elements valid for use in a DropdownMenu: MenuItem, MenuItemsChoice, or MenuGroup.",
    "The Dashicon icon slug to be shown in the collapsed menu button.",
    "See also: https://developer.wordpress.org/resource/dashicons/",
    "A human-readable label to present as accessibility text on the focused collapsed menu button.",
    "An array of objects describing the options to be shown in the expanded menu.",
    "Each object should include an icon Dashicon slug string, a human-readable title string, isDisabled boolean flag and an onClick function callback to invoke when the option is selected.",
    "A valid DropdownMenu must specify one or the other of a controls or children prop.",
    "A function render prop which should return an element or elements valid for use in a DropdownMenu: MenuItem, MenuItemsChoice, or MenuGroup. Its first argument is a props object including the same values as given to a Dropdown‘s renderContent (isOpen, onToggle, onClose).",
    "A class name to apply to the dropdown menu’s toggle element wrapper.",
    "Properties of popoverProps object will be passed as props to the nested Popover component.\nUse this object to modify props available for the Popover component that are not already exposed in the DropdownMenu component, e.g.: the direction in which the popover should open relative to its parent node set with position prop.",
    "Properties of toggleProps object will be passed as props to the nested Button component in the renderToggle implementation of the Dropdown component used internally.\nUse this object to modify props available for the Button component that are not already exposed in the DropdownMenu component, e.g.: the tooltip text displayed on hover set with tooltip prop.",
    "Properties of menuProps object will be passed as props to the nested NavigableMenu component in the renderContent implementation of the Dropdown component used internally.\nUse this object to modify props available for the NavigableMenu component that are not already exposed in the DropdownMenu component, e.g.: the orientation of the menu set with orientation prop.",
    "In some contexts, the arrow down key used to open the dropdown menu might need to be disabled—for example when that key is used to perform another action.",
    "SelectControl allow users to select from a single or multiple option menu. It functions as a wrapper around the browser’s native <select> element.",
    "Use a select control when:",
    "If you have a shorter list of options, consider using RadioControl instead.",
    "Do\nUse selects when you have multiple options.",
    "Don’t\nUse selects for binary questions.",
    "A SelectControl includes a double-arrow indicator. The menu appears layered over the select.",
    "Once the menu is displayed onscreen, it remains open until the user chooses a menu item, clicks outside of the menu, or switches to another browser tab.",
    "Label the SelectControl with a text label above it, or to its left, using sentence capitalization. Clicking the label allows the user to focus directly on the select.",
    "Do\nPosition the label above, or to the left of, the select.",
    "Don’t\nPosition the label centered over the select, or right aligned against the side of the select.",
    "Menu Items",
    "Do\nUse short menu items.",
    "Don’t\nUse sentences in your menu.",
    "Render a user interface to select the size of an image.",
    "Render a user interface to select multiple users from a list.",
    "Render a user interface to select items within groups",
    "The position of the label (top, side, or bottom).",
    "If this property is added, multiple values can be selected. The value passed should be an array.",
    "In most cases, it is preferable to use the FormTokenField or CheckboxControl components instead.",
    "An alternative to the options prop.\nUse the children prop to have more control on the style of the items being rendered, like optgroups or options and possibly avoid re-rendering due to the reference update on the options prop.\n– Type: ReactNode\n– Required: No",
    "A function that receives the value of the new option that is being selected as input.\nIf multiple is true the value received is an array of the selected value.\nIf multiple is false the value received is a single value with the new selected value.",
    "Start opting into the new margin-free styles that will become the default in a future version.",
    "CustomSelectControl allows users to select an item from a single-option menu just like SelectControl, with the addition of being able to provide custom styles for each item in the menu. This means it does not use a native <select>, so should only be used if the custom styling is necessary.",
    "These are the same as the ones for SelectControls.",
    "A custom class name to append to the outer <div>.",
    "Used to visually hide the label. It will always be visible to screen readers.",
    "The label for the control.",
    "Pass in a description that will be shown to screen readers associated with the select trigger button. If no value is passed, the text “Currently selected: selectedItem.name” will be used fully translated.",
    "The options that can be chosen from.",
    "Function called with the control’s internal state changes. The selectedItem property contains the next selected item.",
    "Can be used to externally control the value of the control, like in the MyControlledCustomSelectControl example above.",
    "Start opting into the unconstrained width style that will become the default in a future version, currently scheduled to be WordPress 6.4. (The prop can be safely removed once this happens.)",
    "A handler for onMouseOver events.",
    "A handler for onMouseOut events.",
    "A handler for onFocus events.",
    "A handler for onBlur events.",
    "Like this component, but implemented using a native <select> for when custom styling is not necessary, the SelectControl component.",
    "To select one option from a set, when you want to show all the available options at once, use the Radio component.",
    "To toggle a single setting on or off, use the ToggleControl component.",
    "If you have a lot of items, ComboboxControl might be a better fit.",
    "SearchControl components let users display a search control.",
    "If this property is added, a specific placeholder will be used for the input.",
    "The class that will be added to the classes of the wrapper div.",
    "Scrollable is a layout component that content in a scrollable container.",
    "Renders a scrollbar for a specific axis when content overflows.",
    "Enables (CSS) smooth scrolling.",
    "ScrollLock is a content-free React component for declaratively preventing scroll bleed from modal UI to the page body. This component applies a lockscroll class to the document.documentElement and document.scrollingElement elements to stop the body from scrolling. When it is present, the lock is applied.",
    "Declare scroll locking as part of modal UI.",
    "This component provides an isolated environment for arbitrary HTML via iframes.",
    "The HTML to render in the body of the iframe document.",
    "The onFocus callback for the iframe.",
    "An array of script URLs to inject as <script> tags into the bottom of the <body> of the iframe document.",
    "An array of CSS strings to inject into the <head> of the iframe document.",
    "The <title> of the iframe document.",
    "The CSS class name to apply to the <html> and <body> elements of the iframe.",
    "A wrapper component that maintains its aspect ratio when resized.",
    "When passing an SVG element as the <ResponsiveWrapper />‘s child, make sure that it has the viewbox and the preserveAspectRatio set.",
    "When dealing with SVGs, it may not be possible to derive its naturalWidth and naturalHeight and therefore passing them as propertied to <ResponsiveWrapper />. In this case, the SVG simply keeps scaling up to fill its container, unless the height and width attributes are specified.",
    "The element to wrap.",
    "If true, the wrapper will be span instead of div.",
    "The intrinsic height of the element to wrap. Will be used to determine the aspect ratio.",
    "The intrinsic width of the element to wrap. Will be used to determine the aspect ratio.",
    "ResizeTooltip displays the dimensions of an element whenever the width or height of the element changes.",
    "Be sure that the parent element containing <ResizeTooltip /> has the position style property defined. This is important as <ResizeTooltip /> uses position based techniques to determine size changes.",
    "<ResizeTooltip /> has three positions;",
    "The bottom position (default) renders the dimensions label at the bottom-center of the (parent) element.",
    "The corner position renders the dimensions label in the top-right corner of the (parent) element.",
    "Limits the label to render corresponding to the axis. By default, the label will automatically render based on both x and y changes.",
    "Duration (in ms) before the label disappears after resize event.",
    "Determines if the label can render.",
    "Callback Ref for the label element.",
    "Callback function when the (observed) element resizes, specifically with a mousemove based event.",
    "Callback function when the (observed) element resizes.",
    "The positions for the label.",
    "Renders a PX unit suffix after the width or height value in the label.",
    "The z-index style property for the label.",
    "ResizableBox is a wrapper around the re-resizable package with pre-defined classes and styles.",
    "Most options are passed directly through to re-resizable so you may wish to refer to their documentation. The primary differences in this component are that we set handleClasses (to use custom class names) and pass some null values to handleStyles (to unset some inline styles).",
    "The example below shows how you might use ResizableBox to set a width and height inside a block’s edit component.",
    "For additional props, check out re-resizable.",
    "RangeControls are used to make selections from a range of incremental values.",
    "A RangeControl for volume",
    "A RangeControl can contain the following elements:",
    "Continuous sliders allow users to select a value along a subjective range. They do not display the selected numeric value. Use them when displaying/editing the numeric value is not important, like volume.",
    "Discrete sliders can be adjusted to a specific value by referencing its value entry field. Use them when it’s important to display/edit the numeric value, like text size.",
    "Possible selections may be organized through the use of tick marks, which a thumb will snap to (or to which an input will round up or down).",
    "RangeControls reflect a range of values along a track, from which users may select a single value. They are ideal for adjusting settings such as volume, opacity, or text size.",
    "RangeControls can have icons on both ends of the track that reflect a range of values.",
    "Changes made with RangeControls are immediate, allowing a user to make adjustments until finding their preference. They shouldn’t be paired with settings that have delays in providing feedback.",
    "Don’t\nDon’t use RangeControls if the effect isn’t immediate.",
    "RangeControls reflect the current state of the settings they control.",
    "A RangeControl with an editable numeric value",
    "Editable numeric values: Editable numeric values allow users to set the exact value of a RangeControl. After setting a value, the thumb position is immediately updated to match the new value.",
    "Don’t\nRangeControls should only be used for choosing selections from a range of values (e.g., don’t use a RangeControl if there are only 2 values).",
    "Don’t\nRangeControls should provide the full range of choices available for the user to select from (e.g., don’t disable only part of a RangeControl).",
    "Render a RangeControl to make a selection from a range of incremental values.",
    "The set of props accepted by the component will be specified below.\nProps not included in this set will be applied to the input elements.",
    "If this property is added, an Icon component will be rendered after the slider with the icon equal to afterIcon.",
    "For more information on IconType see the Icon component.",
    "If this property is true, a button to reset the slider is rendered.",
    "If this property is added, an Icon component will be rendered before the slider with the icon equal to beforeIcon.",
    "CSS color string for the RangeControl wrapper.",
    "The current input to use as a fallback if value is currently undefined.",
    "Disables the input, preventing new values from being applied.",
    "Provides control over whether the label will only be visible to screen readers.",
    "An icon to be shown above the slider next to its container title.",
    "The slider starting position, used when no value is passed. The initialPosition will be clamped between the provided min and max prop values.",
    "Passed as a prop to the NumberControl component and is only applicable if withInputField is true. If true, while the number input has focus, pressing UP or DOWN along with the SHIFT key will change the value by the shiftStep value.",
    "Renders a visual representation of step ticks. Custom mark indicators can be provided by an Array.",
    "Callback for when RangeControl input loses focus.",
    "A function that receives the new value. The value will be less than max and more than min unless a reset (enabled by allowReset) has occurred. In which case the value will be either that of resetFallbackValue if it has been specified or otherwise undefined.",
    "Callback for when RangeControl input gains focus.",
    "Callback for when mouse exits the RangeControl.",
    "Callback for when mouse moves within the RangeControl.",
    "The minimum value allowed.",
    "The maximum value allowed.",
    "CSS color string to customize the rail element’s background.",
    "A way to customize the rendered UI of the value. Example:",
    "The value to revert to if the Reset button is clicked (enabled by allowReset)",
    "Define if separator line under/above control row should be disabled or full width. By default it is placed below excluding underline the control icon.",
    "Passed as a prop to the NumberControl component and is only applicable if withInputField and isShiftStepEnabled are both true and while the number input has focus. Acts as a multiplier of step.",
    "Forcing the Tooltip UI to show or hide. This is overridden to false when step is set to the special string value any.",
    "The minimum amount by which value changes. It is also a factor in validation as value must be a multiple of step (offset by min) to be valid. Accepts the special string value any that voids the validation constraint and overrides both withInputField and showTooltip props to false.",
    "CSS color string to customize the track element’s background.",
    "Define if the value selection should present a stepper control or a slider control in the bottom sheet on mobile. To use the stepper set the type value as stepper. Defaults to slider if no option is provided.",
    "The current value of the range slider.",
    "Determines if the input number field will render next to the RangeControl. This is overridden to false when step is set to the special string value any.",
    "Use a RadioGroup component when you want users to select one option from a small set of options.",
    "Only one option in a radio group can be selected and active at a time. Selecting one option deselects any other.",
    "Radio groups should:",
    "A radio group’s state makes it clear which option is active. Hover and focus states express the available selection options for buttons in a button group.",
    "Radio groups that cannot be selected can either be given a disabled state, or be hidden.",
    "When using the RadioGroup component as an uncontrolled component, the default value can be set with the defaultChecked prop.",
    "Use radio buttons when you want users to select one option from a set, and you want to show them all the available options at once.",
    "Selected and unselected radio buttons",
    "Use radio buttons when you want users to:",
    "If you have a list of available options that can be collapsed, consider using a dropdown menu instead, as dropdowns use less space. A country selection field, for instance, would be very large as a group of radio buttons and wouldn’t help the user gain more context by seeing all options at once.",
    "Use radio buttons when only one item can be selected from a list.",
    "Don’t use checkboxes when only one item can be selected from a list. Use radio buttons instead.",
    "When using radio buttons one should be selected by default (i.e., when the page loads, in the case of a web application).",
    "In most interactions, a user should be able to undo and redo their actions. With most selection controls you can un-choose a selection, but in this instance you cannot click or tap a selected radio button to deselect it—selecting is a final action. The finality isn’t conveyed when none are selected by default. Selecting a radio button by default communicates that the user is required to choose one in the set.",
    "When one a choice in a set of radio buttons is the most desirable or frequently selected, it’s helpful to select it by default. Doing this reduces the interaction cost and can save the user time and clicks.",
    "Designs with a radio button selected by default make a strong suggestion to the user. It can help them make the best decision and increase their confidence. (Use this guidance with caution, and only for good.)",
    "Render a user interface to select the user type using radio inputs.",
    "A function that receives the value of the new option that is being selected as input.",
    "An array of objects containing the value and label of the options.",
    "The value property of the currently selected option.",
    "The QueryControls component now supports multiple category selection, to replace the single category selection available so far. To enable it use the component with the new props instead: categorySuggestions in place of categoriesList and the selectedCategories array instead of selectedCategoryId like so:",
    "The format of the categories list also needs to be updated to match the expected type for the category suggestions.",
    "An array of the authors to select from.",
    "An array of categories. When passed in conjunction with the onCategoryChange prop, it causes the component to render UI that allows selecting one category at a time.",
    "An object of categories with the category name as the key. When passed in conjunction with the onCategoryChange prop, it causes the component to render UI that enables multiple selection.",
    "The maximum number of items.",
    "The minimum number of items.",
    "The selected number of items to retrieve via the query.",
    "A function that receives the new author value. If not specified, the author controls are not rendered.",
    "A function that receives the new category value. If not specified, the category controls are not rendered.\nThe function’s signature changes depending on whether multiple category selection is enabled or not.",
    "A function that receives the new number of items. If not specified, then the number of items range control is not rendered.",
    "A function that receives the new order value. If this prop or the onOrderByChange prop are not specified, then the order controls are not rendered.",
    "A function that receives the new orderby value. If this prop or the onOrderChange prop are not specified, then the order controls are not rendered.",
    "The order in which to retrieve posts.",
    "The meta key by which to order posts.",
    "The selected author ID.",
    "The selected categories for the categorySuggestions prop.",
    "The selected category for the categoriesList prop.",
    "If provided, renders an icon next to the label.",
    "Instructions of the placeholder.",
    "Changes placeholder children layout from flex-row to flex-column.",
    "Title of the placeholder.",
    "A rendered notices list",
    "Preview to be rendered in the placeholder.",
    "Outputs a placeholder illustration.",
    "Panels expand and collapse multiple sections of content.",
    "A Panel is a single section of content that can be expanded or collapsed as needed.",
    "Panels show and hide details of list items by expanding and collapsing list content vertically. Panels help users see only the content they need.",
    "Use Panels when it’s helpful to:",
    "Consider an alternative component when:",
    "Show and hide details of existing panel items by expanding and collapsing list content vertically.",
    "Collapsible panels are indicated with a caret icon that is flipped when expanded. Carets are preferable over a plus or arrow icon, because a plus indicates addition, and arrows are closely related to navigation.",
    "Panels should be expanded by default if the content is important or essential. Panels that are open by default should appear at the top.",
    "The Panel creates a container with a header that can take collapsible PanelBody components to easily create a user friendly interface for affecting state and attributes.",
    "The text that will be rendered as the title of the panel. Text will be rendered inside an\n<h2> tag.",
    "The CSS class to apply to the wrapper element.",
    "The content to display within the panel row.",
    "The PanelBody creates a collapsible container that can be toggled open or closed.",
    "Title text. It shows even when the component is closed.",
    "When set to true, the component will remain open regardless of the initialOpen prop and the\npanel will be prevented from being closed.",
    "An icon to be shown next to the title.",
    "A function that is called any time the component is toggled from its closed state to its\nopened state, or vice versa.",
    "Whether or not the panel will start open.",
    "The content to display in the PanelBody. If a function is provided for this prop, it will receive an object with the opened prop as an argument.",
    "Props that are passed to the Button component in title within the PanelBody.",
    "Scrolls the content into view when visible. This improves the UX when multiple PanelBody\ncomponents are stacked in a scrollable container.",
    "PanelRow is a generic container for rows within a PanelBody. It is a flex container with a top margin for spacing.",
    "PanelRow accepts a forwarded ref that will be added to the wrapper div. Usage:",
    "<PanelRow className=\"edit-post-post-schedule\" ref={ panelRowRef }>",
    "PanelHeader renders the header for the Panel. This is used by the Panel component under the hood, so it does not typically need to be used.",
    "The text that will be rendered as the title of the Panel. Will be rendered in an <h2> tag.",
    "NumberControl is an enhanced HTML input[type=\"number] element.",
    "Determines the drag axis to increment/decrement the value.\nDirections: n | e | s | w",
    "If isDragEnabled is true, this controls the amount of px to have been dragged before the value changes.",
    "The type of spin controls to display. These are butons that allow the user to\n quickly increment and decrement the number.",
    "If true, enables mouse drag gesture to increment/decrement the number value. Holding SHIFT while dragging will increase the value by the shiftStep.",
    "If true, pressing UP or DOWN along with the SHIFT key will increment the value by the shiftStep value.",
    "Callback fired whenever the value of the input changes.",
    "The callback receives two arguments:",
    "Note that the value received as the first argument of the callback is not guaranteed to be a valid value (e.g. it could be outside of the range defined by the [min, max] props, or it could not match the step). In order to check the value’s validity, check the event.target?.validity.valid property from the callback’s second argument.",
    "If true enforces a valid number within the control’s min/max range. If false allows an empty string as a valid value.",
    "Amount to increment by when the SHIFT key is held down. This shift value is a multiplier to the step value. For example, if the step value is 5, and shiftStep is 10, each jump would increment/decrement by 50.",
    "Amount by which the value is changed when incrementing/decrementing. It is also a factor in validation as value must be a multiple of step (offset by min, if specified) to be valid. Accepts the special string value any that voids the validation constraint and causes stepping actions to increment/decrement by 1.",
    "Use Notices to communicate prominent messages to the user.",
    "A Notice displays a succinct message. It can also offer the user options, like viewing a published post or updating a setting, and requires a user action to be dismissed.",
    "Use Notices to communicate things that are important but don’t necessarily require action — a user can keep using the product even if they don’t choose to act on a Notice. They are less interruptive than a Modal.",
    "Notices display at the top of the screen, below any toolbars anchored to the top of the page. They’re persistent and non-modal. Since they don’t overlay the content, users can ignore or dismiss them, and choose when to interact with them.",
    "Notices are color-coded to indicate the type of message being communicated:",
    "If an icon is included in the Notice, it should be color-coded to match the Notice state.",
    "Do use a Notice when you want to communicate a message of medium importance.",
    "Don’t use a Notice for a message that requires immediate attention and action from the user. Use a Modal for this instead.",
    "Do display Notices at the top of the screen, below any toolbars.",
    "Don’t show Notices on top of toolbars.",
    "Do use color to indicate the type of message being communicated.",
    "Don’t apply any colors other than those for Warnings, Success, or Errors.",
    "To display a plain notice, pass Notice a string:",
    "The following props are used to control the behavior of the component.",
    "Used to provide a custom spoken message in place of the children default.",
    "Determines the color of the notice: warning (yellow), success (green), error (red), or 'info'. By default 'info' will be blue, but if there is a parent Theme component with an accent color prop, the notice will take on that color instead.",
    "A function called to dismiss/remove the notice.",
    "A politeness level for the notice’s spoken message. Should be provided as one of the valid options for an aria-live attribute value.",
    "Note that this value should be considered a suggestion; assistive technologies may override it based on internal heuristics.",
    "Whether the notice should be dismissible or not",
    "A deprecated alternative to onRemove. This prop is kept for compatibilty reasons but should be avoided.",
    "An array of notice actions. Each member object should contain:",
    "The default appearance of an action button is inferred based on whether url or onClick are provided, rendering the button as a link if appropriate. If both props are provided, url takes precedence, and the action button will render as an anchor tag.",
    "The NavigatorToParentButton component can be used to navigate to a screen and should be used in combination with the NavigatorProvider, the NavigatorScreen and the NavigatorButton components (or the useNavigator hook).",
    "Refer to the NavigatorProvider component for a usage example.",
    "NavigatorToParentButton also inherits all of the Button props, except for href and target.",
    "The NavigatorScreen component represents a single view/screen/panel and should be used in combination with the NavigatorProvider, the NavigatorButton and the NavigatorBackButton components (or the useNavigator hook).",
    "The screen’s path, matched against the current path stored in the navigator.",
    "The NavigatorProvider component allows rendering nested views/panels/menus (via the NavigatorScreen component) and navigate between these different states (via the NavigatorButton, NavigatorToParentButton and NavigatorBackButton components or the useNavigator hook). The Global Styles sidebar is an example of this.",
    "Important note",
    "Parent/child navigation only works if the path you define are hierarchical, following a URL-like scheme where each path segment is separated by the / character.\nFor example:\n– / is the root of all paths. There should always be a screen with path=\"/\".\n– /parent/child is a child of /parent.\n– /parent/child/grand-child is a child of /parent/child.\n– /parent/:param is a child of /parent as well.",
    "The initial active path.",
    "You can retrieve a navigator instance by using the useNavigator hook.",
    "The navigator instance has a few properties:",
    "The goTo function allows navigating to a given path. The second argument can augment the navigation operations with different options.",
    "The available options are:",
    "The goToParent function allows navigating to the parent screen.",
    "Parent/child navigation only works if the path you define are hierarchical (see note above).",
    "When a match is not found, the function will try to recursively navigate the path hierarchy until a matching screen (or the root /) are found.",
    "The goBack function allows navigating to the previous path.",
    "The location object represent the current location, and has a few properties:",
    "The parsed record of parameters from the current location. For example if the current screen path is /product/:productId and the location is /product/123, then params will be { productId: '123' }.",
    "The Navigator components allows rendering nested panels or menus (also called screens) and navigate between these different states. The Global Styles sidebar is an example of this.",
    "The components is not opinionated in terms of UI, it lets compose any UI components to navigate between the nested screens.",
    "Navigator supports the following props.",
    "NavigatorScreen supports the following props.",
    "The path of the current screen.",
    "You can retrieve a navigator instance by using the useNavigator hook.\nThe navigator offers the following methods:",
    "The push function allows you to navigate to a given path. The second argument can augment the navigation operations with different options.",
    "The NavigatorButton component can be used to navigate to a screen and should be used in combination with the NavigatorProvider, the NavigatorScreen and the NavigatorBackButton components (or the useNavigator hook).",
    "The HTML attribute used to identify the NavigatorButton, which is used by Navigator to restore focus.",
    "The callback called in response to a click event.",
    "The path of the screen to navigate to. The value of this prop needs to be a valid value for an HTML attribute.",
    "NavigatorButton also inherits all of the Button props, except for href and target.",
    "The NavigatorBackButton component can be used to navigate to a screen and should be used in combination with the NavigatorProvider, the NavigatorScreen and the NavigatorButton components (or the useNavigator hook).",
    "NavigatorBackButton also inherits all of the Button props, except for href and target.",
    "Render a navigation list with optional groupings and hierarchy.",
    "Navigation supports the following props.",
    "The active item slug.",
    "The active menu slug.",
    "Optional className for the Navigation component.",
    "Sync the active menu between the external state and the Navigation’s internal state.",
    "NavigationMenu supports the following props.",
    "The back button label used in nested menus. If not provided, the label will be inferred from the parent menu’s title.\nIf for some reason the parent menu’s title is not available then it will default to “Back”.",
    "A callback to handle clicking on the back button. If this prop is provided then the back button will be shown.",
    "Optional className for the NavigationMenu component.",
    "Enable the search feature on the menu title.",
    "The unique identifier of the menu. The root menu can omit this, and it will default to “root”; all other menus need to specify it.",
    "When hasSearch is active, this function handles the search input’s onChange event, making it controlled from the outside. It requires setting the search prop as well.",
    "Indicates whether the search is debouncing or not. In case of true the “No results found.” text is omitted. Used to prevent showing “No results found.” text between debounced searches.",
    "The parent menu slug; used by nested menus to indicate their parent menu.",
    "When hasSearch is active and onSearch is provided, this controls the value of the search input. Required when the onSearch prop is provided.",
    "Indicates whether the menu is empty or not. Used together with the hideIfTargetMenuEmpty prop of Navigation Item.",
    "The menu title. It’s also the field used by the menu search function.",
    "Use this prop to render additional actions in the menu title.",
    "NavigationGroup supports the following props.",
    "Optional className for the NavigationGroup component.",
    "The group title.",
    "NavigationItem supports the following props.",
    "The item badge content.",
    "Optional className for the NavigationItem component.",
    "If no children are passed, this prop allows to specify a custom icon for the menu item.",
    "The unique identifier of the item.",
    "The child menu slug. If provided, clicking on the item will navigate to the target menu.",
    "Indicates whether this item should be hidden if the menu specified in navigateToMenu is marked as empty in the isEmpty prop. Used together with the isEmpty prop of Navigation Menu.",
    "A callback to handle clicking on a menu item.",
    "If set to true then the menu item will only act as a text-only item rather than a button.",
    "The item title.",
    "NavigableContainer is a React component to render a container navigable using the keyboard. Only things that are focusable can be navigated to. It will currently always be a div.",
    "NavigableContainer is exported as two classes: NavigableMenu and TabbableContainer. NavigableContainer itself is not exported. NavigableMenu and TabbableContainer have the props listed below. Any other props will be passed through to the div.",
    "These are the props that NavigableMenu and TabbableContainer. Any props which are specific to one class are labelled appropriately.",
    "A callback invoked when the menu navigates to one of its children passing the index and child as an argument",
    "A boolean which tells the component whether or not to cycle from the end back to the beginning and vice versa.",
    "The orientation of the menu. It could be “vertical”, “horizontal” or “both”",
    "A NavigableMenu allows movement up and down (or left and right) the component via the arrow keys. The tab key is not handled. The orientation prop is used to determine whether the arrow keys used are vertical, horizontal or both.",
    "The NavigableMenu by default has a menu role and therefore, in order to function as expected, the component expects its children elements to have one of the following roles: 'menuitem' | 'menuitemradio' | 'menuitemcheckbox'.",
    "A TabbableContainer will only be navigated using the tab key. Every intended tabstop must have a tabIndex 0.",
    "Modals give users information and choices related to a task they’re trying to accomplish. They can contain critical information, require decisions, or involve multiple tasks.",
    "A modal is a type of floating window that appears in front of content to provide critical information or ask for a decision. Modals disable all other functionality when they appear. A modal remains on screen until the user confirms it, dismisses it, or takes the required action.",
    "While modals can be an effective way to disclose additional controls or information, they can also be a source of interruption for the user. For this reason, always question whether a modal is necessary, and work to avoid the situations in which they are required.",
    "Modals are used for:",
    "A modal is a type of window. Access to the rest of the UI is disabled until the modal is addressed. All modals are interruptive by design – their purpose is to have the user focus on content, so the modal surface appears in front of all other surfaces.",
    "To clarify that the rest of the screen is inaccessible and to focus attention on the modal, surfaces behind the modal are scrimmed — they get a temporary overlay to obscure their content and make it less prominent.",
    "A modal’s purpose is communicated through its title and button text.\nAll modals should have a title for accessibility reasons (the contentLabel prop can be used to set titles that aren’t visible).",
    "Titles should:",
    "Do\nThis modal title poses a specific question, concisely explains the purpose the request, and provides clear actions.",
    "Don’t\nThis modal creates ambiguity, and therefore unease — it leaves the user unsure about how to respond, or causes them to second-guess their answer.",
    "Side-by-side buttons display two text buttons next to one another.",
    "Use stacked buttons when you need to accommodate longer button text. Always place confirming actions above dismissive actions.",
    "Modals appear without warning, requiring users to stop their current task. They should be used sparingly — not every choice or setting warrants this kind of abrupt interruption.",
    "Modals retain focus until dismissed or the user completes an action, like choosing a setting. They shouldn’t be obscured by other elements or appear partially on screen.",
    "Most modal content should avoid scrolling. Scrolling is permissible if the modal content exceeds the height of the modal (e.g. a list component with many rows). When a modal scrolls, the modal title is pinned at the top and the buttons are pinned at the bottom. This ensures that content remains visible alongside the title and buttons, even while scrolling.",
    "Modals don’t scroll with elements outside of the modal, like the background.",
    "When viewing a scrollable list of options, the modal title and buttons remain fixed.",
    "Modals are dismissible in three ways:",
    "If the user’s ability to dismiss a modal is disabled, they must choose a modal action to proceed.",
    "The modal is used to create an accessible modal over an application.",
    "Note: The API for this modal has been mimicked to resemble react-modal.",
    "The following example shows you how to properly implement a modal. For the modal to properly work it’s important you implement the close logic for the modal properly.",
    "If this property is added, it will be added to the modal content div as aria-describedby.",
    "If this property is added, it will be added to the modal content div as aria-labelledby.\nUse this when you are rendering the title yourself within the modal’s content area instead of using the title prop. This ensures the title is usable by assistive technology.",
    "Titles are required for accessibility reasons, see contentLabel and title for other ways to provide a title.",
    "Class name added to the body element when the modal is open.",
    "If this property is added, it will an additional class name to the modal content div.",
    "If this property is added, it will be added to the modal content div as aria-label.",
    "Titles are required for accessibility reasons, see aria.labelledby and title for other ways to provide a title.",
    "If this property is true, it will focus the first tabbable element rendered in the modal.",
    "If this property is set to false, the modal will not display a close icon and cannot be dismissed.",
    "This property when set to true will render a full screen modal.",
    "This function is called to indicate that the modal should be closed.",
    "If this property is added, it will an additional class name to the modal overlay div.",
    "If this property is added, it will override the default role of the modal.",
    "If this property is added, it will determine whether the modal requests to close when a mouse click occurs outside of the modal content.",
    "If this property is added, it will determine whether the modal requests to close when the escape key is pressed.",
    "If this property is added, it will be added to the modal frame div.",
    "This property is used as the modal header’s title.",
    "Titles are required for accessibility reasons, see aria.labelledby and contentLabel for other ways to provide a title.",
    "When set to true, the Modal’s header (including the icon, title and close button) will not be rendered.",
    "Warning: This property is still experimental. “Experimental” means this is an early implementation subject to drastic and breaking changes.",
    "MenuItemsChoice functions similarly to a set of MenuItems, but allows the user to select one option from a set of multiple choices.",
    "A MenuItemsChoice should be housed within in its own distinct MenuGroup, so that the set of options are distinct from nearby MenuItems.",
    "MenuItemsChoice is used in a DropdownMenu to present users with a set of options. When one option in a MenuItemsChoice is selected, the others are automatically deselected.",
    "Use MenuItemsChoice when you want users to:",
    "MenuItemsChoice should not be used to toggle individual features on and off. For that, consider using a FeatureToggle.",
    "When using MenuItemsChoice , one option should be selected by default (i.e., when the page loads, in the case of a web application).",
    "User control",
    "Selecting an option by default communicates that the user is required to choose one in the set.",
    "Expediting tasks",
    "When one choice in a set of MenuItemsChoice is the most desirable or frequently selected, it’s helpful to select it by default. Doing this reduces the interaction cost and can save the user time and clicks.",
    "The power of suggestion",
    "Designs with a MenuItemsChoice option selected by default make a strong suggestion to the user. It can help them make the best decision and increase their confidence. (Use this guidance with caution, and only for good.)",
    "MenuItem is a component which renders a button intended to be used in combination with the DropdownMenu component.",
    "MenuItem supports the following props. Any additional props are passed through to the underlying Button.",
    "Element to render as child of button.",
    "Text to use as description for button text.",
    "Refer to documentation for label.",
    "Refer to documentation for Button’s icon prop.",
    "Determines where to display the provided icon.",
    "Whether or not the menu item is currently selected.",
    "Aria Spec. If you need to have selectable menu items use menuitemradio for single select, and menuitemcheckbox for multiselect.",
    "Allows for markup other than icons or shortcuts to be added to the menu item.",
    "MenuGroup wraps a series of related MenuItem components into a common section.",
    "A MenuGroup should be used to indicate that two or more individual MenuItems are related. When other menu items exist above or below a MenuGroup, the group should have a divider line between it and the adjacent item. A MenuGroup can optionally include a label to describe its contents.",
    "<KeyboardShortcuts /> is a component which handles keyboard sequences during the lifetime of the rendering element.",
    "When passed children, it will capture key events which occur on or within the children. If no children are passed, events are captured on the document.",
    "It uses the Mousetrap library to implement keyboard sequence bindings.",
    "Render <KeyboardShortcuts /> with a shortcuts prop object:",
    "Elements to render, upon whom key events are to be monitored.",
    "An object of shortcut bindings, where each key is a keyboard combination, the value of which is the callback to be invoked when the key combination is pressed.",
    "Note: The value of each shortcut should be a consistent function reference, not an anonymous function. Otherwise, the callback will not be correctly unbound when the component unmounts.",
    "Note: The KeyboardShortcuts component will not update to reflect a changed shortcuts prop. If you need to change shortcuts, mount a separate KeyboardShortcuts element, which can be achieved by assigning a unique key prop.",
    "By default, a callback will not be invoked if the key combination occurs in an editable field. Pass bindGlobal as true if the key events should be observed globally, including within editable fields.",
    "Tip: If you need some but not all keyboard events to be observed globally, simply render two distinct KeyboardShortcuts elements, one with and one without the bindGlobal prop.",
    "By default, a callback is invoked in response to the keydown event. To override this, pass eventName with the name of a specific keyboard event.",
    "Item is used in combination with ItemGroup to display a list of items grouped and styled together.",
    "Item should be used in combination with the ItemGroup component.",
    "Even handler for processing click events. When defined, the Item component will render as a button (unless differently specified via the as prop).",
    "Determines the amount of padding within the component.",
    "Item is connected to the <ItemGroup /> parent component using Context. Therefore, Item receives the size prop from the ItemGroup parent component.",
    "In the following example, the <Item /> will render with a size of small:",
    "ItemGroup displays a list of Items grouped and styled together.",
    "ItemGroup should be used in combination with the Item sub-component.",
    "Renders borders around each items.",
    "Renders with rounded corners.",
    "Renders items individually. Even if isBordered is false, a border in between each item will be still be displayed.",
    "Determines the amount of padding within the component.\nWhen not defined, it defaults to the value from the context (which is medium by default).",
    "The Item sub-component is connected to <ItemGroup /> using Context. Therefore, Item receives the size prop from the ItemGroup parent component.",
    "This is a container that prevents certain events from propagating outside of the container. This is used to wrap\nUI elements such as modals and popovers where the propagated event can cause problems. The event continues to work\ninside the component.",
    "For example, a mousedown event in a modal container can propagate to the surrounding DOM, causing UI outside of the\nmodal to be interacted with.",
    "The current isolated events are:",
    "Creates a custom component that won’t propagate mousedown events outside of the component.",
    "All props are passed as-is to the <IsolatedEventContainer />",
    "InputControl components let users enter and edit text. This is an experimental component intended to (in time) merge with or replace TextControl.",
    "If true, the input will be disabled.",
    "Renders an element on the left side of the input.",
    "Renders an element on the right side of the input.",
    "withNotices is a React higher-order component used typically in adding the ability to post notice messages within the original component.",
    "Wrapping the original component with withNotices encapsulates the component with the additional props noticeOperations, noticeUI, and noticeList.",
    "noticeOperations\nContains a number of useful functions to add notices to your site.",
    "# createNotice\nFunction passed down as a prop that adds a new notice.",
    "# createErrorNotice\nFunction passed as a prop that adds a new error notice.",
    "# removeAllNotices\nFunction that removes all notices.",
    "# removeNotice\nFunction that removes notice by ID.",
    "#noticeUi\nThe rendered NoticeList.",
    "#noticeList\nThe array of notice objects to be displayed.",
    "withFocusReturn is a higher-order component used typically in scenarios of short-lived elements (modals, dropdowns) where, upon the element’s unmounting, focus should be restored to the focused element which had initiated it being rendered.",
    "withFocusReturn can optionally be called as a higher-order function creator. Provided an options object, a new higher-order function is returned.",
    "Currently, the following options are supported:",
    "An optional function which allows the developer to customize the focus return behavior. A return value of false should be returned from this function to indicate that the default focus return behavior should be skipped.",
    "withFocusOutside is a React higher-order component to enable behavior to occur when focus leaves an element. Since a blur event will fire in React even when focus transitions to another element in the same context, this higher-order component encapsulates the logic necessary to determine if focus has truly left the element.",
    "Wrap your original component with withFocusOutside, defining a handleFocusOutside instance method on the component class.",
    "Note: withFocusOutside must only be used to wrap the Component class.",
    "In the above example, the handleFocusOutside function is only called if focus leaves the element, and not if transitioning focus between the two inputs.",
    "withFilters is a part of Native Gutenberg Extensibility. It is also a React higher-order component.",
    "Wrapping a component with withFilters provides a filtering capability controlled externally by the hookName.",
    "withFilters expects a string argument which provides a hook name. It returns a function which can then be used in composing your component. The hook name allows plugin developers to customize or completely override the component passed to this higher-order component using wp.hooks.addFilter method.",
    "It is also possible to override props by implementing a higher-order component which works as follows:",
    "withConstrainedTabbing is a React higher-order component adding the ability to constrain keyboard navigation with the Tab key within a component. For accessibility reasons, some UI components need to constrain Tab navigation, for example modal dialogs or similar UI. Use of this component is recommended only in cases where a way to navigate away from the wrapped component is implemented by other means, usually by pressing the Escape key or using a specific UI control, e.g. a “Close” button.",
    "Wrap your original component with withConstrainedTabbing.",
    "This directory includes a library of generic Higher Order React Components.",
    "Learn more about Higher Order Components",
    "navigateRegions is a React higher-order component adding keyboard navigation to switch between the different DOM elements marked as “regions” (role=”region”). These regions should be focusable (By adding a tabIndex attribute for example). For better accessibility, these elements must be properly labelled to briefly describe the purpose of the content in the region. For more details, see “Landmark Roles” in the WAI-ARIA specification and “Landmark Regions” in the ARIA Authoring Practices Guide.",
    "It’s important to note that an ARIA role=\"region\" is an ARIA landmark role. It should be reserved for sections of content sufficiently important to have it listed in a summary of the page. Only use this ARIA role for the main sections of a page. All perceivable content should reside in a semantically meaningful landmark in order that content is not missed by the user.",
    "Heading renders headings and titles using the library’s typography system.",
    "Heading uses Text underneath, so we have access to all of Text‘s props except for size which is replaced by level. For a complete list of those props, check out Text.",
    "Passing any of the heading levels to level will both render the correct typographic text size as well as the semantic element corresponding to the level (h1 for 1 for example).",
    "HStack (Horizontal Stack) arranges child elements in a horizontal line.",
    "HStack can render anything inside.",
    "Type: HStackAlignment | CSS[ 'alignItems' ]",
    "Type: FlexDirection",
    "Type: CSS['justifyContent']",
    "Type: CSS['width']",
    "When a Spacer is used within an HStack, the Spacer adaptively expands to take up the remaining space.",
    "Spacer also be used in-between items to push them apart.",
    "Guide is a React component that renders a user guide in a modal. The guide consists of several pages which the user can step through one by one. The guide is finished when the modal is closed or when the user clicks Finish on the last page of the guide.",
    "A custom class to add to the modal.",
    "This property is used as the modal’s accessibility label. It is required for accessibility reasons.",
    "Use this to customize the label of the Finish button shown at the end of the guide.",
    "A function which is called when the guide is finished. The guide is finished when the modal is closed or when the user clicks Finish on the last page of the guide.",
    "A list of objects describing each page in the guide. Each object must contain a 'content' property and may optionally contain a 'image' property.",
    "Grid is a primitive layout component that can arrange content in a grid configuration.",
    "Adjusts the block alignment of children.",
    "Adjusts the horizontal and vertical alignment of children.",
    "Adjusts the grid-column-gap.",
    "Adjusts the number of columns of the Grid.",
    "Gap between each child.",
    "Changes the CSS display from grid to inline-grid.",
    "Adjusts the inline alignment of children.",
    "Adjusts the grid-row-gap.",
    "Adjusts the number of rows of the Grid.",
    "Adjusts the CSS grid template-columns.",
    "Adjusts the CSS grid template-rows.",
    "GradientPicker is a React component that renders a color gradient picker to define a multi step gradient. There’s either a linear or a radial type available.",
    "Render a GradientPicker.",
    "The class name added to the wrapper.",
    "The current value of the gradient. Pass a css gradient like linear-gradient(90deg, rgb(6, 147, 227) 0%, rgb(155, 81, 224) 100%). Optionally pass in a null value to specify no gradient is currently selected.",
    "The function called when a new gradient has been defined. It is passed the currentGradient as an argument.",
    "An array of objects of predefined gradients displayed above the gradient selector.",
    "Whether the palette should have a clearing button or not.",
    "If true, the gradient picker will not be displayed and only defined gradients from gradients are available.",
    "Start opting into the new margin-free styles that will become the default in a future version, currently scheduled to be WordPress 6.4. (The prop can be safely removed once this happens.)",
    "The heading level. Only applies in cases where gradients are provided from multiple origins (ie. when the array passed as the gradients prop contains two or more items).",
    "A FormTokenField is a field similar to the tags and categories fields in the interim editor chrome, or the “to” field in Mail on OS X. Tokens can be entered by typing them or selecting them from a list of suggested tokens.",
    "Up to one hundred suggestions that match what the user has typed so far will be shown from which the user can pick from (auto-complete). Tokens are separated by the “,” character. Suggestions can be selected with the up or down arrows and added with the tab or enter key.",
    "The value property is handled in a manner similar to controlled form components. See Forms in the React Documentation for more information.",
    "FormToggle switches a single setting on or off.",
    "Use toggles when you want users to:",
    "Do\nUse toggles to switch an option on or off.",
    "Don’t\nDon’t use radio buttons for settings that toggle on and off.",
    "Toggles are preferred when the user is not expecting to submit data, as is the case with checkboxes and radio buttons.",
    "When the user slides a toggle thumb (1) to the other side of the track (2) and the state of the toggle changes, it’s been successfully toggled.",
    "Toggles should have clear inline labels so users know exactly what option the toggle controls, and whether the option is enabled or disabled.",
    "Do not include any text (e.g. “on” or “off”) within the toggle element itself. The toggle alone should be sufficient to communicate the state.",
    "When a user switches a toggle, its corresponding action takes effect immediately.",
    "If checked is true the toggle will be checked. If checked is false the toggle will be unchecked.\nIf no value is passed the toggle will be unchecked.",
    "A callback function invoked when the toggle is clicked.",
    "FormFileUpload is a component that allows users to select files from their local device.",
    "The component accepts the following props. Props not included in this set will be passed to the Button component.",
    "A string passed to input element that tells the browser which file types can be upload to the upload by the user use. e.g: image/*,video/*.\nMore information about this string is available in https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/file#Unique_file_type_specifiers.",
    "Children are passed as children of Button.",
    "Whether to allow multiple selection of files or not.",
    "Callback function passed directly to the input file element.",
    "Select files will be available in event.currentTarget.files.",
    "This can be useful when you want to force a change event to fire when the user chooses the same file again. To do this, set the target value to an empty string in the onClick function.",
    "Optional callback function used to render the UI. If passed, the component does not render the default UI (a button) and calls this function to render it. The function receives an object with property openFileDialog, a function that, when called, opens the browser native file upload modal window.",
    "FontSizePicker is a React component that renders a UI that allows users to select a font size.\nThe component renders a user interface that allows the user to select predefined (common) font sizes and contains an option that allows users to select custom font sizes (by choosing the value) if that functionality is enabled.",
    "If true, it will not be possible to choose a custom fontSize. The user will be forced to pick one of the pre-defined sizes passed in fontSizes.",
    "If no value exists, this prop defines the starting position for the font size picker slider. Only relevant if withSlider is true.",
    "An array of font size objects. The object should contain properties size, name, and slug.\nThe property size contains a number with the font size value, in px or a string specifying the font size CSS property that should be used eg: “13px”, “1em”, or “clamp(12px, 5vw, 100px)”.\nThe name property includes a label for that font size e.g.: Small.\nThe slug property is a string with a unique identifier for the font size. Used for the class generation process.",
    "Note: The slugs default and custom are reserved and cannot be used.",
    "A function that receives the new font size value.\nIf onChange is called without any parameter, it should reset the value, attending to what reset means in that context, e.g., set the font size to undefined or set the font size a starting value.",
    "Size of the control.",
    "Available units for custom font size selection.",
    "The current font size value.",
    "If true, a reset button will be displayed alongside the input field when a custom font size is active. Has no effect when disableCustomFontSizes is true.",
    "If true, a slider will be displayed alongside the input field when a custom font size is active. Has no effect when disableCustomFontSizes is true.",
    "<FocusableIframe /> is a component rendering an iframe element enhanced to support focus events. By default, it is not possible to detect when an iframe is focused or clicked within. This enhanced component uses a technique which checks whether the target of a window blur event is the iframe, inferring that this has resulted in the focus of the iframe. It dispatches an emulated FocusEvent on the iframe element with event bubbling, so a parent component binding its own onFocus event will account for focus transitioning within the iframe.",
    "Use as you would a standard iframe. You may pass onFocus directly as the callback to be invoked when the iframe receives focus, or on an ancestor component since the event will bubble.",
    "Any props aside from those listed below will be passed to the FocusableIframe will be passed through to the underlying iframe element.",
    "Callback to invoke when iframe receives focus. Passes an emulated FocusEvent object as the first argument.",
    "If a reference to the underlying DOM element is needed, pass iframeRef as the result of a wp.element.createRef called from your component.",
    "Focal Point Picker is a component which creates a UI for identifying the most important visual point of an image. This component addresses a specific problem: with large background images it is common to see undesirable crops, especially when viewing on smaller viewports such as mobile phones. This component allows the selection of the point with the most important visual information and returns it as a pair of numbers between 0 and 1. This value can be easily converted into the CSS background-position attribute, and will ensure that the focal point is never cropped out, regardless of viewport.",
    "URL of the image or video to be displayed",
    "Autoplays HTML5 video. This only applies to video sources (url).",
    "The focal point. Should be an object containing x and y params.",
    "Callback which is called when the focal point changes.",
    "Callback which is called repetitively during drag operations.",
    "Callback which is called at the end of drag operations.",
    "Callback which is called at the start of drag operations.",
    "Function which is called before internal updates to the value state. It receives the upcoming value and may return a modified one.",
    "Flex is a primitive layout component that adaptively aligns child content horizontally or vertically. Flex powers components like HStack and VStack.",
    "Flex is used with any of it’s two sub-components, FlexItem and FlexBlock.",
    "Aligns children using CSS Flexbox align-items. Vertically aligns content if the direction is row, or horizontally aligns content if the direction is column.",
    "Spacing in between each child can be adjusted by using gap. The value of gap works as a multiplier to the library’s grid system (base of 4px).",
    "Horizontally aligns content if the direction is row, or vertically aligns content if the direction is column.",
    "A layout component to contain items of a fixed width within Flex.",
    "See flex/README.md#usage for how to use FlexItem.",
    "The CSS display property of FlexItem.",
    "Determines if FlexItem should render as an adaptive full-width block.",
    "See flex/README.md#usage for how to use FlexBlock.",
    "The CSS display property of FlexBlock.",
    "Link to an external resource.",
    "The component accepts the following props. Any other props will be passed through to the a.",
    "The content to be displayed within the link.",
    "The URL of the external resource.",
    "Elevation is a core component that renders shadow, using the component system’s shadow system.",
    "The shadow effect is generated using the value prop.",
    "Size of the shadow value when active (see the value and isInteractive props).",
    "Renders the border-radius of the shadow.",
    "Size of the shadow value when focused (see the value and isInteractiveprops).",
    "Size of the shadow value when hovered (see the value and isInteractive props).",
    "Determines if hover, active, and focus shadow values should be automatically calculated and rendered.",
    "Dimensional offsets (margin) for the shadow.",
    "Size of the shadow, based on the Style system’s elevation system. The value determines the strength of the shadow, which sense of depth.",
    "In the example below, isInteractive is activated to give a better sense of depth.",
    "Array of color presets of the form { color: '#000000', name: 'Black', slug: 'black' }.",
    "Array of duotone presets of the form { colors: [ '#000000', '#ffffff' ], name: 'Grayscale', slug: 'grayscale' }.",
    "An array of colors for the duotone effect.",
    "Callback which is called when the duotone colors change.",
    "An array of colors to show or null to show the placeholder swatch icon.",
    "Flyout is a component to render a floating content modal. It is similar in purpose to a tooltip, but renders content of any sort, not only simple text.",
    "Determines if Flyout has animations.",
    "The duration of Flyout animations.",
    "ID that will serve as a base for all the items IDs. See https://reakit.io/docs/popover/#usepopoverstate",
    "Size of the elevation shadow. For more information, check out Card.",
    "Max-width for the Flyout element.",
    "Callback for when the visible state changes.",
    "Element that triggers the visible state of Flyout when clicked.",
    "Whether Flyout is visible. See the Reakit docs for more information.",
    "Position of the popover element. See the popper docs for more information.",
    "DropZone is a component creating a drop zone area taking the full size of its parent element. It supports dropping files, HTML content or any other HTML drop event.",
    "A CSS class to give to the wrapper element.",
    "A string to be shown within the drop zone area.",
    "The function is called when dropping a file into the DropZone. It receives an array of dropped files as an argument.",
    "The function is called when dropping HTML into the DropZone. It receives the HTML being dropped as an argument.",
    "The function is generic drop handler called if the onFilesDrop or onHTMLDrop are not called. It receives the drop event object as an argument.",
    "Draggable is a Component that provides a way to set up a cross-browser (including IE) customizable drag image and the transfer data for the drag event. It decouples the drag handle and the element to drag: use it by wrapping the component that will become the drag handle and providing the DOM ID of the element to drag.",
    "Note that the drag handle needs to declare the draggable=\"true\" property and bind the Draggables onDraggableStart and onDraggableEnd event handlers to its own onDragStart and onDragEnd respectively. Draggable takes care of the logic to setup the drag image and the transfer data, but is not concerned with creating an actual DOM element that is draggable.",
    "The HTML id of the element to clone on drag",
    "A function called when dragging ends. This callback receives the event object from the dragend event as its first parameter.",
    "A function called when the element being dragged is dragged over a valid drop target. This callback receives the event object from the dragover event as its first parameter.",
    "A function called when dragging starts. This callback receives the event object from the dragstart event as its first parameter.",
    "Arbitrary data object attached to the drag and drop event.",
    "In case you want to call your own dragstart / dragend event handlers as well, you can pass them to Draggable and it’ll take care of calling them after their own:",
    "Divider is a layout component that separates groups of related content.",
    "Adjusts all margins on the inline dimension.",
    "Adjusts the inline-end margin.",
    "Adjusts the inline-start margin.",
    "Divider’s orientation. When using inside a flex container, you may need to make sure the divider is stretch aligned in order for it to be visible.",
    "Divider also inherits all of the Separator props.",
    "Disabled is a component which disables descendant tabbable elements and prevents pointer interaction.",
    "Assuming you have a form component, you can disable all form inputs by wrapping the form with <Disabled>.",
    "A component can detect if it has been wrapped in a <Disabled /> by accessing its context using Disabled.Context.",
    "Note: this component may not behave as expected in browsers that don’t support the inert HTML attribute. We recommend adding the official WICG polyfill when using this component in your project.",
    "Whether to disable all the descendant fields. Defaults to true.",
    "DimensionControl is a component designed to provide a UI to control spacing and/or dimensions.",
    "Note: by default, if you do not provide an initial value prop for the current dimension value, then no value will be selected (ie: there is no default dimension set).",
    "The human readable label for the control.",
    "The current value of the dimension UI control. If provided the UI with automatically select the value.",
    "An optional array of size objects in the following shape:",
    "By default a set of relative sizes (small, medium…etc) are provided. See packages/block-editor/src/components/dimension-control/sizes.js.",
    "An optional dashicon to display before to the control label.",
    "A callback which is triggered when a spacing size value changes (is selected/clicked).",
    "A string of classes to be added to the control component.",
    "DateTimePicker is a React component that renders a calendar and clock for date and time selection. The calendar and clock components can be accessed individually using the DatePicker and TimePicker components respectively.",
    "Date pickers should:",
    "Render a DateTimePicker.",
    "The current date and time at initialization. Optionally pass in a null value to specify no date is currently selected.",
    "The function called when a new date or time has been selected. It is passed the currentDate as an argument.",
    "Whether we use a 12-hour clock. With a 12-hour clock, an AM/PM widget is displayed and the time format is assumed to be MM-DD-YYYY (as opposed to the default format DD-MM-YYYY).",
    "A callback function which receives a Date object representing a day as an argument, and should return a Boolean to signify if the day is valid or not.",
    "A callback invoked when selecting the previous/next month in the date picker. The callback receives the new month date in the ISO format as an argument.",
    "List of events to show in the date picker. Each event will appear as a dot on the day of the event.",
    "The day that the week should start on. 0 for Sunday, 1 for Monday, etc.",
    "Start opting in to not displaying a Help button which will become the default in a future version.",
    "Start opting in to not displaying a Reset button which will become the default in a future version.",
    "ConfirmDialog is built of top of Modal and displays a confirmation dialog, with confirm and cancel buttons.",
    "The dialog is confirmed by clicking the confirm button or by pressing the Enter key. It is cancelled (closed) by clicking the cancel button, by pressing the ESC key, or by clicking outside the dialog focus (i.e, the overlay).",
    "ConfirmDialog has two main implicit modes: controlled and uncontrolled.",
    "Allows the component to be used standalone, just by declaring it as part of another React’s component render method:",
    "Activating this mode is as simple as omitting the isOpen prop. The only mandatory prop, in this case, is the onConfirm callback. The message is passed as the children. You can pass any JSX you’d like, which allows to further format the message or include sub-component if you’d like:",
    "Let the parent component control when the dialog is open/closed. It’s activated when a boolean value is passed to isOpen:",
    "Multiple ConfirmDialogs is an edge case that’s currently not officially supported by this component. At the moment, new instances will end up closing the last instance due to the way the Modal is implemented.",
    "An optional title for the dialog. Setting a title will render it in a title bar at the top of the dialog, making it a bit taller. The bar will also include an x close button at the top-right corner.",
    "The actual message for the dialog. It’s passed as children and any valid ReactNode is accepted:",
    "Defines if the dialog is open (displayed) or closed (not rendered/displayed). It also implicitly toggles the controlled mode if set or the uncontrolled mode if it’s not set.",
    "The callback that’s called when the user confirms. A confirmation can happen when the OK button is clicked or when Enter is pressed.",
    "The callback that’s called when the user cancels. A cancellation can happen when the Cancel button is clicked, when the ESC key is pressed, or when a click outside of the dialog focus is detected (i.e. in the overlay).",
    "It’s not required if isOpen is not set (uncontrolled mode), as the component will take care of closing itself, but you can still pass a callback if something must be done upon cancelling (the component will still close itself in this case).",
    "If isOpen is set (controlled mode), then it’s required, and you need to set the state that defines isOpen to false as part of this callback if you want the dialog to close when the user cancels.",
    "The optional custom text to display as the confirmation button’s label",
    "The optional custom text to display as the cancelation button’s label",
    "ComboboxControl is an enhanced version of a SelectControl, with the addition of being able to search for options using a search input.",
    "These are the same as the ones for SelectControls, but this component is better suited for when there are too many items to scroll through or load at once so you need to filter them based on user input.",
    "Function called when the control’s search input value changes. The argument contains the next input value.",
    "Function called with the selected value changes.",
    "The current value of the control.",
    "Custom renderer invoked for each option in the suggestion list. The render prop receives as its argument an object containing, under the item key, the single option’s data (directly from the array of data passed to the options prop).",
    "Like this component, but without a search input, the CustomSelectControl component.",
    "ColorPicker is a color picking component based on react-colorful. It lets you pick a color visually or by manipulating the individual RGB(A), HSL(A) and Hex(8) color values.",
    "The current color value to display in the picker. Must be a hex or hex8 string.",
    "Fired when the color changes. Always passes a hex or hex8 color string.",
    "When true the color picker will display the alpha channel both in the bottom inputs as well as in the color picker itself.",
    "An optional default value to use for the color picker.",
    "The format to copy when clicking the displayed color format.",
    "ColorPalette allows the user to pick a color from a list of pre-defined color entries.",
    "If you’re using this component outside the editor, you can\nensure Tooltip positioning\nfor the ColorPalette‘s color swatches, by rendering your ColorPalette with a\nPopover.Slot further up the element tree and within a\nSlotFillProvider overall.",
    "Whether the palette should have a clearing button.",
    "Array with the colors to be shown. When displaying multiple color palettes to choose from, the format of the array changes from an array of colors objects, to an array of color palettes.",
    "Whether to allow the user to pick a custom color on top of the predefined\nchoices (defined via the colors prop).",
    "This controls whether the alpha channel will be offered when selecting custom\ncolors.",
    "The heading level.",
    "Currently active value.",
    "Callback called when a color is selected.",
    "ColorIndicator is a React component that renders a specific color in a circle. It’s often used to summarize a collection of used colors in a child component.",
    "Extra classes for the used <span> element. By default only component-color-indicator is added.",
    "The color of the indicator. Any value from the CSS background property is supported.",
    "With a clipboard button, users copy text (or other elements) with a single click or tap.",
    "The class that will be added to the classes of the underlying <Button> component.",
    "The text that will be copied to the clipboard.",
    "The function that will be called when the text is copied.",
    "— Type: () => void\n— Required: yes",
    "The function that will be called when the text is copied and the copy animation is finished.",
    "— Type: () => void\n— Required: no",
    "Any additional props will be passed the underlying <Button/> component. See the Button component for more details on the available props.",
    "CircularOptionPicker is a component that displays a set of options as circular buttons.",
    "A CSS class to apply to the wrapper element.",
    "The action(s) to be rendered after the options, such as a ‘clear’ button as seen in ColorPalette.",
    "Usually a CircularOptionPicker.ButtonAction or CircularOptionPicker.DropdownLinkAction component.",
    "The options to be rendered, such as color swatches.",
    "Usually a CircularOptionPicker.Option component.",
    "The child elements.",
    "A ButtonAction is an action that is rendered as a button alongside the options themselves.",
    "A common use case is a ‘clear’ button to deselect the currently selected option.",
    "A CSS class to apply to the underlying Button component.",
    "CircularOptionPicker.ButtonAction also inherits all of the Button props, except for href and target.",
    "CircularOptionPicker.DropdownLinkAction is an action that’s hidden behind a dropdown toggle. The button is formatted as a link and rendered as an anchor element.",
    "A CSS class to apply to the underlying Dropdown component.",
    "The text to be displayed on the button.",
    "The props for the underlying Dropdown component.",
    "Inherits all of the Dropdown props, except for className and renderToggle.",
    "Props for the underlying Button component.",
    "Inherits all of the Button props, except for href, target, and children.",
    "Checkboxes allow the user to select one or more items from a set.",
    "Selected and unselected checkboxes",
    "Use checkboxes when you want users to:",
    "Do\nUse checkboxes when users can select multiple items from a list. They let users select more than one item.",
    "Don’t\nDon’t use toggles when a list consists of multiple options. Use checkboxes — they take up less space.",
    "Checkboxes can be used to open a list containing sub-selections.",
    "Checkboxes can have a parent-child relationship, with secondary options nested under primary options.",
    "When the parent checkbox is checked, all the child checkboxes are checked. When a parent checkbox is unchecked, all the child checkboxes are unchecked.",
    "If only a few child checkboxes are checked, the parent checkbox becomes a mixed checkbox.",
    "Render an is author checkbox:",
    "A label for the input field, that appears at the side of the checkbox.\nThe prop will be rendered as content a label element.\nIf no prop is passed an empty label is rendered.",
    "If checked is true the checkbox will be checked. If checked is false the checkbox will be unchecked.\nIf no value is passed the checkbox will be unchecked.",
    "If indeterminate is true the state of the checkbox will be indeterminate.",
    "Card provides a flexible and extensible content container.",
    "Card also provides a convenient set of sub-components such as CardBody, CardHeader, CardFooter, and more (see below).",
    "Size of the elevation shadow, based on the Style system’s elevation system. This may be helpful in highlighting certain content. For more information, check out Elevation.",
    "Renders without a border.",
    "Card also inherits all of the Surface props.",
    "This component provides a collection of sub-component that can be used to compose various interfaces.",
    "<Card />‘s sub-components are connected to <Card /> using Context. Certain props like size and isBorderless are passed through to some of the sub-components.",
    "In the following example, the <CardBody /> will render with a size of small:",
    "These sub-components are designed to be flexible. The Context props can be overridden by the sub-component(s) as required. In the following example, the last <CardBody /> will render it’s specified size:",
    "CardMedia provides a container for media elements within a Card.",
    "CardMedia can be placed in any order as a direct child of a Card (it can also exist as the only child component). The styles will automatically round the corners of the inner media element.",
    "CardHeader renders an optional header within a Card.",
    "Note: This component is connected to Card‘s Context. The value of the size and isBorderless props is derived from the Card parent component (if there is one). Setting these props directly on this component will override any derived values.",
    "Renders with a light gray background color.",
    "CardFooter renders an optional footer within a Card.",
    "Underneath, CardFooter uses the Flex layout component. This improves the alignment of child items within the component.",
    "Check out the documentation on Flex for more details on layout composition.",
    "See the documentation for the justify prop for the Flex component",
    "CardDivider renders an optional divider within a Card. It is typically used to divide multiple CardBody components from each other.",
    "CardDivider inherits all of the Divider props.",
    "CardBody renders an optional content area for a Card. Multiple CardBody components can be used within Card if needed.",
    "Note: This component is connected to Card‘s Context. The value of the size prop is derived from the Card parent component (if there is one). Setting this prop directly on this component will override any derived values.",
    "Determines if the component is scrollable.",
    "BoxControl components let users set values for Top, Right, Bottom, and Left. This can be used as an input control for values like padding or margin.",
    "If this property is true, a button to reset the box control is rendered.",
    "If this property is true, when the box control is unlinked, vertical and horizontal controls can be used instead of updating individual sides.",
    "Props for the internal UnitControl components.",
    "Heading label for the control.",
    "A callback function when an input value changes.",
    "The top, right, bottom, and left box dimension values to use when the control is reset.",
    "Collection of sides to allow control of. If omitted or empty, all sides will be available. Allowed values are “top”, “right”, “bottom”, “left”, “vertical”, and “horizontal”.",
    "Collection of available units which are compatible with UnitControl.",
    "The top, right, bottom, and left box dimension values.",
    "This component provides control over a border’s color, style, and width.",
    "The BorderControl brings together internal sub-components which allow users to\nset the various properties of a border. The first sub-component, a\nBorderDropdown contains options representing border color and style. The\nborder width is controlled via a UnitControl and an optional RangeControl.",
    "Border radius is not covered by this control as it may be desired separate to\ncolor, style, and width. For example, the border radius may be absorbed under\na “shape” abstraction.",
    "If you’re using this component outside the editor, you can\nensure Tooltip positioning\nfor the BorderControl‘s color and style options, by rendering your\nBorderControl with a Popover.Slot further up the element tree and within a\nSlotFillProvider overall.",
    "An array of color definitions. This may also be a multi-dimensional array where\ncolors are organized by multiple origins.",
    "Each color may be an object containing a name and color value.",
    "This toggles the ability to choose custom colors.",
    "This controls whether unit selection should be disabled.",
    "This controls whether the alpha channel will be offered when selecting\ncustom colors.",
    "This controls whether to support border style selection.",
    "This flags the BorderControl to render with a more compact appearance. It\nrestricts the width of the control and prevents it from expanding to take up\nadditional space.",
    "If provided, a label will be generated using this as the content.",
    "Whether it is visible only to screen readers is controlled via\nhideLabelFromVision.",
    "A callback function invoked when the border value is changed via an interaction\nthat selects or clears, border color, style, or width.",
    "Note: the value may be undefined if a user clears all border properties.",
    "If opted into, sanitizing the border means that if no width or color have been\nselected, the border style is also cleared and undefined is returned as the\nnew border value.",
    "Whether or not to render a header for the border color and style picker\ndropdown. The header includes a label for the color picker and a close button.",
    "An object representing a border or undefined. Used to set the current border\nconfiguration for this component.",
    "Controls the visual width of the BorderControl. It has no effect if the\nisCompact prop is set to true.",
    "Flags whether this BorderControl should also render a RangeControl for\nadditional control over a border’s width.",
    "This component provides users with the ability to configure a single “flat”\nborder or separate borders per side.",
    "The BorderBoxControl effectively has two view states. The first, a “linked”\nview, allows configuration of a flat border via a single BorderControl.\nThe second, a “split” view, contains a BorderControl for each side\nas well as a visualizer for the currently selected borders. Each view also\ncontains a button to toggle between the two.",
    "When switching from the “split” view to “linked”, if the individual side\nborders are not consistent, the “linked” view will display any border properties\nselections that are consistent while showing a mixed state for those that\naren’t. For example, if all borders had the same color and style but different\nwidths, then the border dropdown in the “linked” view’s BorderControl would\nshow that consistent color and style but the “linked” view’s width input would\nshow “Mixed” placeholder text.",
    "If you’re using this component outside the editor, you can\nensure Tooltip positioning\nfor the BorderBoxControl‘s color and style options, by rendering your\nBorderBoxControl with a Popover.Slot further up the element tree and within\na SlotFillProvider overall.",
    "This controls whether to support border style selections.",
    "A callback function invoked when any border value is changed. The value received\nmay be a “flat” border object, one that has properties defining individual side\nborders, or undefined.",
    "Note: The will be undefined if a user clears all borders.",
    "The position of the color popovers relative to the control wrapper.",
    "By default, popovers are displayed relative to the button that initiated the popover. By supplying a popover placement, you force the popover to display in a specific location.",
    "The available base placements are ‘top’, ‘right’, ‘bottom’, ‘left’. Each of these base placements has an alignment in the form -start and -end. For example, ‘right-start’, or ‘bottom-end’. These allow you to align the tooltip to the edges of the button, rather than centering it.",
    "The space between the popover and the control wrapper.",
    "An object representing the current border configuration.",
    "This may be a “flat” border where the object has color, style, and width\nproperties or a “split” border which defines the previous properties but for\neach side; top, right, bottom, and left.",
    "BaseControl is a component used to generate labels and help text for components handling user inputs.",
    "The HTML id of the control element (passed in as a child to BaseControl) to which labels and help text are being generated. This is necessary to accessibly associate the label with that element.",
    "The recommended way is to use the useBaseControlProps hook, which takes care of generating a unique id for you. Otherwise, if you choose to pass an explicit id to this prop, you are responsible for ensuring the uniqueness of the id.",
    "Additional description for the control. It is preferable to use plain text for help, as it can be accessibly associated with the control using aria-describedby. When the help contains links, or otherwise non-plain text content, it will be associated with the control using aria-details.",
    "Any other classes to add to the wrapper div.",
    "The content to be displayed within the BaseControl.",
    "BaseControl.VisualLabel is used to render a purely visual label inside a BaseControl component.",
    "It should only be used in cases where the children being rendered inside BaseControl are already accessibly labeled, e.g., a button, but we want an additional visual label for that section equivalent to the labels BaseControl would otherwise use if the label prop was passed.",
    "The content to be displayed within the BaseControl.VisualLabel.",
    "BaseField is an internal (i.e., not exported in the index.js) primitive component used for building more complex fields like TextField. It provides error handling and focus styles for field components. It does not handle layout of the component aside from wrapping the field in a Flex wrapper.",
    "BaseField is primarily used as a hook rather than a component:",
    "Whether the field is disabled.",
    "Renders an error style around the component.",
    "Renders a component that can be inlined in some text.",
    "Renders a subtle variant of the component.",
    "This component is used to provide autocompletion support for a child input component.",
    "The rich text value object the autocomleter is being applied to.",
    "A function to be called when an option is selected to insert into the existing text.",
    "A function to be called when an option is selected to replace the existing text.",
    "An array of all of the completers to apply to the current element.",
    "A ref containing the editable element that will serve as the anchor for Autocomplete‘s Popover.",
    "A function that returns nodes to be rendered within the Autocomplete.",
    "Whether or not the Autocomplte componenet is selected, and if its Popover should be displayed.",
    "Autocompleters enable us to offer users options for completing text input. For example, Gutenberg includes a user autocompleter that provides a list of user names and completes a selection with a user mention like @mary.",
    "Each completer declares:",
    "In addition, a completer may optionally declare:",
    "The name of the completer. Useful for identifying a specific completer to be overridden via extensibility hooks.",
    "The raw options for completion. May be an array, a function that returns an array, or a function that returns a promise for an array.",
    "Options may be of any type or shape. The completer declares how those options are rendered and what their completions should be when selected.",
    "The string prefix that should trigger the completer. For example, Gutenberg’s block completer is triggered when the ‘/’ character is entered.",
    "A function that returns the label for a given option. A label may be a string or a mixed array of strings, elements, and components.",
    "A function that returns the keywords for the specified option.",
    "A function that returns whether or not the specified option should be disabled. Disabled options cannot be selected.",
    "A function that takes an option and responds with how the option should be completed. By default, the result is a value to be inserted in the text. However, a completer may explicitly declare how a completion should be treated by returning an object with action and value properties. The action declares what should be done with the value.",
    "There are currently two supported actions:",
    "A function that takes a Range before and a Range after the autocomplete trigger and query text and returns a boolean indicating whether the completer should be considered for that context.",
    "A class name to apply to the autocompletion popup menu.",
    "Whether to apply debouncing for the autocompleter. Set to true to enable debouncing.",
    "The following is a contrived completer for fresh fruit.",
    "AnglePickerControl is a React component to render a UI that allows users to pick an angle.\nUsers can choose an angle in a visual UI with the mouse by dragging an angle indicator inside a circle or by directly inserting the desired angle in a text field.",
    "Label to use for the angle picker.",
    "The current value of the input. The value represents an angle in degrees and should be a value between 0 and 360.",
    "A function that receives the new value of the input.",
    "AlignmentMatrixControl components enable adjustments to horizontal and vertical alignments for UI.",
    "The class that will be added to the classes of the underlying grid widget.\n–   Type: string\n–   Required: No",
    "Unique ID for the component.",
    "Accessible label. If provided, sets the aria-label attribute of the underlying grid widget.",
    "If provided, sets the default alignment value.",
    "The current alignment value.",
    "A function that receives the updated alignment value.",
    "If provided, sets the width of the control.",
    "New styles options are integrated into theme.json on a regular basis. Knowing the style options available through theme.json or the styles editor at any given time can be challenging. To clarify, the table below indicates the WordPress version when each theme.json styles option became available and when a corresponding control was added to the user interface to allow management of the style from the Styles editor.",
    "This guide documents the changes between different theme.json versions and how to upgrade. Using older versions will continue to be supported. Upgrading is recommended because new development will continue in the newer versions.",
    "Upgrading to v2 enables some new features and adjusts the naming of some old features to be more consistent with one another.",
    "How to migrate from v1 to v2:",
    "Refer to the dev note for the release and the reference documents for the respective v1 and v2 versions.",
    "New top-level properties: customTemplates, templateParts.",
    "Additions to settings:",
    "Additions to styles:",
    "The default font sizes provided by core (settings.typography.fontSizes) have been updated. The Normal and Huge sizes (with normal and huge slugs) have been removed from the list, and Extra Large (x-large slug) has been added. When the UI controls show the default values provided by core, Normal and Huge will no longer be present. However, their CSS classes and CSS Custom Properties are still enqueued to make sure existing content that uses them still works as expected.",
    "Theme.json version 2 has been released, see the theme.json migration guide for updating to the latest version.",
    "Settings related to borders.",
    "Settings related to colors.",
    "Settings related to layout.",
    "Settings related to spacing.",
    "Settings related to typography.",
    "Generate custom CSS custom properties of the form --wp--custom--{key}--{nested-key}: {value};. camelCased keys are transformed to kebab-case as to follow the CSS property naming schema. Keys at different depth levels are separated by --, so keys should not include -- in the name.",
    "Border styles.",
    "Color styles.",
    "Spacing styles.",
    "Typography styles.",
    "This is the living specification for the version 2 of theme.json. This version works with WordPress 5.9 or later, and the latest Gutenberg plugin.",
    "There’re related documents you may be interested in: the theme.json v1 specification and the reference to migrate from theme.json v1 to v2.",
    "This reference guide lists the settings and style properties defined in the theme.json schema. See the theme.json how to guide for examples and guide on how to use the theme.json file in your theme.",
    "Code editors can pick up the schema and can provide help like tooltips, autocomplete, or schema validation in the editor. To use the schema in Visual Studio Code, add “$schema”: “https://schemas.wp.org/trunk/theme.json” to the beginning of your theme.json file.",
    "Setting that enables the following UI tools:",
    "Enables root padding (the values from styles.spacing.padding) to be applied to the contents of full-width blocks instead of the root block.",
    "Please note that when using this setting, styles.spacing.padding should always be set as an object with top, right, bottom, left values declared separately.",
    "Settings related to shadows.",
    "Settings related to dimensions.",
    "Settings related to position.",
    "Dimensions styles",
    "CSS and SVG filter styles.",
    "Box shadow styles.",
    "Outline styles.",
    "Sets custom CSS to apply styling not covered by other theme.json properties.",
    "Additional metadata for custom templates defined in the templates folder.",
    "Type: object.",
    "Additional metadata for template parts defined in the parts folder.",
    "An array of pattern slugs to be registered from the Pattern Directory.\nType: array.",
    "RichText is a component that allows developers to render a contenteditable input, providing users with the option to format block content to make it bold, italics, linked, or use other formatting.",
    "The RichText component is extremely powerful because it provides built-in functionality you won’t find in other components:",
    "Unlike other components that exist in the Component Reference section, RichText lives separately because it only makes sense within the block editor, and not within other areas of WordPress.",
    "For a list of the possible properties to pass your RichText component, check out the component documentation on GitHub.",
    "There are a number of core blocks using the RichText component. The JavaScript edit function linked below for each block can be used as a best practice reference while creating your own blocks.",
    "While using the RichText component a number of common issues tend to appear.",
    "If the HTML tags from text formatting such as <strong> or <em> are being escaped and displayed on the frontend of the site, this is likely due to an issue in your save function. Make sure your code looks something like <RichText.Content tagName=\"h2\" value={ heading } /> (JSX) within your save function instead of simply outputting the value with <h2>{ heading }</h2>.",
    "Before moving forward, consider if using the RichText component makes sense at all. Would it be better to use a basic input or textarea element? If you don’t think any formatting should be possible, these HTML tags may make more sense.",
    "If you’d still like to use RichText, you can eliminate all of the formatting options by specifying the withoutInteractiveFormatting property.",
    "If you want to limit the formats allowed, you can specify using allowedFormats property in your code, see the example above or the component documentation for details.",
    "The RichText component uses formats to display inline elements, for example images within the paragraph block. If you just want to disable a format from the editor, you can use the unregisterFormatType function. For example to disable inline images, use:",
    "To apply, you would need to enqueue the above script in your plugin or theme. See the JavaScript tutorial for how to load JavaScript in WordPress.",
    "This slot allows the creation of a <PluginSidebar> with a menu item that when clicked will expand the sidebar to the appropriate Plugin section.\nThis is done by setting the target on <PluginSidebarMoreMenuItem> to match the name on the <PluginSidebar>",
    "This slot allows for adding items into the Gutenberg Toolbar.\nUsing this slot will add an icon to the bar that, when clicked, will open a sidebar with the content of the items wrapped in the <PluginSidebar /> component.",
    "This slot allows for injecting items into the bottom of the pre-publish panel that appears to confirm publishing after the user clicks “Publish”.",
    "This slots allows for the insertion of items in the Summary panel of the document sidebar.",
    "This slot allows for injecting items into the bottom of the post-publish panel that appears after a post is published.",
    "This slot will add a new item to the More Tools & Options section.",
    "This SlotFill allows registering a UI to edit Document settings.",
    "Core and custom panels can be access programmatically using their panel name. The core panel names are:",
    "Custom panels are namespaced with the plugin name that was passed to registerPlugin.\nIn order to access the panels using function such as toggleEditorPanelOpened or toggleEditorPanelEnabled be sure to prepend the namespace.",
    "To programmatically toggle panels, use the following:",
    "It is also possible to remove panels from the admin using the removeEditorPanel function by passing the name of the registered panel.",
    "This slot allows for adding a new item into the More Options area.\nThis will either appear in the controls for each block or at the Top Toolbar depending on the users setting.",
    "This slot allows replacing the default main dashboard button in the post editor and site editor.\nIt’s used for returning back to main wp-admin dashboard when editor is in fullscreen mode.",
    "This will override the W icon button in the header.",
    "If your goal is just to replace the icon of the existing button in\nthe post editor, that can be achieved in the following way:",
    "In the site editor this slot refers to the “back to dashboard” button in the navigation sidebar.",
    "Slot and Fill are components that have been exposed to allow developers to inject items into some predefined places in the Gutenberg admin experience.\nPlease see the SlotFill component docs for more details.",
    "In order to use them, we must leverage the @wordpress/plugins api to register a plugin that will inject our items.",
    "In order to access the SlotFills, we need to do four things:",
    "Here is an example using the PluginPostStatusInfo slotFill:",
    "SlotFills are created using createSlotFill. This creates two components, Slot and Fill which are then used to create a new component that is exported on the wp.plugins global.",
    "Definition of the PluginPostStatusInfo SlotFill (see core code)",
    "This new Slot is then exposed in the editor. The example below is from core and represents the Summary panel.",
    "As we can see, the <PluginPostStatusInfo.Slot> is wrapping all of the items that will appear in the panel.\nAny items that have been added via the SlotFill ( see the example above ), will be included in the fills parameter and be displayed between the <PostAuthor/> and <PostTrash/> components.",
    "See core code.",
    "The following SlotFills are available in the edit-post package. Please refer to the individual items below for usage and example details:",
    "WordPress 6.1 has introduced some server-side filters to hook into the theme.json data provided at the different data layers:",
    "Each filter receives an instance of the WP_Theme_JSON_Data class with the data for the respective layer. To provide new data, the filter callback needs to use the update_with( $new_data ) method, where $new_data is a valid theme.json-like structure. As with any theme.json, the new data needs to declare which version of the theme.json is using, so it can correctly be migrated to the runtime one, should it be different.",
    "This is how to pass a new color palette for the theme and disable the text color UI:",
    "The editor.Autocomplete.completers filter is for extending and overriding the list of autocompleters used by blocks.",
    "The Autocomplete component found in @wordpress/block-editor applies this filter. The @wordpress/components package provides the foundational Autocomplete component that does not apply such a filter, but blocks should generally use the component provided by @wordpress/block-editor.",
    "Here is an example of using the editor.Autocomplete.completers filter to add an acronym completer. You can find full documentation for the autocompleter interface with the Autocomplete component in the @wordpress/components package.",
    "When the editor is interacting with blocks, these are stored in memory as data structures comprising a few basic properties and attributes. Upon saving a working post we serialize these data structures into a specific HTML structure and save the resultant string into the post_content property of the post in the WordPress database. When we load that post back into the editor we have to make the reverse transformation to build those data structures from the serialized format in HTML.",
    "The process of loading the serialized HTML into the editor is performed by the block parser. The formal specification for this transformation is encoded in the parsing expression grammar (PEG) inside the @wordpress/block-serialization-spec-parser package. The editor provides a default parser implementation of this grammar but there may be various reasons for replacing that implementation with a custom implementation. We can inject our own custom parser implementation through the appropriate filter.",
    "Plugins have access to the parser if they want to process posts in their structured form instead of a plain HTML-as-string representation.",
    "The editor uses the client-side parser while interactively working in a post. The plain HTML-as-string representation is sent to the browser by the backend and then the editor performs the first parse to initialize itself.",
    "To replace the server-side parser, use the block_parser_class filter. The filter transforms the string class name of a parser class. This class is expected to expose a parse method.",
    "Note: At the present time it’s not possible to replace the client-side parser.",
    "The i18n functions (__(), _x(), _n() and _nx()) provide translations of strings for use in your code. The values returned by these functions are filterable if you need to override them, using the following filters:",
    "The filters are passed the following arguments, in line with their PHP equivalents.",
    "Here is a simple example, using the i18n.gettext filter to override a specific translation.",
    "Filters that are specific to the text domain you’re operating on are generally preferred for performance reasons (since your callback will only be run for strings in the relevant text domain).",
    "To attach to a text domain-specific filter append an underscore and the text-domain to the standard filter name. For example, if filtering a string where the text domain is “woocommerce”, you would use one of the following filters:",
    "Note: To apply a filter where the text-domain is undefined (for example WordPress core strings), then use the name “default” to construct the filter name.",
    "To modify the behavior of the editor experience, WordPress exposes several APIs.",
    "The following filters are available to extend the editor features.",
    "Used to modify the image size displayed in the Post Featured Image component. It defaults to 'post-thumbnail', and will fail back to the full image size when the specified image size doesn’t exist in the media object. It’s modeled after the admin_post_thumbnail_size filter in the classic editor.",
    "Filters the interstitial message shown when generating previews.",
    "Used to set or modify the crossOrigin attribute for foreign-origin media elements (i.e <audio> , <img> , <link> , <script>, <video>). See this article for more information the crossOrigin attribute, its values and how it applies to each element.",
    "One example of it in action is in the Image block’s transform feature to allow cross-origin images to be used in a <canvas>.",
    "Note: Before WordPress 5.8 known as block_editor_settings. In the case when you want to support older versions of WordPress you might need a way to detect which filter should be used – the deprecated one vs the new one. The recommended way to proceed is to check if the WP_Block_Editor_Context class exists.",
    "This is a PHP filter which is applied before sending settings to the WordPress block editor.",
    "You may find details about this filter on its WordPress Code Reference page.",
    "The filter will send any setting to the initialized Editor, which means any editor setting that is used to configure the editor at initialiation can be filtered by a PHP WordPress plugin before being sent.",
    "Filters the array of REST API paths that will be used to preloaded common data to use with the block editor.",
    "If it is true the user can edit the content using the visual editor.",
    "It is set by default to the return value of the user_can_richedit function. It checks if the user can access the visual editor and whether it’s supported by the user’s browser.",
    "Default true. Indicates whether the user can access the code editor in addition to the visual editor.",
    "If set to false the user will not be able to switch between visual and code editor. The option in the settings menu will not be available and the keyboard shortcut for switching editor types will not fire.",
    "A JavaScript error in a part of the UI shouldn’t break the whole app. To solve this problem for users, React library uses a concept of an “error boundary”. Error boundaries are React components that catch JavaScript errors anywhere in their child component tree, and display a fallback UI instead of the component tree that crashed.",
    "Allows you to hook into the Error Boundaries and gives you access to the error object.",
    "You can use this action if you want to get hold of the error object that’s handled by the boundaries, i.e to send them to an external error tracking tool.",
    "The Block Directory enables installing new block plugins from WordPress.org. It can be disabled by removing the actions that enqueue it. In WordPress core, the function is wp_enqueue_editor_block_directory_assets. To remove the feature, use remove_action, like this:",
    "Default true. The filter is checked when registering remote block patterns, set to false to disable.",
    "For example, to disable use:",
    "To modify the behavior of existing blocks, WordPress exposes several APIs.",
    "The following filters are available to extend the settings for blocks during their registration.",
    "Filters the raw metadata loaded from the block.json file when registering a block type on the server with PHP. It allows applying modifications before the metadata gets processed.",
    "The filter takes one param:",
    "Filters the settings determined from the processed block type metadata. It makes it possible to apply custom modifications using the block metadata that isn’t handled by default.",
    "The filter takes two params:",
    "Used to filter the block settings when registering the block on the client with JavaScript. It receives the block settings, the name of the registered block, and either null or the deprecated block settings (when applied to a registered deprecation) as arguments. This filter is also applied to each of a block’s deprecated settings.",
    "Ensure that List blocks are saved with the canonical generated class name (wp-block-list):",
    "The following filters are available to change the behavior of blocks while editing in the block editor.",
    "A filter that applies to the result of a block’s save function. This filter is used to replace or extend the element, for example using wp.element.cloneElement to modify the element’s props or replace its children, or returning an entirely new element.",
    "The filter’s callback receives an element, a block type definition object and the block attributes as arguments. It should return an element.",
    "Wraps a cover block into an outer container.",
    "A filter that applies to all blocks returning a WP Element in the save function. This filter is used to add extra props to the root element of the save function. For example: to add a className, an id, or any valid prop for this element.",
    "The filter receives the current save element’s props, a block type and the block attributes as arguments. It should return a props object.",
    "Adding a background by default to all blocks.",
    "Note: A block validation error will occur if this filter modifies existing content the next time the post is edited. The editor verifies that the content stored in the post matches the content output by the save() function.",
    "To avoid this validation error, use render_block server-side to modify existing post content instead of this filter. See render_block documentation.",
    "Generated HTML classes for blocks follow the wp-block-{name} nomenclature. This filter allows to provide an alternative class name.",
    "Used to filter an individual transform result from block transformation. All of the original blocks are passed since transformations are many-to-many, not one-to-one.",
    "Called immediately after the default parsing of a block’s attributes and before validation to allow a plugin to manipulate attribute values in time for validation and/or the initial values rendering of the block in the editor.",
    "Used to modify the block’s edit component. It receives the original block BlockEdit component and returns a new wrapped component.",
    "Used to modify the block’s wrapper component containing the block’s edit component and all toolbars. It receives the original BlockListBlock component and returns a new wrapped component.",
    "Adding new properties to the block’s wrapper component can be achieved by adding them to the wrapperProps property of the returned component.",
    "Adding blocks is easy enough, removing them is as easy. Plugin or theme authors have the possibility to “unregister” blocks.",
    "and load this script in the Editor",
    "Important: When unregistering a block, there can be a race condition on which code runs first: registering the block, or unregistering the block. You want your unregister code to run last. The way to do that is specify the component that is registering the block as a dependency, in this case wp-edit-post. Additionally, using wp.domReady() ensures the unregister code runs once the dom is loaded.",
    "If you want to disable all blocks except an allow list, you can adapt the script above like so:",
    "Note: Before WordPress 5.8 known as allowed_block_types. In the case when you want to support older versions of WordPress you might need a way to detect which filter should be used – the deprecated one vs the new one. The recommended way to proceed is to check if the WP_Block_Editor_Context class exists.",
    "On the server, you can filter the list of blocks shown in the inserter using the allowed_block_types_all filter. You can return either true (all block types supported), false (no block types supported), or an array of block type names to allow. You can also use the second provided param $editor_context to filter block types based on its content.",
    "Note: Before WordPress 5.8 known as block_categories. In the case when you want to support older versions of WordPress you might need a way to detect which filter should be used – the deprecated one vs the new one. The recommended way to proceed is to check if the WP_Block_Editor_Context class exists.",
    "It is possible to filter the list of default block categories using the block_categories_all filter. You can do it on the server by implementing a function which returns a list of categories. It is going to be used during blocks registration and to group blocks in the inserter. You can also use the second provided param $editor_context to filter the based on its content.",
    "You can also display an icon with your block category by setting an icon attribute. The value can be the slug of a WordPress Dashicon.",
    "You can also set a custom icon in SVG format. To do so, the icon should be rendered and set on the frontend, so it can make use of WordPress SVG, allowing mobile compatibility and making the icon more accessible.",
    "To set an SVG icon for the category shown in the previous example, add the following example JavaScript code to the editor calling wp.blocks.updateCategory e.g:",
    "Hooks are a way for one piece of code to interact/modify another piece of code. They provide one way for plugins and themes to interact with the editor, but they’re also used extensively by WordPress Core itself.",
    "There are two types of hooks: Actions and Filters. In addition to PHP actions and filters, WordPress also provides a mechanism for registering and executing hooks in JavaScript. This functionality is also available on npm as the @wordpress/hooks package, for general purpose use.",
    "You can also learn more about both APIs: PHP and JavaScript.",
    "This page lists the core blocks included in the block-library package.",
    "Display a date archive of your posts. (Source)",
    "Embed a simple audio player. (Source)",
    "Add a user’s avatar. (Source)",
    "Create and save content to reuse across your site. Update the block, and the changes apply everywhere it’s used. (Source)",
    "Prompt visitors to take action with a button-style link. (Source)",
    "Prompt visitors to take action with a group of button-style links. (Source)",
    "A calendar of your site’s posts. (Source)",
    "Display a list of all categories. (Source)",
    "Display code snippets that respect your spacing and tabs. (Source)",
    "A single column within a columns block. (Source)",
    "Display content in multiple columns, with blocks added to each column. (Source)",
    "This block is deprecated. Please use the Avatar block instead. (Source)",
    "Displays the name of the author of the comment. (Source)",
    "Displays the contents of a comment. (Source)",
    "Displays the date on which the comment was posted. (Source)",
    "Displays a link to edit the comment in the WordPress Dashboard. This link is only visible to users with the edit comment capability. (Source)",
    "Displays a link to reply to a comment. (Source)",
    "Contains the block elements used to display a comment, like the title, date, author, avatar and more. (Source)",
    "An advanced block that allows displaying post comments using different visual configurations. (Source)",
    "Displays a paginated navigation to next/previous set of comments, when applicable. (Source)",
    "Displays the next comment’s page link. (Source)",
    "Displays a list of page numbers for comments pagination. (Source)",
    "Displays the previous comment’s page link. (Source)",
    "Displays a title with the number of comments (Source)",
    "Add an image or video with a text overlay — great for headers. (Source)",
    "A block that displays a summary and shows or hides additional content. (Source)",
    "Add content that may be shown or hidden via a Details block. (Source)",
    "Provide summary text used to toggle the display of content inside a Details block. (Source)",
    "Add a block that displays content pulled from other sites, like Twitter or YouTube. (Source)",
    "Add a link to a downloadable file. (Source)",
    "Use the classic WordPress editor. (Source)",
    "Display multiple images in a rich gallery. (Source)",
    "Gather blocks in a layout container. (Source)",
    "Introduce new sections and organize content to help visitors (and search engines) understand the structure of your content. (Source)",
    "Create a link that always points to the homepage of the site. Usually not necessary if there is already a site title link present in the header. (Source)",
    "Add custom HTML code and preview it as you edit. (Source)",
    "Insert an image to make a visual statement. (Source)",
    "Display a list of your most recent comments. (Source)",
    "Display a list of your most recent posts. (Source)",
    "Create a bulleted or numbered list. (Source)",
    "Create a list item. (Source)",
    "Show login & logout links. (Source)",
    "Set media and words side-by-side for a richer layout. (Source)",
    "Your site doesn’t include support for this block. (Source)",
    "Content before this block will be shown in the excerpt on your archives page. (Source)",
    "A collection of blocks that allow visitors to get around your site. (Source)",
    "Add a page, link, or another item to your navigation. (Source)",
    "Add a submenu to your navigation. (Source)",
    "Separate your content into a multi-page experience. (Source)",
    "Display a list of all pages. (Source)",
    "Displays a page inside a list of all pages. (Source)",
    "Start with the basic building block of all narrative. (Source)",
    "Show a block pattern. (Source)",
    "Display post author details such as name, avatar, and bio. (Source)",
    "The author biography. (Source)",
    "The author name. (Source)",
    "This block is deprecated. Please use the Comments block instead. (Source)",
    "Display a post’s comments count. (Source)",
    "Display a post’s comments form. (Source)",
    "Displays the link to the current post comments. (Source)",
    "Displays the contents of a post or page. (Source)",
    "Add the date of this post. (Source)",
    "Display a post’s excerpt. (Source)",
    "Display a post’s featured image. (Source)",
    "Displays the next or previous post link that is adjacent to the current post. (Source)",
    "Contains the block elements used to render a post, like the title, date, featured image, content or excerpt, and more. (Source)",
    "Post terms. (Source)",
    "Show minutes required to finish reading the post. (Source)",
    "Displays the title of a post, page, or any other content-type. (Source)",
    "Add text that respects your spacing and tabs, and also allows styling. (Source)",
    "Give special visual emphasis to a quote from your text. (Source)",
    "An advanced block that allows displaying post types based on different query parameters and visual configurations. (Source)",
    "Contains the block elements used to render content when no query results are found. (Source)",
    "Displays a paginated navigation to next/previous set of posts, when applicable. (Source)",
    "Displays the next posts page link. (Source)",
    "Displays a list of page numbers for pagination (Source)",
    "Displays the previous posts page link. (Source)",
    "Display the query title. (Source)",
    "Give quoted text visual emphasis. “In quoting others, we cite ourselves.” — Julio Cortázar (Source)",
    "Displays the link of a post, page, or any other content-type. (Source)",
    "Display entries from any RSS or Atom feed. (Source)",
    "Help visitors find your content. (Source)",
    "Create a break between ideas or sections with a horizontal separator. (Source)",
    "Insert additional custom elements with a WordPress shortcode. (Source)",
    "Display an image to represent this site. Update this block and the changes apply everywhere. (Source)",
    "Describe in a few words what the site is about. The tagline can be used in search results or when sharing on social networks even if it’s not displayed in the theme design. (Source)",
    "Displays the name of this site. Update the block, and the changes apply everywhere it’s used. This will also appear in the browser title bar and in search results. (Source)",
    "Display an icon linking to a social media profile or site. (Source)",
    "Display icons linking to your social media profiles or sites. (Source)",
    "Add white space between blocks and customize its height. (Source)",
    "Create structured content in rows and columns to display information. (Source)",
    "Summarize your post with a list of headings. Add HTML anchors to Heading blocks to link them here. (Source)",
    "A cloud of your most used tags. (Source)",
    "Edit the different global regions of your site, like the header, footer, sidebar, or create your own. (Source)",
    "Display the description of categories, tags and custom taxonomies when viewing an archive. (Source)",
    "This block is deprecated. Please use the Columns block instead. (Source)",
    "Insert poetry. Use special spacing formats. Or quote song lyrics. (Source)",
    "Embed a video from your media library or upload a new one. (Source)",
    "A great way to understand this API better is by using the embed block as an example. The numerous existing variations for embed (WordPress, Youtube, etc..) share the same functionality for editing, saving, and so on, but their basic difference is the providerNameSlug attribute’s value, which defines the provider that needs to be used.",
    "By default, all variations will show up in the Inserter in addition to the regular block type item. However, setting the isDefault flag for any of the variations listed will override the regular block type in the Inserter.",
    "An object describing a variation defined for the block type can contain the following fields:",
    "The main difference between block styles and block variations is that a block style just applies a CSS class to the block, so it can be styled in an alternative way. If we want to apply initial attributes or inner blocks, we fall in block variation territory.",
    "It’s also possible to override the default block style using the className attribute when defining block variations.",
    "It’s worth mentioning that setting the isActive property can be useful for cases you want to use information from the block variation, after a block’s creation. For example, this API is used in useBlockDisplayInformation hook to fetch and display proper information on places like the BlockCard or Breadcrumbs components.",
    "Block variations can be declared during a block’s registration by providing the variations key with a proper array of variations, as defined above. In addition, there are ways to register and unregister a block variation for a block, after its registration.",
    "To add a block variation use wp.blocks.registerBlockVariation().",
    "To remove a block variation use wp.blocks.unregisterBlockVariation().",
    "Block Transforms is the API that allows a block to be transformed from and to other blocks, as well as from other entities. Existing entities that work with this API include shortcodes, files, regular expressions, and raw DOM nodes.",
    "A block declares which transformations it supports via the optional transforms key of the block configuration, whose subkeys to and from hold an array of available transforms for every direction. Example:",
    "This section goes through the existing types of transformations blocks support:",
    "This type of transformations support both from and to directions, allowing blocks to be converted into a different one. It has a corresponding UI control within the block toolbar.",
    "A transformation of type block is an object that takes the following parameters:",
    "Example: from Paragraph block to Heading block",
    "To declare this transformation we add the following code into the heading block configuration, which uses the createBlock function from the wp-blocks package.",
    "Example: blocks that have InnerBlocks",
    "A block with InnerBlocks can also be transformed from and to another block with InnerBlocks.",
    "This type of transformations support the from direction, allowing blocks to be created from some content introduced by the user. They’re applied in a new block line after the user has introduced some content and hit the ENTER key.",
    "A transformation of type enter is an object that takes the following parameters:",
    "Example: from — to Separator block",
    "To create a separator block when the user types the hypen three times and then hits the ENTER key we can use the following code:",
    "This type of transformations support the from direction, allowing blocks to be created from files dropped into the editor.",
    "A transformation of type files is an object that takes the following parameters:",
    "Example: from file to File block",
    "To create a File block when the user drops a file into the editor we can use the following code:",
    "This type of transformations support the from direction, allowing blocks to be created from some text typed by the user. They’re applied when, in a new block line, the user types some text and then adds a trailing space.",
    "A transformation of type prefix is an object that takes the following parameters:",
    "Example: from text to custom block",
    "If we want to create a custom block when the user types the question mark, we could use this code:",
    "This type of transformations support the from direction, allowing blocks to be created from raw HTML nodes. They’re applied when the user executes the “Convert to Blocks” action from within the block setting UI menu, as well as when some content is pasted or dropped into the editor.",
    "A transformation of type raw is an object that takes the following parameters:",
    "Example: from URLs to Embed block",
    "If we want to create an Embed block when the user pastes some URL in the editor, we could use this code:",
    "When pasting content it’s possible to define a content model that will be used to validate and process pasted content. It’s often the case that HTML pasted into the editor will contain a mixture of elements that should transfer as well as elements that shouldn’t. For example, consider pasting <span class=\"time\">12:04 pm</span> into the editor. We want to copy 12:04 pm and omit the <span> and its class attribute because those won’t carry the same meaning or structure as they originally did from where they were copied.",
    "When writing raw transforms you can control this by supplying a schema which describes allowable content and which will be applied to clean up the pasted content before attempting to match with your block. The schemas are passed into cleanNodeList from @wordpress/dom; check there for a complete description of the schema.",
    "Example: a custom content model",
    "Suppose we want to match the following HTML snippet and turn it into some kind of custom post preview block.",
    "We want to tell the editor to allow the inner h2 and p elements. We do this by supplying the following schema. In this example we’re using the function form, which accepts an argument supplying phrasingContentSchema (as well as a boolean isPaste indicating if the transformation operation started with pasting text). The phrasingContentSchema is pre-defined to match HTML phrasing elements, such as <strong> and <sup> and <kbd>. Anywhere we expect\na <RichText /> component is a good place to allow phrasing content otherwise we’ll lose all text formatting on conversion.",
    "When we successfully match this content every HTML attribute will be stripped away except for data-post-id and if we have other arrangements of HTML inside of a given div then it won’t match our transformer. Likewise we’d fail to match if we found an <h3> in there instead of an <h2>.",
    "Schemas are most-important when wanting to match HTML snippets containing non-phrasing content, such as <details> with a <summary>. Without declaring the custom schema the editor will skip over these other contructions before attempting to run them through any block transforms.",
    "This type of transformations support the from direction, allowing blocks to be created from shortcodes. It’s applied as part of the raw transformation process.",
    "A transformation of type shortcode is an object that takes the following parameters:",
    "Example: from shortcode to block using transform",
    "An existing shortcode can be transformed into its block counterpart using the transform method.",
    "Example: from shortcode to block using attributes",
    "An existing shortcode can be transformed into its block counterpart using the attributes parameters.",
    "Block Styles allow alternative styles to be applied to existing blocks. They work by adding a className to the block’s wrapper. This className can be used to provide an alternative styling for the block if the block style is selected. See the Getting Started with JavaScript tutorial for a full example.",
    "The example above registers a block style named fancy-quote to the core/quote block. When the user selects this block style from the styles selector, an is-style-fancy-quote className will be added to the block’s wrapper.",
    "By adding isDefault: true you can mark the registered block style as the one that is recognized as active when no custom class name is provided. It also means that there will be no custom class name added to the HTML output for the style that is marked as default.",
    "To remove a block style use wp.blocks.unregisterBlockStyle().",
    "The above removes the block style named large from the core/quote block.",
    "Important: When unregistering a block style, there can be a race condition on which code runs first: registering the style, or unregistering the style. You want your unregister code to run last. The way to do that is specify the component that is registering the style as a dependency, in this case wp-edit-post. Additionally, using wp.domReady() ensures the unregister code runs once the dom is loaded.",
    "Enqueue your JavaScript with the following PHP code:",
    "The JavaScript code in myguten.js:",
    "While the samples provided do allow full control of block styles, they do require a considerable amount of code.",
    "To simplify the process of registering and unregistering block styles, two server-side functions are also available: register_block_style, and unregister_block_style.",
    "The register_block_style function receives the name of the block as the first argument and an array describing properties of the style as the second argument.",
    "The properties of the style array must include name and label:",
    "Besides the two mandatory properties, the styles properties array should also include an inline_style or a style_handle property:",
    "It is also possible to set the is_default property to true to mark one of the block styles as the default one.",
    "The following code sample registers a style for the quote block named “Blue Quote”, and provides an inline style that makes quote blocks with the “Blue Quote” style have blue color:",
    "Alternatively, if a stylesheet was already registered which contains the CSS for the block style, it is possible to just pass the stylesheet’s handle so register_block_style function will make sure it is enqueued.",
    "The following code sample provides an example of this use case:",
    "unregister_block_style allows unregistering a block style previously registered on the server using register_block_style.",
    "The function’s first argument is the registered name of the block, and the name of the style as the second argument.",
    "The following code sample unregisters the style named ‘fancy-quote’ from the quote block:",
    "Important: The function unregister_block_style only unregisters styles that were registered on the server using register_block_style. The function does not unregister a style registered using client-side code.",
    "Prior to the block editor, custom meta boxes were used to extend the editor. Now there are new ways to extend, giving more power to the developer and a better experience for the authors. It is recommended to port older custom meta boxes to one of these new methods to create a more unified and consistent experience for those using the editor.",
    "The block editor does support most existing meta boxes, see the backward compatibility section below for details .",
    "If you are interested in working with the post meta outside the editor, check out the Sidebar Tutorial.",
    "Typically, blocks store attribute values in the serialized block HTML. However, you can also create a block that saves its attribute values as post meta, that can be accessed programmatically anywhere in your template.",
    "This guide shows how to create a block that prompts a user for a single value, and saves it to post meta.",
    "This guide assumes you are already familiar with WordPress plugins, post meta, and basic JavaScript. Review the Getting started with JavaScript tutorial for an introduction.",
    "The guide will walk through creating a basic block, but recommended to go through the Create Block tutorial for a deeper understanding of creating custom blocks.",
    "You will need:",
    "A complete meta-block example is available that you can use as a reference for your setup.",
    "A post meta field is a WordPress object used to store extra data about a post. You need to first register a new meta field prior to use. See Managing Post Metadata to learn more about post meta.",
    "When registering the field, note the show_in_rest parameter. This ensures the data will be included in the REST API, which the block editor uses to load and save meta data. See the register_post_meta function definition for extra information.",
    "Additionally, your post type needs to support custom-fields for register_post_meta function to work",
    "To register the field, add the following to your PHP plugin:",
    "With the meta field registered in the previous step, next create a new block to display the field value to the user.",
    "The hook useEntityProp can be used by the blocks to get or change meta values.",
    "Add this code to the JavaScript src/index.js:",
    "Confirm this works by creating a post and add the Meta Block. You will see your field that you can type a value in. When you save the post, either as a draft or published, the post meta value will be saved too. You can verify by\nsaving and reloading your draft, the form will still be filled in on reload.",
    "You could also confirm the data is saved by checking the database table wp_postmeta and confirm the new post id contains the new field data.",
    "Troubleshooting: Be sure to build your code between changes, you updated the PHP code from Step 1, and JavaScript files are enqueued. Check the build output and developer console for errors.",
    "You can use the post meta data stored in the last step in multiple ways.",
    "The first example uses the value from the post meta field and appends it to the end of the post content wrapped in a H4 tag.",
    "You can also use the post meta data in other blocks. For this example the data is loaded at the end of every Paragraph block when it is rendered, ie. shown to the user. You can replace this for any core or custom block types as needed.",
    "In PHP, use the register_block_type function to set a callback when the block is rendered to include the meta value.",
    "One problem using a meta block is the block is easy for an author to forget, since it requires being added to each post. You solve this by using block templates. A block template is a predefined list of block items per post type. Templates allow you to specify a default initial state for a post type.",
    "For this example, you use a template to automatically insert the meta block at the top of a post.",
    "Add the following code to the myguten-meta-block.php file:",
    "You can also add other block types in the array, including placeholders, or even lock down a post to a set of specific blocks. Templates are a powerful tool for controlling the editing experience, see the documentation linked above for more.",
    "This guide showed how using blocks you can read and write to post meta. See the section below for backward compatibility with existing meta boxes.",
    "Before converting meta boxes to blocks, it may be easier to test if a meta box works with the block editor, and explicitly mark it as such.",
    "If a meta box doesn’t work with the block editor, and updating it to work correctly is not an option, the next step is to add the __block_editor_compatible_meta_box argument to the meta box declaration:",
    "WordPress won’t show the meta box but a message saying that it isn’t compatible with the block editor, including a link to the Classic Editor plugin. By default, __block_editor_compatible_meta_box is true.",
    "After a meta box is converted to a block, it can be declared as existing for backward compatibility:",
    "When the block editor is used, this meta box will no longer be displayed in the meta box area, as it now only exists for backward compatibility purposes. It will display as before in the classic editor.",
    "On each block editor page load, we register an action that collects the meta box data to determine if an area is empty. The original global state is reset upon collection of meta box data.",
    "See register_and_do_post_meta_boxes.",
    "It will run through the functions and hooks that post.php runs to register meta boxes; namely add_meta_boxes, add_meta_boxes_{$post->post_type}, and do_meta_boxes.",
    "Meta boxes are filtered to strip out any core meta boxes, standard custom taxonomy meta boxes, and any meta boxes that have declared themselves as only existing for backward compatibility purposes.",
    "Then each location for this particular type of meta box is checked for whether it is active. If it is not empty a value of true is stored, if it is empty a value of false is stored. This meta box location data is then dispatched by the editor Redux store in INITIALIZE_META_BOX_STATE.",
    "Ideally, this could be done at instantiation of the editor and help simplify this flow. However, it is not possible to know the meta box state before admin_enqueue_scripts, where we are calling initializeEditor(). This will have to do, unless we want to move initializeEditor() to fire in the footer or at some point after admin_head. With recent changes to editor bootstrapping this might now be possible. Test with ACF to make sure.",
    "When rendering the block editor, the meta boxes are rendered to a hidden div #metaboxes.",
    "The Redux store will hold all meta boxes as inactive by default. When\nINITIALIZE_META_BOX_STATE comes in, the store will update any active meta box areas by setting the isActive flag to true. Once this happens React will check for the new props sent in by Redux on the MetaBox component. If that MetaBox is now active, instead of rendering null, a MetaBoxArea component will be rendered. The MetaBox component is the container component that mediates between the MetaBoxArea and the Redux Store. If no meta boxes are active, nothing happens. This will be the default behavior, as all core meta boxes have been stripped.",
    "When the component renders it will store a reference to the meta boxes container and retrieve the meta boxes HTML from the prefetch location.",
    "When the post is updated, only meta box areas that are active will be submitted. This prevents unnecessary requests. No extra revisions are created by the meta box submissions. A Redux action will trigger on REQUEST_POST_UPDATE for any active meta box. See editor/effects.js. The REQUEST_META_BOX_UPDATES action will set that meta box’s state to isUpdating. The isUpdating prop will be sent into the MetaBoxArea and cause a form submission.",
    "When the meta box area is saving, we display an updating overlay, to prevent users from changing the form values while a save is in progress.",
    "An example save url would look like:",
    "mysite.com/wp-admin/post.php?post=1&action=edit&meta-box-loader=1",
    "This url is automatically passed into React via a _wpMetaBoxUrl global variable.",
    "This page mimics the post.php post form, so when it is submitted it will fire all of the normal hooks and actions, and have the proper global state to correctly fire any PHP meta box mumbo jumbo without needing to modify any existing code. On successful submission, React will signal a handleMetaBoxReload to remove the updating overlay.",
    "Most PHP meta boxes should continue to work in the block editor, but some meta boxes that include advanced functionality could break. Here are some common reasons why meta boxes might not work as expected in the block editor:",
    "Please also note that if your plugin triggers a PHP warning or notice to be output on the page, this will cause the HTML document type (<!DOCTYPE html>) to be output incorrectly. This will cause the browser to render using “Quirks Mode”, which is a compatibility layer that gets enabled when the browser doesn’t know what type of document it is parsing. The block editor is not meant to work in this mode, but it can appear to be working just fine. If you encounter issues such as meta boxes overlaying the editor or other layout issues, please check the raw page source of your document to see that the document type definition is the first thing output on the page. There will also be a warning in the JavaScript console, noting the issue.",
    "The JavaScript language continues to evolve, the syntax used to write JavaScript code is not fixed but changes over time. Ecma International is the organization that sets the standard for the language, officially called ECMAScript. A new standard for JavaScript is published each year, the 6th edition published in 2015 is often referred to as ES6. Our usage would more appropriately be ESNext referring to the latest standard. The build step is what converts this latest syntax of JavaScript to a version understood by browsers.",
    "Here are some common ESNext syntax patterns used throughout the Gutenberg project.",
    "The destructuring assignment syntax allows you to pull apart arrays, or properties from objects into their own variable.",
    "For the object const obj = { foo: \"bar\" }",
    "Creating and assigning a new variable foo can be done in a single step: const { foo } = obj;",
    "The curly brackets on the left side tells JavaScript to inspect the object obj for the property foo and assign its value to the new variable of the same name.",
    "Arrow functions provide a shorter syntax for defining a function; this is such a common task in JavaScript that having a syntax a bit shorter is quite helpful.",
    "Before you might define a function like:",
    "Using arrow function, you can define the same using:",
    "Or even shorter, if the function is only a single-line you can omit the\ncurly braces:",
    "In the examples above, using console.log we aren’t too concerned about the return values. However, when using arrow functions in this way, the return value is set whatever the line returns.",
    "For example, our save function could be shortened from:",
    "To:",
    "There are even more ways to shorten code, but you don’t want to take it too far and make it harder to read what is going on.",
    "The import statement is used to import variables or functions from an exported file. You can use destructuring on imports, for example:",
    "This will look in the @wordpress/components package for the exported TextControl variable.",
    "A package or file can also set a default export, this is imported without using the curly brackets. For example",
    "To import, you would use:",
    "Note, you can also shorten edit: edit to just edit as shown above. JavaScript will automatically assign the property edit to the value of edit. This is another form of destructuring.",
    "It helps to become familiar with the ESNext syntax and the common shorter forms. It will give you a greater understanding of reading code examples and what is going on.",
    "Here are a few more resources that may help",
    "ESNext is JavaScript written using syntax and features only available in a version newer than browser support—the support browser versions is referred to as ECMAScript 5 (ES5). JSX is a custom syntax extension to JavaScript, created by React project, that allows you to write JavaScript using a familiar HTML tag-like syntax.",
    "See the ESNext syntax documentation for explanation and examples about common code differences between standard JavaScript and ESNext.",
    "Let’s set up your development environment to use these syntaxes, we’ll cover development for your plugin to work with the Gutenberg project (ie: the block editor). If you want to develop on Gutenberg itself, see the Getting Started documentation.",
    "Browsers cannot interpret or run ESNext and JSX syntaxes, so we must use a transformation step to convert these syntaxes to code that browsers can understand.",
    "There are a few reasons to use ESNext and this extra step of transformation:",
    "There are different tools that can perform this transformation or build step; WordPress uses webpack and Babel.",
    "webpack is a pluggable tool that processes JavaScript and creates a compiled bundle that runs in a browser. Babel transforms JavaScript from one format to another. You use Babel as a plugin to webpack to transform both ESNext and JSX to JavaScript.",
    "The @wordpress/scripts package abstracts these libraries away to standardize and simplify development, so you won’t need to handle the details for configuring webpack or babel. See the @wordpress/scripts package documentation for configuration details.",
    "If you prefer a quick start, you can use one of the examples from the Gutenberg Examples repository and skip below. Each one of the -esnext directories in the examples repository contain the necessary files for working with ESNext and JSX.",
    "Both webpack and Babel are tools written in JavaScript and run using Node.js (node). Node.js is a runtime environment for JavaScript outside of a browser. Simply put, node allows you to run JavaScript code on the command-line.",
    "First, you need to set up Node.js for your development environment. The steps required depend on your operating system, if you have a package manager installed, setup can be as straightforward as:",
    "If you are not using a package manager, see the developer environment setup documentation for setting up Node using nvm, or see the official Node.js download page for installers and binaries.",
    "Note: The build tools and process occur on the command-line, so basic familiarity using a terminal application is required. Some text editors have a terminal built-in that is fine to use; Visual Studio Code and PhpStorm are two popular options.",
    "The Node Package Manager (npm) is a tool included with node. npm allows you to install and manage JavaScript packages. npm can also generate and process a special file called package.json, that contains information about your project and the packages your project uses.",
    "To start a new node project, first create a directory to work in:",
    "You create a new package.json running npm init in your terminal. This will walk you through creating your package.json file:",
    "The next step is to install the packages required. You can install packages using the npm command npm install. If you pass the --save-dev parameter, npm will write the package as a dev dependency in the package.json file. The --save-exact parameter instructs npm to save an exact version of a dependency, not a range of valid versions. See npm install documentation for more details.",
    "Run npm install --save-dev --save-exact @wordpress/scripts",
    "After installing, a node_modules directory is created with the modules and their dependencies.",
    "Also, if you look at package.json file it will include a new section:",
    "The @wordpress/scripts package handles the dependencies and default configuration for webpack and Babel. The scripts package expects the source file to compile to be found at src/index.js, and will save the compiled output to build/index.js.",
    "With that in mind, let’s set up a basic block. Create a file at src/index.js with the following content:",
    "To configure npm to run a script, you use the scripts section in package.json webpack:",
    "You can then run the build using: npm run build.",
    "After the build finishes, you will see the built file created at build/index.js. Enqueue this file in the admin screen as you would any JavaScript in WordPress, see loading JavaScript step in this tutorial, and the block will load in the editor.",
    "The build command in @wordpress/scripts runs in “production” mode. This shrinks the code down so it downloads faster, but makes it difficult to read in the process. You can use the start command which runs in development mode that does not shrink the code, and additionally continues a running process to watch the source file for more changes and rebuilds as you develop.",
    "The start command can be added to the same scripts section of package.json:",
    "Now, when you run npm start a watcher will run in the terminal. You can then edit away in your text editor; after each save, it will automatically build. You can then use the familiar edit/save/reload development process.",
    "Note: keep an eye on your terminal for any errors. If you make a typo or syntax error, the build will fail and the error will be in the terminal.",
    "Because a typical node_modules folder will contain thousands of files that change with every software update, you should exclude node_modules/ from your source control. If you ever start from a fresh clone, simply run npm install in the same folder your package.json is located to pull your required packages.",
    "Likewise, you do not need to include node_modules or any of the above configuration files in your plugin because they will be bundled inside the file that webpack builds. Be sure to enqueue the build/index.js file in your plugin PHP. This is the main JavaScript file needed for your block to run.",
    "Using wp-scripts ver 5.0.0+ build step will also produce an index.asset.php file that contains an array of dependencies and a version number for your block. For our simple example above, it is something like:\narray('dependencies' => array('wp-element', 'wp-polyfill'), 'version' => 'fc93c4a9675c108725227db345898bcc');",
    "Here is how to use this asset file to automatically set the dependency list for enqueuing the script. This prevents having to manually update the dependencies, it will be created based on the package imports used within your block.",
    "See ESNext blocks in gutenberg-examples repo for full examples.",
    "Yes, the initial setup is a bit more involved, but the additional features and benefits are usually worth the trade off in setup time.",
    "With a setup in place, the standard workflow is:",
    "Historically, JavaScript files loaded in a web page share the same scope. This means that a global variable declared in one file will be seen by the code in other files.",
    "To see how this works, create a web page that loads three JavaScript files. The first.js file will be:",
    "Let’s create second.js as:",
    "And, finally, third.js:",
    "When loaded on the same page, first.js and second.js will output the plugin name declared within itself. They will override the value of the global pluginName variable if one was already declared. It’s not known what gets printed in the console when third.js is executed, though – it depends on the value of the global pluginName variable when third.js is executed, which will depend on the order the files are loaded.",
    "This behavior can be problematic, and is the reason we need to scope the code. By scoping the code—ensuring each file is isolated from each other—we can prevent values unexpectedly changing.",
    "In JavaScript, you can scope your code by writing it within a function. Functions have “local scope”, or a scope that is specific only to that function. Additionally, in JavaScript you can write anonymous functions, functions without a name, which will also prevent your function name from being overridden in the global scope.",
    "Taking advantage of these two JavaScript features, first.js could be scoped as:",
    "second.js as:",
    "And third.js:",
    "With this trick, the different files won’t override each other’s variables. Unfortunately, they also won’t work as expected, because these functions are being called by no one. We’ve only defined the functions; we haven’t executed them yet.",
    "It turns out there are a few ways to execute anonymous functions in JavaScript, but the most popular is this:",
    "You wrap your function between parentheses, and then call it like any other named function. This pattern is known as Immediately-Invoked Function Expression, or IIFE for short.",
    "This is first.js written as an IIFE:",
    "And this is second.js:",
    "And this is third.js:",
    "The code in first.js and second.js is unaffected by other variables in the global scope, so it’s safe and deterministic.",
    "On the other hand, third.js doesn’t declare a pluginName variable, but needs to be provided one. IIFEs still allow you to take a variable from the global scope and pass it into your function. Provided that there was a global window.pluginName variable, we could rewrite third.js as:",
    "At the beginning we mentioned that:",
    "Historically, JavaScript files loaded in a web page share the same scope.",
    "Notice the historically.",
    "JavaScript has evolved quite a bit since its creation. As of 2015, the language supports modules, also known as ES6 modules, that introduce separate scope per file: a global variable in first.js wouldn’t be exposed to second.js. This feature is already supported by modern browsers, but not all of them do. If your code needs to run in browsers that don’t support modules, your last resort is using IIFEs.",
    "The Block Editor Handbook shows JavaScript examples in two syntaxes: JSX and Plain.",
    "Plain refers to JavaScript code compatible with WordPress’s minimum target for browser support without requiring a transpilation step. This step is commonly referred to as a build process.",
    "“JSX” doesn’t refer to a specific version of JavaScript, but refers to the latest language definition plus JSX syntax, a syntax that blends HTML and JavaScript. JSX makes it easier to read and write markup code, but does require a build step to transpile into code compatible with browsers. Webpack and babel are the tools that perform this transpilation step.",
    "For simplicity, the JavaScript tutorial uses the Plain definition, without JSX. This code can run straight in your browser and does not require an additional build step. In many cases, it is perfectly fine to follow the same approach for simple plugins or experimenting. As your codebase grows in complexity it might be a good idea to switch to JSX. You will find the majority of code and documentation across the block editor uses JSX.",
    "See the JavaScript Build Setup documentation for setting up a development environment using JSX syntax.",
    "See the ESNext syntax documentation for explanation and examples about common code differences between standard JavaScript and more modern approaches.",
    "If you’re having trouble getting your JavaScript code to work, here are a few tips on how to find errors to help you troubleshoot.",
    "The console log is a JavaScript developer’s best friend. It is a good practice to work with it open, as it displays errors and notices in one place. See Mozilla’s JavaScript console documentation for more.",
    "To open the JavaScript console, find the correct key combination for your browser and OS:",
    "Your first step in debugging should be to check the JavaScript console for any errors. Here is an example, which shows a syntax error on line 6:",
    "You can also write directly to the console from your JavaScript code for debugging and checking variable values. Use the console.log function like so:",
    "Or if you want to include a message and variable, in this case display the contents of settings variable:",
    "You can also write JavaScript directly in the console if you want to test a short command. The commands you run apply to the open browser window. Try this example with the wp.data package to count how many blocks are in the editor. Play with it and also try to use the console to browse available functions.",
    "If you would like to pause code execution at a certain line of code, you can write debugger; anywhere in your code. Once the browser sees the statement debugger;, it will pause execution of your code. This allows you to inspect all variables around the debugger statement, which is very useful. See this MDN page for more information.",
    "If you are not seeing your changes, and no errors, check that your JavaScript file is being enqueued. Open the page source in your browser’s web inspector (some browsers may allow you to view the page source by right clicking on the page and selecting “View Page Source”), and look for the <script> tag that loads your file. In the JavaScript tutorial example, you would search for myguten.js and confirm it is being loaded.",
    "If you do not see the file being loaded, double check the enqueue function is correct. You can also check your server logs to see if there is an error messages.",
    "Add a test message to confirm your JavaScript is loading, add a console.log(\"Here\"); at the top of your code, and confirm the message is shown. If not, it is likely the file is not loading properly, review the loading JavaScript page for details on enqueuing JavaScript properly.",
    "The console log will show an error if a dependency your JavaScript code uses has not been declared and loaded in the browser. In the JavaScript tutorial example, if myguten.js script is enqueued without declaring the wp-blocks dependency, the console log will show:",
    "You can correct by checking your wp_enqueue_script function includes all packages listed that are used:",
    "For automated dependency management, it is recommended to use wp-scripts to build step your JavaScript.",
    "Let’s look at using the Block Style example to extend the editor. This example allows you to add your own custom CSS class name to any core block type.",
    "Replace the existing console.log() code in your myguten.js file with:",
    "Important: Notice that you are using a function from wp.blocks package. This means you must specify it as a dependency when you enqueue the script. Update the myguten-plugin.php file to:",
    "The last argument in the wp_enqueue_script() function is an array of dependencies. WordPress makes packages available under the wp namespace. In the example, you use wp.blocks to access the items that the blocks package exports (in this case the registerBlockStyle() function).",
    "See Packages for list of available packages and what objects they export.",
    "After you have updated both JavaScript and PHP files, go to the block editor and create a new post.",
    "Add a quote block, and in the right sidebar under Styles, you will see your new Fancy Quote style listed.",
    "Click the Fancy Quote to select and apply that style to your quote block:",
    "Even if you Preview or Publish the post you will not see a visible change. However, if you look at the source, you will see the is-style-fancy-quote class name is now attached to your quote block.",
    "Let’s add some style. In your plugin folder, create a style.css file with:",
    "You enqueue the CSS file by adding the following to your myguten-plugin.php:",
    "Now when you view in the editor and publish, you will see your Fancy Quote style, a delicious tomato color text:",
    "With the plugin in place, you can add the code that loads the JavaScript. This methodology follows the standard WordPress procedure of enqueuing scripts, see enqueuing section of the Plugin Handbook.",
    "Add the following code to your myguten-plugin.php file:",
    "The enqueue_block_editor_assets hook is used, which is called when the block editor loads, and will enqueue the JavaScript file myguten.js.",
    "Create a file called myguten.js and add:",
    "Next, create a new post in the block editor.",
    "We’ll check the JavaScript console in your browser’s Developer Tools, to see if the message is displayed. If you’re not sure what developer tools are, Mozilla’s “What are browser developer tools?” documentation provides more information, including more background on the JavaScript console.",
    "If your code is registered and enqueued correctly, you should see a message in your console:",
    "Note for Theme Developers: The above method of enqueuing is used for plugins. If you are extending the block editor for your theme there is a minor difference, you will use the get_template_directory_uri() function instead of plugins_url(). So for a theme, the enqueue example is:",
    "At this point, you have a plugin in the directory wp-content/plugins/myguten-plugin with two files: the PHP server-side code in myguten-plugin.php, and the JavaScript which runs in the browser in myguten.js.",
    "This puts all the initial pieces in place for you to start extending the block editor.",
    "The primary means of extending WordPress is the plugin. The WordPress Plugin Basics documentation provides details on building a plugin.",
    "The quickest way to start is to create a new directory in wp-content/plugins/ to contain your plugin code. For this example, call it myguten-plugin.",
    "Inside this new directory, create a file called myguten-plugin.php. This is the server-side code that runs when your plugin is active.",
    "For now, add the following code in the file:",
    "To summarize, you should have a directory wp-content/plugins/myguten-plugin/ which has the single file myguten-plugin.php.",
    "Once that is in place, go to your plugins list in wp-admin and you should see your plugin listed.",
    "Click Activate and your plugin will load with WordPress.",
    "The Block Editor Handbook contains information on the APIs available for working with this new setup. The goal of this tutorial is to get you comfortable using the API reference and snippets of code found within.",
    "JavaScript is a programming language which is loaded and executed in your web browser; compared to PHP which is run by a web server with the results sent to the browser, typically as HTML.",
    "The block editor introduced in WordPress 5.0 is written in JavaScript, with the code run in the browser, and not on the server, this allows for a richer and more dynamic user experience. It also requires you to learn how to use JavaScript to extend and enhance the block editor.",
    "The Format API makes it possible for developers to add custom buttons to the formatting toolbar and have them apply a format to a text selection. Bold is an example of a standard button in the formatting toolbar.",
    "In WordPress lingo, a format is a HTML tag with text-level semantics used to give some special meaning to a text selection. For example, in this tutorial, the button to be hooked into the format toolbar will wrap a particular text selection with the <samp> HTML tag.",
    "This guide assumes you are already familiar with WordPress plugins and loading JavaScript with them, see the Plugin Handbook or JavaScript Tutorial to brush up.",
    "The complete format-api example is available that you can use as a reference for your setup.",
    "The guide will refer to src/index.js as the JavaScript file where the changes are made. After each step, running npm run build creates build/index.js that is then loaded on the post editor screen.",
    "The first step is to register the new format, add src/index.js with the following:",
    "The list of available format types is maintained in the core/rich-text store. You can query the store to check that your custom format is now available.",
    "Run this code in your browser’s console to confirm:",
    "It’ll return an array containing the format types, including your own.",
    "With the format available, the next step is to add a button to the UI by registering a component for the edit property.",
    "Using the RichTextToolbarButton component, update src/index.js:",
    "Let’s check that everything is working as expected. Build and reload and then select any block containing text like for example the paragraph block. Confirm the new button was added to the format toolbar.",
    "Click the button and check the console.log for the “toggle format” message.",
    "If you do not see the button or message, double check you are building and loading the JavScript properly; and check the console.log for any errors.",
    "Next is to update the button to apply a format when clicked.",
    "For our example, the <samp> tag format is binary – either a text selection has the tag or not, so we can use the toggleFormat method from the RichText package.",
    "Update src/index.js changing the onClick action:",
    "Confirm it is working: first build and reload, then make a text selection and click the button. Your browser will likely display that selection differently than the surrounding text.",
    "You can also confirm by switching to HTML view (Code editor Ctrl+Shift+Alt+M) and see the text selection wrapped with <samp> HTML tags.",
    "Use the className option when registering to add your own custom class to the tag. You can use that class and custom CSS to target that element and style as you wish.",
    "By default, the button is rendered on every rich text toolbar (image captions, buttons, paragraphs, etc). You can render the button only on blocks of a certain type by using the data API.",
    "Here is an example that only shows the button for Paragraph blocks:",
    "Using the RichTextToolbarButton component, the button is added to the default dropdown menu. You can add the button directly to the toolbar by using the BlockControls component.",
    "If you run into errors:",
    "Reference documentation used in this guide:",
    "The guide showed you how to add a button to the toolbar and have it apply a format to the selected text. Try it out and see what you can build with it in your next plugin.",
    "Download the format-api example from the gutenberg-examples repository.",
    "‘Feature flags’ are variables that allow you to prevent specific code in the Gutenberg project from being shipped to WordPress core, and to run certain experimental features only in the plugin.",
    "The process.env.IS_GUTENBERG_PLUGIN is an environment variable whose value ‘flags’ whether code is running within the Gutenberg plugin.",
    "When the codebase is built for the plugin, this variable will be set to true. When building for WordPress core, it will be set to false or undefined.",
    "A plugin-only function or constant should be exported using the following ternary syntax:",
    "In the above example, the pluginOnlyFeature export will be undefined in non-plugin environments such as WordPress core.",
    "If you’re attempting to import and call a plugin-only feature, be sure to wrap the function call in an if statement to avoid an error:",
    "During the webpack build, instances of process.env.IS_GUTENBERG_PLUGIN will be replaced using webpack’s define plugin.",
    "For example, in the following code –",
    "– the variable process.env.IS_GUTENBERG_PLUGIN will be replaced with the boolean true during the plugin-only build:",
    "This ensures that code within the body of the if statement will always be executed.",
    "In WordPress core, the process.env.IS_GUTENBERG_PLUGIN variable is replaced with undefined. The built code looks like this:",
    "undefined evaluates to false so the plugin-only feature will not be executed.",
    "For production builds, webpack ‘minifies’ the code, removing as much unnecessary JavaScript as it can.",
    "One of the steps involves something known as ‘dead code elimination’. For example, when the following code is encountered, webpack determines that the surrounding if statement is unnecessary:",
    "The condition will always evaluate to true, so webpack removes it, leaving behind the code that was in the body:",
    "Similarly, when building for WordPress core, the condition in the following if statement always resolves to false:",
    "In this case, the minification process will remove the entire if statement including the body, ensuring plugin-only code is not included in WordPress core build.",
    "Introducing complexity may prevent webpack’s minifier from identifying and therefore eliminating dead code. Therefore it is recommended to use the examples in this document to ensure your feature flag functions as intended. For further details, see the Dead Code Elimination section.",
    "The purpose of this guide is to offer various ways one can lock down and curate the experience of using WordPress, especially with the introduction of more design tools and full site editing functionality.",
    "For information around adding functionality to a theme, rather than curating and locking, please review this guide on Converting a classic theme to a block theme.",
    "Lock the ability to move or remove specific blocks",
    "Users have the ability to lock and unlock blocks via the editor. The locking UI has options for preventing blocks from being moved within the content canvas or removed:",
    "Keep in mind that you can apply locking options to blocks nested inside of a containing block by turning on the “Apply to all blocks inside” option. However, you cannot mass lock blocks otherwise.",
    "Lock the ability to edit certain blocks",
    "Alongside the ability to lock moving or removing blocks, the Navigation Block and Reusable block have an additional capability: lock the ability to edit the contents of the block. This locks the ability to make changes to any blocks inside of either block type.",
    "Apply block locking to patterns or templates",
    "When building patterns or templates, theme authors can use these same UI tools to set the default locked state of blocks. For example, a theme author could lock various pieces of a header. Keep in mind that by default, users with editing access can unlock these blocks. Here’s an example of a pattern with various blocks locked in different ways and here’s more context on creating a template with locked blocks. You can build these patterns in the editor itself, including adding locking options, before following the documentation to register them.",
    "Apply content only editing in patterns or templates",
    "This functionality was introduced in WordPress 6.1. In contrast to block locking, which disables the ability to move or remove blocks, content only editing is both designed for use at the pattern or template level and hides all design tools, while still allowing for the ability to edit the content of the blocks. This provides a great way to simplify the interface for users and preserve a design. When this option is added, the following changes occur:",
    "This option can be applied to Columns, Cover, and Group blocks as well as third-party blocks that have the templateLock attribute in its block.json. To adopt this functionality, you need to use \"templateLock\":\"contentOnly\". Here’s an example of a pattern with this functionality in place. For more information, please review the relevant documentation.",
    "Note: There is no UI in place to manage content locking and it must be managed at the code level.",
    "Change permissions to control locking ability",
    "Agencies and plugin authors can offer an even more curated experience by limiting which users have permission to lock and unlock blocks. By default, anyone who is an administrator will have access to lock and unlock blocks.",
    "Developers can add a filter to the block_editor_settings_all hook to configure permissions around locking blocks.  The hook passes two parameters to the callback function:",
    "$context – An instance of WP_Block_Editor_Context, an object that contains information about the current editor.",
    "Specifically, developers can alter the $settings['canLockBlocks'] value by setting it to true or false, typically by running through one or more conditional checks.",
    "The following example disables block locking permissions for all users when editing a page:",
    "Another common use case may be to only allow users who can edit the visual design of the site (theme editing) to lock or unlock blocks.  The best option would be to test against the edit_theme_options capability, as shown in the following code snippet:",
    "Developers may use any type of conditional check to determine who can lock/unlock blocks. This is merely a small sampling of what is possible via the filter hook.",
    "Define default options",
    "Since theme.json acts as a configuration tool, there are numerous ways to define at a granular level what options are available. This section will use duotone as an example since it showcases a feature that cuts across a few blocks and allows for varying levels of access.",
    "Duotone with Core options and customization available for each image related block:",
    "Duotone with theme defined color options, Core options, and customization available for each image related block:",
    "Duotone with defined default options and all customization available for the Post Featured Image block:",
    "Duotone with only defined default options and core options available for the Post Featured Image block (no customization):",
    "Limit options on a per block basis",
    "Beyond defining default values, using theme.json allows you to also remove options entirely and instead rely on what the theme has set in place. Below is a visual showing two extremes with the same paragraph block:",
    "Continuing the examples with duotone, this means you could allow full access to all Duotone functionality for Image blocks and only limit the Post Featured Image block like so:",
    "You can read more about how best to turn on/off options with theme.json here.",
    "Disable inherit default layout",
    "To disable the “Inherit default layout” setting for container blocks like the Group block, remove the following section:",
    "Limit options globally",
    "When using theme.json in a block or classic theme, these settings will stop the default color and typography controls from being enabled globally, greatly limiting what’s possible:",
    "To enable something from the above, just set whatever value you want to change to true for more granularity.",
    "The theme.json file is a great way to control interface options, but it only allows for global or block-level modifications, which can be limiting in some scenarios.",
    "For instance, in the previous section, color and typography controls were disabled globally using theme.json. But let’s say you want to enable color settings for users who are Administrators.",
    "To provide more flexibility, WordPress 6.1 introduced server-side filters allowing you to customize theme.json data at four different data layers.",
    "In the following example, the data from the current theme’s theme.json file is updated using the wp_theme_json_data_theme filter. Color controls are restored if the current user is an Administrator.",
    "The filter receives an instance of the WP_Theme_JSON_Data class with the data for the respective layer. Then, you pass new data in a valid theme.json-like structure to the update_with( $new_data ) method. A theme.json version number is required in $new_data.",
    "Read more about this functionality in the Filters for theme.json data dev note.",
    "Remove access to the template editor",
    "Whether you’re using theme.json in a Classic Theme or Block Theme, you can add the following to your functions.php file to remove access to the Template Editor that is available when editing posts or pages:",
    "remove_theme_support( 'block-templates');",
    "This prevents both the ability to both create new block templates or edit them from within the Post Editor.",
    "Create an allow or disallow list to limit block options",
    "There might be times when you don’t want access to a block at all to be available for users. To control what’s available in the inserter, you can take two approaches: an allow list that disables all blocks except those on the list or a deny list that unregisters specific blocks.",
    "Disable pattern directory",
    "To fully remove patterns bundled with WordPress core from being accessed in the Inserter, the following can be added to your functions.php file:",
    "remove_theme_support( 'core-block-patterns' );",
    "Prioritize starter patterns for any post type",
    "When a user creates new content, regardless of post type, they are met with an empty canvas. However, that experience can be improved thanks to the option to have patterns from a specific type prioritized upon creation of a new piece of content. The modal appears each time the user creates a new item when there are patterns on their website that declare support for the core/post-content block types. By default, WordPress does not include any of these patterns, so the modal will not appear without at least two of these post content patterns being added.",
    "To opt into this, include core/post-content in the Block Types for your pattern. From there you can control which post types the pattern should show up for via the Post Types option. Here’s an example of a pattern that would appear when creating a new post.",
    "Read more about this functionality in the Page creation patterns in WordPress 6.0 dev note and note that WordPress 6.1 brought this functionality to all post types.",
    "Lock patterns",
    "As mentioned in the prior section on Locking APIs, aspects of patterns themselves can be locked so that the important aspects of the design can be preserved. Here’s an example of a pattern with various blocks locked in different ways. You can build these patterns in the editor itself, including adding locking options, before following the documentation to register them.",
    "Prioritize specific patterns from the Pattern Directory",
    "With WordPress 6.0 themes can register patterns from Pattern Directory through theme.json. To accomplish this, themes should use the new patterns top level key in theme.json. Within this field, themes can list patterns to register from the Pattern Directory. The patterns field is an array of pattern slugs from the Pattern Directory. Pattern slugs can be extracted by the url in a single pattern view at the Pattern Directory. Example: This url https://wordpress.org/patterns/pattern/partner-logos the slug is partner-logos.",
    "Note that this field requires using version 2 of theme.json. The content creator will then find the respective Pattern in the inserter “Patterns” tab in the categories that match the categories from the Pattern Directory.",
    "Keep in mind that the above approaches can be combined as you see fit. For example, you can provide custom patterns to use when creating a new page while also limiting the amount of customization that can be done to aspects of them, like only allowing certain preset colors to be used for the background of a Cover block or locking down what blocks can be deleted. When considering the approaches to take, think about the specific ways you might want to both open up the experience and curate it.",
    "In the previous part we added an ability to create new pages,\nand in this part we will add a Delete feature to our app.",
    "Here’s a glimpse of what we’re going to build:",
    "Let’s start by creating the DeletePageButton component and updating the user interface of our PagesList component:",
    "This is what the PagesList should look like now:",
    "In Gutenberg data, we delete entity records from the WordPress REST API using the deleteEntityRecord action. It sends the request, processes the result, and updates the cached data in the Redux state.",
    "Here’s how you can try deleting entity records in your browser’s dev tools:",
    "Once the REST API request is finished, you will notice one of the pages has disappeared from the list. This is because that list is populated by the useSelect() hook and the select( coreDataStore ).getEntityRecords( 'postType', 'page' ) selector. Anytime the underlying data changes, the list gets re-rendered with fresh data. That’s pretty convenient!",
    "Let’s dispatch that action when DeletePageButton is clicked:",
    "It may take a few moments for the REST API request to finish after clicking the Delete button. Let’s communicate that with a <Spinner /> component similarly to what we did in the previous parts of this tutorial.",
    "We’ll need the isDeletingEntityRecord selector for that. It is similar to the isSavingEntityRecord selector we’ve already seen in part 3: it returns true or false and never issues any HTTP requests:",
    "Here’s what it looks like in action:",
    "We optimistically assumed that a delete operation would always succeed. Unfortunately, under the hood, it is a REST API request that can fail in many ways:",
    "To tell the user when any of these errors happen, we need to extract the error information using the getLastEntityDeleteError selector:",
    "Here’s how we can apply it in DeletePageButton:",
    "The error object comes from the @wordpress/api-fetch and contains information about the error. It has the following properties:",
    "There are many ways to turn that object into an error message, but in this tutorial, we will display the error.message.",
    "WordPress has an established pattern of displaying status information using the Snackbar component. Here’s what it looks like in the Widgets editor:",
    "Let’s use the same type of notifications in our plugin! There are two parts to this:",
    "Our application only knows how to display pages but does not know how to display notifications. Let’s tell it!",
    "WordPress conveniently provides us with all the React components we need to render notifications. A component called Snackbar represents a single notification:",
    "We won’t use Snackbar directly, though. We’ll use the SnackbarList component, which can display multiple notices using smooth animations and automatically hide them after a few seconds. In fact, WordPress uses the same component used in the Widgets editor and other wp-admin pages!",
    "Let’s create our own Notifications components:",
    "The basic structure is in place, but the list of notifications it renders is empty. How do we populate it? We’ll lean on the same package as WordPress: @wordpress/notices.",
    "Here’s how:",
    "This tutorial is focused on managing the pages and won’t discuss the above snippet in detail. If you’re interested in the details of @wordpress/notices, the handbook page is a good place to start.",
    "Now we’re ready to tell the user about any errors that may have occurred.",
    "With the SnackbarNotices component in place, we’re ready to dispatch some notifications! Here’s how:",
    "Great! DeletePageButton is now fully aware of errors. Let’s see that error message in action. We’ll trigger an invalid delete and let it fail. One way to do this is to multiply the pageId by a large number:",
    "Once you refresh the page and click any Delete button, you should see the following error message:",
    "Fantastic! We can now remove the pageId = pageId * 1000; line.",
    "Let’s now try actually deleting a page. Here’s what you should see after refreshing your browser and clicking the Delete button:",
    "And that’s it!",
    "All the pieces are in place, great! Here’s all the changes we’ve made in this chapter:",
    "In the previous part we created an Edit page feature, and in this part we will add a Create page feature. Here’s a glimpse of what we’re going to build:",
    "Let’s start by building a button to display the create page form. It’s similar to an Edit button we have built in the part 3:",
    "Great! Now let’s make MyFirstApp display our shiny new button:",
    "The final result should look as follows:",
    "Now that the button is in place, we can focus entirely on building the form. This tutorial is about managing data, so we will not build a complete page editor. Instead, the form will only contain one field: post title.",
    "Luckily, the EditPageForm we built in part three already takes us 80% of the way there. The bulk of the user interface is already available, and we will reuse it in the CreatePageForm. Let’s start by extracting the form UI into a separate component:",
    "This code quality change should not alter anything about how the application works. Let’s try to edit a page just to be sure:",
    "Great! The edit form is still there, and now we have a building block to power the new CreatePageForm.",
    "The only thing that CreatePageForm component must do is to provide the following seven properties needed to render the PageForm component:",
    "Let’s see how we can do that:",
    "The EditPageForm updated and saved an existing entity record that lived in the Redux state. Because of that, we relied on the editedEntityRecords selector.",
    "In case of the CreatePageForm however, there is no pre-existing entity record. There is only an empty form. Anything that the user types is local to that form, which means we can keep track of it using the React’s useState hook:",
    "In the EditPageForm, we dispatched the saveEditedEntityRecord('postType', 'page', pageId ) action to save the edits that lived in the Redux state.",
    "In the CreatePageForm however, we do not have any edits in the Redux state, nor we do have a pageId. The action we need to dispatch in this case is called saveEntityRecord (without the word Edited in the name) and it accepts an object representing the new entity record instead of a pageId.",
    "The data passed to saveEntityRecord is sent via a POST request to the appropriate REST API endpoint. For example, dispatching the following action:",
    "Triggers a POST request to the /wp/v2/pages WordPress REST API endpoint with a  single field in the request body: title=Test.",
    "Now that we know more about saveEntityRecord, let’s use it in CreatePageForm.",
    "There is one more detail to address: our newly created pages are not yet picked up by the PagesList. Accordingly to the REST API documentation, the /wp/v2/pages endpoint creates (POST requests) pages with status=draft by default, but returns (GET requests) pages with status=publish. The solution is to pass the status parameter explicitly:",
    "Go ahead and apply that change to your local CreatePageForm component, and let’s tackle the remaining two props.",
    "The EditPageForm  retrieved the error and progress information via the getLastEntitySaveError and isSavingEntityRecord selectors. In both cases, it passed the following three arguments: ( 'postType', 'page', pageId ).",
    "In CreatePageForm however, we do not have a pageId. What now? We can skip the pageId argument to retrieve the information about the entity record without any id – this will be the newly created one. The useSelect call is thus very similar to the one from EditPageForm:",
    "And that’s it! Here’s what our new form looks like in action:",
    "Here’s everything we built in this chapter in one place:",
    "All that’s left is to refresh the page and enjoy the form:",
    "This part is about adding an Edit feature to our app. Here’s a glimpse of what we’re going to build:",
    "We can’t have an Edit form without an Edit button, so let’s start by adding one to our PagesList component:",
    "The only change in PagesList is the additional column labeled Actions:",
    "Our button looks nice but doesn’t do anything yet. To display an edit form, we need to have one first – let’s create it:",
    "Now let’s make the button display the form we just created. As this tutorial is not focused on web design, we will wire the two together using a component that requires the least amount of code: Modal. Let’s update PageEditButton accordingly:",
    "When you click the Edit button now, you should see the following modal:",
    "Great! We now have a basic user interface to work with.",
    "We want the EditPageForm to display the title of the currently edited page. You may have noticed that it doesn’t receive a page prop, only pageId. That’s okay. Gutenberg Data allows us to easily access entity records from any component.",
    "In this case, we need to use the getEntityRecord selector. The list of records is already available thanks to the getEntityRecords call in MyFirstApp, so there won’t even be any additional HTTP requests involved – we’ll get the cached record right away.",
    "Here’s how you can try it in your browser’s dev tools:",
    "Let’s update EditPageForm accordingly:",
    "Now it should look like this:",
    "There’s one problem with our Page title field: you can’t edit it. It receives a fixed value but doesn’t update it when typing. We need an onChange handler.",
    "You may have seen a pattern similar to this one in other React apps. It’s known as a “controlled component”:",
    "Updating entity records in Gutenberg Data is similar but instead of using setTitle to store in local (component level) state, we use the editEntityRecord action which stores the updates in the Redux state. Here’s how you can try it out in your browser’s dev tools:",
    "At this point, you may ask how is editEntityRecord better than useState? The answer is that it offers a few features you wouldn’t otherwise get.",
    "Firstly, we can save the changes as easily as we retrieve the data and ensure that all caches will be correctly updated.",
    "Secondly, the changes applied via editEntityRecord are easily undo-able via the undo and redo actions.",
    "Lastly, because the changes live in the Redux state, they are “global” and can be accessed by other components. For example, we could make the PagesList display the currently edited title.",
    "To that last point, let’s see what happens when we use getEntityRecord to access the entity record we just updated:",
    "It doesn’t reflect the edits. What’s going on?",
    "Well, <PagesList /> renders the data returned by getEntityRecord(). If getEntityRecord() reflected the updated title, then anything the user types in the TextControl would be immediately displayed inside <PagesList />, too. This is not what we want. The edits shouldn’t leak outside the form until the user decides to save them.",
    "Gutenberg Data solves this problem by making a distinction between Entity Records and Edited Entity Records. Entity Records reflect the data from the API and ignore any local edits, while Edited Entity Records also have all the local edits applied on top. Both co-exist in the Redux state at the same time.",
    "Let’s see what happens if we call getEditedEntityRecord:",
    "As you can see, the title of an Entity Record is an object, but the title of an Edited Entity record is a string.",
    "This is no accident. Fields like title, excerpt, and content may contain shortcodes or dynamic blocks, which means they can only be rendered on the server. For such fields, the REST API exposes both the raw markup and the rendered string. For example, in the block editor, content.rendered could used as a visual preview, and content.raw could be used to populate the code editor.",
    "So why is the content of an Edited Entity Record a string? Since Javascript is not be able to properly render arbitrary block markup, it stores only the raw markup without the rendered part. And since that’s a string, the entire field becomes a string.",
    "We can now update EditPageForm accordingly. We can access the actions using the useDispatch hook similarly to how we use useSelect to access selectors:",
    "We added an onChange handler to keep track of edits via the editEntityRecord action and then changed the selector to getEditedEntityRecord so that page.title always reflects the changes.",
    "This is what it looks like now:",
    "Now that we can edit the page title let’s also make sure we can save it. In Gutenberg data, we save changes to the WordPress REST API using the saveEditedEntityRecord action. It sends the request, processes the result, and updates the cached data in the Redux state.",
    "Here’s an example you may try in your browser’s dev tools:",
    "The above snippet saved a new title. Unlike before, getEntityRecord now reflects the updated title:",
    "Entity records are updated to reflect any saved changes right after the REST API request is finished.",
    "This is how the EditPageForm looks like with a working Save button:",
    "It works, but there’s still one thing to fix: the form modal doesn’t automatically close because we never call onSaveFinished. Lucky for us, saveEditedEntityRecord returns a promise that resolves once the save operation is finished. Let’s take advantage of it in EditPageForm:",
    "We optimistically assumed that a save operation would always succeed. Unfortunately, it may fail in many ways:",
    "To tell the user when any of these happens, we have to make two adjustments. We don’t want to close the form modal when the update fails. The promise returned by saveEditedEntityRecord is resolved with an updated record only if the update actually worked. When something goes wrong, it resolves with an empty value. Let’s use it to keep the modal open:",
    "Great! Now, let’s display an error message. The failure details can be grabbed using the getLastEntitySaveError selector:",
    "Here’s how we can use it in EditPageForm:",
    "Great! EditPageForm is now fully aware of errors.",
    "Let’s see that error message in action. We’ll trigger an invalid update and let it fail. The post title is hard to break, so let’s set a date property to -1 instead – that’s a guaranteed validation error:",
    "Once you refresh the page, open the form, change the title, and hit save, you should see the following error message:",
    "Fantastic! We can now restore the previous version of handleChange and move on to the next step.",
    "There is one last problem with our form: no visual feedback. We can’t be quite sure whether the Save button worked until either the form disappears or an error message shows.",
    "We’re going to clear it up and communicate two states to the user: Saving and No changes detected. The relevant selectors are isSavingEntityRecord and hasEditsForEntityRecord. Unlike getEntityRecord, they never issue any HTTP requests but only return the current entity record state.",
    "Let’s use them in EditPageForm:",
    "We can now use isSaving and hasEdits to display a spinner when saving is in progress and grey out the save button when there are no edits:",
    "Note that we disable the save button when there are no edits and when the page is currently being saved. This is to prevent the user from accidentally pressing the button twice.",
    "Also, interrupting a save in progress is not supported by @wordpress/data so we also conditionally disabled the cancel button.",
    "All the pieces are in place, great! Here’s everything we built in this chapter in one place:",
    "In this part, we will build a filterable list of all WordPress pages. This is what the app will look like at the end of this section:",
    "Let’s see how we can get there step by step.",
    "Let’s start by building a minimal React component to display the list of pages:",
    "Note that this component does not fetch any data yet, only presents the hardcoded list of pages. When you refresh the page, you should see the following:",
    "The hard-coded sample page isn’t very useful. We want to display your actual WordPress pages so let’s fetch the actual list of pages from the WordPress REST API.",
    "Before we start, let’s confirm we actually have some pages to fetch. Within WPAdmin, Navigate to Pages using the sidebar menu and ensure it shows at least four or five Pages:",
    "If it doesn’t, go ahead and create a few pages – you can use the same titles as on the screenshot above. Be sure to publish and not just save them.",
    "Now that we have the data to work with, let’s dive into the code. We will take advantage of the @wordpress/core-data package which provides resolvers, selectors, and actions to work with the WordPress core API. @wordpress/core-data builds on top of the @wordpress/data package.",
    "To fetch the list of pages, we will use the getEntityRecords selector. In broad strokes, it will issue the correct API request, cache the results, and return the list of the records we need. Here’s how to use it:",
    "If you run that following snippet in your browser’s dev tools, you will see it returns null. Why? The pages are only requested by the getEntityRecords resolver after first running the selector. If you wait a moment and re-run it, it will return the list of all pages.",
    "Note: To run this type of command directly make sure your browser is displaying an instance of the block editor (any page will do). Otherwise the select( 'core' ) function won’t be available, and you’ll get an error.",
    "Similarly, the MyFirstApp component needs to re-run the selector once the data is available. That’s exactly what the useSelect hook does:",
    "Note that we use an import statement inside index.js. This enables the plugin to automatically load the dependencies using wp_enqueue_script. Any references to coreDataStore are compiled to the same wp.data reference we use in browser’s devtools.",
    "useSelect takes two arguments: a callback and dependencies. In broad strokes, it re-runs the callback whenever either the dependencies or the underlying data store changes. You can learn more about useSelect in the data module documentation.",
    "Putting it together, we get the following code:",
    "Note that post title may contain HTML entities like &aacute;, so we need to use the decodeEntities function to replace them with the symbols they represent like á.",
    "Refreshing the page should display a list similar to this one:",
    "The list of pages is short for now; however, the longer it grows, the harder it is to work with. WordPress admins typically solves this problem with a search box – let’s implement one too!",
    "Let’s start by adding a search field:",
    "Note that instead of using an input tag, we took advantage of the SearchControl component. This is what it looks like:",
    "The field starts empty, and the contents are stored in the searchTerm state value. If you aren’t familiar with the useState hook, you can learn more in React’s documentation.",
    "We can now request only the pages matching the searchTerm.",
    "After checking with the WordPress API documentation, we see that the /wp/v2/pages endpoint accepts a search query parameter and uses it to  limit results to those matching a string. But how can we use it? We can pass custom query parameters as the third argument to getEntityRecords as below:",
    "Running that snippet in your browser’s dev tools will trigger a request to /wp/v2/pages?search=home instead of just /wp/v2/pages.",
    "Let’s mirror this in our useSelect call as follows:",
    "The searchTerm is now used as a search query parameter when provided. Note that searchTerm is also specified inside the list of useSelect dependencies to make sure getEntityRecords is re-run when the searchTerm changes.",
    "Finally, here’s how MyFirstApp looks once we wire it all together:",
    "Voila! We can now filter the results:",
    "Let’s take a pause for a moment to consider the downsides of an alternative approach we could have taken – working with the API directly. Imagine we sent the API requests directly:",
    "Working outside of core-data, we would need to solve two problems here.",
    "Firstly, out-of-order updates. Searching for „About” would trigger five API requests filtering for A, Ab, Abo, Abou, and About. These requests could finish in a different order than they started. It is possible that search=A would resolve after _ search=About_ and thus we’d display the wrong data.",
    "Gutenberg data helps by handling the asynchronous part behind the scenes. useSelect remembers the most recent call and returns only the data we expect.",
    "Secondly, every keystroke would trigger an API request. If you typed About, deleted it, and retyped it, it would issue 10 requests in total even though we could reuse the data.",
    "Gutenberg data helps by caching the responses to API requests triggered by getEntityRecords()  and reuses them on subsequent calls. This is especially important when other components rely on the same entity records.",
    "All in all, the utilities built into core-data are designed to solve the typical problems so that you can focus on your application instead.",
    "There is one problem with our search feature. We can’t be quite sure whether it’s still searching or showing no results:",
    "A few messages like  Loading… or No results would clear it up. Let’s implement them! First,  PagesList has to be aware of the current status:",
    "Note that instead of building a custom loading indicator, we took advantage of the Spinner component.",
    "We still need to know whether the pages selector hasResolved or not. We can find out using the  hasFinishedResolution selector:",
    "wp.data.select('core').hasFinishedResolution( 'getEntityRecords', [ 'postType', 'page', { search: 'home' } ] )",
    "It takes the name of the selector and the exact same arguments you passed to that selector and returns either true if the data was already loaded or false if we’re still waiting. Let’s add it to useSelect:",
    "There is just one last problem. It is easy to make a typo and end up passing different arguments to getEntityRecords and hasFinishedResolution. It is critical that they are identical. We can remove this risk by storing the arguments in a variable:",
    "And voilà! That’s it.",
    "All the pieces are in place, great! Here’s the complete JavaScript code of our app:",
    "All that’s left is to refresh the page and enjoy the brand new status indicator:",
    "We will build the application as a WordPress plugin, which means you need to have WordPress itself installed. One way to do this is by following the instructions on the Getting Started page. Once your setup is complete, you can follow along with the rest of this tutorial.",
    "Also, this tutorial will lean heavily on Redux concepts such as state, actions, and selectors. If you are not familiar with them, you may want to start by reviewing Getting Started With Redux.",
    "We’ll do all the development inside of a WordPress plugin. Let’s start by creating a wp-content/plugins/my-first-gutenberg-app directory in your local WordPress environment. We will need to create four files inside that directory:",
    "Go ahead and create these files using the following snippets:",
    "src/index.js:",
    "style.css:",
    "my-first-gutenberg-app.php:",
    "package.json:",
    "This tutorial will proceed assuming the reader is familiar with ESNext syntax and the concept of build tools (like webpack). If that sounds confusing, you may want to review the Getting started with JavaScript Build Setup first.",
    "To install the build tool, navigate to the plugin directory using your terminal and run npm install.",
    "Once all the dependencies are in place, all that’s left is to run npm start and voila! A watcher will run in the terminal. You can then edit away in your text editor; after each save, it will automatically build.",
    "If you now go to the Plugins page, you should see a plugin called My first Gutenberg App. Go ahead and activate it. A new menu item labeled My first Gutenberg app should show up. Once you click it, you will see a page that says Hello from JavaScript!:",
    "Congratulations! You are now ready to start building the app!",
    "This tutorial aims to get you comfortable with the Gutenberg data layer. It guides you through building a simple React application that enables the user to manage their WordPress pages. The finished app will look like this:",
    "You may review the finished app in the gutenberg-examples repository.",
    "This tutorial will step through the fundamentals of creating a custom instance\nof a “block editor” using the @wordpress/block-editor package.",
    "The Gutenberg codebase is complex, with many packages and components, but at its core it is a tool for managing and editing blocks. Therefore, when working on the editor it is important to gain a better understanding of how block editing works at a fundamental level.",
    "To do this, this tutorial will walk you through building a fully functioning, custom block editor “instance” within WordPress, introducing you to the key packages and components along the way.",
    "By the end of this article, you should have gained a good understanding of how the block editor works and some of the knowledge required to put together your own block editor instances.",
    "We’re going to be creating an (almost) fully functioning Block Editor instance.",
    "This block editor will not be the same Block Editor you are familiar with when creating Posts in WP Admin. Rather it will be an entirely custom instance which will live within a custom WP Admin page called (imaginatively) “Block Editor”.",
    "Our editor will have the following features:",
    "With that in mind, let’s start taking our first steps towards building this.",
    "Our custom editor is going to be built as a WordPress Plugin. To keep things simple. we’ll call this Standalone Block Editor Demo because that is what it does. Nice!",
    "Let’s take a look at our Plugin file structure:",
    "Here’s a brief summary of what’s going on:",
    "The only item not shown above is the build/ directory, which is where our compiled JS and CSS files will be outputted by @wordpress/scripts ready to be enqueued by our Plugin.",
    "Note: throughout this tutorial, filename references will be placed in a comment at the top of each code snippet so you can follow along.",
    "With our basic file structure in place, we can now start looking at what package we’re going to need.",
    "Whilst the Gutenberg Editor is comprised of many moving parts, at it’s core is the @wordpress/block-editor package.",
    "It’s role is perhaps best summarized by its own README file:",
    "This is great and exactly what we need! Indeed, it is the main package we’ll be using to create our custom block editor instance.",
    "However, before we can get to working with this package in code, we’re going to need to create a home for our editor within WP Admin.",
    "As a first step, we need to create a custom page within WP Admin.",
    "Note: if you’re already comfortable with the process of creating custom Admin pages in WordPress you might want to skip ahead.",
    "To do this we register our custom admin page using the standard WP add_menu_page() helper:",
    "Note the reference to a function getdave_sbe_render_block_editor which is the function which we will use to render the contents of the admin page.",
    "As the block editor is a React powered application, we now need to output some HTML into our custom page into which the JavaScript can render the block editor.",
    "To do this we need to look at our getdave_sbe_render_block_editor function referenced in the step above.",
    "Here we simply output some basic placeholder HTML.",
    "Note that we’ve included an id attribute getdave-sbe-block-editor. Keep a note of that, as we’ll be using it shortly.",
    "With our target HTML in place we can now enqueue some JavaScript (as well as some CSS styles) so that they will run on our custom Admin page.",
    "To do this we hook into admin_enqueue_scripts.",
    "First, we need to make sure we only run our custom code on our own admin page, so at the top of our callback function let’s exit early if the page doesn’t match our page’s identifier:",
    "With this in place, we can then safely register our main JavaScript file using the standard WP wp_enqueue_script function:",
    "To save time and space, the assignment of the $script_ variables has been omitted. You can review these here.",
    "Note that we register our script dependencies ($script_asset['dependencies']) as the 3rd argument – these deps are being\ndynamically generated using @wordpress/dependency-extraction-webpack-plugin which will\nensure that WordPress provided scripts are not included in the built\nbundle.",
    "We also need to register both our custom CSS styles and the WordPress default formatting library in order take advantage of some nice default styling:",
    "Looking at the @wordpress/block-editor package, we can see that it accepts a settings object to configure the default settings for the editor. These are available on the server side so we need to expose them for use within the JavaScript.",
    "To do this we inline the settings object as JSON assigned to the global window.getdaveSbeSettings object:",
    "With the PHP above in place to create our admin page, we’re now finally ready to use JavaScript to render a Block Editor into the page’s HTML.",
    "Let’s open up our main src/index.js file.",
    "Here we first pull in required JS packages and import our CSS styles (note using Sass requires extending the default @wordpress/scripts Webpack config).",
    "Next, once the DOM is ready we run a function which:",
    "Note: it is possible to render the editor from PHP without creating an unnecessary JS global. Check out the Edit Site package in Gutenberg Core for an example of this.",
    "Let’s take a closer look at the <Editor> component we saw being used above.",
    "Despite its name, this is not the actual core of the block editor. Rather it is a wrapper component we’ve created to contain the components which form the main body of our custom editor.",
    "The first thing we do inside <Editor> is to pull in some dependencies.",
    "The most important of these are the internal components BlockEditor and Sidebar, which we will explore in greater detail shortly.",
    "The remaining components are largely static elements which form the layout and surrounding UI of the editor (eg: header and notice areas).",
    "With these components available we can proceed to define our <Editor> component.",
    "Here we are scaffolding the core of the editor’s layout alongside a few specialised context providers which make particular functionality available throughout the component hierarchy.",
    "Let’s examine these in more detail:",
    "With this basic component structure in place the only remaining thing left to do\nis wrap everything in the navigateRegions HOC to provide keyboard navigation between the different “regions” in the layout.",
    "Now we have a our core layouts and components in place, it’s time to explore our\ncustom implementation of the block editor itself.",
    "The component for this is called <BlockEditor> and this is where the magic happens.",
    "Opening src/components/block-editor/index.js we see that this is the most\ncomplex of the components we have encountered thus far.",
    "There’s a lot going on so let’s break this down!",
    "To start, let’s focus on what is being rendered by the <BlockEditor> component:",
    "The key components to focus on here are <BlockEditorProvider> and <BlockList>. Let’s examine these.",
    "<BlockEditorProvider> is one of the most important components in the hierarchy. As we learnt earlier, it establishes a new block editing context for a new block editor.",
    "As a result, it is fundamental to the entire goal of our project.",
    "The children of <BlockEditorProvider> comprise the UI for the block\neditor. These components then have access to data (via Context) which enables\nthem to render and manage the Blocks and their behaviors within the editor.",
    "We can see that <BlockEditorProvider> accepts array of (parsed) block objects as its value prop and, when there’s a change detected within the editor, calls the onChange and/or onInput handler prop (passing the new Blocks as a argument).",
    "Internally it does this by subscribing to the provided registry (via the withRegistryProvider HOC), listening to block change events, determining whether Block changing was persistent, and then calling the appropriate onChange|Input handler accordingly.",
    "For the purposes of our simple project these features allow us to:",
    "It’s also worth recalling that the component accepts a settings prop. This accepts the editor settings which we inlined as JSON within init.php earlier. This configures features such as custom colors, available image sizes and much more.",
    "Alongside <BlockEditorProvider> the next most interesting component is <BlockList>.",
    "This is one of the most important components as it’s role is to render a list of Blocks into the editor.",
    "It does this in part thanks to being placed as a child of <BlockEditorProvider> which affords it full access to all information about the state of the current Blocks in the editor.",
    "Under the hood <BlockList> relies on several other lower-level components in order to render the list of Blocks.",
    "The hierarchy of these components can be approximated as follows:",
    "Here’s roughly how this works together to render our list of blocks:",
    "These are some of the most complex and involved components within the @wordpress/block-editor package. That said, if you want to have a strong grasp of how the editor works at a fundamental level, I strongly advise making a study of these components. I leave this as an exercise for the reader!",
    "Jumping back to our own custom <BlockEditor> component, it is also worth noting the following “utility” components:",
    "These provide other important elements of functionality for our editor instance.",
    "Also within the render of our <BlockEditor>, is our <Sidebar> component.",
    "This is used – alongside other things – to display advanced Block settings via the <BlockInspector> component.",
    "However, the keen-eyed readers amongst you will have already noted the presence\nof a <Sidebar> component within our <Editor> (src/editor.js) component’s\nlayout:",
    "Opening src/components/sidebar/index.js we see that this is in fact the\ncomponent rendered within <Editor> above. However, the implementation utilises\nSlot/Fill to expose a Fill (<Sidebar.InspectorFill>) which we subsequently\nimport and render inside of our <BlockEditor> component (see above).",
    "With this in place, we then render <BlockInspector /> as a child of the\nSidebar.InspectorFill. This has the result of allowing us to keep\n<BlockInspector> within the React context of <BlockEditorProvider> whilst\nallowing it to be rendered into the DOM in a separate location (ie: in the <Sidebar>).",
    "This might seem overly complex, but it is required in order that\n<BlockInspector> can have access to information about the current Block.\nWithout Slot/Fill this setup would be extremely difficult to achieve.",
    "Aside:\n<BlockInspector>\nitself actually renders a Slot for <InspectorControls>. This is what allows you render a <InspectorControls> component inside\nthe edit() definition for your block and have\nit display within Gutenberg’s sidebar. I recommend looking into this component\nin more detail.",
    "And with that we have covered the render of our custom <BlockEditor>!",
    "We’ve come a long way on our journey to create a custom block editor. But there is\none major area left to touch upon – Block persistence; that is the act of having our\nBlocks saved and available between page refreshes.",
    "As this is only an experiment we’ve opted to utilise the browser’s\nlocalStorage API to handle saving Block data. In a real-world scenario however\nyou’d like choose a more reliable and robust system (eg: a database).",
    "That said, let’s take a closer look at how we’re handling saving our Blocks.",
    "Opening src/components/block-editor/index.js we will notice we have created\nsome state to store our Blocks as an array:",
    "As mentioned earlier, blocks is passed to the “controlled” component <BlockEditorProvider> as its value prop. This “hydrates” it with an initial set of Blocks. Similarly, the updateBlocks setter is hooked up to the onInput callback on <BlockEditorProvider> which ensures that our block state is kept in sync with changes made to blocks within the editor.",
    "If we now turn our attention to the onChange handler, we will notice it is\nhooked up to a function persistBlocks() which is defined as follows:",
    "This function accepts an array of “committed” block changes and calls the state\nsetter updateBlocks. In addition to this however, it also stores the blocks\nwithin LocalStorage under the key getdavesbeBlocks. In order to achieve this\nthe Block data is serialized into Gutenberg “Block Grammar” format, meaning it can be safely stored as a string.",
    "If we open DeveloperTools and inspect our LocalStorage we will see serialized\nBlock data stored and updated as changes occur within the editor. Below is an\nexample of the format:",
    "Having persistence in place is all well and good, but it’s useless unless that\ndata is retrieved and restored within the editor upon each full page reload.",
    "Accessing data is a side effect, so naturally we reach for our old (new!?)\nfriend the useEffect hook to handle this.",
    "In this handler, we:",
    "As a result of these operations the controlled <BlockEditorProvider> component\nis updated with the blocks restored from LocalStorage causing the editor to\nshow these blocks.",
    "Finally, for good measure we generate a notice – which will display in our <Notice> component as a “snackbar” notice – to indicate that the blocks have been restored.",
    "If you’ve made it this far then congratulations! I hope you now have a better understanding of how the block editor works under the hood.",
    "In addition, you’ve reviewed an working example of the code required to implement your own custom functioning block editor. This information should prove useful, especially as Gutenberg expands beyond editing just the Post and into Widgets, Full Site Editing and beyond!",
    "The full code for the custom functioning block editor we’ve just built is available on GitHub. I encourage you to download and try it out for yourself. Experiment, then and take things even further!",
    "The purpose of this tutorial is to step through the fundamentals of creating a custom instance of a “block editor”.",
    "The editor you will see in this tutorial (as above) is not the same Block Editor you are familiar with when creating Posts in with WordPress. Rather it is an entirely custom block editor instance built using the lower-level @wordpress/block-editor package (and friends).",
    "To follow along with this tutorial, you can download the accompanying WordPress plugin which includes all of the examples for you to try on your own site.",
    "Code snippets are provided using JSX syntax. Note it is not required to use JSX to create blocks or extend the editor, you can use plain JavaScript. However, once familiar with JSX, many developers tend find it is easier to read and write, thus most code examples you’ll find use that syntax.",
    "The Gutenberg Project is not only building a better editor for WordPress, but also creating a platform to build upon. This platform consists of a set of JavaScript packages and tools that you can use in your web application. View the list of packages available on npm.",
    "The WordPress Components package contains a set of UI components you can use in your project. See the WordPress Storybook site for an interactive guide to the available components and settings.",
    "Here is a quick example, how to use components in your project.",
    "Install the dependency:",
    "Usage in React:",
    "Many components include CSS to add style, you will need to include for the components to appear correctly. The component stylesheet can be found in node_modules/@wordpress/components/build-style/style.css, you can link directly or copy and include it in your project.",
    "The @wordpress/scripts package is a collection of reusable scripts for JavaScript development — includes scripts for building, linting, and testing — all with no additional configuration files.",
    "Here is a quick example, on how to use wp-scripts tool in your project.",
    "You can then add a scripts section to your package.json file, for example:",
    "You can then use npm run build to build your project with all the default webpack settings already configured, likewise for formatting and linting. The start command is used for development mode. See the @wordpress/scripts package for full documentation.",
    "For more info, see the Getting Started with JavaScript tutorial in the Block Editor Handbook.",
    "The @wordpress/block-editor package allows you to create and use standalone block editors.",
    "You can learn more by reading the tutorial “Building a custom block editor”.",
    "The Query Loop block is a powerful tool that allows users to cycle through a determined list of posts and display a certain set of blocks that will inherit the context of each of the posts in the list. For example, it can be set to cycle through all the posts of a certain category and for each of those posts display their featured image. And much more, of course!",
    "But precisely because the Query Loop block is so powerful and allows for great customization, it can also be daunting. Most users wouldn’t want to be presented with the full capabilities of the Query Loop block, as most users wouldn’t be familiar with the concept of a “query” and its associated technical terms. Instead, most users will likely appreciate a pre-set version of the block, with fewer settings to adjust and clearer naming. The Post List variation offered by default is a good example of this practice: the user will be using the Query Loop block without being exposed to its technicalities, and will also be more likely to discover and understand the purpose of the block.",
    "In the same manner, a lot of extenders might need a way to present bespoke versions of the block, with their own presets, additional settings and without customization options which are irrelevant to their use-case (often, for example, their custom post type). The Query Loop block offers very powerful ways to create such variations.",
    "By registering your own block variation with some specific Query Loop block settings, you can have finer control over how it is presented, while still being able to use the full capabilities which the Query Loop block offers underneath. If you are not familiar with block variations, learn more about them here.",
    "With the block variations API you can provide the default settings that make the most sense for your use-case.",
    "Let’s go on a journey, for example, of setting up a variation for a plugin which registers a book custom post type.",
    "Your first step would be to create a variation which will be set up in such a way to provide a block variation which will display by default a list of books instead of blog posts. The full variation code will look something like this:",
    "If that sounds like a lot, don’t fret, let’s go through each of the properties here and see why they are there and what they are doing.",
    "Essentially, you would start with something like this:",
    "In this way, the users won’t have to choose the custom postType from the dropdown, and be already presented with the correct configuration. However, you might ask, how is a user going to find and insert this variation? Good question! To enable this, you should add:",
    "In this way, your block will show up just like any other block while the user is in the editor and searching for it. At this point you might also want to add a custom icon, title and description to your variation, just like so:",
    "At this point, your custom variation will be virtually indistinguishable from a stand-alone block. Completely branded to your plugin, easy to discover and directly available to the user as a drop in.",
    "Please note that the Query Loop block supports 'block' as a string in the scope property. In theory, that’s to allow the variation to be picked up after inserting the block itself. Read more about the Block Variation Picker here.",
    "However, it is unadvisable to use this currently, this is due to the Query Loop setup with patterns and scope: [ 'block' ] variations, all of the selected pattern’s attributes will be used except for postType and inherit query properties, which will likely lead to conflicts and non-functional variations.",
    "To circumvent this, there two routes, the first one is to add your default innerBlocks, like so:",
    "By having innerBlocks in your variation you essentially skip the setup phase of Query Loop block with suggested patterns and the block is inserted with these inner blocks as its starting content.",
    "The other way would be to register patterns specific to your variation, which are going to be suggested in the setup, and replace flows of the block.",
    "The Query Loop block determines if there is an active variation of itself and if there are specific patterns available for this variation. If there are, these patterns are going to be the only ones suggested to the user, without including the default ones for the original Query Loop block. Otherwise, if there are no such patterns, the default ones are going to be suggested.",
    "In order for a pattern to be “connected” with a Query Loop variation, you should add the name of your variation prefixed with the Query Loop name (e.g. core/query/$variation_name) to the pattern’s blockTypes property. For more details about registering patterns see here.",
    "If you have not provided innerBlocks in your variation, there is also a way to suggest “connected” variations when the user selects Start blank in the setup phase. This is handled in a similar fashion with “connected” patterns, by checking if there is an active variation of Query Loop and if there are any connected variations to suggest.",
    "In order for a variation to be connected to another Query Loop variation we need to define the scope attribute with ['block'] as value and the namespace attribute defined as an array. This array should contain the names(name property) of any variations they want to be connected to.",
    "For example, if we have a Query Loop variation exposed to the inserter(scope: ['inserter']) with the name products, we can connect a scoped block variation by setting its namespace attribute to ['products']. If the user selects this variation after having clicked Start blank, the namespace attribute will be overridden by the main inserter variation.",
    "There is one slight problem you might have realized after implementing this variation: while it is transparent to the user as they are inserting it, Gutenberg will still recognize the variation as a Query Loop block at its core and so, after its insertion, it will show up as a Query Loop block in the tree view of the editor, for instance.",
    "We need a way to tell the editor that this block is indeed your specific variation. This is what the isActive property is made for: it’s a way to determine whether a certain variation is active based on the block’s attributes. You could use it like this:",
    "You might be tempted to only compare the postType so that Gutenberg will recognize the block as your variation any time the postType matches book. This casts a net too wide, however, as other plugins might want to publish variations based on the book post type too, or we might just not want the variation to be recognized every time the user sets the type to book manually through the editor settings.",
    "That’s why the Query Loop block exposes a special attribute called namespace. It really doesn’t do anything inside the block implementation, and it’s used as an easy and consistent way for extenders to recognize and scope their own variation. In addition, isActive also accepts just an array of strings with the attributes to compare. Often, namespace would be sufficient, so you would use it like so:",
    "Like so, Gutenberg will know that it is your specific variation only in the case it matches your custom namespace! So convenient!",
    "Even with all of this, your custom post type might have unique requirements: it might support certain custom attributes that you might want to filter and query for, or some other query parameters might be irrelevant or even completely unsupported! We have build the Query Loop block with such use-cases in mind, so let’s see how you can solve this problem.",
    "Let’s say you don’t use at all the sticky attribute in your books, so that would be totally irrelevant to the customization of your block. In order to not confuse the users as to what a setting might do, and only exposing a clear UX to them, we want this control to be unavailable. Furthermore, let’s say that you don’t use the author field at all, which generally indicates the person who has added that post to the database, instead you use a custom bookAuthor field. As such, not only keeping the author filter would be confusing, it would outright “break” your query.",
    "For this reason, the Query Loop block variations support a property called allowedControls, which accepts an array of keys of the controls we want to display on the inspector sidebar. By default, we accept all the controls, but as soon as we provide an array to this property, we want to specify only the controls which are going to be relevant for us!",
    "As of Gutenberg version 14.2, the following controls are available:",
    "In our case, the property would look like this:",
    "If you want to hide all the above available controls, you can set an empty array as a value of allowedControls.",
    "Notice that we have also disabled the postType control. When the user selects our variation, why show them a confusing dropdown to change the post type? On top of that it might break the block as we can implement custom controls, as we’ll see shortly.",
    "Because our plugin uses custom attributes that we need to query, we want to add our own controls to allow the users to select those instead of the ones we have just disabled from the core inspector controls. We can do this via a React HOC hooked into a block filter, like so:",
    "Of course, you’ll be responsible for implementing the logic of your control (you might want to take a look at @wordpress/components to make your controls fit seamlessly within the Gutenberg UI). Any extra parameter you assign within the query object inside the blocks attributes can be used to create a custom query according to your needs, with a little extra effort.",
    "Currently, you’ll likely have to implement slightly different paths to make the query behave correctly both on the front-end side (i.e. on the end user’s side) and to show the correct preview on the editor side.",
    "The Query Loop block functions mainly through the Post Template block which receives the attributes and builds the query from there. Other first-class children of the Query Loop block (such as the Pagination block) behave in the same way. They build their query and then expose the result via the filter query_loop_block_query_vars.",
    "You can hook into that filter and modify your query accordingly. Just make sure you don’t cause side-effects to other Query Loop blocks by at least checking that you apply the filter only to your variation!",
    "(In the code above, we assume you have some way to access the block, for example within a pre_render_block filter, but the specific solution can be different depending on the use-case, so this is not a firm recommendation).",
    "To finish up our custom variation, we might want the editor to react to changes in our custom query and display an appropriate preview accordingly. This is not required for a functioning block, but it enables a fully integrated user experience for the consumers of your block.",
    "The Query Loop block fetches its posts to show the preview using the WordPress REST API. Any extra parameter added to the query object will be passed as a query argument to the API. This means that these extra parameters should be either supported by the REST API, or be handled by custom filters such as the rest_{$this->post_type}_query filter which allows you to hook into any API request for your custom post type. Like so:",
    "And, just like that, you’ll have created a fully functional variation of the Query Loop block!",
    "Deprecated: It is no longer recommended to use WP-CLI or create-guten-block to generate block scaffolding.",
    "The official script to generate a block is the new @wordpress/create-block package. This package follows the new block directory guidelines, and creates the proper block, environment, and standards set by the project. See the new Create a Block tutorial for a complete walk-through.",
    "Dynamic blocks are blocks that build their structure and content on the fly when the block is rendered on the front end.",
    "Note : All the details about the creation of dynamic blocks are documented here. The below examples demonstrate the usage of block supports in dynamic blocks.",
    "A lot of blocks, including core blocks, offer similar customization options. Whether that is to change the background color, text color, or to add padding, margin customization options…",
    "Let’s examine the scenario to enable a user to change the background color and text color of a block.",
    "Because it is a dynamic block it doesn’t need to override the default save implementation on the client. Instead, it needs a server component. The contents in the front of your site depend on the function called by the render_callback property of register_block_type.",
    "Let’s see how we can achieve the same functionality, but by using block supports.",
    "And the server side part becomes:",
    "And that’s it, the addition of the “supports” key above, will automatically make the following changes to the block:",
    "To learn more about the block supports and see all the available properties that you can enable for your own blocks, please refer to the supports documentation.",
    "There are two primary uses for dynamic blocks:",
    "For many dynamic blocks, the save callback function should be returned as null, which tells the editor to save only the block attributes to the database. These attributes are then passed into the server-side rendering callback, so you can decide how to display the block on the front end of your site. When you return null, the editor will skip the block markup validation process, avoiding issues with frequently-changing markup.",
    "If you are using InnerBlocks in a dynamic block you will need to save the InnerBlocks in the save callback function using <InnerBlocks.Content/>",
    "You can also save an HTML representation of the block. If you provide a server-side rendering callback, this HTML will be replaced with the output of your callback, but will be rendered if your block is deactivated or your render callback is removed.",
    "Block attributes can be used for any content or setting you want to save for that block. In the first example above, with the latest posts block, the number of latest posts you want to show could be saved as an attribute. Or in the second example, attributes can be used for each piece of content you want to show in the front end – such as heading text, paragraph text, an image, a URL, etc.",
    "The following code example shows how to create a dynamic block that shows only the last post as a link.",
    "There are a few things to notice:",
    "Note : For common customization settings including color, border, spacing customization and more, we will see on the next chapter how you can rely on block supports to provide such functionality in an efficient way.",
    "Gutenberg 2.8 added the <ServerSideRender> block which enables rendering to take place on the server using PHP rather than in JavaScript.",
    "Server-side render is meant as a fallback; client-side rendering in JavaScript is always preferred (client rendering is faster and allows better editor manipulation).",
    "Note that this code uses the wp-server-side-render package but not wp-data. Make sure to update the dependencies in the PHP code. You can use wp-scripts to automatically build dependencies (see the gutenberg-examples repo for PHP code setup).",
    "To avoid duplicating the same logic over and over in your blocks and to align the behavior of your block with core blocks, you can make use of the different supports properties.",
    "Let’s take the block we wrote in the previous chapter (example 3) and with just a single line of code, add support for text, link and background color customizations.",
    "Here’s the exact same code we used to register the block previously.",
    "Now, let’s alter the block.json file for that block, and add the supports key. (If you’re not using a block.json file, you can also add the key to the registerBlockType function call)",
    "To simplify block customization and ensure a consistent experience for users, there are a number of built-in UI patterns to help generate the editor preview. Like with the RichText component covered in the previous chapter, the wp.editor global includes a few other common components to render editing interfaces. In this chapter, we’ll explore toolbars and the block inspector.",
    "When the user selects a block, a number of control buttons may be shown in a toolbar above the selected block. Some of these block-level controls are included automatically if the editor is able to transform the block to another type, or if the focused element is a RichText component.",
    "You can also customize the toolbar to include controls specific to your block type. If the return value of your block type’s edit function includes a BlockControls element, those controls will be shown in the selected block’s toolbar.",
    "Note that BlockControls is only visible when the block is currently selected and in visual editing mode. BlockControls are not shown when editing a block in HTML editing mode.",
    "The Settings Sidebar is used to display less-often-used settings or settings that require more screen space. The Settings Sidebar should be used for block-level settings only.",
    "If you have settings that affects only selected content inside a block (example: the “bold” setting for selected text inside a paragraph): do not place it inside the Settings Sidebar. The Settings Sidebar is displayed even when editing a block in HTML mode, so it should only contain block-level settings.",
    "The Block Tab is shown in place of the Document Tab when a block is selected.",
    "Similar to rendering a toolbar, if you include an InspectorControls element in the return value of your block type’s edit function, those controls will be shown in the Settings Sidebar region.\nThe following example adds 2 color palettes to the sidebar, one for the text color and one for the background color.",
    "Block controls rendered in both the toolbar and sidebar will also be used when\nmultiple blocks of the same type are selected.",
    "Note : In the example above, we added text and background color customization support to our block to demonstrate the use of InspectorControls to add custom controls to the sidebar. That said, for common customization settings including color, border, spacing customization and more, we will see on the next chapter that you can rely on block supports to provide the same functionality in a more efficient way.",
    "The example blocks so far are still not very interesting because they lack options to customize the appearance of the message. In this section, we will implement a RichText field allowing the user to specify their own message. Before doing so, it’s important to understand how the state of a block (its “attributes”) is maintained and changed over time.",
    "Until now, the edit and save functions have returned a simple representation of a paragraph element. We also learned how these functions are responsible for describing the structure of the block’s appearance. If the user changes a block, this structure may need to change. To achieve this, the state of a block is maintained throughout the editing session as a plain JavaScript object, and when an update occurs, the edit function is invoked again. Put another way: the output of a block is a function of its attributes.",
    "One challenge of maintaining the representation of a block as a JavaScript object is that we must be able to extract this object again from the saved content of a post. This is achieved with the block type’s attributes property:",
    "When registering a new block type, the attributes property describes the shape of the attributes object you’d like to receive in the edit and save functions. Each value is a source function to find the desired value from the markup of the block.",
    "In the code snippet above, when loading the editor, the content value will be extracted from the HTML of the paragraph element in the saved post’s markup.",
    "Earlier examples used the createElement function to create DOM nodes, but it’s also possible to encapsulate this behavior into “components”. This abstraction helps you share common behaviors and hide complexity in self-contained units.",
    "There are a number of components available to use in implementing your blocks. You can see one such component in the code below: the RichText component is part of the wp-block-editor package.",
    "The RichText component can be considered as a super-powered textarea element, enabling rich content editing including bold, italics, hyperlinks, etc.",
    "To use the RichText component, and using ES5 code, remember to add wp-block-editor to the dependency array of registered script handles when calling wp_register_script.",
    "Do not forget to also update the editor_script handle in register_block_type to gutenberg-examples-03-esnext.",
    "Implementing this behavior as a component enables you as the block implementer to be much more granular about editable fields. Your block may not need RichText at all, or it may need many independent RichText elements, each operating on a subset of the overall block state.",
    "Because RichText allows for nested nodes, you’ll most often use it in conjunction with the html attribute source when extracting the value from saved content. You’ll also use RichText.Content in the save function to output RichText values.",
    "Here is the complete block definition for Example 03.",
    "A block typically inserts markup (HTML) into post content that you want to style in some way. This guide walks through a few different ways you can use CSS with the block editor and how to work with styles and stylesheets.",
    "You will need a basic block and WordPress development environment to implement the examples shown in this guide. See the create a basic block or block tutorial to get setup.",
    "The following are different methods you can use to add style to your block, either in the editor or when saved.",
    "The first method shows adding the style inline. This transforms the defined style into a property on the element inserted.",
    "The useBlockProps React hook is used to set and apply properties on the block’s wrapper element. The following example shows how:",
    "The inline style works well for a small amount of CSS to apply. If you have much more than the above you will likely find that it is easier to manage with them in a separate stylesheet file.",
    "The useBlockProps hooks includes the classname for the block automatically, it generates a name for each block using the block’s name prefixed with wp-block-, replacing the / namespace separator with a single -.",
    "For example the block name: gutenberg-examples/example-02-stylesheets would get the classname: wp-block-gutenberg-examples-example-02-stylesheets. It might be a bit long but best to avoid conflicts with other blocks.",
    "In order to include the blockEditor as a dependency, make sure to run the build step, or update the asset php file.",
    "Build the scripts and update the asset file which is used to keep track of dependencies and the build version.",
    "Edit the asset file to include the block-editor dependency for the scripts.",
    "Like scripts, you can enqueue your block’s styles using the block.json file.",
    "Use the editorStyle property to a CSS file you want to load in the editor view, and use the style property for a CSS file you want to load on the frontend when the block is used.",
    "So in your plugin directory, create an editor.css file to load in editor view:",
    "And a style.css file to load on the frontend:",
    "The files will automatically be enqueued when specified in the block.json.",
    "Note: If you have multiple files to include, you can use standard wp_enqueue_style functions like any other plugin or theme. You will want to use the following hooks for the block editor:",
    "This guide showed a couple of different ways to apply styles to your block, by either inline or in its own style sheet. Both of these methods use the useBlockProps hook, see the block wrapper reference documentation for additional details.",
    "See the complete example-02-stylesheets code in the gutenberg-examples repository.",
    "This guide takes you through creating a basic block to display a message in a post. This message will be fixed, we won’t allow the user to edit the message, the goal of the guide is to show how to register and load a block.",
    "There are two main types of blocks: static and dynamic, this guide focuses on static blocks. A static block is used to insert HTML content into the post and save it with the post. A dynamic block builds the content on the fly when rendered on the front end, see the dynamic blocks guide.",
    "Static blocks are implemented in JavaScript, so a basic level of JavaScript is helpful, see the Getting Started with JavaScript for a refresher.",
    "Blocks are added to WordPress using plugins, so you will need:",
    "The functions of a static block are defined in JavaScript, however the settings and other metadata should be defined in a block.json file.",
    "Here are the basic settings:",
    "The block.json file should be added to your plugin. To start a new plugin, create a directory in /wp-content/plugins/ in your WordPress.",
    "Create a basic block.json file there:",
    "With the block.json in place, the registration for the block is a single function call in PHP, this will setup the block and JavaScript file specified in the editorScript property to load in the editor.",
    "Create a full plugin file, index.php like the following, the same PHP code works for both JSX and Plain code.",
    "The editorScript entry is enqueued automatically in the block editor. This file contains the JavaScript portion of the block registration and defines two important functions for the block, the edit and save functions.",
    "The edit function is a component that is shown in the editor when the block is inserted.",
    "The save function is a component that defines the final markup returned by the block and saved in post_content.",
    "Add the following in src/index.js",
    "Add the following to block.js",
    "In order to register the block, an asset php file is required in the same directory as the directory used in register_block_type() and must begin with the script’s filename.",
    "Build the scripts and asset file which is used to keep track of dependencies and the build version.",
    "Create the asset file to load the dependencies for the scripts. The name of this file should be the name of the js file then .asset.php. For this example, create block.asset.php with the following:",
    "Open your editor and try adding your new block. It will show in the inserter using the title.\nWhen inserted you will see the Hello World (from the editor) message.",
    "When you save the post and view it published, you will see the Hola mundo (from the frontend) message.",
    "Troubleshooting – If you run into any issues, here are a few things to try:",
    "This shows the most basic static block. The gutenberg-examples repository has complete examples for both.",
    "Basic Example Plain JavaScript,",
    "NOTE: The examples include a more complete block setup with translation features included, it is recommended to follow those examples for a production block. The internationalization features were left out of this guide for simplicity and focusing on the very basics of a block.",
    "A couple of things to note when creating your blocks:",
    "A block name must be prefixed with a namespace specific to your plugin. This helps prevent conflicts when more than one plugin registers a block with the same name. In this example, the namespace is gutenberg-examples.",
    "Block names must include only lowercase alphanumeric characters or dashes and start with a letter. Example: my-plugin/my-custom-block.",
    "block.json metadata reference documentation",
    "Block edit and save function reference",
    "Dashicons icon set",
    "The purpose of this tutorial is to step through the fundamentals of creating a new block type. Beginning with the simplest possible example, each new section will incrementally build upon the last to include more of the common functionality you could expect to need when implementing your own block types.",
    "To follow along with this tutorial, you can download the accompanying WordPress plugin which includes all of the examples for you to try on your own site. At each step along the way, experiment by modifying the examples with your own ideas, and observe the effects they have on the block’s behavior.",
    "To find the latest version of the .zip file go to the repo’s releases page and look in the latest release under ‘Assets’.",
    "Code snippets are provided in two formats “JSX” and “Plain”. JSX refers to JavaScript code that uses JSX syntax which requires a build step. Plain refers to “classic” JavaScript that does not require building. You can change between them using tabs found above each code example. Using JSX, does require you to run the JavaScript build step to compile your code to a browser compatible format.",
    "Note that it is not required to use JSX to create blocks or extend the editor, you can use classic JavaScript. However, once familiar with JSX and the build step, many developers tend to find it is easier to read and write, thus most code examples you’ll find use the JSX syntax.",
    "Accessibility documentation for developers working on the Gutenberg Project.",
    "For more information on accessibility and WordPress see the Make WordPress Accessibility Handbook and the Accessibility Team section.",
    "It is a best practice to include ALL content on the page in landmarks, so that screen reader users who rely on them to navigate from section to section do not lose track of content.",
    "For setting up navigation between different regions, see the navigateRegions package for additional documentation.",
    "Read more regarding landmark design from W3C:",
    "The new editor is highly flexible, like most of WordPress. You can build custom blocks, modify the editor’s appearance, add special plugins, and much more.",
    "The editor is about blocks, and the main extensibility API is the Block API. It allows you to create your own static blocks, Dynamic Blocks ( rendered on the server ) and also blocks capable of saving data to Post Meta for more structured content.",
    "If you want to learn more about block creation, see the Create a Block tutorial for the best place to start.",
    "It is also possible to modify the behavior of existing blocks or even remove them completely using filters.",
    "Learn more in the Block Filters section.",
    "Specifically for Query Loop block, besides the available filters, there are more ways to extend it and create bespoke versions of it. Learn more in the Extending the Query Loop block section.",
    "Refer to the Plugins and Edit Post section for more information.",
    "You can also filter certain aspects of the editor; this is documented on the Editor Filters page.",
    "Porting PHP meta boxes to blocks or sidebar plugins is highly encouraged, learn how in the meta box and sidebar plugin guides.",
    "By default, blocks provide their styles to enable basic support for blocks in themes without any change. Themes can add/override these styles, or rely on defaults.",
    "There are some advanced block features which require opt-in support in the theme. See theme support and how to filter global styles.",
    "Autocompleters within blocks may be extended and overridden. Learn more about the autocomplete filters.",
    "Posts in the editor move through a couple of different stages between being stored in post_content and appearing in the editor. Since the blocks themselves are data structures that live in memory it takes a parsing and serialization step to transform out from and into the stored format in the database.",
    "Customizing the parser is an advanced topic that you can learn more about in the Extending the Parser section.",
    "This includes articles, talks, demos and anything the community is doing to discuss, learn about, and contribute to Gutenberg. This is not an exhaustive list; if we are missing your event or article, just let us know in the #core-editor slack channel.",
    "A short list of useful articles around defining, extending, and contributing to Gutenberg.",
    "You can view this Index of Gutenberg related posts for more information.",
    "Talks given about Gutenberg, including slides and videos as they are available.",
    "You can access all courses here.",
    "At the highest level, the vision of Full Site Editing is to provide a collection of features that bring the familiar experience and extendability of blocks to all parts of your site rather than just post and pages. You can think of Full Site Editing as the umbrella project name for various sub-projects within Gutenberg that make this vision possible. Projects under Full Site Editing (FSE) include everything from the Site Editor, Global Styles, numerous Site/Post/Page specific blocks, Query block, Navigation block, Templates, and block themes. What follows are brief descriptions of the major pieces with more details found here:",
    "There are other projects, like the Navigation Editor and Widget Editor, that are meant to specifically help classic themes begin adapting more to the block framework and to act as a stepping stone of sorts to Full Site Editing. These are separate projects from Full Site Editing though but are worth being aware of as they ultimately help the cause of getting more people adjusted to using blocks in more places.",
    "Jump in:",
    "The best way to learn something is start playing with it. So jump in by installing the Gutenberg plugin from the plugins directory and activating a block theme on a test site. We recommend the TT1 Blocks theme, it is listed in the theme directory and our development reference theme. You can find other themes in the directory using the full-site-editing feature tag.",
    "An ongoing FSE Outreach program is in place with calls for testing and is a great way to get involved and learn about the new features.",
    "If you are using the Gutenberg plugin you can run, test, and develop block themes. Block themes are themes built using templates composed using blocks. See block theme overview for additional details.",
    "For examples, see the WordPress/theme-experiments repository with several block themes there including the source for the above mentioned TT1 Blocks.",
    "Use the empty-theme.php script from theme-experiments repo to generate a starter block theme, it will prompt you with a few questions and create a theme.",
    "You can then copy the generated directory to your wp-content/themes directory and start playing with the Site Editor to build and extend the theme.",
    "See the architecture document on templates for an explanation on the internals of how templates and templates parts are rendered in the frontend and edited in the backend.",
    "Instead of the proliferation of theme support flags or alternative methods, a new theme.json file is being used to define theme settings.",
    "See documentation for theme.json.",
    "So you’ve created an awesome block? Care to share?",
    "Contents:",
    "It is important to the Block Directory and our end users to provide easy to understand information on how your block was created.",
    "Guidelines:",
    "Users typically search the Block Directory within the Block Editor and do so in the context of a task. For example, when building their post, a user may search the Block Directory for an “image gallery”. Naming your block accordingly will help the Block Directory surface it when it’s needed.",
    "Not So Good: WebTeam5 Image Works\nGood: Responsive Image Slider by WebTeam5",
    "Question: What happens when there are multiple blocks with similar names?\nTry your best to make your block’s name functional and unique to make it stand out. Look for applicable synonyms or include a prefix if necessary.",
    "The description really helps to communicate what your block does.The quicker a user understands how your block will help them, the more likely it is a user will use your block. Users will be reading your block’s description within the Block Editor where space can be limited. Try to keep it short and concise.",
    "Not So Good: The best way to show images on your website using jQuery and CSS.\nGood: A responsive image gallery block.",
    "Tip: It’s not about marketing your block, in fact we want to avoid marketing in blocks. You can read more about it in the [plugin guidelines]. Stick to being as clear as you can. The Block Directory will provide metrics to let users know how awesome your block is!",
    "Keywords add extra context to your block and make it more likely to be found in the inserter.",
    "Examples for an Image Slider block:",
    "Read more about keywords.",
    "The Block Editor allows you to indicate the category your block belongs in, making it easier for users to locate your block in the menu.",
    "Possible Values:",
    "Read more about categories.",
    "Wondering where to input all this information? Read the next section :)",
    "Each block in your plugin should have a corresponding block.json file with the block metadata. This file provides the Block Directory important information about your block. Along with being the place to store contextual information about your block like the: name, description, keywords and category, the block.json file stores the location of your block’s files.",
    "Block plugins submitted to the Block Directory can contain multiple blocks only if they are children of a single parent/ancestor. There should only be one main block. For example, a list block can contain list-item blocks. Children blocks must set the parent property in their block.json file.",
    "Double check that the following is true for your block:",
    "We encourage the separation of code by using both editorScript/editorStyle and script/style files listed in your block.json to keep the backend and frontend interfaces running smoothly. Even though only one file is required.",
    "Here is an example of a basic block.json file.",
    "The block.json file also contains other important properties. Take a look at an example block.json for additional properties to be included in the block.json file.",
    "The community is thankful for your contribution. It is time to submit your plugin.",
    "Go through the block guidelines. Create a zip file of your block and go to the block plugin validator and upload your plugin.",
    "This tutorial covers general concepts and structure for creating basic blocks.",
    "The block editor provides a components package which contains numerous prebuilt components you can use to build your block.",
    "You can visually browse the components and what their implementation looks like using the Storybook tool published at https://wordpress.github.io/gutenberg.",
    "The RichText component allows for creating a richer input besides plain text, allowing for bold, italic, links, and other inline formatting. See the RichText Reference for documentation using this component.",
    "The InspectorPanel (the settings on the right for a block) and Block Controls (toolbar controls) have a standard way to be implemented. See the Block controls tutorial for additional information.",
    "The Sidebar tutorial is a good resource on how to create a sidebar for your plugin.",
    "Nested blocks, a block that contains additional blocks, is a common pattern used by various blocks such as Columns, Cover, and Social Links. The InnerBlocks component enables this functionality, see the Using InnerBlocks documentation.",
    "One of the best sources for information and reference is the Block Editor itself, all the core blocks are built the same way. A good way to learn how things are done is to find a core block code that does something close to what you are interested in and then using the same approach for your own block.",
    "All core blocks source are in the block library package on GitHub.",
    "Next Section: Share your Block with the World",
    "One of the primary tenets of Gutenberg as a WYSIWYG editor is that what you see in the editor should be as close as possible to what you get when published. Keep this in mind when building blocks.",
    "The state when a block has been inserted, but no data has been entered yet, is called a placeholder. There is a Placeholder component built that gives us a standard look. You can see example placeholders in use with the image and embed blocks.",
    "To use the Placeholder, wrap the <TextControl> component so it becomes a child element of the <Placeholder> component. Try it out in your code. After updating, you might have something like:",
    "The placeholder looks ok, for a simple text message it may or may not be what you are looking for. However, the placeholder can be useful if you are replacing the block after what is typed in, similar to the embed blocks.",
    "For this we can use a ternary function, to display content based on a value being set or not. A ternary function is an inline if-else statement, using the syntax:",
    "This can be used inside a block to control what shows when a parameter is set or not. A simple case that displays a message if set, otherwise show the form element:",
    "There is a problem with the above, if we only use the attributes.message check, as soon as we type in the text field it would disappear since the message would then be set to a value. So we need to pair with an additional isSelected parameter.",
    "The isSelected parameter is passed in to the edit function and is set to true if the block is selected in the editor (currently editing) otherwise set to false (editing elsewhere).",
    "Using that parameter, we can use the logic:",
    "If the message is set and !isSelected, meaning we are not editing the block, the focus is elsewhere, then display the message not the text field.",
    "All of this combined together, here’s what the edit function looks like:",
    "With that in place, rebuild and reload and when you are not editing the message is displayed as it would be for the view, when you click into the block you see the text field.",
    "The switching between a Placeholder and input control works well with a visual element like an image or video, but for the text example in this block we can do better.",
    "The simpler and better solution is to modify the src/editor.scss to include the proper stylized text while typing.",
    "Update src/editor.scss to:",
    "The edit function can simply be:",
    "Next Section: Finishing Touches",
    "The basic block is in place, the next step is to add styles to the block. Feel free to style and adjust for your own preference, the main lesson is showing how to create and load external resources. For this example we’re going to load the colorized gilbert font from Type with Pride.",
    "Note: The color may not work with all browsers until they support the proper color font properly, but the font itself still loads and styles. See colorfonts.wtf for browser support and details on color fonts.",
    "Download and extract the font from the Type with Pride site, and copy it in the assets directory of your plugin naming it gilbert-color.otf. To load the font file, we need to add CSS using standard WordPress enqueue, see Including CSS & JavaScript documentation.",
    "In the gutenpride.php file, the enqueue process is already setup from the generated script, so build/index.css and build/style-index.css files are loaded using:",
    "This function checks the build/block.json file for JS and CSS files, and will pass them on to enqueue these files, so they are loaded on the appropriate pages.",
    "The build/index.css is compiled from src/editor.scss and loads only within the editor, and after the style-index.css.\nThe build/style-index.css is compiled from src/style.scss and loads in both the editor and front-end — published post view.",
    "We only need to add the style to build/style-index.css since it will show while editing and viewing the post. Edit the src/style.scss to add the following.",
    "Note: the block classname is prefixed with wp-block. The create-block/gutenpride is converted to the classname .wp-block-create-block-gutenpride.",
    "After updating, rebuild the block using npm run build then reload the post and refresh the browser. If you are using a browser that supports color fonts (Firefox) then you will see it styled.",
    "Next Section: Authoring Experience",
    "Attributes are the way a block stores data, they define how a block is parsed to extract data from the saved content.",
    "For this block tutorial, we want to allow the user to type in a message that we will display stylized in the published post. So, we need to add a message attribute that will hold the user message. The following code defines a message attribute; the attribute type is a string; the source is the text from the selector which is a div tag.",
    "Add this to the src/block.json file. The attributes are at the same level as the name and title fields.",
    "When the block loads it will look at the saved content for the block, look for the div tag, take the text portion, and store the content in an attributes.message variable.",
    "Note: The text portion is equivalent to innerText attribute of a DOM element. For more details and other examples see the Block Attributes documentation.",
    "The attributes are passed to both the edit and save functions. The setAttributes function is also passed, but only to the edit function. The setAttributes function is used to set the values. Additional parameters are also passed in to the edit and save functions, see the edit/save documentation for more details.",
    "The attributes is a JavaScript object containing the values of each attribute, or default values if defined. The setAttributes is a function to update an attribute.",
    "For our example block, the component we are going to use is the TextControl component, it is similar to an HTML text input field. You can see documentation for TextControl component. You can browse an interactive set of components in this Storybook.",
    "The component is added similar to an HTML tag, setting a label, the value is set to the attributes.message and the onChange function uses the setAttributes to update the message attribute value.",
    "The save function will simply write the attributes.message as a div tag since that is how we defined it to be parsed.",
    "OPTIONAL: For IDE support (code completion and hints), you can install the @wordpress/components module which is where the TextControl component is imported from. This install command is optional since the build process automatically detects @wordpress/* imports and specifies as dependencies in the assets file.",
    "Update the edit.js and save.js files to the following, replacing the existing functions.",
    "edit.js file:",
    "save.js file:",
    "If you have previously run npm run start, and the script is still running, you can reload the editor now and add the block to test.\nOtherwise rebuild the block using npm run build, reload the editor and add the block. Type a message in the editor, save, and view it in the post.",
    "Next Section: Code Implementation",
    "At its simplest, a block in the WordPress block editor is a JSON object with a specific set of properties.",
    "The javascript part is done in the src/index.js file.",
    "The first parameter in the registerBlockType function is the block name, this should match exactly to the name property in the block.json file. By importing the metadata from block.json and referencing the name property in the first parameter we ensure that they will match, and continue to match even if the name is subsequently changed in block.json.",
    "The second parameter to the function is the block object. See the block registration documentation for full details.",
    "The last two block object properties are edit and save, these are the key parts of a block. Both properties are functions that are included via the import above.",
    "The results of the edit function is what the editor will render to the editor page when the block is inserted.",
    "The results of the save function is what the editor will insert into the post_content field when the post is saved. The post_content field is the field in the wp_posts table in the WordPress database that is used to store the content of the post.",
    "Most of the properties are set in the src/block.json file.",
    "The title is the title of the block shown in the Inserter and in other areas of the editor.",
    "The icon is the icon shown in the Inserter. The icon property expects any Dashicon name as a string, see list of available icons. You can also provide an SVG object, but for now it’s easiest to just pick a Dashicon name.",
    "The category specified is a string and must be one of: “common, formatting, layout, widgets, or embed”. You can create your own custom category name, see documentation for details.",
    "If you look at the generated src/save.js file, the block title and description are wrapped in a function that looks like this:",
    "This is an internationalization wrapper that allows for the string “Gutenpride” to be translated. The second parameter, “gutenpride” is called the text domain and gives context for where the string is from. The JavaScript internationalization, often abbreviated i18n, matches the core WordPress internationalization process. See the Internationalization in Plugin Developer Handbook for more details.",
    "Next Section: Block Attributes",
    "A block is added to the block editor using a WordPress plugin. You can create your own plugin, and after installing and activating the plugin use the block. Let’s first look at what makes up a WordPress plugin.",
    "A WordPress plugin is a set of files within the site’s wp-content/plugins directory. For our tutorial, we will use the @wordpress/create-block package to generate the necessary plugin files.",
    "(1A) If you do not plan to use wp-env, change to your local WordPress plugin directory. For example in Local it is: ~\\Local Sites\\mywp\\app\\public\\wp-content\\plugins",
    "-or-",
    "(1B) If using wp-env start, you can work from any directory for your project; wp-env will map it as a plugin directory for your site.",
    "(2) Once in the right directory for your environment, the next step is to run the following command to generate plugin files:",
    "A new directory gutenpride is created with all the necessary plugin files. This tutorial will walk through and explain the plugin files, please explore and become familiar with them also.",
    "The main plugin file created is the PHP file gutenpride.php, at the top of this file is the Plugin Header comment block that defines the plugin.",
    "Let’s confirm the plugin is loaded and working.",
    "(3A) If you are using Local, or other environment confirm your WordPress site is started.",
    "(3B) If you are using wp-env, see Development Environment setup, then you should now run from inside the gutenpride directory:",
    "This will start your local WordPress site and use the current directory as your plugin directory. In your browser, go to http://localhost:8888/wp-admin/ and login, the default username is “admin” and password is “password”, no quotes.",
    "The generated plugin should now be listed on the Plugins admin page in your WordPress install. Switch WordPress to the plugins page and activate.",
    "For more on creating a WordPress plugin see Plugin Basics, and Plugin Header requirements for explanation and additional fields you can include in your plugin header.",
    "The package.json file defines the JavaScript properties for your project. This is a standard file used by NPM for defining properties and scripts it can run, the file and process is not specific to WordPress.",
    "A package.json file was created with the create script, this defines the dependencies and scripts needed. You can install dependencies. The only initial dependency is the @wordpress/scripts package that bundles the tools and configurations needed to build blocks.",
    "In package.json, there is a scripts property that defines what command to run when using npm run (cmd). In our generated package.json file, the two main scripts point to the commands in the wp-scripts package:",
    "These scripts are run by using: npm run build or npm run start.",
    "Use npm run build for running once to create a “production” build. This compresses the code down so it downloads faster, but makes it harder to read using browser tools—good for final deployment but not while developing.",
    "Use npm run start for creating a “development” build, this does not compress the code so it is easier to read using browser tools, plus source maps that make debugging easier. Additionally, development build will start a watch process that waits and watches for changes to the file and will rebuild each time it is saved; so you don’t have to run the command for each change.",
    "By default, the build scripts looks for src/index.js for the JavaScript file to build and will save the built file to build/index.js. In the upcoming sections, we will look closer at that script, but first let’s make sure it is loaded in WordPress.",
    "To load the built script, so it is run within the editor, you need to tell WordPress about the script. This is done in the init action in the gutenpride.php file.",
    "The register_block_type function registers the block we are going to create and specifies the editor script handle registered from the metadata provided in build/block.json file with the editorScript field. So now when the editor loads it will load this script. The source metadata file src/block.json is copied during the build process:",
    "For the editorScript provided in the block metadata, the build process creates a secondary asset file that contains the list of dependencies and a file version based on the timestamp, this is the build/index.asset.php file.",
    "The wp_register_script function used internally registers a name, called the handle, and relates that name to the script file. The dependencies are used to specify if the script requires including other libraries. The version is specified so the browser will reload if the file changed.",
    "The wp_set_script_translations function tells WordPress to load translations for this script, if they exist. See more about translations & internationalization.",
    "With the above in place, create a new post to load the editor and check your plugin is in the inserter. You can use / to search, or click the box with the [+] and search for “Gutenpride” to find the block.",
    "It is a good skill to learn and get comfortable using the web console. This is where JavaScript errors are shown and a nice way to test out snippets of JavaScript. See Firefox Developer Tools documentation.",
    "To open the developer tools in Firefox, use the menu selecting Web Developer : Toggle Tools, on Chrome, select More Tools -> Developers Tools. For both browsers, the keyboard shortcut on Windows is Ctrl+Shift+I, or on Mac Cmd+Shift+I. On Windows & Linux, the F12 key also works. You can then click Console to view logs.",
    "Try running npm run start that will start the watch process for automatic rebuilds. If you then make an update to src/index.js file, you will see the build run, and if you reload the WordPress editor you’ll see the change.",
    "For more info, see the build section of the Getting Started with JavaScript tutorial in the Block Editor Handbook.",
    "Hopefully, at this point, you have your plugin created and activated. We have the package.json with the @wordpress/scripts dependency, that defines the build and start scripts. The basic block is in place and can be added to the editor.",
    "Next Section: Anatomy of a Block",
    "This article covers setting up the local WordPress development environment using Docker on Ubuntu.",
    "For Ubuntu 20.04.1, the standard docker binaries in the repository work as needed:",
    "For earlier versions of Ubuntu, the docker binaries included in repositories did not support the features needed for the WordPress environment.",
    "If you run into this error, when running npm run wp-env from the Gutenberg directory:",
    "First, make sure docker is running. You can check using ps -ef | grep docker which should show something like:",
    "If docker is not running, try to start the service using:",
    "If docker is running, then it is not listening how the WordPress environment is trying to communicate. Try adding the following service override file to include listening on tcp. See docker documentation, How do I enable the remote API for dockerd",
    "Restart the service from the command-line",
    "After restarting the services, set the environment variable DOCKER_HOST and try starting using:",
    "Your environment should be setup at: http://localhost:8888/",
    "This guide is for setting up your local environment for JavaScript development for creating plugins and tools to extend WordPress and the block editor. If you are looking to contribute to Gutenberg project itself, see additional documentation in the Getting Started guide.",
    "A development environment is a catch-all term for what you need setup on your computer to work. The three main pieces needed for our development environment are:",
    "Here is a summary of the guide. See each section for additional details and explanations.",
    "1. Install Node development tools",
    "Download and install Node Version Manager (nvm)",
    "Quit and restart terminal\nInstall Node.js v14.",
    "2. WordPress Development Site",
    "First download, install, and start Docker Desktop following the instructions for your OS.",
    "Start the environment from an existing plugin or theme directory, or a new working directory:",
    "You will have a full WordPress site installed, navigate to: http://localhost:8888/ using your browser, log in to the WordPress dashboard at http://localhost:8888/wp-admin/ using Username “admin” and Password “password”, without the quotes.",
    "3. Code Editor",
    "You can use any text editor to write code. For example, Visual Studio Code is a popular open-source editor. You can follow instructions on their site to install it for your OS.",
    "The tools needed for development are Node and NPM. Nodejs is a runtime environment that allows running JavaScript outside of the browser. NPM is the Node Package Manager, it is used for installing dependencies and running scripts. The script npx is also installed with Nodejs—this script is used to run packages not yet installed—we will use npx to bootstrap a block.",
    "The tools are used to convert the JavaScript we are going to write into a format that browsers can run. This is called transpiling or the build step.",
    "For Mac and Linux, it is recommended to use the Node Version Manager (nvm). Using nvm to install node allows installing specific versions, plus installs locally in your home directory and avoids any global permission issues.",
    "For Windows, or alternative installs, you can download a Nodejs installer directly from the main Node.js website, v14 is recommended. Installers are available for Windows and Mac, and binaries available for Linux. See Node.js site for additional installation methods.",
    "Here are the quick instructions to install using nvm, see the full installation instructions for additional details.",
    "Run the following on the command-line to install nvm:",
    "Note: On macOS, the required developer tools are not installed by default, if not already installed you may be prompted to download the install.",
    "After installing nvm, you need to use it to install Node.js, to install v14, run:",
    "If there is an error running the above command, for example a common error that occurs is:",
    "First, try quitting and restarting your terminal to pick up the installed config.",
    "If restarting did not resolve the problem, you might need to create the default profile file.",
    "On macOS Catalina, the default shell is zsh, to create the profile file type touch ~/.zshrc on the command-line. It is fine to run if the file already exists. Note, ~/ is a shortcut to your home directory. For Ubuntu, including WSL, the default profile is bash, use touch ~/.bashrc to create.",
    "After creating the profile file, re-run the install command:",
    "The important part after installing is being able to use them in your terminal. Open a terminal command-line and type node -v and npm -v to confirm they are installed.",
    "Your versions may not match exactly, that is fine. The minimum version for Node.js is >= 12 and for npm >= 6.9, using v14 will be supported until upgrade is required.",
    "There are several ways to run WordPress locally on your own computer, or you could even develop on a cloud hosted computer, though this may be slower.",
    "The WordPress wp-env package lets you set up a local WordPress environment for building and testing plugins and themes, without any additional configuration.",
    "The wp-env tool uses Docker to create a virtual machine that runs the WordPress site. There are instructions available for installing Docker on Windows 10 Pro, other versions of Windows 10, macOS, and Linux. If using Ubuntu, see our additional notes for help installing Docker on Ubuntu.",
    "After you have installed Docker, go ahead and install the wp-env tool. This command will install the tool globally, which means you can run it from any directory:",
    "To confirm it is installed and available, run:",
    "The wp-env script is used to create a Docker WordPress environment. You can use this script to start an environment with your plugin activated by running it from the directory containing your plugin. For example if you are following the create block tutorial, this would be in the generated directory like so:",
    "You can access your environment in your browser at: http://localhost:8888/, the default username is admin and default password is password. For more information controlling the Docker environment see the @wordpress/env package readme.",
    "When using the script while developing a single plugin, wp-env start can mount and activate the plugin automatically when run from the directory containing the plugin. Note: This also works for themes when run from the directory in which you are developing the theme.",
    "If you run wp-env start from a directory that is not a plugin or theme, a generic WordPress environment will be created. The script will display the following warning, it is fine if this is your intention.",
    "You can use the .wp-env.json configuration file to create an environment that works with multiple plugins and/or themes. See the @wordpress/env package for additional details.",
    "A common issue when running wp-env is Error while running docker-compose command.",
    "If you see the error: Host is already in use by another container",
    "Docker is just one method to run a local WordPress environment. Block development and extending WordPress is done using normal plugins, so any WordPress environment can be used. Here are some alternatives that you can consider which do not require installing Docker.",
    "WampServer or MAMP environments, both are quite similar to Local, combining a web server, PHP, and database. However these tools are not WordPress specific, so if you are not already using them, Local might be an easier option.",
    "Remote server – you can work on a remote server, most hosts provide a quick WordPress setup. However, this will require additional time thorughout development syncing to the server, or working directly on the remote server.",
    "The important part is having a WordPress site installed, and know where and how to update files in the plugins directory.",
    "Visual Studio Code is a popular code editor for JavaScript development. It works quite well across the three major platforms (Windows, Linux, and Mac), it is open-source and actively maintained by Microsoft. Plus Visual Studio Code has a vibrant community providing plugins and extensions; it is becoming the defacto standard for web development.",
    "Alternative editors include Sublime Text that is also available across platforms, though is a commercial product; or other free alternatives include Vim, Atom, and Notepad++ all support standard JavaScript style development.",
    "You can use any editor you’re comfortable with, it is more a personal preference. The development setup for WordPress block editor is a common JavaScript environment and most editors have plugins and support. The key is having a way to open, edit, and save text files.",
    "Here are a few instructions if you need to start over, or want to remove what was installed.",
    "To uninstall Node/NVM, delete the NVM directory, this is typically installed at $HOME/.nvm, delete using",
    "If this does not work and the $NVM_DIR environment variable is set you can remove using rm -rf \"$NVM_DIR\"",
    "To clean up any installed JavaScript packages remove the global .npm directory at $HOME/.npm,",
    "Just as you confirmed the installation worked, you can confirm the uninstall worked. First quit and restart terminal and then try to run npm -v, node -v, and nvm -v you should then see a “command not found” error in the terminal.",
    "Welcome! Let’s get started building with blocks. Blocks are at the core of extending WordPress. You can create custom blocks, your own block patterns, or combine them together to build a block theme. At a high level, here are a few ways to begin your journey but read on to explore more:",
    "Development Environment – A guide to setup your local environment for JavaScript development for creating plugins, themes, and the tools you will need to extend WordPress or contribute to the block editor.",
    "Create a Block Tutorial – Learn how to create your first block for the WordPress block editor.",
    "Full Site Editing – Full Site Editing (FSE) is an umbrella project name for the collection of features that bring the experience and extendability of blocks to all parts of your site—from settings and styles, to templates and themes, and more.",
    "Create a Block Theme – Learn how block themes use blocks to build templates and the theme.json to provide styles.",
    "New features and changes are important to keep up to date on as the Gutenberg project continues. Each person will have their own unique needs in keeping up with a project of this scale. What follows is more of a catalogue of ways to keep up rather than a recommendation for how to do so.",
    "Yearly:",
    "The WordPress.org Roadmap with Four Phases of Gutenberg updated by project leadership. This is the highest level overview of the changes coming to WordPress.",
    "Quarterly:",
    "Quarterly Updates from Contribution Teams. These updates give an overview on what each team is working on, struggling with, and how to get involved.",
    "Monthly:",
    "“What’s Next In Gutenberg?” posts. These updates are wrangled by the Core Editor team and highlight areas of work aligned with the Gutenberg roadmap for contributors to help, how to get involved, and more.",
    "Block Based Themes Meeting. These meetings are currently wrangled in the #themereview Slack channel and are dedicated to sharing FSE changes that will specifically impact themes. Agendas and summaries are shared on the Make Themes blog.",
    "Biweekly:",
    "“What’s New In Gutenberg?” release posts. These updates are wrangled by the Core Editor team and focus on what’s been released in each biweekly Gutenberg release. They include the most relevant features released and a full changelog.",
    "Weekly:",
    "Core Editor meetings. These meetings are wrangled by volunteer members in the #core-editor Slack channel. Agendas and summaries are shared on the Make Core blog. They focus on task coordination and relevant discussions around Gutenberg releases. There is an Open Floor period in each chat where people can suggest topics to discuss.",
    "Weekly Theme Related Gutenberg Updates. These posts are focused on themes, including everything from current discussions to recent changes, as well as helpful resources for theme authors.",
    "Daily:",
    "Checking in on issues and PRs on GitHub. This will give you a nearly real-time understanding of what’s being worked on by the developers and designers."
  ],
  "links": [
    {
      "text": "Skip to content",
      "url": "https://developer.wordpress.org/block-editor/#content"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2F&locale=en_US"
    },
    {
      "text": "Register",
      "url": "https://login.wordpress.org/register?locale=en_US"
    },
    {
      "text": "WordPress.org",
      "url": "https://wordpress.org/"
    },
    {
      "text": "News",
      "url": "https://wordpress.org/news/"
    },
    {
      "text": "Download & Extend",
      "url": "https://wordpress.org/download/"
    },
    {
      "text": "Get WordPress",
      "url": "https://wordpress.org/download/"
    },
    {
      "text": "Themes",
      "url": "https://wordpress.org/themes/"
    },
    {
      "text": "Patterns",
      "url": "https://wordpress.org/patterns/"
    },
    {
      "text": "Plugins",
      "url": "https://wordpress.org/plugins/"
    },
    {
      "text": "Mobile",
      "url": "https://wordpress.org/mobile/"
    },
    {
      "text": "Hosting",
      "url": "https://wordpress.org/hosting/"
    },
    {
      "text": "Openverse ↗︎",
      "url": "https://openverse.org/"
    },
    {
      "text": "Learn",
      "url": "https://learn.wordpress.org/"
    },
    {
      "text": "Learn WordPress",
      "url": "https://learn.wordpress.org/"
    },
    {
      "text": "Documentation",
      "url": "https://wordpress.org/documentation/"
    },
    {
      "text": "Forums",
      "url": "https://wordpress.org/support/forums/"
    },
    {
      "text": "Developers",
      "url": "https://developer.wordpress.org/"
    },
    {
      "text": "WordPress.tv ↗︎",
      "url": "https://wordpress.tv/"
    },
    {
      "text": "Community",
      "url": "https://make.wordpress.org/"
    },
    {
      "text": "Make WordPress",
      "url": "https://make.wordpress.org/"
    },
    {
      "text": "Photo Directory",
      "url": "https://wordpress.org/photos/"
    },
    {
      "text": "Five for the Future",
      "url": "https://wordpress.org/five-for-the-future/"
    },
    {
      "text": "WordCamp ↗︎",
      "url": "https://central.wordcamp.org/"
    },
    {
      "text": "Meetups ↗︎",
      "url": "https://www.meetup.com/pro/wordpress/"
    },
    {
      "text": "Job Board ↗︎",
      "url": "https://jobs.wordpress.net/"
    },
    {
      "text": "About",
      "url": "https://wordpress.org/about/"
    },
    {
      "text": "About WordPress",
      "url": "https://wordpress.org/about/"
    },
    {
      "text": "Showcase",
      "url": "https://wordpress.org/showcase/"
    },
    {
      "text": "Enterprise",
      "url": "https://wordpress.org/enterprise/"
    },
    {
      "text": "Gutenberg ↗︎",
      "url": "https://wordpress.org/gutenberg/"
    },
    {
      "text": "WordPress Swag Store ↗︎",
      "url": "https://mercantile.wordpress.org/"
    },
    {
      "text": "Menu",
      "url": "https://developer.wordpress.org/block-editor/"
    },
    {
      "text": "Developer Resources",
      "url": "https://developer.wordpress.org/"
    },
    {
      "text": "",
      "url": "https://developer.wordpress.org/block-editor/"
    },
    {
      "text": "Block Editor Handbook",
      "url": "https://developer.wordpress.org/block-editor/"
    },
    {
      "text": "Getting Started",
      "url": "https://developer.wordpress.org/block-editor/getting-started/"
    },
    {
      "text": "Development Environment",
      "url": "https://developer.wordpress.org/block-editor/getting-started/devenv/"
    },
    {
      "text": "How to setup local WordPress environment on Ubuntu",
      "url": "https://developer.wordpress.org/block-editor/getting-started/devenv/docker-ubuntu/"
    },
    {
      "text": "Create a Block Tutorial",
      "url": "https://developer.wordpress.org/block-editor/getting-started/create-block/"
    },
    {
      "text": "WordPress Plugin",
      "url": "https://developer.wordpress.org/block-editor/getting-started/create-block/wp-plugin/"
    },
    {
      "text": "Anatomy of a Block",
      "url": "https://developer.wordpress.org/block-editor/getting-started/create-block/block-anatomy/"
    },
    {
      "text": "Block Attributes",
      "url": "https://developer.wordpress.org/block-editor/getting-started/create-block/attributes/"
    },
    {
      "text": "Code Implementation",
      "url": "https://developer.wordpress.org/block-editor/getting-started/create-block/block-code/"
    },
    {
      "text": "Authoring Experience",
      "url": "https://developer.wordpress.org/block-editor/getting-started/create-block/author-experience/"
    },
    {
      "text": "Finishing Touches",
      "url": "https://developer.wordpress.org/block-editor/getting-started/create-block/finishing/"
    },
    {
      "text": "Share your Block with the World",
      "url": "https://developer.wordpress.org/block-editor/getting-started/create-block/submitting-to-block-directory/"
    },
    {
      "text": "Full Site Editing",
      "url": "https://developer.wordpress.org/block-editor/getting-started/full-site-editing/"
    },
    {
      "text": "Outreach",
      "url": "https://developer.wordpress.org/block-editor/getting-started/outreach/"
    },
    {
      "text": "How-to Guides",
      "url": "https://developer.wordpress.org/block-editor/how-to-guides/"
    },
    {
      "text": "Accessibility",
      "url": "https://developer.wordpress.org/block-editor/how-to-guides/accessibility/"
    },
    {
      "text": "Blocks",
      "url": "https://developer.wordpress.org/block-editor/how-to-guides/block-tutorial/"
    },
    {
      "text": "Create a basic block",
      "url": "https://developer.wordpress.org/block-editor/how-to-guides/block-tutorial/writing-your-first-block-type/"
    },
    {
      "text": "Use styles and stylesheets",
      "url": "https://developer.wordpress.org/block-editor/how-to-guides/block-tutorial/applying-styles-with-stylesheets/"
    },
    {
      "text": "Introducing Attributes and Editable Fields",
      "url": "https://developer.wordpress.org/block-editor/how-to-guides/block-tutorial/introducing-attributes-and-editable-fields/"
    },
    {
      "text": "Block Controls: Block Toolbar and Settings Sidebar",
      "url": "https://developer.wordpress.org/block-editor/how-to-guides/block-tutorial/block-controls-toolbar-and-sidebar/"
    },
    {
      "text": "Block Supports",
      "url": "https://developer.wordpress.org/block-editor/how-to-guides/block-tutorial/block-supports-in-static-blocks/"
    },
    {
      "text": "Creating dynamic blocks",
      "url": "https://developer.wordpress.org/block-editor/how-to-guides/block-tutorial/creating-dynamic-blocks/"
    },
    {
      "text": "Block Supports in dynamic blocks",
      "url": "https://developer.wordpress.org/block-editor/how-to-guides/block-tutorial/block-supports-in-dynamic-blocks/"
    },
    {
      "text": "Generate Blocks with WP-CLI",
      "url": "https://developer.wordpress.org/block-editor/how-to-guides/block-tutorial/generate-blocks-with-wp-cli/"
    },
    {
      "text": "Nested Blocks: Using InnerBlocks",
      "url": "https://developer.wordpress.org/block-editor/how-to-guides/block-tutorial/nested-blocks-inner-blocks/"
    },
    {
      "text": "Extending the Query Loop block",
      "url": "https://developer.wordpress.org/block-editor/how-to-guides/block-tutorial/extending-the-query-loop-block/"
    },
    {
      "text": "Development Platform",
      "url": "https://developer.wordpress.org/block-editor/how-to-guides/platform/"
    },
    {
      "text": "Building a custom block editor",
      "url": "https://developer.wordpress.org/block-editor/how-to-guides/platform/custom-block-editor/"
    },
    {
      "text": "Tutorial: building a custom block editor",
      "url": "https://developer.wordpress.org/block-editor/how-to-guides/platform/custom-block-editor/tutorial/"
    },
    {
      "text": "Create your First App with Gutenberg Data",
      "url": "https://developer.wordpress.org/block-editor/how-to-guides/data-basics/"
    },
    {
      "text": "Setup",
      "url": "https://developer.wordpress.org/block-editor/how-to-guides/data-basics/1-data-basics-setup/"
    },
    {
      "text": "Building a list of pages",
      "url": "https://developer.wordpress.org/block-editor/how-to-guides/data-basics/2-building-a-list-of-pages/"
    },
    {
      "text": "Building an edit form",
      "url": "https://developer.wordpress.org/block-editor/how-to-guides/data-basics/3-building-an-edit-form/"
    },
    {
      "text": "Part 4: Building a Create page form",
      "url": "https://developer.wordpress.org/block-editor/how-to-guides/data-basics/4-building-a-create-page-form/"
    },
    {
      "text": "Adding a delete button",
      "url": "https://developer.wordpress.org/block-editor/how-to-guides/data-basics/5-adding-a-delete-button/"
    },
    {
      "text": "Curating the Editor Experience",
      "url": "https://developer.wordpress.org/block-editor/how-to-guides/curating-the-editor-experience/"
    },
    {
      "text": "Feature Flags",
      "url": "https://developer.wordpress.org/block-editor/how-to-guides/feature-flags/"
    },
    {
      "text": "Formatting Toolbar API",
      "url": "https://developer.wordpress.org/block-editor/how-to-guides/format-api/"
    },
    {
      "text": "How to use JavaScript with the Block Editor",
      "url": "https://developer.wordpress.org/block-editor/how-to-guides/javascript/"
    },
    {
      "text": "Plugins Background",
      "url": "https://developer.wordpress.org/block-editor/how-to-guides/javascript/plugins-background/"
    },
    {
      "text": "Loading JavaScript",
      "url": "https://developer.wordpress.org/block-editor/how-to-guides/javascript/loading-javascript/"
    },
    {
      "text": "Extending the Block Editor",
      "url": "https://developer.wordpress.org/block-editor/how-to-guides/javascript/extending-the-block-editor/"
    },
    {
      "text": "Troubleshooting",
      "url": "https://developer.wordpress.org/block-editor/how-to-guides/javascript/troubleshooting/"
    },
    {
      "text": "JavaScript Versions and Build Step",
      "url": "https://developer.wordpress.org/block-editor/how-to-guides/javascript/versions-and-building/"
    },
    {
      "text": "Scope Your Code",
      "url": "https://developer.wordpress.org/block-editor/how-to-guides/javascript/scope-your-code/"
    },
    {
      "text": "JavaScript Build Setup",
      "url": "https://developer.wordpress.org/block-editor/how-to-guides/javascript/js-build-setup/"
    },
    {
      "text": "ESNext Syntax",
      "url": "https://developer.wordpress.org/block-editor/how-to-guides/javascript/esnext-js/"
    },
    {
      "text": "Internationalization",
      "url": "https://developer.wordpress.org/block-editor/how-to-guides/internationalization/"
    },
    {
      "text": "Meta Boxes",
      "url": "https://developer.wordpress.org/block-editor/how-to-guides/metabox/"
    },
    {
      "text": "Notices",
      "url": "https://developer.wordpress.org/block-editor/how-to-guides/notices/"
    },
    {
      "text": "Plugin Sidebar",
      "url": "https://developer.wordpress.org/block-editor/how-to-guides/plugin-sidebar-0/"
    },
    {
      "text": "Propagating updates for block types",
      "url": "https://developer.wordpress.org/block-editor/how-to-guides/propagating-updates/"
    },
    {
      "text": "Themes",
      "url": "https://developer.wordpress.org/block-editor/how-to-guides/themes/"
    },
    {
      "text": "Create a block theme",
      "url": "https://developer.wordpress.org/block-editor/how-to-guides/themes/create-block-theme/"
    },
    {
      "text": "Block Theme",
      "url": "https://developer.wordpress.org/block-editor/how-to-guides/themes/block-theme-overview/"
    },
    {
      "text": "Global Settings & Styles (theme.json)",
      "url": "https://developer.wordpress.org/block-editor/how-to-guides/themes/theme-json/"
    },
    {
      "text": "Theme Support",
      "url": "https://developer.wordpress.org/block-editor/how-to-guides/themes/theme-support/"
    },
    {
      "text": "Thunks in Core-Data",
      "url": "https://developer.wordpress.org/block-editor/how-to-guides/thunks/"
    },
    {
      "text": "Widgets",
      "url": "https://developer.wordpress.org/block-editor/how-to-guides/widgets/"
    },
    {
      "text": "Widgets Block Editor overview",
      "url": "https://developer.wordpress.org/block-editor/how-to-guides/widgets/overview/"
    },
    {
      "text": "Restoring the classic Widgets Editor",
      "url": "https://developer.wordpress.org/block-editor/how-to-guides/widgets/opting-out/"
    },
    {
      "text": "About the Legacy Widget block",
      "url": "https://developer.wordpress.org/block-editor/how-to-guides/widgets/legacy-widget-block/"
    },
    {
      "text": "Reference Guides",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/"
    },
    {
      "text": "Block API Reference",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/block-api/"
    },
    {
      "text": "Annotations",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/block-api/block-annotations/"
    },
    {
      "text": "API Versions",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/block-api/block-api-versions/"
    },
    {
      "text": "Attributes",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/block-api/block-attributes/"
    },
    {
      "text": "Context",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/block-api/block-context/"
    },
    {
      "text": "Deprecation",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/block-api/block-deprecation/"
    },
    {
      "text": "Edit and Save",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/block-api/block-edit-save/"
    },
    {
      "text": "Metadata in block.json",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/block-api/block-metadata/"
    },
    {
      "text": "Patterns",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/block-api/block-patterns/"
    },
    {
      "text": "Registration",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/block-api/block-registration/"
    },
    {
      "text": "Selectors",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/block-api/block-selectors/"
    },
    {
      "text": "Styles",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/block-api/block-styles/"
    },
    {
      "text": "Supports",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/block-api/block-supports/"
    },
    {
      "text": "Templates",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/block-api/block-templates/"
    },
    {
      "text": "Transforms",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/block-api/block-transforms/"
    },
    {
      "text": "Variations",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/block-api/block-variations/"
    },
    {
      "text": "Core Blocks Reference",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/core-blocks/"
    },
    {
      "text": "Hooks Reference",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/filters/"
    },
    {
      "text": "Block Hooks",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/filters/block-filters/"
    },
    {
      "text": "Editor Hooks",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/filters/editor-filters/"
    },
    {
      "text": "i18n Filters",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/filters/i18n-filters/"
    },
    {
      "text": "Parser Filters",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/filters/parser-filters/"
    },
    {
      "text": "Autocomplete",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/filters/autocomplete-filters/"
    },
    {
      "text": "Global Styles Filters",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/filters/global-styles-filters/"
    },
    {
      "text": "SlotFills Reference",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/slotfills/"
    },
    {
      "text": "MainDashboardButton",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/slotfills/main-dashboard-button/"
    },
    {
      "text": "PluginBlockSettingsMenuItem",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/slotfills/plugin-block-settings-menu-item/"
    },
    {
      "text": "PluginDocumentSettingPanel",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/slotfills/plugin-document-setting-panel/"
    },
    {
      "text": "PluginMoreMenuItem",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/slotfills/plugin-more-menu-item/"
    },
    {
      "text": "PluginPostPublishPanel",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/slotfills/plugin-post-publish-panel/"
    },
    {
      "text": "PluginPostStatusInfo",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/slotfills/plugin-post-status-info/"
    },
    {
      "text": "PluginPrePublishPanel",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/slotfills/plugin-pre-publish-panel/"
    },
    {
      "text": "PluginSidebar",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/slotfills/plugin-sidebar/"
    },
    {
      "text": "PluginSidebarMoreMenuItem",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/slotfills/plugin-sidebar-more-menu-item/"
    },
    {
      "text": "RichText Reference",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/richtext/"
    },
    {
      "text": "Theme.json Reference",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/theme-json-reference/"
    },
    {
      "text": "Version 2 (living reference)",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/theme-json-reference/theme-json-living/"
    },
    {
      "text": "Version 1 Reference",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/theme-json-reference/theme-json-v1/"
    },
    {
      "text": "Migrating to Newer Versions",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/theme-json-reference/theme-json-migrations/"
    },
    {
      "text": "Available Styles Options",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/theme-json-reference/styles-versions/"
    },
    {
      "text": "Component Reference",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/"
    },
    {
      "text": "AlignmentMatrixControl",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/alignment-matrix-control/"
    },
    {
      "text": "AnglePickerControl",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/angle-picker-control/"
    },
    {
      "text": "Animate",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/animate/"
    },
    {
      "text": "Autocomplete",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/autocomplete/"
    },
    {
      "text": "BaseField",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/base-field/"
    },
    {
      "text": "BaseControl",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/base-control/"
    },
    {
      "text": "BorderBoxControl",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/border-box-control/"
    },
    {
      "text": "BorderControl",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/border-control/"
    },
    {
      "text": "BoxControl",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/box-control/"
    },
    {
      "text": "ButtonGroup",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/button-group/"
    },
    {
      "text": "Button",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/button/"
    },
    {
      "text": "CardBody",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/card-body/"
    },
    {
      "text": "CardDivider",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/card-divider/"
    },
    {
      "text": "CardFooter",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/card-footer/"
    },
    {
      "text": "CardHeader",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/card-header/"
    },
    {
      "text": "CardMedia",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/card-media/"
    },
    {
      "text": "Card",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/card/"
    },
    {
      "text": "CheckboxControl",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/checkbox-control/"
    },
    {
      "text": "CircularOptionPicker",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/circular-option-picker/"
    },
    {
      "text": "ClipboardButton",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/clipboard-button/"
    },
    {
      "text": "ColorIndicator",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/color-indicator/"
    },
    {
      "text": "ColorPalette",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/color-palette/"
    },
    {
      "text": "ColorPicker",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/color-picker/"
    },
    {
      "text": "ComboboxControl",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/combobox-control/"
    },
    {
      "text": "ConfirmDialog",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/confirm-dialog/"
    },
    {
      "text": "CustomSelectControl",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/custom-select-control/"
    },
    {
      "text": "Dashicon",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/dashicon/"
    },
    {
      "text": "DateTime",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/date-time/"
    },
    {
      "text": "DimensionControl",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/dimension-control/"
    },
    {
      "text": "Disabled",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/disabled/"
    },
    {
      "text": "Divider",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/divider/"
    },
    {
      "text": "Draggable",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/draggable/"
    },
    {
      "text": "DropZone",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/drop-zone/"
    },
    {
      "text": "DropdownMenu",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/dropdown-menu/"
    },
    {
      "text": "Flyout",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/flyout/"
    },
    {
      "text": "Dropdown",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/dropdown/"
    },
    {
      "text": "DuotonePicker",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/duotone-picker/"
    },
    {
      "text": "Elevation",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/elevation/"
    },
    {
      "text": "ExternalLink",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/external-link/"
    },
    {
      "text": "FlexBlock",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/flex-block/"
    },
    {
      "text": "FlexItem",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/flex-item/"
    },
    {
      "text": "Flex",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/flex/"
    },
    {
      "text": "FocalPointPicker",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/focal-point-picker/"
    },
    {
      "text": "FocusableIframe",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/focusable-iframe/"
    },
    {
      "text": "FontSizePicker",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/font-size-picker/"
    },
    {
      "text": "FormFileUpload",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/form-file-upload/"
    },
    {
      "text": "FormToggle",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/form-toggle/"
    },
    {
      "text": "FormTokenField",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/form-token-field/"
    },
    {
      "text": "GradientPicker",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/gradient-picker/"
    },
    {
      "text": "Grid",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/grid/"
    },
    {
      "text": "Guide",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/guide/"
    },
    {
      "text": "HStack",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/h-stack/"
    },
    {
      "text": "Heading",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/heading/"
    },
    {
      "text": "NavigateRegions",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/navigate-regions/"
    },
    {
      "text": "HigherOrder",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/higher-order/"
    },
    {
      "text": "WithConstrainedTabbing",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/with-constrained-tabbing/"
    },
    {
      "text": "WithFallbackStyles",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/with-fallback-styles/"
    },
    {
      "text": "WithFilters",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/with-filters/"
    },
    {
      "text": "WithFocusOutside",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/with-focus-outside/"
    },
    {
      "text": "WithFocusReturn",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/with-focus-return/"
    },
    {
      "text": "WithNotices",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/with-notices/"
    },
    {
      "text": "WithSpokenMessages",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/with-spoken-messages/"
    },
    {
      "text": "Icon",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/icon/"
    },
    {
      "text": "InputControl",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/input-control/"
    },
    {
      "text": "IsolatedEventContainer",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/isolated-event-container/"
    },
    {
      "text": "ItemGroup",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/item-group/"
    },
    {
      "text": "Item",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/item/"
    },
    {
      "text": "KeyboardShortcuts",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/keyboard-shortcuts/"
    },
    {
      "text": "MenuGroup",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/menu-group/"
    },
    {
      "text": "MenuItem",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/menu-item/"
    },
    {
      "text": "MenuItemsChoice",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/menu-items-choice/"
    },
    {
      "text": "Modal",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/modal/"
    },
    {
      "text": "NavigableContainer",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/navigable-container/"
    },
    {
      "text": "Navigation",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/navigation/"
    },
    {
      "text": "NavigatorBackButton",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/navigator-back-button/"
    },
    {
      "text": "NavigatorButton",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/navigator-button/"
    },
    {
      "text": "Navigator",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/navigator/"
    },
    {
      "text": "NavigatorProvider",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/navigator-provider/"
    },
    {
      "text": "NavigatorScreen",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/navigator-screen/"
    },
    {
      "text": "NavigatorToParentButton",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/navigator-to-parent-button/"
    },
    {
      "text": "Notice",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/notice/"
    },
    {
      "text": "NumberControl",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/number-control/"
    },
    {
      "text": "Panel",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/panel/"
    },
    {
      "text": "Placeholder",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/placeholder/"
    },
    {
      "text": "Popover",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/popover/"
    },
    {
      "text": "QueryControls",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/query-controls/"
    },
    {
      "text": "RadioControl",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/radio-control/"
    },
    {
      "text": "RadioGroup",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/radio-group/"
    },
    {
      "text": "RangeControl",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/range-control/"
    },
    {
      "text": "ResizableBox",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/resizable-box/"
    },
    {
      "text": "ResizeTooltip",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/resize-tooltip/"
    },
    {
      "text": "ResponsiveWrapper",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/responsive-wrapper/"
    },
    {
      "text": "Sandbox",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/sandbox/"
    },
    {
      "text": "ScrollLock",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/scroll-lock/"
    },
    {
      "text": "Scrollable",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/scrollable/"
    },
    {
      "text": "SearchControl",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/search-control/"
    },
    {
      "text": "SelectControl",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/select-control/"
    },
    {
      "text": "SlotFill",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/slot-fill/"
    },
    {
      "text": "Snackbar",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/snackbar/"
    },
    {
      "text": "Spacer",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/spacer/"
    },
    {
      "text": "Spinner",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/spinner/"
    },
    {
      "text": "Surface",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/surface/"
    },
    {
      "text": "TabPanel",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/tab-panel/"
    },
    {
      "text": "TextControl",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/text-control/"
    },
    {
      "text": "TextHighlight",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/text-highlight/"
    },
    {
      "text": "Theme",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/theme/"
    },
    {
      "text": "Text",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/text/"
    },
    {
      "text": "TextareaControl",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/textarea-control/"
    },
    {
      "text": "ToggleControl",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/toggle-control/"
    },
    {
      "text": "ToggleGroupControlOptionBase",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/toggle-group-control-option-base/"
    },
    {
      "text": "ToggleGroupControlOptionIcon",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/toggle-group-control-option-icon/"
    },
    {
      "text": "ToggleGroupControlOption",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/toggle-group-control-option/"
    },
    {
      "text": "ToggleGroupControl",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/toggle-group-control/"
    },
    {
      "text": "ToolbarButton",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/toolbar-button/"
    },
    {
      "text": "ToolbarDropdownMenu",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/toolbar-dropdown-menu/"
    },
    {
      "text": "ToolbarGroup",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/toolbar-group/"
    },
    {
      "text": "ToolbarItem",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/toolbar-item/"
    },
    {
      "text": "Toolbar",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/toolbar/"
    },
    {
      "text": "ToolsPanelHeader",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/tools-panel-header/"
    },
    {
      "text": "ToolsPanelItem",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/tools-panel-item/"
    },
    {
      "text": "ToolsPanel",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/tools-panel/"
    },
    {
      "text": "Tooltip",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/tooltip/"
    },
    {
      "text": "TreeGrid",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/tree-grid/"
    },
    {
      "text": "TreeSelect",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/tree-select/"
    },
    {
      "text": "Truncate",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/truncate/"
    },
    {
      "text": "UnitControl",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/unit-control/"
    },
    {
      "text": "VStack",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/v-stack/"
    },
    {
      "text": "VisuallyHidden",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/visually-hidden/"
    },
    {
      "text": "ZStack",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/z-stack/"
    },
    {
      "text": "Package Reference",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/"
    },
    {
      "text": "@wordpress/admin-manifest",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-admin-manifest/"
    },
    {
      "text": "@wordpress/a11y",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-a11y/"
    },
    {
      "text": "@wordpress/annotations",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-annotations/"
    },
    {
      "text": "@wordpress/api-fetch",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-api-fetch/"
    },
    {
      "text": "@wordpress/autop",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-autop/"
    },
    {
      "text": "@wordpress/babel-plugin-import-jsx-pragma",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-babel-plugin-import-jsx-pragma/"
    },
    {
      "text": "@wordpress/babel-plugin-makepot",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-babel-plugin-makepot/"
    },
    {
      "text": "@wordpress/babel-preset-default",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-babel-preset-default/"
    },
    {
      "text": "@wordpress/base-styles",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-base-styles/"
    },
    {
      "text": "@wordpress/blob",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-blob/"
    },
    {
      "text": "@wordpress/block-directory",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-block-directory/"
    },
    {
      "text": "@wordpress/block-editor",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-block-editor/"
    },
    {
      "text": "@wordpress/block-library",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-block-library/"
    },
    {
      "text": "@wordpress/block-serialization-default-parser",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-block-serialization-default-parser/"
    },
    {
      "text": "@wordpress/block-serialization-spec-parser",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-block-serialization-spec-parser/"
    },
    {
      "text": "@wordpress/blocks",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-blocks/"
    },
    {
      "text": "@wordpress/browserslist-config",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-browserslist-config/"
    },
    {
      "text": "@wordpress/commands",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-commands/"
    },
    {
      "text": "@wordpress/components",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-components/"
    },
    {
      "text": "@wordpress/compose",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-compose/"
    },
    {
      "text": "@wordpress/core-data",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-core-data/"
    },
    {
      "text": "@wordpress/create-block-tutorial-template",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-create-block-tutorial-template/"
    },
    {
      "text": "@wordpress/custom-templated-path-webpack-plugin",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-custom-templated-path-webpack-plugin/"
    },
    {
      "text": "@wordpress/create-block",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-create-block/"
    },
    {
      "text": "External Project Templates",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-create-block/packages-create-block-external-template/"
    },
    {
      "text": "@wordpress/edit-navigation",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-edit-navigation/"
    },
    {
      "text": "@wordpress/customize-widgets",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-customize-widgets/"
    },
    {
      "text": "@wordpress/data-controls",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-data-controls/"
    },
    {
      "text": "@wordpress/data",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-data/"
    },
    {
      "text": "@wordpress/date",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-date/"
    },
    {
      "text": "@wordpress/dependency-extraction-webpack-plugin",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-dependency-extraction-webpack-plugin/"
    },
    {
      "text": "@wordpress/deprecated",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-deprecated/"
    },
    {
      "text": "@wordpress/docgen",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-docgen/"
    },
    {
      "text": "@wordpress/dom-ready",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-dom-ready/"
    },
    {
      "text": "@wordpress/dom",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-dom/"
    },
    {
      "text": "@wordpress/e2e-test-utils",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-e2e-test-utils/"
    },
    {
      "text": "@wordpress/e2e-tests",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-e2e-tests/"
    },
    {
      "text": "@wordpress/edit-post",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-edit-post/"
    },
    {
      "text": "@wordpress/edit-site",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-edit-site/"
    },
    {
      "text": "@wordpress/edit-widgets",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-edit-widgets/"
    },
    {
      "text": "@wordpress/editor",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-editor/"
    },
    {
      "text": "@wordpress/element",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-element/"
    },
    {
      "text": "@wordpress/experiments",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-experiments/"
    },
    {
      "text": "@wordpress/env",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-env/"
    },
    {
      "text": "@wordpress/escape-html",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-escape-html/"
    },
    {
      "text": "@wordpress/eslint-plugin",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-eslint-plugin/"
    },
    {
      "text": "@wordpress/format-library",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-format-library/"
    },
    {
      "text": "@wordpress/hooks",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-hooks/"
    },
    {
      "text": "@wordpress/html-entities",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-html-entities/"
    },
    {
      "text": "@wordpress/i18n",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-i18n/"
    },
    {
      "text": "@wordpress/icons",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-icons/"
    },
    {
      "text": "@wordpress/interface",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-interface/"
    },
    {
      "text": "@wordpress/is-shallow-equal",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-is-shallow-equal/"
    },
    {
      "text": "@wordpress/jest-console",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-jest-console/"
    },
    {
      "text": "@wordpress/jest-preset-default",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-jest-preset-default/"
    },
    {
      "text": "@wordpress/jest-puppeteer-axe",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-jest-puppeteer-axe/"
    },
    {
      "text": "@wordpress/keyboard-shortcuts",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-keyboard-shortcuts/"
    },
    {
      "text": "@wordpress/keycodes",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-keycodes/"
    },
    {
      "text": "@wordpress/library-export-default-webpack-plugin",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-library-export-default-webpack-plugin/"
    },
    {
      "text": "@wordpress/lazy-import",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-lazy-import/"
    },
    {
      "text": "@wordpress/list-reusable-blocks",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-list-reusable-blocks/"
    },
    {
      "text": "@wordpress/media-utils",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-media-utils/"
    },
    {
      "text": "@wordpress/notices",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-notices/"
    },
    {
      "text": "@wordpress/react-native-aztec",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-react-native-aztec/"
    },
    {
      "text": "@wordpress/npm-package-json-lint-config",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-npm-package-json-lint-config/"
    },
    {
      "text": "@wordpress/react-native-bridge",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-react-native-bridge/"
    },
    {
      "text": "@wordpress/nux",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-nux/"
    },
    {
      "text": "@wordpress/plugins",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-plugins/"
    },
    {
      "text": "@wordpress/react-native-editor",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-react-native-editor/"
    },
    {
      "text": "@wordpress/postcss-plugins-preset",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-postcss-plugins-preset/"
    },
    {
      "text": "@wordpress/postcss-themes",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-postcss-themes/"
    },
    {
      "text": "@wordpress/preferences-persistence",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-preferences-persistence/"
    },
    {
      "text": "@wordpress/preferences",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-preferences/"
    },
    {
      "text": "@wordpress/prettier-config",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-prettier-config/"
    },
    {
      "text": "@wordpress/primitives",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-primitives/"
    },
    {
      "text": "@wordpress/priority-queue",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-priority-queue/"
    },
    {
      "text": "@wordpress/private-apis",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-private-apis/"
    },
    {
      "text": "@wordpress/project-management-automation",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-project-management-automation/"
    },
    {
      "text": "@wordpress/react-i18n",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-react-i18n/"
    },
    {
      "text": "@wordpress/readable-js-assets-webpack-plugin",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-readable-js-assets-webpack-plugin/"
    },
    {
      "text": "@wordpress/redux-routine",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-redux-routine/"
    },
    {
      "text": "@wordpress/reusable-blocks",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-reusable-blocks/"
    },
    {
      "text": "@wordpress/rich-text",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-rich-text/"
    },
    {
      "text": "@wordpress/scripts",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-scripts/"
    },
    {
      "text": "@wordpress/server-side-render",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-server-side-render/"
    },
    {
      "text": "@wordpress/shortcode",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-shortcode/"
    },
    {
      "text": "@wordpress/style-engine",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-style-engine/"
    },
    {
      "text": "@wordpress/style-engine Using the Style Engine to generate block supports styles",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-style-engine/using-the-style-engine-with-block-supports/"
    },
    {
      "text": "@wordpress/stylelint-config",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-stylelint-config/"
    },
    {
      "text": "@wordpress/token-list",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-token-list/"
    },
    {
      "text": "@wordpress/url",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-url/"
    },
    {
      "text": "@wordpress/viewport",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-viewport/"
    },
    {
      "text": "@wordpress/warning",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-warning/"
    },
    {
      "text": "@wordpress/widgets",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-widgets/"
    },
    {
      "text": "@wordpress/wordcount",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-wordcount/"
    },
    {
      "text": "Data Module Reference",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/data/"
    },
    {
      "text": "WordPress Core Data",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/data/data-core/"
    },
    {
      "text": "Annotations",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/data/data-core-annotations/"
    },
    {
      "text": "Block directory",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/data/data-core-block-directory/"
    },
    {
      "text": "The Block Editor’s Data",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/data/data-core-block-editor/"
    },
    {
      "text": "Block Types Data",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/data/data-core-blocks/"
    },
    {
      "text": "Customize Widgets",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/data/data-core-customize-widgets/"
    },
    {
      "text": "The Editor’s UI Data",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/data/data-core-edit-post/"
    },
    {
      "text": "Edit Site",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/data/data-core-edit-site/"
    },
    {
      "text": "Edit Widgets",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/data/data-core-edit-widgets/"
    },
    {
      "text": "The Post Editor’s Data",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/data/data-core-editor/"
    },
    {
      "text": "The Keyboard Shortcuts Data",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/data/data-core-keyboard-shortcuts/"
    },
    {
      "text": "Notices Data",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/data/data-core-notices/"
    },
    {
      "text": "Preferences",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/data/data-core-preferences/"
    },
    {
      "text": "The NUX (New User Experience) Data",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/data/data-core-nux/"
    },
    {
      "text": "Reusable blocks",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/data/data-core-reusable-blocks/"
    },
    {
      "text": "Rich Text",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/data/data-core-rich-text/"
    },
    {
      "text": "The Viewport Data",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/data/data-core-viewport/"
    },
    {
      "text": "Explanations",
      "url": "https://developer.wordpress.org/block-editor/explanations/"
    },
    {
      "text": "Architecture",
      "url": "https://developer.wordpress.org/block-editor/explanations/architecture/"
    },
    {
      "text": "Key Concepts",
      "url": "https://developer.wordpress.org/block-editor/explanations/architecture/key-concepts/"
    },
    {
      "text": "Data Flow and Data Format",
      "url": "https://developer.wordpress.org/block-editor/explanations/architecture/data-flow/"
    },
    {
      "text": "Modularity",
      "url": "https://developer.wordpress.org/block-editor/explanations/architecture/modularity/"
    },
    {
      "text": "Performance",
      "url": "https://developer.wordpress.org/block-editor/explanations/architecture/performance/"
    },
    {
      "text": "Automated Testing",
      "url": "https://developer.wordpress.org/block-editor/explanations/architecture/automated-testing/"
    },
    {
      "text": "Site Editing Templates",
      "url": "https://developer.wordpress.org/block-editor/explanations/architecture/full-site-editing-templates/"
    },
    {
      "text": "Styles",
      "url": "https://developer.wordpress.org/block-editor/explanations/architecture/styles/"
    },
    {
      "text": "User Interface",
      "url": "https://developer.wordpress.org/block-editor/explanations/user-interface/"
    },
    {
      "text": "Block Design",
      "url": "https://developer.wordpress.org/block-editor/explanations/user-interface/block-design/"
    },
    {
      "text": "Animation",
      "url": "https://developer.wordpress.org/block-editor/explanations/user-interface/animation/"
    },
    {
      "text": "Resources",
      "url": "https://developer.wordpress.org/block-editor/explanations/user-interface/design-resources/"
    },
    {
      "text": "Frequently Asked Questions",
      "url": "https://developer.wordpress.org/block-editor/explanations/faq/"
    },
    {
      "text": "Glossary",
      "url": "https://developer.wordpress.org/block-editor/explanations/glossary/"
    },
    {
      "text": "History",
      "url": "https://developer.wordpress.org/block-editor/explanations/history/"
    },
    {
      "text": "Contributor Guide",
      "url": "https://developer.wordpress.org/block-editor/contributors/"
    },
    {
      "text": "Code Contributions",
      "url": "https://developer.wordpress.org/block-editor/contributors/code/"
    },
    {
      "text": "Getting Started With Code Contribution",
      "url": "https://developer.wordpress.org/block-editor/contributors/code/getting-started-with-code-contribution/"
    },
    {
      "text": "Git Workflow",
      "url": "https://developer.wordpress.org/block-editor/contributors/code/git-workflow/"
    },
    {
      "text": "Coding Guidelines",
      "url": "https://developer.wordpress.org/block-editor/contributors/code/coding-guidelines/"
    },
    {
      "text": "Testing Overview",
      "url": "https://developer.wordpress.org/block-editor/contributors/code/testing-overview/"
    },
    {
      "text": "End-to-End Testing",
      "url": "https://developer.wordpress.org/block-editor/contributors/code/testing-overview/e2e/"
    },
    {
      "text": "Migration guide",
      "url": "https://developer.wordpress.org/block-editor/contributors/code/testing-overview/e2e/migration/"
    },
    {
      "text": "Overusing snapshots",
      "url": "https://developer.wordpress.org/block-editor/contributors/code/testing-overview/e2e/overusing-snapshots/"
    },
    {
      "text": "Block Grammar",
      "url": "https://developer.wordpress.org/block-editor/contributors/code/grammar/"
    },
    {
      "text": "Scripts",
      "url": "https://developer.wordpress.org/block-editor/contributors/code/scripts/"
    },
    {
      "text": "Managing Packages",
      "url": "https://developer.wordpress.org/block-editor/contributors/code/managing-packages/"
    },
    {
      "text": "Gutenberg Release Process",
      "url": "https://developer.wordpress.org/block-editor/contributors/code/release/"
    },
    {
      "text": "Cherry-picking automation",
      "url": "https://developer.wordpress.org/block-editor/contributors/code/release/auto-cherry-picking/"
    },
    {
      "text": "React Native mobile editor",
      "url": "https://developer.wordpress.org/block-editor/contributors/code/react-native/"
    },
    {
      "text": "Getting Started for the React Native based Mobile Gutenberg",
      "url": "https://developer.wordpress.org/block-editor/contributors/code/react-native/getting-started-react-native/"
    },
    {
      "text": "Setup guide for React Native development (macOS)",
      "url": "https://developer.wordpress.org/block-editor/contributors/code/react-native/osx-setup-guide/"
    },
    {
      "text": "React Native Integration Test Guide",
      "url": "https://developer.wordpress.org/block-editor/contributors/code/react-native/integration-test-guide/"
    },
    {
      "text": "React Native Internationalization Guide",
      "url": "https://developer.wordpress.org/block-editor/contributors/code/react-native/internationalization-guide/"
    },
    {
      "text": "Backward Compatibility",
      "url": "https://developer.wordpress.org/block-editor/contributors/code/backward-compatibility/"
    },
    {
      "text": "Deprecations",
      "url": "https://developer.wordpress.org/block-editor/contributors/code/deprecations/"
    },
    {
      "text": "How To Get Your Pull Request Reviewed?",
      "url": "https://developer.wordpress.org/block-editor/contributors/code/how-to-get-your-pull-request-reviewed/"
    },
    {
      "text": "Design Contributions",
      "url": "https://developer.wordpress.org/block-editor/contributors/design/"
    },
    {
      "text": "Blocks are the Interface",
      "url": "https://developer.wordpress.org/block-editor/contributors/design/the-block/"
    },
    {
      "text": "Reference",
      "url": "https://developer.wordpress.org/block-editor/contributors/design/reference/"
    },
    {
      "text": "Documentation Contributions",
      "url": "https://developer.wordpress.org/block-editor/contributors/documentation/"
    },
    {
      "text": "Copy Guidelines",
      "url": "https://developer.wordpress.org/block-editor/contributors/documentation/copy-guide/"
    },
    {
      "text": "Triage",
      "url": "https://developer.wordpress.org/block-editor/contributors/triage/"
    },
    {
      "text": "Localizing Gutenberg",
      "url": "https://developer.wordpress.org/block-editor/contributors/localizing/"
    },
    {
      "text": "Accessibility Testing",
      "url": "https://developer.wordpress.org/block-editor/contributors/accessibility-testing/"
    },
    {
      "text": "Repository Management",
      "url": "https://developer.wordpress.org/block-editor/contributors/repository-management/"
    },
    {
      "text": "Folder Structure",
      "url": "https://developer.wordpress.org/block-editor/contributors/folder-structure/"
    },
    {
      "text": "Versions in WordPress",
      "url": "https://developer.wordpress.org/block-editor/contributors/versions-in-wordpress/"
    },
    {
      "text": "Upcoming Projects & Roadmap",
      "url": "https://developer.wordpress.org/block-editor/contributors/roadmap/"
    },
    {
      "text": "Home",
      "url": "https://developer.wordpress.org"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/docs/README.md"
    },
    {
      "text": "Block editor",
      "url": "https://wordpress.org/gutenberg/"
    },
    {
      "text": "core blocks",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/core-blocks/"
    },
    {
      "text": "create your own custom block",
      "url": "https://developer.wordpress.org/block-editor/getting-started/create-block/"
    },
    {
      "text": "Block",
      "url": "https://developer.wordpress.org/block-editor/explanations/architecture/key-concepts/#blocks"
    },
    {
      "text": "stored in the WordPress database",
      "url": "https://developer.wordpress.org/block-editor/explanations/architecture/data-flow/#serialization-and-parsing"
    },
    {
      "text": "work done on the Gutenberg project",
      "url": "https://developer.wordpress.org/block-editor/explanations/faq/#what-is-gutenberg"
    },
    {
      "text": "enhanced editing experience",
      "url": "https://wordpress.org/gutenberg/"
    },
    {
      "text": "rich feature set of APIs",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/"
    },
    {
      "text": "Navigating this handbook",
      "url": "https://developer.wordpress.org/block-editor/#navigating-this-handbook"
    },
    {
      "text": "development environment",
      "url": "https://developer.wordpress.org/block-editor/getting-started/devenv/"
    },
    {
      "text": "fundamentals of block development",
      "url": "https://developer.wordpress.org/block-editor/getting-started/create-block/"
    },
    {
      "text": "building a full-featured block",
      "url": "https://developer.wordpress.org/block-editor/how-to-guides/block-tutorial/"
    },
    {
      "text": "working with WordPress’ data",
      "url": "https://developer.wordpress.org/block-editor/how-to-guides/data-basics/"
    },
    {
      "text": "component",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/"
    },
    {
      "text": "package",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/"
    },
    {
      "text": "Storybook",
      "url": "https://wordpress.github.io/gutenberg/?path=/story/docs-introduction--page"
    },
    {
      "text": "Glossary of terms",
      "url": "https://developer.wordpress.org/block-editor/explanations/glossary/"
    },
    {
      "text": "FAQs",
      "url": "https://developer.wordpress.org/block-editor/explanations/faq/"
    },
    {
      "text": "code",
      "url": "https://developer.wordpress.org/block-editor/contributors/code/"
    },
    {
      "text": "design",
      "url": "https://developer.wordpress.org/block-editor/contributors/design/"
    },
    {
      "text": "documentation",
      "url": "https://developer.wordpress.org/block-editor/contributors/documentation/"
    },
    {
      "text": "Top ↑",
      "url": "https://developer.wordpress.org/block-editor/#top"
    },
    {
      "text": "Further resources",
      "url": "https://developer.wordpress.org/block-editor/#further-resources"
    },
    {
      "text": "WordPress Developer Blog",
      "url": "https://developer.wordpress.org/news/"
    },
    {
      "text": "keep up with the latest developments in WordPress",
      "url": "https://developer.wordpress.org/news/tag/roundup/"
    },
    {
      "text": "Introduction to Block Development: Build your first custom block",
      "url": "https://learn.wordpress.org/course/introduction-to-block-development-build-your-first-custom-block/"
    },
    {
      "text": "Converting a Shortcode to a Block",
      "url": "https://learn.wordpress.org/course/converting-a-shortcode-to-a-block/"
    },
    {
      "text": "Using the WordPress Data Layer",
      "url": "https://learn.wordpress.org/course/using-the-wordpress-data-layer/"
    },
    {
      "text": "WordPress.tv",
      "url": "https://wordpress.tv/"
    },
    {
      "text": "block development",
      "url": "https://wordpress.tv/?s=block%20development&sort=newest"
    },
    {
      "text": "block-editor",
      "url": "https://wordpress.tv/?s=block%20editor&sort=relevance"
    },
    {
      "text": "Gutenberg repository",
      "url": "https://github.com/WordPress/gutenberg/"
    },
    {
      "text": "block-library",
      "url": "https://github.com/WordPress/gutenberg/tree/trunk/packages/block-library/src"
    },
    {
      "text": "components",
      "url": "https://github.com/WordPress/gutenberg/tree/trunk/packages/components"
    },
    {
      "text": "gutenberg-examples",
      "url": "https://github.com/WordPress/gutenberg-examples"
    },
    {
      "text": "Are you in the right place?",
      "url": "https://developer.wordpress.org/block-editor/#are-you-in-the-right-place"
    },
    {
      "text": "This handbook",
      "url": "https://developer.wordpress.org/block-editor"
    },
    {
      "text": "developer.wordpress.org",
      "url": "https://developer.wordpress.org/"
    },
    {
      "text": "/themes",
      "url": "https://developer.wordpress.org/themes"
    },
    {
      "text": "/plugins",
      "url": "https://developer.wordpress.org/plugins"
    },
    {
      "text": "/apis",
      "url": "https://developer.wordpress.org/apis"
    },
    {
      "text": "/advanced-administration",
      "url": "https://developer.wordpress.org/advanced-administration"
    },
    {
      "text": "/rest-api",
      "url": "https://developer.wordpress.org/rest-api/"
    },
    {
      "text": "/coding-standards",
      "url": "https://developer.wordpress.org/coding-standards"
    },
    {
      "text": "Getting Started →",
      "url": "https://developer.wordpress.org/block-editor/getting-started/"
    },
    {
      "text": "Donate",
      "url": "https://wordpressfoundation.org/donate/"
    },
    {
      "text": "Swag",
      "url": "https://mercantile.wordpress.org/"
    },
    {
      "text": "Get Involved",
      "url": "https://make.wordpress.org/"
    },
    {
      "text": "WordCamp",
      "url": "https://central.wordcamp.org/"
    },
    {
      "text": "WordPress.TV",
      "url": "https://wordpress.tv/"
    },
    {
      "text": "BuddyPress",
      "url": "https://buddypress.org/"
    },
    {
      "text": "bbPress",
      "url": "https://bbpress.org/"
    },
    {
      "text": "WordPress.com",
      "url": "https://wordpress.com/?ref=wporg-footer"
    },
    {
      "text": "Matt",
      "url": "https://ma.tt/"
    },
    {
      "text": "Privacy",
      "url": "https://wordpress.org/about/privacy/"
    },
    {
      "text": "Public Code",
      "url": "https://publiccode.eu/"
    },
    {
      "text": "Visit our Facebook page",
      "url": "https://www.facebook.com/WordPress/"
    },
    {
      "text": "Visit our Twitter account",
      "url": "https://twitter.com/WordPress"
    },
    {
      "text": "Visit our Instagram account",
      "url": "https://www.instagram.com/wordpress/"
    },
    {
      "text": "Visit our LinkedIn account",
      "url": "https://www.linkedin.com/company/wordpress"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fblock-api%2Fblock-selectors%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/docs/reference-guides/block-api/block-selectors.md"
    },
    {
      "text": "Root Selector",
      "url": "https://developer.wordpress.org/block-editor/#root-selector"
    },
    {
      "text": "Example",
      "url": "https://developer.wordpress.org/block-editor/#example"
    },
    {
      "text": "Feature Selectors",
      "url": "https://developer.wordpress.org/block-editor/#feature-selectors"
    },
    {
      "text": "Example",
      "url": "https://developer.wordpress.org/block-editor/#example-2"
    },
    {
      "text": "Subfeature Selectors",
      "url": "https://developer.wordpress.org/block-editor/#subfeature-selectors"
    },
    {
      "text": "Example",
      "url": "https://developer.wordpress.org/block-editor/#example-3"
    },
    {
      "text": "Shorthand",
      "url": "https://developer.wordpress.org/block-editor/#shorthand"
    },
    {
      "text": "Fallbacks",
      "url": "https://developer.wordpress.org/block-editor/#fallbacks"
    },
    {
      "text": "Example",
      "url": "https://developer.wordpress.org/block-editor/#example-4"
    },
    {
      "text": "← Registration",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/block-api/block-registration/"
    },
    {
      "text": "Styles →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/block-api/block-styles/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fblock-api%2Fblock-registration%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/docs/reference-guides/block-api/block-registration.md"
    },
    {
      "text": "registerBlockType",
      "url": "https://developer.wordpress.org/block-editor/#registerblocktype"
    },
    {
      "text": "wp-blocks package",
      "url": "https://developer.wordpress.org/block-editor/reference-guide/packages/packages-blocks/#registerBlockType"
    },
    {
      "text": "Block Name",
      "url": "https://developer.wordpress.org/block-editor/#block-name"
    },
    {
      "text": "Block Configuration",
      "url": "https://developer.wordpress.org/block-editor/#block-configuration"
    },
    {
      "text": "title",
      "url": "https://developer.wordpress.org/block-editor/#title"
    },
    {
      "text": "description (optional)",
      "url": "https://developer.wordpress.org/block-editor/#description-optional"
    },
    {
      "text": "category",
      "url": "https://developer.wordpress.org/block-editor/#category"
    },
    {
      "text": "custom block categories",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/filters/block-filters/#managing-block-categories"
    },
    {
      "text": "icon (optional)",
      "url": "https://developer.wordpress.org/block-editor/#icon-optional"
    },
    {
      "text": "WordPress’ Dashicons",
      "url": "https://developer.wordpress.org/resource/dashicons/"
    },
    {
      "text": "wp.primitives.SVG component",
      "url": "https://developer.wordpress.org/block-editor/reference-guide/packages/packages-primitives/"
    },
    {
      "text": "keywords (optional)",
      "url": "https://developer.wordpress.org/block-editor/#keywords-optional"
    },
    {
      "text": "styles (optional)",
      "url": "https://developer.wordpress.org/block-editor/#styles-optional"
    },
    {
      "text": "custom block style",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/block-api/block-styles/"
    },
    {
      "text": "attributes (optional)",
      "url": "https://developer.wordpress.org/block-editor/#attributes-optional"
    },
    {
      "text": "example (optional)",
      "url": "https://developer.wordpress.org/block-editor/#example-optional"
    },
    {
      "text": "variations (optional)",
      "url": "https://developer.wordpress.org/block-editor/#variations-optional"
    },
    {
      "text": "Block Variations API",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/block-api/block-variations/"
    },
    {
      "text": "supports (optional)",
      "url": "https://developer.wordpress.org/block-editor/#supports-optional"
    },
    {
      "text": "the supports documentation",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/block-api/block-supports/"
    },
    {
      "text": "transforms (optional)",
      "url": "https://developer.wordpress.org/block-editor/#transforms-optional"
    },
    {
      "text": "Block Transforms API",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/block-api/block-transforms/"
    },
    {
      "text": "parent (optional)",
      "url": "https://developer.wordpress.org/block-editor/#parent-optional"
    },
    {
      "text": "InnerBlocks",
      "url": "https://github.com/WordPress/gutenberg/blob/HEAD/packages/block-editor/src/components/inner-blocks/README.md"
    },
    {
      "text": "ancestor (optional)",
      "url": "https://developer.wordpress.org/block-editor/#ancestor-optional"
    },
    {
      "text": "Block Collections",
      "url": "https://developer.wordpress.org/block-editor/#block-collections"
    },
    {
      "text": "registerBlockCollection",
      "url": "https://developer.wordpress.org/block-editor/#registerblockcollection"
    },
    {
      "text": "Namespace",
      "url": "https://developer.wordpress.org/block-editor/#namespace"
    },
    {
      "text": "Settings",
      "url": "https://developer.wordpress.org/block-editor/#settings"
    },
    {
      "text": "Title",
      "url": "https://developer.wordpress.org/block-editor/#title-2"
    },
    {
      "text": "Icon",
      "url": "https://developer.wordpress.org/block-editor/#icon"
    },
    {
      "text": "← Patterns",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/block-api/block-patterns/"
    },
    {
      "text": "Selectors →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/block-api/block-selectors/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fblock-api%2Fblock-patterns%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/docs/reference-guides/block-api/block-patterns.md"
    },
    {
      "text": "Patterns",
      "url": "https://developer.wordpress.org/block-editor/#patterns"
    },
    {
      "text": "Block Patterns",
      "url": "https://developer.wordpress.org/block-editor/#block-patterns"
    },
    {
      "text": "register_block_pattern",
      "url": "https://developer.wordpress.org/block-editor/#register_block_pattern"
    },
    {
      "text": "Unregistering Block Patterns",
      "url": "https://developer.wordpress.org/block-editor/#unregistering-block-patterns"
    },
    {
      "text": "unregister_block_pattern",
      "url": "https://developer.wordpress.org/block-editor/#unregister_block_pattern"
    },
    {
      "text": "Block Pattern Categories",
      "url": "https://developer.wordpress.org/block-editor/#block-pattern-categories"
    },
    {
      "text": "register_block_pattern_category",
      "url": "https://developer.wordpress.org/block-editor/#register_block_pattern_category"
    },
    {
      "text": "unregister_block_pattern_category",
      "url": "https://developer.wordpress.org/block-editor/#unregister_block_pattern_category"
    },
    {
      "text": "Block patterns contextual to block types and pattern transformations",
      "url": "https://developer.wordpress.org/block-editor/#block-patterns-contextual-to-block-types-and-pattern-transformations"
    },
    {
      "text": "Semantic block patterns",
      "url": "https://developer.wordpress.org/block-editor/#semantic-block-patterns"
    },
    {
      "text": "← Metadata in block.json",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/block-api/block-metadata/"
    },
    {
      "text": "Registration →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/block-api/block-registration/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fblock-api%2Fblock-metadata%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/docs/reference-guides/block-api/block-metadata.md"
    },
    {
      "text": "Benefits using the metadata file",
      "url": "https://developer.wordpress.org/block-editor/#benefits-using-the-metadata-file"
    },
    {
      "text": "Block Type REST API Endpoint",
      "url": "https://developer.wordpress.org/rest-api/reference/block-types/"
    },
    {
      "text": "WordPress Plugins Directory",
      "url": "https://wordpress.org/plugins/"
    },
    {
      "text": "submit your block(s) to the Block Directory",
      "url": "https://developer.wordpress.org/block-editor/getting-started/create-block/submitting-to-block-directory/"
    },
    {
      "text": "Block registration",
      "url": "https://developer.wordpress.org/block-editor/#block-registration"
    },
    {
      "text": "PHP (server-side)",
      "url": "https://developer.wordpress.org/block-editor/#php-server-side"
    },
    {
      "text": "register_block_type",
      "url": "https://developer.wordpress.org/reference/functions/register_block_type/"
    },
    {
      "text": "JavaScript (client-side)",
      "url": "https://developer.wordpress.org/block-editor/#javascript-client-side"
    },
    {
      "text": "Block API",
      "url": "https://developer.wordpress.org/block-editor/#block-api"
    },
    {
      "text": "API Version",
      "url": "https://developer.wordpress.org/block-editor/#api-version"
    },
    {
      "text": "the API versions documentation",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/block-api/block-api-versions/"
    },
    {
      "text": "Name",
      "url": "https://developer.wordpress.org/block-editor/#name"
    },
    {
      "text": "Title",
      "url": "https://developer.wordpress.org/block-editor/#title"
    },
    {
      "text": "Category",
      "url": "https://developer.wordpress.org/block-editor/#category"
    },
    {
      "text": "Parent",
      "url": "https://developer.wordpress.org/block-editor/#parent"
    },
    {
      "text": "Ancestor",
      "url": "https://developer.wordpress.org/block-editor/#ancestor"
    },
    {
      "text": "wp.primitives.SVG",
      "url": "https://developer.wordpress.org/block-editor/reference-guide/packages/packages-primitives/"
    },
    {
      "text": "Description",
      "url": "https://developer.wordpress.org/block-editor/#description"
    },
    {
      "text": "Keywords",
      "url": "https://developer.wordpress.org/block-editor/#keywords"
    },
    {
      "text": "Version",
      "url": "https://developer.wordpress.org/block-editor/#version"
    },
    {
      "text": "Text Domain",
      "url": "https://developer.wordpress.org/block-editor/#text-domain"
    },
    {
      "text": "gettext",
      "url": "https://www.gnu.org/software/gettext/"
    },
    {
      "text": "Text Domain",
      "url": "https://developer.wordpress.org/plugins/internationalization/how-to-internationalize-your-plugin/#text-domains"
    },
    {
      "text": "How to Internationalize your Plugin",
      "url": "https://developer.wordpress.org/plugins/internationalization/how-to-internationalize-your-plugin/"
    },
    {
      "text": "Attributes",
      "url": "https://developer.wordpress.org/block-editor/#attributes"
    },
    {
      "text": "the attributes documentation",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/block-api/block-attributes/"
    },
    {
      "text": "Provides Context",
      "url": "https://developer.wordpress.org/block-editor/#provides-context"
    },
    {
      "text": "the block context documentation",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/block-api/block-context/"
    },
    {
      "text": "Context",
      "url": "https://developer.wordpress.org/block-editor/#context"
    },
    {
      "text": "Selectors",
      "url": "https://developer.wordpress.org/block-editor/#selectors"
    },
    {
      "text": "the selectors documentation",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/block-api/block-selectors/"
    },
    {
      "text": "Supports",
      "url": "https://developer.wordpress.org/block-editor/#supports"
    },
    {
      "text": "Block Styles",
      "url": "https://developer.wordpress.org/block-editor/#block-styles"
    },
    {
      "text": "the example documentation",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/block-api/block-registration/#example-optional"
    },
    {
      "text": "Variations",
      "url": "https://developer.wordpress.org/block-editor/#variations"
    },
    {
      "text": "the variations documentation",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/block-api/block-variations/"
    },
    {
      "text": "Editor Script",
      "url": "https://developer.wordpress.org/block-editor/#editor-script"
    },
    {
      "text": "learn more",
      "url": "https://developer.wordpress.org/block-editor/#wpdefinedasset"
    },
    {
      "text": "wp_register_script",
      "url": "https://developer.wordpress.org/reference/functions/wp_register_script/"
    },
    {
      "text": "Script",
      "url": "https://developer.wordpress.org/block-editor/#script"
    },
    {
      "text": "View Script",
      "url": "https://developer.wordpress.org/block-editor/#view-script"
    },
    {
      "text": "Editor Style",
      "url": "https://developer.wordpress.org/block-editor/#editor-style"
    },
    {
      "text": "wp_register_style",
      "url": "https://developer.wordpress.org/reference/functions/wp_register_style/"
    },
    {
      "text": "Style",
      "url": "https://developer.wordpress.org/block-editor/#style"
    },
    {
      "text": "Render",
      "url": "https://developer.wordpress.org/block-editor/#render"
    },
    {
      "text": "learn more",
      "url": "https://developer.wordpress.org/block-editor/#wpdefinedpath"
    },
    {
      "text": "Assets",
      "url": "https://developer.wordpress.org/block-editor/#assets"
    },
    {
      "text": "WPDefinedPath",
      "url": "https://developer.wordpress.org/block-editor/#wpdefinedpath"
    },
    {
      "text": "local paths",
      "url": "https://docs.npmjs.com/files/package.json#local-paths"
    },
    {
      "text": "WPDefinedAsset",
      "url": "https://developer.wordpress.org/block-editor/#wpdefinedasset"
    },
    {
      "text": "Frontend Enqueueing",
      "url": "https://developer.wordpress.org/block-editor/#frontend-enqueueing"
    },
    {
      "text": "Internationalization",
      "url": "https://developer.wordpress.org/block-editor/#internationalization"
    },
    {
      "text": "PHP",
      "url": "https://developer.wordpress.org/block-editor/#php"
    },
    {
      "text": "get_plugin_data",
      "url": "https://codex.wordpress.org/Function_Reference/get_plugin_data"
    },
    {
      "text": "JavaScript",
      "url": "https://developer.wordpress.org/block-editor/#javascript"
    },
    {
      "text": "Backward Compatibility",
      "url": "https://developer.wordpress.org/block-editor/#backward-compatibility"
    },
    {
      "text": "Transforms",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/block-api/block-registration/#transforms-optional"
    },
    {
      "text": "Deprecated Blocks",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/block-api/block-deprecation/"
    },
    {
      "text": "dynamic blocks",
      "url": "https://developer.wordpress.org/block-editor/how-to-guides/block-tutorial/creating-dynamic-blocks/"
    },
    {
      "text": "← Edit and Save",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/block-api/block-edit-save/"
    },
    {
      "text": "Patterns →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/block-api/block-patterns/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fblock-api%2Fblock-edit-save%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/docs/reference-guides/block-api/block-edit-save.md"
    },
    {
      "text": "Edit",
      "url": "https://developer.wordpress.org/block-editor/#edit"
    },
    {
      "text": "block wrapper props",
      "url": "https://developer.wordpress.org/block-editor/#block-wrapper-props"
    },
    {
      "text": "attributes",
      "url": "https://developer.wordpress.org/block-editor/#attributes"
    },
    {
      "text": "attributes documentation",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/block-api/block-attributes/"
    },
    {
      "text": "isSelected",
      "url": "https://developer.wordpress.org/block-editor/#isselected"
    },
    {
      "text": "setAttributes",
      "url": "https://developer.wordpress.org/block-editor/#setattributes"
    },
    {
      "text": "state should be immutable",
      "url": "https://redux.js.org/faq/immutable-data#what-are-the-benefits-of-immutability"
    },
    {
      "text": "Save",
      "url": "https://developer.wordpress.org/block-editor/#save"
    },
    {
      "text": "instance of WordPress Element",
      "url": "https://developer.wordpress.org/block-editor/reference-guide/packages/packages-element/"
    },
    {
      "text": "cross-site scripting",
      "url": "https://en.wikipedia.org/wiki/Cross-site_scripting"
    },
    {
      "text": "read more about Validation",
      "url": "https://developer.wordpress.org/block-editor/#validation"
    },
    {
      "text": "block wrapper props",
      "url": "https://developer.wordpress.org/block-editor/#block-wrapper-props-2"
    },
    {
      "text": "attributes",
      "url": "https://developer.wordpress.org/block-editor/#attributes-2"
    },
    {
      "text": "Block Attributes documentation",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/block-api/block-attributes/"
    },
    {
      "text": "Examples",
      "url": "https://developer.wordpress.org/block-editor/#examples"
    },
    {
      "text": "Saving Attributes to Child Elements",
      "url": "https://developer.wordpress.org/block-editor/#saving-attributes-to-child-elements"
    },
    {
      "text": "Saving Attributes via Serialization",
      "url": "https://developer.wordpress.org/block-editor/#saving-attributes-via-serialization"
    },
    {
      "text": "Latest Posts block",
      "url": "https://github.com/WordPress/gutenberg/blob/HEAD/packages/block-library/src/latest-posts/index.js"
    },
    {
      "text": "Validation",
      "url": "https://developer.wordpress.org/block-editor/#validation"
    },
    {
      "text": "Validation FAQ",
      "url": "https://developer.wordpress.org/block-editor/#validation-faq"
    },
    {
      "text": "attribute sources",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/block-api/block-attributes/"
    },
    {
      "text": "← Deprecation",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/block-api/block-deprecation/"
    },
    {
      "text": "Metadata in block.json →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/block-api/block-metadata/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fblock-api%2Fblock-deprecation%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/docs/reference-guides/block-api/block-deprecation.md"
    },
    {
      "text": "tutorial on the basics of block deprecation",
      "url": "https://developer.wordpress.org/news/2023/03/block-deprecation-a-tutorial/"
    },
    {
      "text": "Developer Blog",
      "url": "https://developer.wordpress.org/news/"
    },
    {
      "text": "Example:",
      "url": "https://developer.wordpress.org/block-editor/#example"
    },
    {
      "text": "fixtures",
      "url": "https://github.com/WordPress/gutenberg/blob/HEAD/test/integration/fixtures/blocks/README.md"
    },
    {
      "text": "attributes definition",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/block-api/block-attributes/"
    },
    {
      "text": "supports definition",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/block-api/block-registration/"
    },
    {
      "text": "save implementation",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/block-api/block-edit-save/"
    },
    {
      "text": "Example:",
      "url": "https://developer.wordpress.org/block-editor/#example-2"
    },
    {
      "text": "Changing the attributes set",
      "url": "https://developer.wordpress.org/block-editor/#changing-the-attributes-set"
    },
    {
      "text": "Example:",
      "url": "https://developer.wordpress.org/block-editor/#example-3"
    },
    {
      "text": "Changing the innerBlocks",
      "url": "https://developer.wordpress.org/block-editor/#changing-the-innerblocks"
    },
    {
      "text": "Example:",
      "url": "https://developer.wordpress.org/block-editor/#example-4"
    },
    {
      "text": "core block library",
      "url": "https://github.com/WordPress/gutenberg/tree/HEAD/packages/block-library/src"
    },
    {
      "text": "← Context",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/block-api/block-context/"
    },
    {
      "text": "Edit and Save →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/block-api/block-edit-save/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fblock-api%2Fblock-context%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/docs/reference-guides/block-api/block-context.md"
    },
    {
      "text": "React Context",
      "url": "https://reactjs.org/docs/context.html"
    },
    {
      "text": "Defining Block Context",
      "url": "https://developer.wordpress.org/block-editor/#defining-block-context"
    },
    {
      "text": "Providing Block Context",
      "url": "https://developer.wordpress.org/block-editor/#providing-block-context"
    },
    {
      "text": "Consuming Block Context",
      "url": "https://developer.wordpress.org/block-editor/#consuming-block-context"
    },
    {
      "text": "Using Block Context",
      "url": "https://developer.wordpress.org/block-editor/#using-block-context"
    },
    {
      "text": "← Attributes",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/block-api/block-attributes/"
    },
    {
      "text": "Deprecation →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/block-api/block-deprecation/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fblock-api%2Fblock-attributes%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/docs/reference-guides/block-api/block-attributes.md"
    },
    {
      "text": "comment delimiter",
      "url": "https://developer.wordpress.org/block-editor/explanations/architecture/key-concepts/#data-attributes"
    },
    {
      "text": "block deprecation",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/block-api/block-deprecation/"
    },
    {
      "text": "Type Validation",
      "url": "https://developer.wordpress.org/block-editor/#type-validation"
    },
    {
      "text": "Enum Validation",
      "url": "https://developer.wordpress.org/block-editor/#enum-validation"
    },
    {
      "text": "Value Source",
      "url": "https://developer.wordpress.org/block-editor/#value-source"
    },
    {
      "text": "querySelector",
      "url": "https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelector"
    },
    {
      "text": "hpq",
      "url": "https://github.com/aduth/hpq"
    },
    {
      "text": "attribute source",
      "url": "https://developer.wordpress.org/block-editor/#attribute-source"
    },
    {
      "text": "text source",
      "url": "https://developer.wordpress.org/block-editor/#text-source"
    },
    {
      "text": "textContent",
      "url": "https://developer.mozilla.org/en-US/docs/Web/API/Node/textContent"
    },
    {
      "text": "html source",
      "url": "https://developer.wordpress.org/block-editor/#html-source"
    },
    {
      "text": "innerHTML",
      "url": "https://developer.mozilla.org/en-US/docs/Web/API/Element/innerHTML"
    },
    {
      "text": "query source",
      "url": "https://developer.wordpress.org/block-editor/#query-source"
    },
    {
      "text": "Meta source (deprecated)",
      "url": "https://developer.wordpress.org/block-editor/#meta-source-deprecated"
    },
    {
      "text": "EntityProvider and related hook APIs",
      "url": "https://github.com/WordPress/gutenberg/blob/c367c4e2765f9e6b890d1565db770147efca5d66/packages/core-data/src/entity-provider.js"
    },
    {
      "text": "Create Meta Block how-to",
      "url": "https://developer.wordpress.org/block-editor/how-to-guides/metabox/#step-2-add-meta-block"
    },
    {
      "text": "Considerations",
      "url": "https://developer.wordpress.org/block-editor/#considerations"
    },
    {
      "text": "Default Value",
      "url": "https://developer.wordpress.org/block-editor/#default-value"
    },
    {
      "text": "← API Versions",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/block-api/block-api-versions/"
    },
    {
      "text": "Context →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/block-api/block-context/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fblock-api%2Fblock-api-versions%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/docs/reference-guides/block-api/block-api-versions.md"
    },
    {
      "text": "Version 2 (>= WordPress 5.6)",
      "url": "https://developer.wordpress.org/block-editor/#version-2-wordpress-5-6"
    },
    {
      "text": "Version 1",
      "url": "https://developer.wordpress.org/block-editor/#version-1"
    },
    {
      "text": "← Annotations",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/block-api/block-annotations/"
    },
    {
      "text": "Attributes →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/block-api/block-attributes/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fblock-api%2Fblock-annotations%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/docs/reference-guides/block-api/block-annotations.md"
    },
    {
      "text": "API",
      "url": "https://developer.wordpress.org/block-editor/#api"
    },
    {
      "text": "Block annotation",
      "url": "https://developer.wordpress.org/block-editor/#block-annotation"
    },
    {
      "text": "Text annotation",
      "url": "https://developer.wordpress.org/block-editor/#text-annotation"
    },
    {
      "text": "← Block API Reference",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/block-api/"
    },
    {
      "text": "API Versions →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/block-api/block-api-versions/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fblock-api%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/docs/reference-guides/block-api/README.md"
    },
    {
      "text": "Transformations",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/block-api/block-transforms/"
    },
    {
      "text": "← Reference Guides",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/"
    },
    {
      "text": "Annotations →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/block-api/block-annotations/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/docs/reference-guides/README.md"
    },
    {
      "text": "Block API Reference",
      "url": "https://developer.wordpress.org/block-editor/#block-api-reference"
    },
    {
      "text": "Metadata",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/block-api/block-metadata/"
    },
    {
      "text": "Hooks Reference",
      "url": "https://developer.wordpress.org/block-editor/#hooks-reference"
    },
    {
      "text": "i18n Hooks",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/filters/i18n-filters/"
    },
    {
      "text": "Parser Hooks",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/filters/parser-filters/"
    },
    {
      "text": "Global Styles Hooks",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/filters/global-styles-filters/"
    },
    {
      "text": "SlotFills Reference",
      "url": "https://developer.wordpress.org/block-editor/#slotfills-reference"
    },
    {
      "text": "Theme.json Reference",
      "url": "https://developer.wordpress.org/block-editor/#theme-json-reference"
    },
    {
      "text": "Version 1",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/theme-json-reference/theme-json-v1/"
    },
    {
      "text": "RichText Reference",
      "url": "https://developer.wordpress.org/block-editor/#richtext-reference"
    },
    {
      "text": "Component Reference",
      "url": "https://developer.wordpress.org/block-editor/#component-reference"
    },
    {
      "text": "Package Reference",
      "url": "https://developer.wordpress.org/block-editor/#package-reference"
    },
    {
      "text": "Data Module Reference",
      "url": "https://developer.wordpress.org/block-editor/#data-module-reference"
    },
    {
      "text": "core: WordPress Core Data",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/data/data-core/"
    },
    {
      "text": "core/annotations: Annotations",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/data/data-core-annotations/"
    },
    {
      "text": "core/block-directory: Block directory",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/data/data-core-block-directory/"
    },
    {
      "text": "core/block-editor: The Block Editor’s Data",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/data/data-core-block-editor/"
    },
    {
      "text": "core/blocks: Block Types Data",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/data/data-core-blocks/"
    },
    {
      "text": "core/customize-widgets: Customize Widgets",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/data/data-core-customize-widgets/"
    },
    {
      "text": "core/edit-post: The Editor’s UI Data",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/data/data-core-edit-post/"
    },
    {
      "text": "core/edit-site: Edit Site",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/data/data-core-edit-site/"
    },
    {
      "text": "core/edit-widgets: Edit Widgets",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/data/data-core-edit-widgets/"
    },
    {
      "text": "core/editor: The Post Editor’s Data",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/data/data-core-editor/"
    },
    {
      "text": "core/keyboard-shortcuts: The Keyboard Shortcuts Data",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/data/data-core-keyboard-shortcuts/"
    },
    {
      "text": "core/notices: Notices Data",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/data/data-core-notices/"
    },
    {
      "text": "core/preferences: Preferences",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/data/data-core-preferences/"
    },
    {
      "text": "core/reusable-blocks: Reusable blocks",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/data/data-core-reusable-blocks/"
    },
    {
      "text": "core/rich-text: Rich Text",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/data/data-core-rich-text/"
    },
    {
      "text": "core/viewport: The Viewport Data",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/data/data-core-viewport/"
    },
    {
      "text": "← How-to Guides",
      "url": "https://developer.wordpress.org/block-editor/how-to-guides/"
    },
    {
      "text": "Block API Reference →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/block-api/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Fhow-to-guides%2Fwidgets%2Flegacy-widget-block%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/docs/how-to-guides/widgets/legacy-widget-block.md"
    },
    {
      "text": "Compatibility with the Legacy Widget block",
      "url": "https://developer.wordpress.org/block-editor/#compatibility-with-the-legacy-widget-block"
    },
    {
      "text": "The widget-added event",
      "url": "https://developer.wordpress.org/block-editor/#the-widget-added-event"
    },
    {
      "text": "Displaying “No preview available.”",
      "url": "https://developer.wordpress.org/block-editor/#displaying-no-preview-available"
    },
    {
      "text": "Allowing migration to a block",
      "url": "https://developer.wordpress.org/block-editor/#allowing-migration-to-a-block"
    },
    {
      "text": "1) Display the widget’s instance in the REST API",
      "url": "https://developer.wordpress.org/block-editor/#1-display-the-widgets-instance-in-the-rest-api"
    },
    {
      "text": "versions of WordPress prior to 5.8.0 allowed you to enable this feature by setting $show_instance_in_rest to true",
      "url": "https://core.trac.wordpress.org/ticket/53332"
    },
    {
      "text": "2) Add a block transform",
      "url": "https://developer.wordpress.org/block-editor/#2-add-a-block-transform"
    },
    {
      "text": "block transform",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/block-api/block-transforms/"
    },
    {
      "text": "3) Hide the widget from the Legacy Widget block",
      "url": "https://developer.wordpress.org/block-editor/#3-hide-the-widget-from-the-legacy-widget-block"
    },
    {
      "text": "Using the Legacy Widget block in other block editors (Advanced)",
      "url": "https://developer.wordpress.org/block-editor/#using-the-legacy-widget-block-in-other-block-editors-advanced"
    },
    {
      "text": "← Restoring the classic Widgets Editor",
      "url": "https://developer.wordpress.org/block-editor/how-to-guides/widgets/opting-out/"
    },
    {
      "text": "Reference Guides →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Fhow-to-guides%2Fwidgets%2Fopting-out%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/docs/how-to-guides/widgets/opting-out.md"
    },
    {
      "text": "Using remove_theme_support",
      "url": "https://developer.wordpress.org/block-editor/#using-remove_theme_support"
    },
    {
      "text": "Using the Classic Widgets plugin",
      "url": "https://developer.wordpress.org/block-editor/#using-the-classic-widgets-plugin"
    },
    {
      "text": "Classic Widgets plugin",
      "url": "https://wordpress.org/plugins/classic-widgets/"
    },
    {
      "text": "Using a filter",
      "url": "https://developer.wordpress.org/block-editor/#using-a-filter"
    },
    {
      "text": "← Widgets Block Editor overview",
      "url": "https://developer.wordpress.org/block-editor/how-to-guides/widgets/overview/"
    },
    {
      "text": "About the Legacy Widget block →",
      "url": "https://developer.wordpress.org/block-editor/how-to-guides/widgets/legacy-widget-block/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Fhow-to-guides%2Fwidgets%2Foverview%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/docs/how-to-guides/widgets/overview.md"
    },
    {
      "text": "Widgets Block Editor",
      "url": "https://developer.wordpress.org/block-editor/#widgets-block-editor"
    },
    {
      "text": "Widget Areas or Sidebars",
      "url": "https://developer.wordpress.org/themes/functionality/sidebars/"
    },
    {
      "text": "Customizer Widgets Block Editor",
      "url": "https://developer.wordpress.org/block-editor/#customizer-widgets-block-editor"
    },
    {
      "text": "Compatibility",
      "url": "https://developer.wordpress.org/block-editor/#compatibility"
    },
    {
      "text": "← Widgets",
      "url": "https://developer.wordpress.org/block-editor/how-to-guides/widgets/"
    },
    {
      "text": "Restoring the classic Widgets Editor →",
      "url": "https://developer.wordpress.org/block-editor/how-to-guides/widgets/opting-out/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Fhow-to-guides%2Fwidgets%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/docs/how-to-guides/widgets/README.md"
    },
    {
      "text": "Restoring the old Widgets Editor",
      "url": "https://developer.wordpress.org/block-editor/how-to-guides/widgets/opting-out/"
    },
    {
      "text": "Ensuring compatibility with the Legacy Widget block",
      "url": "https://developer.wordpress.org/block-editor/how-to-guides/widgets/legacy-widget-block/"
    },
    {
      "text": "← Thunks in Core-Data",
      "url": "https://developer.wordpress.org/block-editor/how-to-guides/thunks/"
    },
    {
      "text": "Widgets Block Editor overview →",
      "url": "https://developer.wordpress.org/block-editor/how-to-guides/widgets/overview/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Fhow-to-guides%2Fthunks%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/docs/how-to-guides/thunks.md"
    },
    {
      "text": "Gutenberg 11.6",
      "url": "https://github.com/WordPress/gutenberg/pull/27276"
    },
    {
      "text": "Why are thunks useful?",
      "url": "https://developer.wordpress.org/block-editor/#why-are-thunks-useful"
    },
    {
      "text": "expand the meaning of what a Redux action is",
      "url": "https://jsnajdr.wordpress.com/2021/10/04/motivation-for-thunks/"
    },
    {
      "text": "control",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-data/#controls"
    },
    {
      "text": "Thunks have access to the store helpers",
      "url": "https://developer.wordpress.org/block-editor/#thunks-have-access-to-the-store-helpers"
    },
    {
      "text": "Thunks can be async",
      "url": "https://developer.wordpress.org/block-editor/#thunks-can-be-async"
    },
    {
      "text": "Thunks API",
      "url": "https://developer.wordpress.org/block-editor/#thunks-api"
    },
    {
      "text": "select",
      "url": "https://developer.wordpress.org/block-editor/#select"
    },
    {
      "text": "resolveSelect",
      "url": "https://developer.wordpress.org/block-editor/#resolveselect"
    },
    {
      "text": "dispatch",
      "url": "https://developer.wordpress.org/block-editor/#dispatch"
    },
    {
      "text": "registry",
      "url": "https://developer.wordpress.org/block-editor/#registry"
    },
    {
      "text": "← Themes",
      "url": "https://developer.wordpress.org/block-editor/how-to-guides/themes/"
    },
    {
      "text": "Widgets →",
      "url": "https://developer.wordpress.org/block-editor/how-to-guides/widgets/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Fhow-to-guides%2Fthemes%2Ftheme-support%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/docs/how-to-guides/themes/theme-support.md"
    },
    {
      "text": "provide opt-in opinionated styles",
      "url": "https://developer.wordpress.org/block-editor/#default-block-styles"
    },
    {
      "text": "Opt-in features",
      "url": "https://developer.wordpress.org/block-editor/#opt-in-features"
    },
    {
      "text": "Default block styles",
      "url": "https://developer.wordpress.org/block-editor/#default-block-styles"
    },
    {
      "text": "block library theme file",
      "url": "https://github.com/WordPress/gutenberg/blob/trunk/packages/block-library/src/theme.scss"
    },
    {
      "text": "Wide Alignment:",
      "url": "https://developer.wordpress.org/block-editor/#wide-alignment"
    },
    {
      "text": "the developer docs on add_theme_support()",
      "url": "https://developer.wordpress.org/reference/functions/add_theme_support/"
    },
    {
      "text": "Wide Alignments and Floats",
      "url": "https://developer.wordpress.org/block-editor/#wide-alignments-and-floats"
    },
    {
      "text": "codepen",
      "url": "https://codepen.io/joen/pen/zLWvrW"
    },
    {
      "text": "Block Color Palettes",
      "url": "https://developer.wordpress.org/block-editor/#block-color-palettes"
    },
    {
      "text": "this devnote",
      "url": "https://make.wordpress.org/core/2022/01/08/updates-for-settings-styles-and-theme-json/"
    },
    {
      "text": "Block Gradient Presets",
      "url": "https://developer.wordpress.org/block-editor/#block-gradient-presets"
    },
    {
      "text": "mozilla documentation",
      "url": "https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Images/Using_CSS_gradients"
    },
    {
      "text": "Block Font Sizes",
      "url": "https://developer.wordpress.org/block-editor/#block-font-sizes"
    },
    {
      "text": "Disabling custom font sizes",
      "url": "https://developer.wordpress.org/block-editor/#disabling-custom-font-sizes"
    },
    {
      "text": "Disabling custom colors in block Color Palettes",
      "url": "https://developer.wordpress.org/block-editor/#disabling-custom-colors-in-block-color-palettes"
    },
    {
      "text": "Disabling custom gradients",
      "url": "https://developer.wordpress.org/block-editor/#disabling-custom-gradients"
    },
    {
      "text": "Disabling base layout styles",
      "url": "https://developer.wordpress.org/block-editor/#disabling-base-layout-styles"
    },
    {
      "text": "the developer docs on Global Settings & Styles",
      "url": "https://developer.wordpress.org/block-editor/how-to-guides/themes/theme-json/#what-is-blockgap-and-how-can-i-use-it"
    },
    {
      "text": "Supporting custom line heights",
      "url": "https://developer.wordpress.org/block-editor/#supporting-custom-line-heights"
    },
    {
      "text": "Support custom units",
      "url": "https://developer.wordpress.org/block-editor/#support-custom-units"
    },
    {
      "text": "Disabling the default block patterns.",
      "url": "https://developer.wordpress.org/block-editor/#disabling-the-default-block-patterns"
    },
    {
      "text": "Editor styles",
      "url": "https://developer.wordpress.org/block-editor/#editor-styles"
    },
    {
      "text": "editor styles",
      "url": "https://codex.wordpress.org/Editor_Style"
    },
    {
      "text": "Enqueuing the editor style",
      "url": "https://developer.wordpress.org/block-editor/#enqueuing-the-editor-style"
    },
    {
      "text": "Basic colors",
      "url": "https://developer.wordpress.org/block-editor/#basic-colors"
    },
    {
      "text": "Changing the width of the editor",
      "url": "https://developer.wordpress.org/block-editor/#changing-the-width-of-the-editor"
    },
    {
      "text": "Applying Styles with Stylesheets",
      "url": "https://developer.wordpress.org/block-editor/how-to-guides/block-tutorial/applying-styles-with-stylesheets/"
    },
    {
      "text": "Responsive embedded content",
      "url": "https://developer.wordpress.org/block-editor/#responsive-embedded-content"
    },
    {
      "text": "Spacing control",
      "url": "https://developer.wordpress.org/block-editor/#spacing-control"
    },
    {
      "text": "Link color control",
      "url": "https://developer.wordpress.org/block-editor/#link-color-control"
    },
    {
      "text": "theme.json file",
      "url": "https://developer.wordpress.org/block-editor/theme-json.md"
    },
    {
      "text": "Appearance Tools",
      "url": "https://developer.wordpress.org/block-editor/#appearance-tools"
    },
    {
      "text": "Block Based Template Parts",
      "url": "https://developer.wordpress.org/block-editor/#block-based-template-parts"
    },
    {
      "text": "themes handbook block template and template parts section",
      "url": "https://developer.wordpress.org/themes/block-themes/templates-and-template-parts/#block-c5fa39a2-a27d-4bd2-98d0-dc6249a0801a"
    },
    {
      "text": "← Global Settings & Styles (theme.json)",
      "url": "https://developer.wordpress.org/block-editor/how-to-guides/themes/theme-json/"
    },
    {
      "text": "Thunks in Core-Data →",
      "url": "https://developer.wordpress.org/block-editor/how-to-guides/thunks/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Fhow-to-guides%2Fthemes%2Ftheme-json%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/docs/how-to-guides/themes/theme-json.md"
    },
    {
      "text": "a new mechanism",
      "url": "https://make.wordpress.org/core/2021/06/25/introducing-theme-json-in-wordpress-5-8/"
    },
    {
      "text": "evolved to a v2",
      "url": "https://make.wordpress.org/core/2022/01/08/updates-for-settings-styles-and-theme-json/"
    },
    {
      "text": "Rationale",
      "url": "https://developer.wordpress.org/block-editor/#rationale"
    },
    {
      "text": "control the editor programmatically",
      "url": "https://make.wordpress.org/core/2020/01/23/controlling-the-block-editor/"
    },
    {
      "text": "a block style system",
      "url": "https://github.com/WordPress/gutenberg/issues/9534"
    },
    {
      "text": "Settings for the block editor",
      "url": "https://developer.wordpress.org/block-editor/#settings-for-the-block-editor"
    },
    {
      "text": "Settings can be controlled per block",
      "url": "https://developer.wordpress.org/block-editor/#settings-can-be-controlled-per-block"
    },
    {
      "text": "Styles are managed",
      "url": "https://developer.wordpress.org/block-editor/#styles-are-managed"
    },
    {
      "text": "CSS Custom Properties: presets & custom",
      "url": "https://developer.wordpress.org/block-editor/#css-custom-properties-presets-custom"
    },
    {
      "text": "color palettes",
      "url": "https://developer.wordpress.org/block-editor/how-to-guides/themes/theme-support/#block-color-palettes"
    },
    {
      "text": "font sizes",
      "url": "https://developer.wordpress.org/block-editor/how-to-guides/themes/theme-support/#block-font-sizes"
    },
    {
      "text": "gradients",
      "url": "https://developer.wordpress.org/block-editor/how-to-guides/themes/theme-support/#block-gradient-presets"
    },
    {
      "text": "Specification",
      "url": "https://developer.wordpress.org/block-editor/#specification"
    },
    {
      "text": "v2",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/theme-json-reference/theme-json-living/"
    },
    {
      "text": "introduced in WordPress 5.9",
      "url": "https://make.wordpress.org/core/2022/01/08/updates-for-settings-styles-and-theme-json/"
    },
    {
      "text": "v1",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/theme-json-reference/theme-json-v1/"
    },
    {
      "text": "migrated",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/theme-json-reference/theme-json-migrations/"
    },
    {
      "text": "Opt-in into UI controls",
      "url": "https://developer.wordpress.org/block-editor/#opt-in-into-ui-controls"
    },
    {
      "text": "Backward compatibility with add_theme_support",
      "url": "https://developer.wordpress.org/block-editor/#backward-compatibility-with-add_theme_support"
    },
    {
      "text": "Presets",
      "url": "https://developer.wordpress.org/block-editor/#presets"
    },
    {
      "text": "Custom",
      "url": "https://developer.wordpress.org/block-editor/#custom"
    },
    {
      "text": "Settings examples",
      "url": "https://developer.wordpress.org/block-editor/#settings-examples"
    },
    {
      "text": "Styles",
      "url": "https://developer.wordpress.org/block-editor/#styles"
    },
    {
      "text": "block supports mechanism",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/block-api/block-supports/"
    },
    {
      "text": "Top-level styles",
      "url": "https://developer.wordpress.org/block-editor/#top-level-styles"
    },
    {
      "text": "Block styles",
      "url": "https://developer.wordpress.org/block-editor/#block-styles"
    },
    {
      "text": "Referencing a style",
      "url": "https://developer.wordpress.org/block-editor/#referencing-a-style"
    },
    {
      "text": "Element styles",
      "url": "https://developer.wordpress.org/block-editor/#element-styles"
    },
    {
      "text": "block.json specification",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/block-api/block-registration/#styles-optional"
    },
    {
      "text": "this issue",
      "url": "https://github.com/WordPress/gutenberg/issues/49602"
    },
    {
      "text": "customTemplates",
      "url": "https://developer.wordpress.org/block-editor/#customtemplates"
    },
    {
      "text": "templateParts",
      "url": "https://developer.wordpress.org/block-editor/#templateparts"
    },
    {
      "text": "patterns",
      "url": "https://developer.wordpress.org/block-editor/#patterns"
    },
    {
      "text": "Pattern Directory",
      "url": "https://wordpress.org/patterns/"
    },
    {
      "text": "Developing with theme.json",
      "url": "https://developer.wordpress.org/block-editor/#developing-with-theme-json"
    },
    {
      "text": "Frequently Asked Questions",
      "url": "https://developer.wordpress.org/block-editor/#frequently-asked-questions"
    },
    {
      "text": "The naming schema of CSS Custom Properties",
      "url": "https://developer.wordpress.org/block-editor/#the-naming-schema-of-css-custom-properties"
    },
    {
      "text": "Why using -- as a separator?",
      "url": "https://developer.wordpress.org/block-editor/#why-using-as-a-separator"
    },
    {
      "text": "How settings under “custom” create new CSS Custom Properties",
      "url": "https://developer.wordpress.org/block-editor/#how-settings-under-custom-create-new-css-custom-properties"
    },
    {
      "text": "Global Stylesheet",
      "url": "https://developer.wordpress.org/block-editor/#global-stylesheet"
    },
    {
      "text": "Specificity for link colors provided by the user",
      "url": "https://developer.wordpress.org/block-editor/#specificity-for-link-colors-provided-by-the-user"
    },
    {
      "text": "address this issue",
      "url": "https://github.com/WordPress/gutenberg/pull/34689"
    },
    {
      "text": "What is blockGap and how can I use it?",
      "url": "https://developer.wordpress.org/block-editor/#what-is-blockgap-and-how-can-i-use-it"
    },
    {
      "text": "Why does it take so long to update the styles in the browser?",
      "url": "https://developer.wordpress.org/block-editor/#why-does-it-take-so-long-to-update-the-styles-in-the-browser"
    },
    {
      "text": "WP_DEBUG",
      "url": "https://wordpress.org/documentation/article/debugging-in-wordpress/#wp_debug"
    },
    {
      "text": "SCRIPT_DEBUG",
      "url": "https://wordpress.org/documentation/article/debugging-in-wordpress/#script_debug"
    },
    {
      "text": "wp-config.php",
      "url": "https://wordpress.org/documentation/article/editing-wp-config-php/"
    },
    {
      "text": "← Block Theme",
      "url": "https://developer.wordpress.org/block-editor/how-to-guides/themes/block-theme-overview/"
    },
    {
      "text": "Theme Support →",
      "url": "https://developer.wordpress.org/block-editor/how-to-guides/themes/theme-support/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Fhow-to-guides%2Fthemes%2Fblock-theme-overview%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/docs/how-to-guides/themes/block-theme-overview.md"
    },
    {
      "text": "Theme Developer Handbook",
      "url": "https://developer.wordpress.org/themes/block-themes/"
    },
    {
      "text": "What is a block theme?",
      "url": "https://developer.wordpress.org/block-editor/#what-is-a-block-theme"
    },
    {
      "text": "Global styles presets",
      "url": "https://developer.wordpress.org/block-editor/#global-styles-presets"
    },
    {
      "text": "← Create a block theme",
      "url": "https://developer.wordpress.org/block-editor/how-to-guides/themes/create-block-theme/"
    },
    {
      "text": "Global Settings & Styles (theme.json) →",
      "url": "https://developer.wordpress.org/block-editor/how-to-guides/themes/theme-json/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Fhow-to-guides%2Fthemes%2Fcreate-block-theme%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/docs/how-to-guides/themes/create-block-theme.md"
    },
    {
      "text": "Block Theme →",
      "url": "https://developer.wordpress.org/block-editor/how-to-guides/themes/block-theme-overview/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Fhow-to-guides%2Fthemes%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/docs/how-to-guides/themes/README.md"
    },
    {
      "text": "Types of themes",
      "url": "https://developer.wordpress.org/block-editor/#types-of-themes"
    },
    {
      "text": "Classic theme",
      "url": "https://developer.wordpress.org/block-editor/#classic-theme"
    },
    {
      "text": "Theme Supports",
      "url": "https://developer.wordpress.org/block-editor/how-to-guides/themes/theme-support/"
    },
    {
      "text": "theme.json",
      "url": "https://developer.wordpress.org/block-editor/how-to-guides/themes/theme-json/"
    },
    {
      "text": "Block theme",
      "url": "https://developer.wordpress.org/block-editor/#block-theme"
    },
    {
      "text": "Full site editing (FSE)",
      "url": "https://developer.wordpress.org/block-editor/#full-site-editing-fse"
    },
    {
      "text": "Block Theme Overview",
      "url": "https://developer.wordpress.org/block-editor/how-to-guides/themes/block-theme-overview/"
    },
    {
      "text": "Global Settings (theme.json)",
      "url": "https://developer.wordpress.org/block-editor/how-to-guides/themes/theme-json/"
    },
    {
      "text": "← Propagating updates for block types",
      "url": "https://developer.wordpress.org/block-editor/how-to-guides/propagating-updates/"
    },
    {
      "text": "Create a block theme →",
      "url": "https://developer.wordpress.org/block-editor/how-to-guides/themes/create-block-theme/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Fhow-to-guides%2Fpropagating-updates%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/docs/how-to-guides/propagating-updates.md"
    },
    {
      "text": "Recommendations on managing updates",
      "url": "https://developer.wordpress.org/block-editor/#recommendations-on-managing-updates"
    },
    {
      "text": "Establish early what content you expect to require updates",
      "url": "https://developer.wordpress.org/block-editor/#establish-early-what-content-you-expect-to-require-updates"
    },
    {
      "text": "Embrace theme design at the block level",
      "url": "https://developer.wordpress.org/block-editor/#embrace-theme-design-at-the-block-level"
    },
    {
      "text": "Content types (and how to properly update them)",
      "url": "https://developer.wordpress.org/block-editor/#content-types-and-how-to-properly-update-them"
    },
    {
      "text": "Blocks",
      "url": "https://developer.wordpress.org/block-editor/#blocks"
    },
    {
      "text": "block deprecations",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/block-api/block-deprecation/"
    },
    {
      "text": "you can use the Create Block tool",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-create-block/"
    },
    {
      "text": "Reusable blocks",
      "url": "https://developer.wordpress.org/block-editor/#reusable-blocks"
    },
    {
      "text": "Template Parts and Templates",
      "url": "https://developer.wordpress.org/block-editor/#template-parts-and-templates"
    },
    {
      "text": "Resources",
      "url": "https://developer.wordpress.org/block-editor/#resources"
    },
    {
      "text": "Comparing Patterns, Template Parts, and Reusable Blocks",
      "url": "https://wordpress.org/documentation/article/comparing-patterns-template-parts-and-reusable-blocks/"
    },
    {
      "text": "Block deprecation",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/block-api/block-deprecation/"
    },
    {
      "text": "Create Block tool",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-create-block/"
    },
    {
      "text": "← Plugin Sidebar",
      "url": "https://developer.wordpress.org/block-editor/how-to-guides/plugin-sidebar-0/"
    },
    {
      "text": "Themes →",
      "url": "https://developer.wordpress.org/block-editor/how-to-guides/themes/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Fhow-to-guides%2Fplugin-sidebar-0%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/docs/how-to-guides/plugin-sidebar-0.md"
    },
    {
      "text": "Overview",
      "url": "https://developer.wordpress.org/block-editor/#overview"
    },
    {
      "text": "Block Toolbar and Settings Sidebar",
      "url": "https://developer.wordpress.org/block-editor/how-to-guides/block-tutorial/block-controls-toolbar-and-sidebar/"
    },
    {
      "text": "Before you start",
      "url": "https://developer.wordpress.org/block-editor/#before-you-start"
    },
    {
      "text": "Getting started with JavaScript",
      "url": "https://developer.wordpress.org/block-editor/how-to-guides/javascript/"
    },
    {
      "text": "Step-by-step guide",
      "url": "https://developer.wordpress.org/block-editor/#step-by-step-guide"
    },
    {
      "text": "Step 1: Get a Sidebar up and Running",
      "url": "https://developer.wordpress.org/block-editor/#step-1-get-a-sidebar-up-and-running"
    },
    {
      "text": "registerPlugin",
      "url": "https://developer.wordpress.org/block-editor/reference-guide/packages/packages-plugins/"
    },
    {
      "text": "PluginSidebar",
      "url": "https://developer.wordpress.org/block-editor/reference-guide/packages/packages-edit-post/#pluginsidebar"
    },
    {
      "text": "createElement",
      "url": "https://developer.wordpress.org/block-editor/reference-guide/packages/packages-element/"
    },
    {
      "text": "Step 2: Tweak the sidebar style and add controls",
      "url": "https://developer.wordpress.org/block-editor/#step-2-tweak-the-sidebar-style-and-add-controls"
    },
    {
      "text": "TextControl",
      "url": "https://developer.wordpress.org/block-editor/reference-guide/components/text-control/"
    },
    {
      "text": "Step 3: Register the Meta Field",
      "url": "https://developer.wordpress.org/block-editor/#step-3-register-the-meta-field"
    },
    {
      "text": "register_post_meta",
      "url": "https://developer.wordpress.org/reference/functions/register_post_meta/"
    },
    {
      "text": "registering the post",
      "url": "https://developer.wordpress.org/reference/functions/register_post_type/#supports"
    },
    {
      "text": "add_post_type_support function",
      "url": "https://developer.wordpress.org/reference/functions/add_post_type_support/"
    },
    {
      "text": "Step 4: Initialize the Input Control",
      "url": "https://developer.wordpress.org/block-editor/#step-4-initialize-the-input-control"
    },
    {
      "text": "Step 5: Update the Meta Field When the Input’s Content Changes",
      "url": "https://developer.wordpress.org/block-editor/#step-5-update-the-meta-field-when-the-inputs-content-changes"
    },
    {
      "text": "Additional resources",
      "url": "https://developer.wordpress.org/block-editor/#additional-resources"
    },
    {
      "text": "@wordpress/data package",
      "url": "https://developer.wordpress.org/block-editor/reference-guide/packages/packages-data/"
    },
    {
      "text": "useSelect",
      "url": "https://developer.wordpress.org/block-editor/reference-guide/packages/packages-data/#useselect"
    },
    {
      "text": "getEditedPostAttribute",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/data/data-core-editor/#geteditedpostattribute"
    },
    {
      "text": "useDispatch",
      "url": "https://developer.wordpress.org/block-editor/reference-guide/packages/packages-data/#usedispatch"
    },
    {
      "text": "Conclusion",
      "url": "https://developer.wordpress.org/block-editor/#conclusion"
    },
    {
      "text": "plugin-sidebar example",
      "url": "https://github.com/WordPress/gutenberg-examples/tree/trunk/blocks-non-jsx/plugin-sidebar"
    },
    {
      "text": "← Notices",
      "url": "https://developer.wordpress.org/block-editor/how-to-guides/notices/"
    },
    {
      "text": "Propagating updates for block types →",
      "url": "https://developer.wordpress.org/block-editor/how-to-guides/propagating-updates/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Fhow-to-guides%2Fnotices%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/docs/how-to-guides/notices/README.md"
    },
    {
      "text": "Notices in the Classic Editor",
      "url": "https://developer.wordpress.org/block-editor/#notices-in-the-classic-editor"
    },
    {
      "text": "Notices in the Block Editor",
      "url": "https://developer.wordpress.org/block-editor/#notices-in-the-block-editor"
    },
    {
      "text": "Learn More",
      "url": "https://developer.wordpress.org/block-editor/#learn-more"
    },
    {
      "text": "Notices Data Handbook",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/data/data-core-notices/"
    },
    {
      "text": "← Meta Boxes",
      "url": "https://developer.wordpress.org/block-editor/how-to-guides/metabox/"
    },
    {
      "text": "Plugin Sidebar →",
      "url": "https://developer.wordpress.org/block-editor/how-to-guides/plugin-sidebar-0/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Fcontributors%2Froadmap%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/docs/contributors/roadmap.md"
    },
    {
      "text": "Phase 2 Scope",
      "url": "https://github.com/WordPress/gutenberg/issues/13113"
    },
    {
      "text": "Projects",
      "url": "https://developer.wordpress.org/block-editor/#projects"
    },
    {
      "text": "See active RFC",
      "url": "https://github.com/WordPress/gutenberg/pull/13693"
    },
    {
      "text": "pending tasks",
      "url": "https://github.com/WordPress/gutenberg/issues/14043"
    },
    {
      "text": "#11440",
      "url": "https://github.com/WordPress/gutenberg/issues/11440"
    },
    {
      "text": "#7604",
      "url": "https://github.com/WordPress/gutenberg/issues/7604"
    },
    {
      "text": "See overview",
      "url": "https://github.com/WordPress/gutenberg/issues/13489"
    },
    {
      "text": "See overview",
      "url": "https://github.com/WordPress/gutenberg/issues/13778"
    },
    {
      "text": "see overview",
      "url": "https://github.com/WordPress/gutenberg/issues/15450"
    },
    {
      "text": "#7551",
      "url": "https://github.com/WordPress/gutenberg/issues/7551"
    },
    {
      "text": "#9534",
      "url": "https://github.com/WordPress/gutenberg/issues/9534"
    },
    {
      "text": "See overview",
      "url": "https://github.com/WordPress/gutenberg/issues/5445"
    },
    {
      "text": "See related issue",
      "url": "https://github.com/WordPress/gutenberg/issues/14755"
    },
    {
      "text": "Timeline",
      "url": "https://developer.wordpress.org/block-editor/#timeline"
    },
    {
      "text": "← Versions in WordPress",
      "url": "https://developer.wordpress.org/block-editor/contributors/versions-in-wordpress/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fcomponents%2Ftext-control%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/packages/components/src/text-control/README.md"
    },
    {
      "text": "Table of contents",
      "url": "https://developer.wordpress.org/block-editor/#table-of-contents"
    },
    {
      "text": "Design guidelines",
      "url": "https://developer.wordpress.org/block-editor/#design-guidelines"
    },
    {
      "text": "Development guidelines",
      "url": "https://developer.wordpress.org/block-editor/#development-guidelines"
    },
    {
      "text": "Related components",
      "url": "https://developer.wordpress.org/block-editor/#related-components"
    },
    {
      "text": "Usage",
      "url": "https://developer.wordpress.org/block-editor/#usage"
    },
    {
      "text": "When to use TextControls",
      "url": "https://developer.wordpress.org/block-editor/#when-to-use-textcontrols"
    },
    {
      "text": "Anatomy",
      "url": "https://developer.wordpress.org/block-editor/#anatomy"
    },
    {
      "text": "Label text",
      "url": "https://developer.wordpress.org/block-editor/#label-text"
    },
    {
      "text": "Containers",
      "url": "https://developer.wordpress.org/block-editor/#containers"
    },
    {
      "text": "Usage",
      "url": "https://developer.wordpress.org/block-editor/#usage-2"
    },
    {
      "text": "Props",
      "url": "https://developer.wordpress.org/block-editor/#props"
    },
    {
      "text": "label",
      "url": "https://developer.wordpress.org/block-editor/#label"
    },
    {
      "text": "hideLabelFromVision",
      "url": "https://developer.wordpress.org/block-editor/#hidelabelfromvision"
    },
    {
      "text": "help",
      "url": "https://developer.wordpress.org/block-editor/#help"
    },
    {
      "text": "type",
      "url": "https://developer.wordpress.org/block-editor/#type"
    },
    {
      "text": "value",
      "url": "https://developer.wordpress.org/block-editor/#value"
    },
    {
      "text": "className",
      "url": "https://developer.wordpress.org/block-editor/#classname"
    },
    {
      "text": "onChange",
      "url": "https://developer.wordpress.org/block-editor/#onchange"
    },
    {
      "text": "← TabPanel",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/tab-panel/"
    },
    {
      "text": "TextHighlight →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/text-highlight/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Ftheme-json.md&locale=en_US"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fpackages%2Fpackages-primitives%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/packages/primitives/README.md"
    },
    {
      "text": "Installation",
      "url": "https://developer.wordpress.org/block-editor/#installation"
    },
    {
      "text": "the polyfill shipped in @wordpress/babel-preset-default",
      "url": "https://github.com/WordPress/gutenberg/tree/HEAD/packages/babel-preset-default#polyfill"
    },
    {
      "text": "Contributing to this package",
      "url": "https://developer.wordpress.org/block-editor/#contributing-to-this-package"
    },
    {
      "text": "npm",
      "url": "https://www.npmjs.com/"
    },
    {
      "text": "WordPress",
      "url": "https://make.wordpress.org/core/"
    },
    {
      "text": "contributor guide",
      "url": "https://github.com/WordPress/gutenberg/tree/HEAD/CONTRIBUTING.md"
    },
    {
      "text": "← @wordpress/prettier-config",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-prettier-config/"
    },
    {
      "text": "@wordpress/priority-queue →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-priority-queue/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fpackages%2Fpackages-blocks%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/packages/blocks/README.md"
    },
    {
      "text": "What Are Little Blocks Made Of?",
      "url": "https://make.wordpress.org/design/2017/01/25/what-are-little-blocks-made-of/"
    },
    {
      "text": "Make WordPress Design",
      "url": "https://make.wordpress.org/design/"
    },
    {
      "text": "cloneBlock",
      "url": "https://developer.wordpress.org/block-editor/#cloneblock"
    },
    {
      "text": "createBlock",
      "url": "https://developer.wordpress.org/block-editor/#createblock"
    },
    {
      "text": "createBlocksFromInnerBlocksTemplate",
      "url": "https://developer.wordpress.org/block-editor/#createblocksfrominnerblockstemplate"
    },
    {
      "text": "doBlocksMatchTemplate",
      "url": "https://developer.wordpress.org/block-editor/#doblocksmatchtemplate"
    },
    {
      "text": "findTransform",
      "url": "https://developer.wordpress.org/block-editor/#findtransform"
    },
    {
      "text": "getBlockAttributes",
      "url": "https://developer.wordpress.org/block-editor/#getblockattributes"
    },
    {
      "text": "getBlockContent",
      "url": "https://developer.wordpress.org/block-editor/#getblockcontent"
    },
    {
      "text": "getBlockDefaultClassName",
      "url": "https://developer.wordpress.org/block-editor/#getblockdefaultclassname"
    },
    {
      "text": "getBlockFromExample",
      "url": "https://developer.wordpress.org/block-editor/#getblockfromexample"
    },
    {
      "text": "getBlockMenuDefaultClassName",
      "url": "https://developer.wordpress.org/block-editor/#getblockmenudefaultclassname"
    },
    {
      "text": "getBlockSupport",
      "url": "https://developer.wordpress.org/block-editor/#getblocksupport"
    },
    {
      "text": "getBlockTransforms",
      "url": "https://developer.wordpress.org/block-editor/#getblocktransforms"
    },
    {
      "text": "getBlockType",
      "url": "https://developer.wordpress.org/block-editor/#getblocktype"
    },
    {
      "text": "getBlockTypes",
      "url": "https://developer.wordpress.org/block-editor/#getblocktypes"
    },
    {
      "text": "getChildBlockNames",
      "url": "https://developer.wordpress.org/block-editor/#getchildblocknames"
    },
    {
      "text": "getDefaultBlockName",
      "url": "https://developer.wordpress.org/block-editor/#getdefaultblockname"
    },
    {
      "text": "getFreeformContentHandlerName",
      "url": "https://developer.wordpress.org/block-editor/#getfreeformcontenthandlername"
    },
    {
      "text": "getGroupingBlockName",
      "url": "https://developer.wordpress.org/block-editor/#getgroupingblockname"
    },
    {
      "text": "getPhrasingContentSchema",
      "url": "https://developer.wordpress.org/block-editor/#getphrasingcontentschema"
    },
    {
      "text": "getPossibleBlockTransformations",
      "url": "https://developer.wordpress.org/block-editor/#getpossibleblocktransformations"
    },
    {
      "text": "getSaveContent",
      "url": "https://developer.wordpress.org/block-editor/#getsavecontent"
    },
    {
      "text": "getSaveElement",
      "url": "https://developer.wordpress.org/block-editor/#getsaveelement"
    },
    {
      "text": "getUnregisteredTypeHandlerName",
      "url": "https://developer.wordpress.org/block-editor/#getunregisteredtypehandlername"
    },
    {
      "text": "hasBlockSupport",
      "url": "https://developer.wordpress.org/block-editor/#hasblocksupport"
    },
    {
      "text": "hasChildBlocks",
      "url": "https://developer.wordpress.org/block-editor/#haschildblocks"
    },
    {
      "text": "hasChildBlocksWithInserterSupport",
      "url": "https://developer.wordpress.org/block-editor/#haschildblockswithinsertersupport"
    },
    {
      "text": "isReusableBlock",
      "url": "https://developer.wordpress.org/block-editor/#isreusableblock"
    },
    {
      "text": "isTemplatePart",
      "url": "https://developer.wordpress.org/block-editor/#istemplatepart"
    },
    {
      "text": "isUnmodifiedBlock",
      "url": "https://developer.wordpress.org/block-editor/#isunmodifiedblock"
    },
    {
      "text": "isUnmodifiedDefaultBlock",
      "url": "https://developer.wordpress.org/block-editor/#isunmodifieddefaultblock"
    },
    {
      "text": "isValidBlockContent",
      "url": "https://developer.wordpress.org/block-editor/#isvalidblockcontent"
    },
    {
      "text": "isValidIcon",
      "url": "https://developer.wordpress.org/block-editor/#isvalidicon"
    },
    {
      "text": "normalizeIconObject",
      "url": "https://developer.wordpress.org/block-editor/#normalizeiconobject"
    },
    {
      "text": "parse",
      "url": "https://developer.wordpress.org/block-editor/#parse"
    },
    {
      "text": "https://developer.wordpress.org/block-editor/packages/packages-block-serialization-default-parser/",
      "url": "https://developer.wordpress.org/block-editor/packages/packages-block-serialization-default-parser/"
    },
    {
      "text": "parseWithAttributeSchema",
      "url": "https://developer.wordpress.org/block-editor/#parsewithattributeschema"
    },
    {
      "text": "pasteHandler",
      "url": "https://developer.wordpress.org/block-editor/#pastehandler"
    },
    {
      "text": "rawHandler",
      "url": "https://developer.wordpress.org/block-editor/#rawhandler"
    },
    {
      "text": "registerBlockStyle",
      "url": "https://developer.wordpress.org/block-editor/#registerblockstyle"
    },
    {
      "text": "the official documentation",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/block-api/block-styles/#styles"
    },
    {
      "text": "Create a block tutorial",
      "url": "https://developer.wordpress.org/block-editor/getting-started/create-block/"
    },
    {
      "text": "registerBlockVariation",
      "url": "https://developer.wordpress.org/block-editor/#registerblockvariation"
    },
    {
      "text": "the official documentation",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/block-api/block-variations/"
    },
    {
      "text": "serialize",
      "url": "https://developer.wordpress.org/block-editor/#serialize"
    },
    {
      "text": "serializeRawBlock",
      "url": "https://developer.wordpress.org/block-editor/#serializerawblock"
    },
    {
      "text": "setCategories",
      "url": "https://developer.wordpress.org/block-editor/#setcategories"
    },
    {
      "text": "setDefaultBlockName",
      "url": "https://developer.wordpress.org/block-editor/#setdefaultblockname"
    },
    {
      "text": "setFreeformContentHandlerName",
      "url": "https://developer.wordpress.org/block-editor/#setfreeformcontenthandlername"
    },
    {
      "text": "setGroupingBlockName",
      "url": "https://developer.wordpress.org/block-editor/#setgroupingblockname"
    },
    {
      "text": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-dom-ready/",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-dom-ready/"
    },
    {
      "text": "setUnregisteredTypeHandlerName",
      "url": "https://developer.wordpress.org/block-editor/#setunregisteredtypehandlername"
    },
    {
      "text": "store",
      "url": "https://developer.wordpress.org/block-editor/#store"
    },
    {
      "text": "https://github.com/WordPress/gutenberg/blob/HEAD/packages/data/README.md#createReduxStore",
      "url": "https://github.com/WordPress/gutenberg/blob/HEAD/packages/data/README.md#createReduxStore"
    },
    {
      "text": "switchToBlockType",
      "url": "https://developer.wordpress.org/block-editor/#switchtoblocktype"
    },
    {
      "text": "synchronizeBlocksWithTemplate",
      "url": "https://developer.wordpress.org/block-editor/#synchronizeblockswithtemplate"
    },
    {
      "text": "unregisterBlockStyle",
      "url": "https://developer.wordpress.org/block-editor/#unregisterblockstyle"
    },
    {
      "text": "unregisterBlockType",
      "url": "https://developer.wordpress.org/block-editor/#unregisterblocktype"
    },
    {
      "text": "unregisterBlockVariation",
      "url": "https://developer.wordpress.org/block-editor/#unregisterblockvariation"
    },
    {
      "text": "updateCategory",
      "url": "https://developer.wordpress.org/block-editor/#updatecategory"
    },
    {
      "text": "validateBlock",
      "url": "https://developer.wordpress.org/block-editor/#validateblock"
    },
    {
      "text": "withBlockContentContext",
      "url": "https://developer.wordpress.org/block-editor/#withblockcontentcontext"
    },
    {
      "text": "← @wordpress/block-serialization-spec-parser",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-block-serialization-spec-parser/"
    },
    {
      "text": "@wordpress/browserslist-config →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-browserslist-config/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fpackages%2Fpackages-edit-post%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/packages/edit-post/README.md"
    },
    {
      "text": "Extending the post editor UI",
      "url": "https://developer.wordpress.org/block-editor/#extending-the-post-editor-ui"
    },
    {
      "text": "the plugins module documentation",
      "url": "https://github.com/WordPress/gutenberg/tree/HEAD/packages/plugins/README.md"
    },
    {
      "text": "see documentation",
      "url": "https://github.com/WordPress/gutenberg/tree/HEAD/packages/plugins/README.md"
    },
    {
      "text": "initializeEditor",
      "url": "https://developer.wordpress.org/block-editor/#initializeeditor"
    },
    {
      "text": "PluginBlockSettingsMenuItem",
      "url": "https://developer.wordpress.org/block-editor/#pluginblocksettingsmenuitem"
    },
    {
      "text": "Dashicon",
      "url": "https://developer.wordpress.org/resource/dashicons/"
    },
    {
      "text": "PluginDocumentSettingPanel",
      "url": "https://developer.wordpress.org/block-editor/#plugindocumentsettingpanel"
    },
    {
      "text": "PluginMoreMenuItem",
      "url": "https://developer.wordpress.org/block-editor/#pluginmoremenuitem"
    },
    {
      "text": "MenuItem",
      "url": "https://github.com/WordPress/gutenberg/tree/HEAD/packages/components/src/menu-item/README.md"
    },
    {
      "text": "PluginPostPublishPanel",
      "url": "https://developer.wordpress.org/block-editor/#pluginpostpublishpanel"
    },
    {
      "text": "PluginPostStatusInfo",
      "url": "https://developer.wordpress.org/block-editor/#pluginpoststatusinfo"
    },
    {
      "text": "PluginPrePublishPanel",
      "url": "https://developer.wordpress.org/block-editor/#pluginprepublishpanel"
    },
    {
      "text": "PluginSidebar",
      "url": "https://developer.wordpress.org/block-editor/#pluginsidebar"
    },
    {
      "text": "PluginSidebarMoreMenuItem",
      "url": "https://developer.wordpress.org/block-editor/#pluginsidebarmoremenuitem"
    },
    {
      "text": "reinitializeEditor",
      "url": "https://developer.wordpress.org/block-editor/#reinitializeeditor"
    },
    {
      "text": "← @wordpress/e2e-tests",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-e2e-tests/"
    },
    {
      "text": "@wordpress/edit-site →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-edit-site/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fpackages%2Fpackages-plugins%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/packages/plugins/README.md"
    },
    {
      "text": "Plugins API",
      "url": "https://developer.wordpress.org/block-editor/#plugins-api"
    },
    {
      "text": "getPlugin",
      "url": "https://developer.wordpress.org/block-editor/#getplugin"
    },
    {
      "text": "getPlugins",
      "url": "https://developer.wordpress.org/block-editor/#getplugins"
    },
    {
      "text": "PluginArea",
      "url": "https://developer.wordpress.org/block-editor/#pluginarea"
    },
    {
      "text": "registerPlugin",
      "url": "https://developer.wordpress.org/block-editor/#registerplugin"
    },
    {
      "text": "unregisterPlugin",
      "url": "https://developer.wordpress.org/block-editor/#unregisterplugin"
    },
    {
      "text": "withPluginContext",
      "url": "https://developer.wordpress.org/block-editor/#withplugincontext"
    },
    {
      "text": "← @wordpress/nux",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-nux/"
    },
    {
      "text": "@wordpress/react-native-editor →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-react-native-editor/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Fcontributors%2Fversions-in-wordpress%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/docs/contributors/versions-in-wordpress.md"
    },
    {
      "text": "release notes shared on Make Core",
      "url": "https://make.wordpress.org/core/tag/gutenberg-new/"
    },
    {
      "text": "WordPress.org slack",
      "url": "https://make.wordpress.org/chat/"
    },
    {
      "text": "← Folder Structure",
      "url": "https://developer.wordpress.org/block-editor/contributors/folder-structure/"
    },
    {
      "text": "Upcoming Projects & Roadmap →",
      "url": "https://developer.wordpress.org/block-editor/contributors/roadmap/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Fcontributors%2Ffolder-structure%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/docs/contributors/folder-structure.md"
    },
    {
      "text": "← Repository Management",
      "url": "https://developer.wordpress.org/block-editor/contributors/repository-management/"
    },
    {
      "text": "Versions in WordPress →",
      "url": "https://developer.wordpress.org/block-editor/contributors/versions-in-wordpress/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Fcontributors%2Frepository-management%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/docs/contributors/repository-management.md"
    },
    {
      "text": "Issues",
      "url": "https://developer.wordpress.org/block-editor/#issues"
    },
    {
      "text": "Labels",
      "url": "https://developer.wordpress.org/block-editor/#labels"
    },
    {
      "text": "Milestones",
      "url": "https://developer.wordpress.org/block-editor/#milestones"
    },
    {
      "text": "Triaging Issues",
      "url": "https://developer.wordpress.org/block-editor/#triaging-issues"
    },
    {
      "text": "Pull Requests",
      "url": "https://developer.wordpress.org/block-editor/#pull-requests"
    },
    {
      "text": "Code Review",
      "url": "https://developer.wordpress.org/block-editor/#code-review"
    },
    {
      "text": "Design Review",
      "url": "https://developer.wordpress.org/block-editor/#design-review"
    },
    {
      "text": "Merging Pull Requests",
      "url": "https://developer.wordpress.org/block-editor/#merging-pull-requests"
    },
    {
      "text": "Closing Pull Requests",
      "url": "https://developer.wordpress.org/block-editor/#closing-pull-requests"
    },
    {
      "text": "one or more labels",
      "url": "https://github.com/WordPress/gutenberg/labels"
    },
    {
      "text": "Priority High",
      "url": "https://github.com/WordPress/gutenberg/labels/%5BPriority%5D%20High"
    },
    {
      "text": "Priority OMGWTFBBQ",
      "url": "https://github.com/WordPress/gutenberg/labels/%5BPriority%5D%20OMGWTFBBQ"
    },
    {
      "text": "Good First Issue",
      "url": "https://github.com/WordPress/gutenberg/labels/Good%20First%20Issue"
    },
    {
      "text": "Good First Review",
      "url": "https://github.com/WordPress/gutenberg/labels/Good%20First%20Review"
    },
    {
      "text": "Needs Accessibility Feedback",
      "url": "https://github.com/WordPress/gutenberg/labels/Needs%20Accessibility%20Feedback"
    },
    {
      "text": "Needs Design Feedback",
      "url": "https://github.com/WordPress/gutenberg/labels/Needs%20Design%20Feedback"
    },
    {
      "text": "[Type] Bug",
      "url": "https://github.com/WordPress/gutenberg/labels/%5BType%5D%20Bug"
    },
    {
      "text": "[Type] Enhancement",
      "url": "https://github.com/WordPress/gutenberg/labels/%5BType%5D%20Enhancement"
    },
    {
      "text": "[Type] Plugin Interoperability",
      "url": "https://github.com/WordPress/gutenberg/labels/%5BType%5D%20Plugin%20Interoperability"
    },
    {
      "text": "[Status] Needs More Info",
      "url": "https://github.com/WordPress/gutenberg/labels/%5BStatus%5D%20Needs%20More%20Info"
    },
    {
      "text": "Check out the label directory",
      "url": "https://github.com/WordPress/gutenberg/labels"
    },
    {
      "text": "milestones",
      "url": "https://github.com/wordpress/gutenberg/milestones"
    },
    {
      "text": "WordPress X.Y",
      "url": "https://github.com/WordPress/gutenberg/milestone/70"
    },
    {
      "text": "X.Y (Gutenberg)",
      "url": "https://github.com/WordPress/gutenberg/milestone/85"
    },
    {
      "text": "Future",
      "url": "https://github.com/WordPress/gutenberg/milestone/35"
    },
    {
      "text": "Triage Contributors guide",
      "url": "https://developer.wordpress.org/block-editor/contributors/triage/"
    },
    {
      "text": "Figma Library Update",
      "url": "https://github.com/WordPress/gutenberg/labels/Figma%20Library%20Update"
    },
    {
      "text": "Rebased",
      "url": "https://developer.wordpress.org/block-editor/contributors/code/git-workflow/#keeping-your-branch-up-to-date"
    },
    {
      "text": "Teams",
      "url": "https://developer.wordpress.org/block-editor/#teams"
    },
    {
      "text": "Gutenberg Core",
      "url": "https://github.com/orgs/WordPress/teams/gutenberg-core"
    },
    {
      "text": "Gutenberg",
      "url": "https://github.com/orgs/WordPress/teams/gutenberg"
    },
    {
      "text": "#core-editor Slack channel",
      "url": "https://make.wordpress.org/chat/"
    },
    {
      "text": "GitHub projects",
      "url": "https://github.com/WordPress/gutenberg/projects"
    },
    {
      "text": "Phase 2",
      "url": "https://github.com/WordPress/gutenberg/projects/13"
    },
    {
      "text": "Phase 2 design",
      "url": "https://github.com/WordPress/gutenberg/projects/21"
    },
    {
      "text": "Ideas",
      "url": "https://github.com/WordPress/gutenberg/projects/8"
    },
    {
      "text": "← Accessibility Testing",
      "url": "https://developer.wordpress.org/block-editor/contributors/accessibility-testing/"
    },
    {
      "text": "Folder Structure →",
      "url": "https://developer.wordpress.org/block-editor/contributors/folder-structure/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Fcontributors%2Faccessibility-testing%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/docs/contributors/accessibility-testing.md"
    },
    {
      "text": "Getting Started",
      "url": "https://developer.wordpress.org/block-editor/#getting-started"
    },
    {
      "text": "Getting Started",
      "url": "https://developer.wordpress.org/block-editor/contributors/code/getting-started-with-code-contribution/"
    },
    {
      "text": "Keyboard Testing",
      "url": "https://developer.wordpress.org/block-editor/#keyboard-testing"
    },
    {
      "text": "WAI-ARIA composite subclass roles",
      "url": "https://www.w3.org/TR/wai-aria-1.1/#composite"
    },
    {
      "text": "toolbar",
      "url": "https://www.w3.org/TR/wai-aria-1.1/#toolbar"
    },
    {
      "text": "menu",
      "url": "https://www.w3.org/TR/wai-aria-1.1/#menu"
    },
    {
      "text": "listbox",
      "url": "https://www.w3.org/TR/wai-aria-1.1/#listbox"
    },
    {
      "text": "Screen Reader Testing",
      "url": "https://developer.wordpress.org/block-editor/#screen-reader-testing"
    },
    {
      "text": "WebAIM: Screen Reader User Survey #8 Results",
      "url": "https://webaim.org/projects/screenreadersurvey8/#usage"
    },
    {
      "text": "NVDA with Firefox",
      "url": "https://developer.wordpress.org/block-editor/#nvda-with-firefox"
    },
    {
      "text": "NVDA",
      "url": "https://www.nvaccess.org/about-nvda/"
    },
    {
      "text": "the most popular one",
      "url": "https://webaim.org/projects/screenreadersurvey8/#primary"
    },
    {
      "text": "VoiceOver with Safari",
      "url": "https://developer.wordpress.org/block-editor/#voiceover-with-safari"
    },
    {
      "text": "VoiceOver",
      "url": "https://support.apple.com/guide/voiceover-guide/welcome/web"
    },
    {
      "text": "← Localizing Gutenberg",
      "url": "https://developer.wordpress.org/block-editor/contributors/localizing/"
    },
    {
      "text": "Repository Management →",
      "url": "https://developer.wordpress.org/block-editor/contributors/repository-management/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Fcontributors%2Flocalizing%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/docs/contributors/localizing.md"
    },
    {
      "text": "GlotPress translation process documentation",
      "url": "https://make.wordpress.org/polyglots/handbook/tools/glotpress-translate-wordpress-org/"
    },
    {
      "text": "select your locale here",
      "url": "https://translate.wordpress.org/projects/wp-plugins/gutenberg"
    },
    {
      "text": "plugin page",
      "url": "https://wordpress.org/plugins/gutenberg/"
    },
    {
      "text": "← Triage",
      "url": "https://developer.wordpress.org/block-editor/contributors/triage/"
    },
    {
      "text": "Accessibility Testing →",
      "url": "https://developer.wordpress.org/block-editor/contributors/accessibility-testing/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Fcontributors%2Ftriage%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/docs/contributors/triage.md"
    },
    {
      "text": "Get involved in triage",
      "url": "https://developer.wordpress.org/block-editor/#get-involved-in-triage"
    },
    {
      "text": "Join the triage team",
      "url": "https://developer.wordpress.org/block-editor/#join-the-triage-team"
    },
    {
      "text": "review the meetings page",
      "url": "https://make.wordpress.org/meetings/"
    },
    {
      "text": "Slack",
      "url": "https://make.wordpress.org/chat/"
    },
    {
      "text": "Getting started",
      "url": "https://developer.wordpress.org/block-editor/#getting-started"
    },
    {
      "text": "overall Issues page",
      "url": "https://github.com/wordpress/gutenberg/issues"
    },
    {
      "text": "without an assigned label",
      "url": "https://github.com/WordPress/gutenberg/issues?q=is%3Aopen+is%3Aissue+no%3Alabel+sort%3Aupdated-asc"
    },
    {
      "text": "without an assigned label",
      "url": "https://github.com/WordPress/gutenberg/pulls?q=is%3Aopen+is%3Apr+no%3Alabel"
    },
    {
      "text": "review this section on labeling pull requests",
      "url": "https://developer.wordpress.org/block-editor/contributors/repository-management/#pull-requests"
    },
    {
      "text": "The least recently updated",
      "url": "https://github.com/WordPress/gutenberg/issues?q=is%3Aopen+is%3Aissue+sort%3Aupdated-asc"
    },
    {
      "text": "with no comments",
      "url": "https://github.com/wordpress/gutenberg/issues?q=is%3Aissue+is%3Aopen+comments%3A0+"
    },
    {
      "text": "The least commented",
      "url": "https://github.com/wordpress/gutenberg/issues?q=is%3Aissue+is%3Aopen+sort%3Acomments-asc"
    },
    {
      "text": "The most commented",
      "url": "https://github.com/wordpress/gutenberg/issues?q=is%3Aissue+is%3Aopen+sort%3Acomments-desc"
    },
    {
      "text": "General triage process",
      "url": "https://developer.wordpress.org/block-editor/#general-triage-process"
    },
    {
      "text": "here",
      "url": "https://github.com/WordPress/gutenberg/labels"
    },
    {
      "text": "example",
      "url": "https://github.com/WordPress/gutenberg/issues/6193"
    },
    {
      "text": "Closing issues",
      "url": "https://developer.wordpress.org/block-editor/#closing-issues"
    },
    {
      "text": "Release specific triage",
      "url": "https://developer.wordpress.org/block-editor/#release-specific-triage"
    },
    {
      "text": "Design specific triage",
      "url": "https://developer.wordpress.org/block-editor/#design-specific-triage"
    },
    {
      "text": "review this guide",
      "url": "https://make.wordpress.org/design/handbook/workflows/weekly-gutenberg-design-triage/"
    },
    {
      "text": "← Documentation Contributions",
      "url": "https://developer.wordpress.org/block-editor/contributors/documentation/"
    },
    {
      "text": "Localizing Gutenberg →",
      "url": "https://developer.wordpress.org/block-editor/contributors/localizing/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Fcontributors%2Fdocumentation%2Fcopy-guide%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/docs/contributors/documentation/copy-guide.md"
    },
    {
      "text": "Longer Text",
      "url": "https://developer.wordpress.org/block-editor/#longer-text"
    },
    {
      "text": "ONE: Contractions are your friends!",
      "url": "https://developer.wordpress.org/block-editor/#one-contractions-are-your-friends"
    },
    {
      "text": "TWO: Cut phrases that inflate your word count without actually adding meaning.",
      "url": "https://developer.wordpress.org/block-editor/#two-cut-phrases-that-inflate-your-word-count-without-actually-adding-meaning"
    },
    {
      "text": "THREE: Beware of “simple,” “easy,” and “just.”",
      "url": "https://developer.wordpress.org/block-editor/#three-beware-of-simple-easy-and-just"
    },
    {
      "text": "FOUR: Look out for “we.”",
      "url": "https://developer.wordpress.org/block-editor/#four-look-out-for-we"
    },
    {
      "text": "Bulleted Lists",
      "url": "https://developer.wordpress.org/block-editor/#bulleted-lists"
    },
    {
      "text": "ONE: Keep sentence structures parallel across all bullets.",
      "url": "https://developer.wordpress.org/block-editor/#one-keep-sentence-structures-parallel-across-all-bullets"
    },
    {
      "text": "TWO: When in doubt, start with a verb. (But not always the same verb.)",
      "url": "https://developer.wordpress.org/block-editor/#two-when-in-doubt-start-with-a-verb-but-not-always-the-same-verb"
    },
    {
      "text": "THREE: When something’s clearly a list, you don’t have to tell us it’s a list.",
      "url": "https://developer.wordpress.org/block-editor/#three-when-somethings-clearly-a-list-you-dont-have-to-tell-us-its-a-list"
    },
    {
      "text": "FOUR: Bold is sometimes your friend.",
      "url": "https://developer.wordpress.org/block-editor/#four-bold-is-sometimes-your-friend"
    },
    {
      "text": "UI Descriptions",
      "url": "https://developer.wordpress.org/block-editor/#ui-descriptions"
    },
    {
      "text": "ONE: Clarity above all!",
      "url": "https://developer.wordpress.org/block-editor/#one-clarity-above-all"
    },
    {
      "text": "TWO: Refer back to section one, and look out for those bulk-adding phrases.",
      "url": "https://developer.wordpress.org/block-editor/#two-refer-back-to-section-one-and-look-out-for-those-bulk-adding-phrases"
    },
    {
      "text": "THREE: Be specific.",
      "url": "https://developer.wordpress.org/block-editor/#three-be-specific"
    },
    {
      "text": "FOUR: This is still writing. It should have personality and interest.",
      "url": "https://developer.wordpress.org/block-editor/#four-this-is-still-writing-it-should-have-personality-and-interest"
    },
    {
      "text": "FIVE: Pay attention to capitalization.",
      "url": "https://developer.wordpress.org/block-editor/#five-pay-attention-to-capitalization"
    },
    {
      "text": "Error Messaging",
      "url": "https://developer.wordpress.org/block-editor/#error-messaging"
    },
    {
      "text": "ONE: Don’t ignore voice/tone in error messaging—they communicate a lot.",
      "url": "https://developer.wordpress.org/block-editor/#one-dont-ignore-voice-tone-in-error-messaging-they-communicate-a-lot"
    },
    {
      "text": "TWO: Whenever possible, offer a path to resolution.",
      "url": "https://developer.wordpress.org/block-editor/#two-whenever-possible-offer-a-path-to-resolution"
    },
    {
      "text": "THREE: Don’t lean on jargon to cut down on words when space is tight.",
      "url": "https://developer.wordpress.org/block-editor/#three-dont-lean-on-jargon-to-cut-down-on-words-when-space-is-tight"
    },
    {
      "text": "FOUR: Don’t assume people understand where the error came from.",
      "url": "https://developer.wordpress.org/block-editor/#four-dont-assume-people-understand-where-the-error-came-from"
    },
    {
      "text": "Triage →",
      "url": "https://developer.wordpress.org/block-editor/contributors/triage/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Fcontributors%2Fdocumentation%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/docs/contributors/documentation/README.md"
    },
    {
      "text": "Discussions",
      "url": "https://developer.wordpress.org/block-editor/#discussions"
    },
    {
      "text": "Make WordPress Docs blog",
      "url": "https://make.wordpress.org/docs/"
    },
    {
      "text": "Make WordPress Slack",
      "url": "https://make.wordpress.org/chat"
    },
    {
      "text": "https://github.com/WordPress/gutenberg",
      "url": "https://github.com/WordPress/gutenberg"
    },
    {
      "text": "issues with documentation label",
      "url": "https://github.com/WordPress/gutenberg/issues?utf8=%E2%9C%93&q=is%3Aopen+is%3Aissue+label%3A%22%5BType%5D+Documentation%22+"
    },
    {
      "text": "Documentation types",
      "url": "https://developer.wordpress.org/block-editor/#documentation-types"
    },
    {
      "text": "User documentation",
      "url": "https://wordpress.org/documentation/article/wordpress-block-editor/"
    },
    {
      "text": "Block editor handbook",
      "url": "https://developer.wordpress.org/block-editor/"
    },
    {
      "text": "Block editor handbook process",
      "url": "https://developer.wordpress.org/block-editor/#block-editor-handbook-process"
    },
    {
      "text": "Gutenberg project repository",
      "url": "https://github.com/WordPress/gutenberg/"
    },
    {
      "text": "block editor handbook site",
      "url": "https://developer.wordpress.org/block-editor/"
    },
    {
      "text": "the Git Workflow",
      "url": "https://developer.wordpress.org/block-editor/contributors/code/git-workflow/"
    },
    {
      "text": "video walk-through",
      "url": "https://wordpress.tv/2020/09/02/marcus-kazmierczak-contribute-developer-documentation-to-gutenberg/"
    },
    {
      "text": "slides for contributing documentation to Gutenberg",
      "url": "https://mkaz.blog/wordpress/contribute-documentation-to-gutenberg/"
    },
    {
      "text": "Handbook structure",
      "url": "https://developer.wordpress.org/block-editor/#handbook-structure"
    },
    {
      "text": "The Documentation System",
      "url": "https://documentation.divio.com/"
    },
    {
      "text": "create a block tutorial",
      "url": "https://developer.wordpress.org/block-editor/getting-started/create-block/"
    },
    {
      "text": "how to add a button to the block toolbar",
      "url": "https://developer.wordpress.org/docshow-to-guides/format-api/README.md"
    },
    {
      "text": "Templates",
      "url": "https://developer.wordpress.org/block-editor/#templates"
    },
    {
      "text": "how to guide template",
      "url": "https://raw.githubusercontent.com/WordPress/gutenberg/trunk/docs/contributors/documentation/how-to-guide-template.md"
    },
    {
      "text": "template repository for additional examples",
      "url": "https://github.com/thegooddocsproject/templates"
    },
    {
      "text": "Update a document",
      "url": "https://developer.wordpress.org/block-editor/#update-a-document"
    },
    {
      "text": "Create a new document",
      "url": "https://developer.wordpress.org/block-editor/#create-a-new-document"
    },
    {
      "text": "JavaScript build setup documentation",
      "url": "https://developer.wordpress.org/block-editor/how-to-guides/javascript/js-build-setup/"
    },
    {
      "text": "docs",
      "url": "https://github.com/WordPress/gutenberg/tree/HEAD/docs"
    },
    {
      "text": "toc.json",
      "url": "https://github.com/WordPress/gutenberg/blob/HEAD/docs/toc.json"
    },
    {
      "text": "Documenting Packages",
      "url": "https://developer.wordpress.org/block-editor/#documenting-packages"
    },
    {
      "text": "manifest.json",
      "url": "https://github.com/WordPress/gutenberg/blob/HEAD/docs/manifest.json"
    },
    {
      "text": "@wordpress/create-block section",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-create-block/"
    },
    {
      "text": "Using links",
      "url": "https://developer.wordpress.org/block-editor/#using-links"
    },
    {
      "text": "Code examples",
      "url": "https://developer.wordpress.org/block-editor/#code-examples"
    },
    {
      "text": "GitHub documentation around fenced code blocks",
      "url": "https://help.github.com/en/github/writing-on-github/creating-and-highlighting-code-blocks"
    },
    {
      "text": "on this block tutorial page",
      "url": "https://developer.wordpress.org/block-editor/how-to-guides/block-tutorial/block-controls-toolbar-and-sidebar/"
    },
    {
      "text": "Callout notices",
      "url": "https://developer.wordpress.org/block-editor/#callout-notices"
    },
    {
      "text": "notice styles as other WordPress handbooks",
      "url": "https://make.wordpress.org/docs/handbook/documentation-team-handbook/handbooks-style-and-formatting-guide/#formatting"
    },
    {
      "text": "Editor config",
      "url": "https://developer.wordpress.org/block-editor/#editor-config"
    },
    {
      "text": "Getting Started documentation",
      "url": "https://developer.wordpress.org/block-editor/contributors/code/getting-started-with-code-contribution/"
    },
    {
      "text": "Tone and Voice Guide",
      "url": "https://make.wordpress.org/docs/handbook/documentation-team-handbook/tone-and-voice-guide/"
    },
    {
      "text": "← Design Contributions",
      "url": "https://developer.wordpress.org/block-editor/contributors/design/"
    },
    {
      "text": "Copy Guidelines →",
      "url": "https://developer.wordpress.org/block-editor/contributors/documentation/copy-guide/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Fcontributors%2Fdesign%2Freference%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/docs/contributors/design/reference.md"
    },
    {
      "text": "Logo",
      "url": "https://developer.wordpress.org/block-editor/#logo"
    },
    {
      "text": "Cristel Rossignol",
      "url": "https://twitter.com/cristelrossi"
    },
    {
      "text": "Download the SVG logo",
      "url": "https://github.com/WordPress/gutenberg/blob/HEAD/docs/final-g-wapuu-black.svg"
    },
    {
      "text": "Mockups",
      "url": "https://developer.wordpress.org/block-editor/#mockups"
    },
    {
      "text": "the User Interface section",
      "url": "https://developer.wordpress.org/block-editor/explanations/user-interface/design-resources/"
    },
    {
      "text": "← Blocks are the Interface",
      "url": "https://developer.wordpress.org/block-editor/contributors/design/the-block/"
    },
    {
      "text": "Documentation Contributions →",
      "url": "https://developer.wordpress.org/block-editor/contributors/documentation/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Fcontributors%2Fdesign%2Fthe-block%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/docs/contributors/design/the-block.md"
    },
    {
      "text": "Building Blocks",
      "url": "https://developer.wordpress.org/block-editor/#building-blocks"
    },
    {
      "text": "The primary interface for a block is the content area of the block.",
      "url": "https://developer.wordpress.org/block-editor/#the-primary-interface-for-a-block-is-the-content-area-of-the-block"
    },
    {
      "text": "The block toolbar is the place for critical options that can’t be incorporated into placeholder UI.",
      "url": "https://developer.wordpress.org/block-editor/#the-block-toolbar-is-the-place-for-critical-options-that-cant-be-incorporated-into-placeholder-ui"
    },
    {
      "text": "The Settings Sidebar should only be used for advanced, tertiary controls.",
      "url": "https://developer.wordpress.org/block-editor/#the-settings-sidebar-should-only-be-used-for-advanced-tertiary-controls"
    },
    {
      "text": "Reference →",
      "url": "https://developer.wordpress.org/block-editor/contributors/design/reference/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Fcontributors%2Fdesign%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/docs/contributors/design/README.md"
    },
    {
      "text": "Make WordPress Design blog",
      "url": "https://make.wordpress.org/design/"
    },
    {
      "text": "How Can Designers Contribute?",
      "url": "https://developer.wordpress.org/block-editor/#how-can-designers-contribute"
    },
    {
      "text": "Needs Design",
      "url": "https://github.com/WordPress/gutenberg/issues?q=is%3Aissue+is%3Aopen+label%3A%22Needs+Design%22"
    },
    {
      "text": "Needs Design Feedback",
      "url": "https://github.com/WordPress/gutenberg/issues?q=is%3Aissue+is%3Aopen+label%3A\"Needs+Design+Feedback%22"
    },
    {
      "text": "WordPress Design team",
      "url": "https://make.wordpress.org/design/"
    },
    {
      "text": "Figma",
      "url": "https://www.figma.com/"
    },
    {
      "text": "#design channel",
      "url": "http://wordpress.slack.com/messages/design/"
    },
    {
      "text": "library of components",
      "url": "https://www.figma.com/file/ZtN5xslEVYgzU7Dd5CxgGZwq/WordPress-Components?node-id=0%3A1"
    },
    {
      "text": "Principles",
      "url": "https://developer.wordpress.org/block-editor/#principles"
    },
    {
      "text": "Goal of Gutenberg",
      "url": "https://developer.wordpress.org/block-editor/#goal-of-gutenberg"
    },
    {
      "text": "kickoff post",
      "url": "https://make.wordpress.org/core/2017/01/04/focus-tech-and-design-leads/"
    },
    {
      "text": "Why",
      "url": "https://developer.wordpress.org/block-editor/#why"
    },
    {
      "text": "Vision",
      "url": "https://developer.wordpress.org/block-editor/#vision"
    },
    {
      "text": "Future Opportunities",
      "url": "https://developer.wordpress.org/block-editor/#future-opportunities"
    },
    {
      "text": "← Code Contributions",
      "url": "https://developer.wordpress.org/block-editor/contributors/code/"
    },
    {
      "text": "Blocks are the Interface →",
      "url": "https://developer.wordpress.org/block-editor/contributors/design/the-block/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Fcontributors%2Fcode%2Fhow-to-get-your-pull-request-reviewed%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/docs/contributors/code/how-to-get-your-pull-request-reviewed.md"
    },
    {
      "text": "reviews",
      "url": "https://developer.wordpress.org/block-editor/contributors/repository-management/#code-review"
    },
    {
      "text": "Create the smallest reasonable PRs",
      "url": "https://developer.wordpress.org/block-editor/#create-the-smallest-reasonable-prs"
    },
    {
      "text": "Share relevant context:",
      "url": "https://developer.wordpress.org/block-editor/#share-relevant-context"
    },
    {
      "text": "Make your PR exciting",
      "url": "https://developer.wordpress.org/block-editor/#make-your-pr-exciting"
    },
    {
      "text": "Show your work",
      "url": "https://developer.wordpress.org/block-editor/#show-your-work"
    },
    {
      "text": "open floor section",
      "url": "https://make.wordpress.org/core/tag/core-editor-agenda/"
    },
    {
      "text": "Core Editor meeting",
      "url": "https://developer.wordpress.org/block-editor/getting-started/"
    },
    {
      "text": "Review the work of others",
      "url": "https://developer.wordpress.org/block-editor/#review-the-work-of-others"
    },
    {
      "text": "Reduce risk with clarity",
      "url": "https://developer.wordpress.org/block-editor/#reduce-risk-with-clarity"
    },
    {
      "text": "Follow the attention",
      "url": "https://developer.wordpress.org/block-editor/#follow-the-attention"
    },
    {
      "text": "← Deprecations",
      "url": "https://developer.wordpress.org/block-editor/contributors/code/deprecations/"
    },
    {
      "text": "Design Contributions →",
      "url": "https://developer.wordpress.org/block-editor/contributors/design/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Fcontributors%2Fcode%2Fdeprecations%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/docs/contributors/code/deprecations.md"
    },
    {
      "text": "versioning policies of the WordPress project",
      "url": "https://make.wordpress.org/core/handbook/about/release-cycle/version-numbering/"
    },
    {
      "text": "Unreleased",
      "url": "https://developer.wordpress.org/block-editor/#unreleased"
    },
    {
      "text": "11.0.0",
      "url": "https://developer.wordpress.org/block-editor/#11-0-0"
    },
    {
      "text": "10.3.0",
      "url": "https://developer.wordpress.org/block-editor/#10-3-0"
    },
    {
      "text": "9.7.0",
      "url": "https://developer.wordpress.org/block-editor/#9-7-0"
    },
    {
      "text": "8.6.0",
      "url": "https://developer.wordpress.org/block-editor/#8-6-0"
    },
    {
      "text": "Block Context",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/block-api/block-context/"
    },
    {
      "text": "8.3.0",
      "url": "https://developer.wordpress.org/block-editor/#8-3-0"
    },
    {
      "text": "new functions",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/block-api/block-patterns/#register_block_pattern"
    },
    {
      "text": "5.5.0",
      "url": "https://developer.wordpress.org/block-editor/#5-5-0"
    },
    {
      "text": "WP_Screen::is_block_editor",
      "url": "https://developer.wordpress.org/reference/classes/wp_screen/is_block_editor/"
    },
    {
      "text": "5.4.0",
      "url": "https://developer.wordpress.org/block-editor/#5-4-0"
    },
    {
      "text": "5.3.0",
      "url": "https://developer.wordpress.org/block-editor/#5-3-0"
    },
    {
      "text": "use_block_editor_for_post_type",
      "url": "https://developer.wordpress.org/reference/functions/use_block_editor_for_post_type/"
    },
    {
      "text": "use_block_editor_for_post",
      "url": "https://developer.wordpress.org/reference/functions/use_block_editor_for_post/"
    },
    {
      "text": "5.2.0",
      "url": "https://developer.wordpress.org/block-editor/#5-2-0"
    },
    {
      "text": "parse_blocks",
      "url": "https://developer.wordpress.org/reference/functions/parse_blocks/"
    },
    {
      "text": "render_block",
      "url": "https://developer.wordpress.org/reference/functions/render_block/"
    },
    {
      "text": "excerpt_remove_blocks",
      "url": "https://developer.wordpress.org/reference/functions/excerpt_remove_blocks/"
    },
    {
      "text": "has_blocks",
      "url": "https://developer.wordpress.org/reference/functions/has_blocks/"
    },
    {
      "text": "rest_preload_api_request",
      "url": "https://developer.wordpress.org/reference/functions/rest_preload_api_request/"
    },
    {
      "text": "block_version",
      "url": "https://developer.wordpress.org/reference/functions/block_version/"
    },
    {
      "text": "get_block_categories",
      "url": "https://developer.wordpress.org/reference/functions/get_block_categories/"
    },
    {
      "text": "wp_register_tinymce_scripts",
      "url": "https://developer.wordpress.org/reference/functions/wp_register_tinymce_scripts/"
    },
    {
      "text": "align-wide",
      "url": "https://developer.wordpress.org/block-editor/developers/themes/theme-support/#wide-alignment"
    },
    {
      "text": "get_block_editor_server_block_settings",
      "url": "https://developer.wordpress.org/reference/functions/get_block_editor_server_block_settings/"
    },
    {
      "text": "wp_common_block_scripts_and_styles",
      "url": "https://developer.wordpress.org/reference/functions/wp_common_block_scripts_and_styles/"
    },
    {
      "text": "wp_enqueue_registered_block_scripts_and_styles",
      "url": "https://developer.wordpress.org/reference/functions/wp_enqueue_registered_block_scripts_and_styles/"
    },
    {
      "text": "the_block_editor_meta_boxes",
      "url": "https://developer.wordpress.org/reference/functions/the_block_editor_meta_boxes/"
    },
    {
      "text": "the_block_editor_meta_box_post_form_hidden_fields",
      "url": "https://developer.wordpress.org/reference/functions/the_block_editor_meta_box_post_form_hidden_fields/"
    },
    {
      "text": "register_and_do_post_meta_boxes",
      "url": "https://developer.wordpress.org/reference/functions/register_and_do_post_meta_boxes/"
    },
    {
      "text": "wp_get_script_polyfill",
      "url": "https://developer.wordpress.org/reference/functions/wp_get_script_polyfill/"
    },
    {
      "text": "4.5.0",
      "url": "https://developer.wordpress.org/block-editor/#4-5-0"
    },
    {
      "text": "4.4.0",
      "url": "https://developer.wordpress.org/block-editor/#4-4-0"
    },
    {
      "text": "4.3.0",
      "url": "https://developer.wordpress.org/block-editor/#4-3-0"
    },
    {
      "text": "4.2.0",
      "url": "https://developer.wordpress.org/block-editor/#4-2-0"
    },
    {
      "text": "4.1.0",
      "url": "https://developer.wordpress.org/block-editor/#4-1-0"
    },
    {
      "text": "4.0.0",
      "url": "https://developer.wordpress.org/block-editor/#4-0-0"
    },
    {
      "text": "3.9.0",
      "url": "https://developer.wordpress.org/block-editor/#3-9-0"
    },
    {
      "text": "3.8.0",
      "url": "https://developer.wordpress.org/block-editor/#3-8-0"
    },
    {
      "text": "3.7.0",
      "url": "https://developer.wordpress.org/block-editor/#3-7-0"
    },
    {
      "text": "3.6.0",
      "url": "https://developer.wordpress.org/block-editor/#3-6-0"
    },
    {
      "text": "3.5.0",
      "url": "https://developer.wordpress.org/block-editor/#3-5-0"
    },
    {
      "text": "3.4.0",
      "url": "https://developer.wordpress.org/block-editor/#3-4-0"
    },
    {
      "text": "3.3.0",
      "url": "https://developer.wordpress.org/block-editor/#3-3-0"
    },
    {
      "text": "3.2.0",
      "url": "https://developer.wordpress.org/block-editor/#3-2-0"
    },
    {
      "text": "3.1.0",
      "url": "https://developer.wordpress.org/block-editor/#3-1-0"
    },
    {
      "text": "3.0.0",
      "url": "https://developer.wordpress.org/block-editor/#3-0-0"
    },
    {
      "text": "documented props",
      "url": "https://github.com/WordPress/gutenberg/blob/v3.0.0/editor/components/rich-text/README.md"
    },
    {
      "text": "2.8.0",
      "url": "https://developer.wordpress.org/block-editor/#2-8-0"
    },
    {
      "text": "autocomplete",
      "url": "https://github.com/WordPress/gutenberg/blob/v2.8.0/components/autocomplete/README.md"
    },
    {
      "text": "2.7.0",
      "url": "https://developer.wordpress.org/block-editor/#2-7-0"
    },
    {
      "text": "2.6.0",
      "url": "https://developer.wordpress.org/block-editor/#2-6-0"
    },
    {
      "text": "2.5.0",
      "url": "https://developer.wordpress.org/block-editor/#2-5-0"
    },
    {
      "text": "2.4.0",
      "url": "https://developer.wordpress.org/block-editor/#2-4-0"
    },
    {
      "text": "block attributes",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/block-api/block-attributes/"
    },
    {
      "text": "← Backward Compatibility",
      "url": "https://developer.wordpress.org/block-editor/contributors/code/backward-compatibility/"
    },
    {
      "text": "How To Get Your Pull Request Reviewed? →",
      "url": "https://developer.wordpress.org/block-editor/contributors/code/how-to-get-your-pull-request-reviewed/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Fcontributors%2Fcode%2Fbackward-compatibility%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/docs/contributors/code/backward-compatibility.md"
    },
    {
      "text": "What qualifies as a production public API",
      "url": "https://developer.wordpress.org/block-editor/#what-qualifies-as-a-production-public-api"
    },
    {
      "text": "How to preserve backward compatibility for a JavaScript function",
      "url": "https://developer.wordpress.org/block-editor/#how-to-preserve-backward-compatibility-for-a-javascript-function"
    },
    {
      "text": "How to preserve backward compatibility for a React Component",
      "url": "https://developer.wordpress.org/block-editor/#how-to-preserve-backward-compatibility-for-a-react-component"
    },
    {
      "text": "How to preserve backward compatibility for a Block",
      "url": "https://developer.wordpress.org/block-editor/#how-to-preserve-backward-compatibility-for-a-block"
    },
    {
      "text": "deprecated version",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/block-api/block-deprecation/"
    },
    {
      "text": "Class names and DOM updates",
      "url": "https://developer.wordpress.org/block-editor/#class-names-and-dom-updates"
    },
    {
      "text": "Deprecations",
      "url": "https://developer.wordpress.org/block-editor/#deprecations"
    },
    {
      "text": "deprecated",
      "url": "https://developer.wordpress.org/block-editor/reference-guide/packages/packages-deprecated/"
    },
    {
      "text": "Dev Notes",
      "url": "https://developer.wordpress.org/block-editor/#dev-notes"
    },
    {
      "text": "posts published on the make/core site",
      "url": "https://make.wordpress.org/core/tag/dev-notes/"
    },
    {
      "text": "Dev Note Workflow",
      "url": "https://developer.wordpress.org/block-editor/#dev-note-workflow"
    },
    {
      "text": "← React Native mobile editor",
      "url": "https://developer.wordpress.org/block-editor/contributors/code/react-native/"
    },
    {
      "text": "Deprecations →",
      "url": "https://developer.wordpress.org/block-editor/contributors/code/deprecations/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Fcontributors%2Fcode%2Freact-native%2Finternationalization-guide%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/docs/contributors/code/react-native/internationalization-guide.md"
    },
    {
      "text": "this guide",
      "url": "https://github.com/WordPress/gutenberg/blob/trunk/docs/how-to-guides/internationalization.md"
    },
    {
      "text": "Extract strings only used in the native platform",
      "url": "https://developer.wordpress.org/block-editor/#extract-strings-only-used-in-the-native-platform"
    },
    {
      "text": "extract-used-strings",
      "url": "https://github.com/WordPress/gutenberg/blob/trunk/packages/react-native-editor/bin/extract-used-strings.js"
    },
    {
      "text": "NPM command",
      "url": "https://developer.wordpress.org/block-editor/#npm-command"
    },
    {
      "text": "Providing own translations (for strings only used in native platform)",
      "url": "https://developer.wordpress.org/block-editor/#providing-own-translations-for-strings-only-used-in-native-platform"
    },
    {
      "text": "Android reference",
      "url": "https://github.com/WordPress/gutenberg/blob/72854b4d6b09bd7fb7f996a5c55dd3cc0613ddf8/packages/react-native-bridge/android/react-native-bridge/src/main/java/org/wordpress/mobile/WPAndroidGlue/GutenbergProps.kt#L34"
    },
    {
      "text": "iOS reference",
      "url": "https://github.com/WordPress/gutenberg/blob/72854b4d6b09bd7fb7f996a5c55dd3cc0613ddf8/packages/react-native-bridge/ios/GutenbergBridgeDataSource.swift#L39-L43"
    },
    {
      "text": "Fetch translations (for strings used in web and native platforms)",
      "url": "https://developer.wordpress.org/block-editor/#fetch-translations-for-strings-used-in-web-and-native-platforms"
    },
    {
      "text": "translate.wordpress.org",
      "url": "https://translate.wordpress.org/"
    },
    {
      "text": "reference",
      "url": "https://github.com/WordPress/gutenberg/blob/154918b5770ac07c851169eaa35961c636eac5ba/packages/react-native-editor/src/index.js#L43-L49"
    },
    {
      "text": "NPM command",
      "url": "https://developer.wordpress.org/block-editor/#npm-command-2"
    },
    {
      "text": "← React Native Integration Test Guide",
      "url": "https://developer.wordpress.org/block-editor/contributors/code/react-native/integration-test-guide/"
    },
    {
      "text": "Backward Compatibility →",
      "url": "https://developer.wordpress.org/block-editor/contributors/code/backward-compatibility/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Fcontributors%2Fcode%2Freact-native%2Fintegration-test-guide%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/docs/contributors/code/react-native/integration-test-guide.md"
    },
    {
      "text": "What’s an integration test?",
      "url": "https://developer.wordpress.org/block-editor/#whats-an-integration-test"
    },
    {
      "text": "react-native-testing-library",
      "url": "https://testing-library.com/docs/react-native-testing-library/intro/"
    },
    {
      "text": "Anatomy of an integration test",
      "url": "https://developer.wordpress.org/block-editor/#anatomy-of-an-integration-test"
    },
    {
      "text": "Setup",
      "url": "https://developer.wordpress.org/block-editor/#setup"
    },
    {
      "text": "Rendering",
      "url": "https://developer.wordpress.org/block-editor/#rendering"
    },
    {
      "text": "Query elements",
      "url": "https://developer.wordpress.org/block-editor/#query-elements"
    },
    {
      "text": "Fire events",
      "url": "https://developer.wordpress.org/block-editor/#fire-events"
    },
    {
      "text": "Expect correct element behaviour",
      "url": "https://developer.wordpress.org/block-editor/#expect-correct-element-behaviour"
    },
    {
      "text": "Cleanup",
      "url": "https://developer.wordpress.org/block-editor/#cleanup"
    },
    {
      "text": "Helpers",
      "url": "https://developer.wordpress.org/block-editor/#helpers"
    },
    {
      "text": "Common flows",
      "url": "https://developer.wordpress.org/block-editor/#common-flows"
    },
    {
      "text": "Tools",
      "url": "https://developer.wordpress.org/block-editor/#tools"
    },
    {
      "text": "Common pitfalls and caveats",
      "url": "https://developer.wordpress.org/block-editor/#common-pitfalls-and-caveats"
    },
    {
      "text": "Using the Scoped Component approach",
      "url": "https://developer.wordpress.org/block-editor/#using-the-scoped-component-approach"
    },
    {
      "text": "this code",
      "url": "https://github.com/WordPress/gutenberg/blob/86cd187873984f80ddeeec3e82454b486dd1860f/packages/block-library/src/cover/test/edit.native.js#L82-L91"
    },
    {
      "text": "Using the Entire Editor approach",
      "url": "https://developer.wordpress.org/block-editor/#using-the-entire-editor-approach"
    },
    {
      "text": "this code",
      "url": "https://github.com/WordPress/gutenberg/blob/9201906891a68ca305daf7f8b6cd006e2b26291e/packages/block-library/src/buttons/test/edit.native.js#L32-L39"
    },
    {
      "text": "here",
      "url": "https://github.com/WordPress/gutenberg/blob/e5b387b19ffc50555f52ea5f0b415ab846896def/packages/block-editor/src/components/block-types-list/index.native.js#L80"
    },
    {
      "text": "Use of waitFor",
      "url": "https://developer.wordpress.org/block-editor/#use-of-waitfor"
    },
    {
      "text": "known issue",
      "url": "https://github.com/callstack/react-native-testing-library/issues/379"
    },
    {
      "text": "within queries",
      "url": "https://developer.wordpress.org/block-editor/#within-queries"
    },
    {
      "text": "documentation",
      "url": "https://callstack.github.io/react-native-testing-library/docs/api#fireevent"
    },
    {
      "text": "code reference",
      "url": "https://github.com/WordPress/gutenberg/blob/520cbd9d2af4bbc275d388edf92a6cadb685de56/packages/components/src/mobile/bottom-sheet/range-cell.native.js#L227"
    },
    {
      "text": "this README",
      "url": "https://github.com/WordPress/gutenberg/blob/HEAD/test/native/integration-test-helpers/README.md"
    },
    {
      "text": "Query a block",
      "url": "https://developer.wordpress.org/block-editor/#query-a-block"
    },
    {
      "text": "function getAccessibleBlockLabel",
      "url": "https://github.com/WordPress/gutenberg/blob/520cbd9d2af4bbc275d388edf92a6cadb685de56/packages/blocks/src/api/utils.js#L167-L234"
    },
    {
      "text": "Add a block",
      "url": "https://developer.wordpress.org/block-editor/#add-a-block"
    },
    {
      "text": "Open block settings",
      "url": "https://developer.wordpress.org/block-editor/#open-block-settings"
    },
    {
      "text": "Using the Scoped Component approach",
      "url": "https://developer.wordpress.org/block-editor/#using-the-scoped-component-approach-2"
    },
    {
      "text": "Cover block",
      "url": "https://github.com/WordPress/gutenberg/blob/b403b977b029911f46247012fa2dcbc42a5aa3cf/packages/block-library/src/cover/test/edit.native.js#L37-L42"
    },
    {
      "text": "FlatList items",
      "url": "https://developer.wordpress.org/block-editor/#flatlist-items"
    },
    {
      "text": "Sliders",
      "url": "https://developer.wordpress.org/block-editor/#sliders"
    },
    {
      "text": "Selecting an inner block",
      "url": "https://developer.wordpress.org/block-editor/#selecting-an-inner-block"
    },
    {
      "text": "Using the Accessibility Inspector",
      "url": "https://developer.wordpress.org/block-editor/#using-the-accessibility-inspector"
    },
    {
      "text": "False positives when omitting await before waitFor function",
      "url": "https://developer.wordpress.org/block-editor/#false-positives-when-omitting-await-before-waitfor-function"
    },
    {
      "text": "waitFor timeout",
      "url": "https://developer.wordpress.org/block-editor/#waitfor-timeout"
    },
    {
      "text": "Replace current UI unit tests",
      "url": "https://developer.wordpress.org/block-editor/#replace-current-ui-unit-tests"
    },
    {
      "text": "packages/block-library/src/missing/test/edit-integration.native.js",
      "url": "https://github.com/WordPress/gutenberg/blob/9201906891a68ca305daf7f8b6cd006e2b26291e/packages/block-library/src/missing/test/edit-integration.native.js"
    },
    {
      "text": "Platform selection",
      "url": "https://developer.wordpress.org/block-editor/#platform-selection"
    },
    {
      "text": "← Setup guide for React Native development (macOS)",
      "url": "https://developer.wordpress.org/block-editor/contributors/code/react-native/osx-setup-guide/"
    },
    {
      "text": "React Native Internationalization Guide →",
      "url": "https://developer.wordpress.org/block-editor/contributors/code/react-native/internationalization-guide/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Fcontributors%2Fcode%2Freact-native%2Fosx-setup-guide%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/docs/contributors/code/react-native/osx-setup-guide.md"
    },
    {
      "text": "the React Native quickstart documentation",
      "url": "https://reactnative.dev/docs/environment-setup"
    },
    {
      "text": "Clone Gutenberg",
      "url": "https://developer.wordpress.org/block-editor/#clone-gutenberg"
    },
    {
      "text": "Install node and npm",
      "url": "https://developer.wordpress.org/block-editor/#install-node-and-npm"
    },
    {
      "text": "nvm",
      "url": "https://github.com/nvm-sh/nvm"
    },
    {
      "text": "Do you have an older existing Gutenberg checkout?",
      "url": "https://developer.wordpress.org/block-editor/#do-you-have-an-older-existing-gutenberg-checkout"
    },
    {
      "text": "iOS",
      "url": "https://developer.wordpress.org/block-editor/#ios"
    },
    {
      "text": "CocoaPods",
      "url": "https://developer.wordpress.org/block-editor/#cocoapods"
    },
    {
      "text": "CocoaPods",
      "url": "https://guides.cocoapods.org/using/getting-started.html"
    },
    {
      "text": "System Ruby",
      "url": "https://developer.wordpress.org/block-editor/#system-ruby"
    },
    {
      "text": "Ruby Manager",
      "url": "https://developer.wordpress.org/block-editor/#ruby-manager"
    },
    {
      "text": "rbenv",
      "url": "https://github.com/rbenv/rbenv"
    },
    {
      "text": "the WordPress iOS app",
      "url": "https://github.com/wordpress-mobile/WordPress-iOS"
    },
    {
      "text": "Set up Xcode",
      "url": "https://developer.wordpress.org/block-editor/#set-up-xcode"
    },
    {
      "text": "Xcode",
      "url": "https://developer.apple.com/xcode/"
    },
    {
      "text": "react-native doctor",
      "url": "https://developer.wordpress.org/block-editor/#react-native-doctor"
    },
    {
      "text": "react-native doctor",
      "url": "https://reactnative.dev/blog/2019/11/18/react-native-doctor"
    },
    {
      "text": "Run the demo app",
      "url": "https://developer.wordpress.org/block-editor/#run-the-demo-app"
    },
    {
      "text": "Android",
      "url": "https://developer.wordpress.org/block-editor/#android"
    },
    {
      "text": "Java Development Kit (JDK)",
      "url": "https://developer.wordpress.org/block-editor/#java-development-kit-jdk"
    },
    {
      "text": "the React Native documentation",
      "url": "https://reactnative.dev/docs/environment-setup"
    },
    {
      "text": "Homebrew",
      "url": "https://brew.sh/"
    },
    {
      "text": "Set up Android Studio",
      "url": "https://developer.wordpress.org/block-editor/#set-up-android-studio"
    },
    {
      "text": "download Android Studio",
      "url": "https://developer.android.com/studio"
    },
    {
      "text": "build.gradle",
      "url": "https://github.com/WordPress/gutenberg/blob/trunk/packages/react-native-editor/android/build.gradle"
    },
    {
      "text": "Update Paths",
      "url": "https://developer.wordpress.org/block-editor/#update-paths"
    },
    {
      "text": "Create a new device image",
      "url": "https://developer.wordpress.org/block-editor/#create-a-new-device-image"
    },
    {
      "text": "Run the demo app",
      "url": "https://developer.wordpress.org/block-editor/#run-the-demo-app-2"
    },
    {
      "text": "Unit Tests",
      "url": "https://developer.wordpress.org/block-editor/#unit-tests"
    },
    {
      "text": "Integration Tests",
      "url": "https://developer.wordpress.org/block-editor/#integration-tests"
    },
    {
      "text": "Appium",
      "url": "https://appium.io/"
    },
    {
      "text": "iOS Integration Tests",
      "url": "https://developer.wordpress.org/block-editor/#ios-integration-tests"
    },
    {
      "text": "Android Integration Tests",
      "url": "https://developer.wordpress.org/block-editor/#android-integration-tests"
    },
    {
      "text": "packages/react-native-editor/device-tests/helpers/caps.js",
      "url": "https://github.com/WordPress/gutenberg/blob/trunk/packages/react-native-editor/__device-tests__/helpers/caps.js#L30"
    },
    {
      "text": "← Getting Started for the React Native based Mobile Gutenberg",
      "url": "https://developer.wordpress.org/block-editor/contributors/code/react-native/getting-started-react-native/"
    },
    {
      "text": "React Native Integration Test Guide →",
      "url": "https://developer.wordpress.org/block-editor/contributors/code/react-native/integration-test-guide/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Fcontributors%2Fcode%2Freact-native%2Fgetting-started-react-native%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/docs/contributors/code/react-native/getting-started-react-native.md"
    },
    {
      "text": "Prerequisites",
      "url": "https://developer.wordpress.org/block-editor/#prerequisites"
    },
    {
      "text": "Android Studio",
      "url": "https://developer.android.com/studio/"
    },
    {
      "text": "Clone the project",
      "url": "https://developer.wordpress.org/block-editor/#clone-the-project"
    },
    {
      "text": "Set up",
      "url": "https://developer.wordpress.org/block-editor/#set-up"
    },
    {
      "text": "Run",
      "url": "https://developer.wordpress.org/block-editor/#run"
    },
    {
      "text": "Running on Other iOS Device Simulators",
      "url": "https://developer.wordpress.org/block-editor/#running-on-other-ios-device-simulators"
    },
    {
      "text": "Troubleshooting",
      "url": "https://developer.wordpress.org/block-editor/#troubleshooting"
    },
    {
      "text": "React Native’s documentation",
      "url": "https://reactnative.dev/docs/environment-setup"
    },
    {
      "text": "Developing with Visual Studio Code",
      "url": "https://developer.wordpress.org/block-editor/#developing-with-visual-studio-code"
    },
    {
      "text": "React Native Tools",
      "url": "https://marketplace.visualstudio.com/items?itemName=vsmobile.vscode-react-native"
    },
    {
      "text": "extension documentation",
      "url": "https://marketplace.visualstudio.com/items?itemName=vsmobile.vscode-react-native"
    },
    {
      "text": "jest",
      "url": "https://github.com/facebook/jest"
    },
    {
      "text": "Writing and Running Unit Tests",
      "url": "https://developer.wordpress.org/block-editor/#writing-and-running-unit-tests"
    },
    {
      "text": "jest",
      "url": "https://facebook.github.io/jest/"
    },
    {
      "text": "here",
      "url": "https://github.com/WordPress/gutenberg/blob/HEAD/packages/react-native-editor/src/test/api-fetch-setup.test.js"
    },
    {
      "text": "jest documentation",
      "url": "https://facebook.github.io/jest/docs/en/getting-started.html"
    },
    {
      "text": "React Native testing tutorial",
      "url": "https://facebook.github.io/jest/docs/en/tutorial-react-native.html"
    },
    {
      "text": "UI Tests",
      "url": "https://developer.wordpress.org/block-editor/#ui-tests"
    },
    {
      "text": "Appium CLI",
      "url": "https://appium.io/docs/en/about-appium/getting-started/"
    },
    {
      "text": "appium-doctor",
      "url": "https://github.com/appium/appium-doctor"
    },
    {
      "text": "Appium Inspector",
      "url": "https://github.com/appium/appium-inspector/"
    },
    {
      "text": "UI Test documentation",
      "url": "https://developer.wordpress.org/block-editor/reference-guide/packages/packages-react-native-editor/__device-tests__/"
    },
    {
      "text": "contributing guide",
      "url": "https://developer.wordpress.org/block-editor/reference-guide/packages/packages-react-native-editor/__device-tests__/CONTRIBUTING/"
    },
    {
      "text": "Setup guide for React Native development (macOS) →",
      "url": "https://developer.wordpress.org/block-editor/contributors/code/react-native/osx-setup-guide/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Fcontributors%2Fcode%2Freact-native%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/docs/contributors/code/react-native/README.md"
    },
    {
      "text": "React Native",
      "url": "https://facebook.github.io/react-native/"
    },
    {
      "text": "Mind the mobile",
      "url": "https://developer.wordpress.org/block-editor/#mind-the-mobile"
    },
    {
      "text": "Native mobile specific files",
      "url": "https://developer.wordpress.org/block-editor/#native-mobile-specific-files"
    },
    {
      "text": "Running Gutenberg Mobile on Android and iOS",
      "url": "https://developer.wordpress.org/block-editor/#running-gutenberg-mobile-on-android-and-ios"
    },
    {
      "text": "official WordPress apps",
      "url": "https://wordpress.org/mobile/"
    },
    {
      "text": "here’s the native mobile repo",
      "url": "https://github.com/wordpress-mobile/gutenberg-mobile"
    },
    {
      "text": "Native mobile E2E tests in Continuous Integration",
      "url": "https://developer.wordpress.org/block-editor/#native-mobile-e2e-tests-in-continuous-integration"
    },
    {
      "text": "guide for how to re-run",
      "url": "https://docs.github.com/en/actions/configuring-and-managing-workflows/managing-a-workflow-run#viewing-your-workflow-history"
    },
    {
      "text": "mobile getting started guide",
      "url": "https://developer.wordpress.org/block-editor/contributors/code/react-native/getting-started-react-native/#ui-tests"
    },
    {
      "text": "relevant directory README.md",
      "url": "https://github.com/WordPress/gutenberg/tree/HEAD/packages/react-native-editor/__device-tests__#running-the-tests-locally"
    },
    {
      "text": "free to join",
      "url": "https://make.wordpress.org/chat/"
    },
    {
      "text": "Debugging the native mobile unit tests",
      "url": "https://developer.wordpress.org/block-editor/#debugging-the-native-mobile-unit-tests"
    },
    {
      "text": "Native mobile testing",
      "url": "https://developer.wordpress.org/block-editor/contributors/code/react-native/integration-test-guide/"
    },
    {
      "text": "Internationalization (i18n)",
      "url": "https://developer.wordpress.org/block-editor/#internationalization-i18n"
    },
    {
      "text": "← Gutenberg Release Process",
      "url": "https://developer.wordpress.org/block-editor/contributors/code/release/"
    },
    {
      "text": "Getting Started for the React Native based Mobile Gutenberg →",
      "url": "https://developer.wordpress.org/block-editor/contributors/code/react-native/getting-started-react-native/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Fcontributors%2Fcode%2Frelease%2Fauto-cherry-picking%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/docs/contributors/code/auto-cherry-picking.md"
    },
    {
      "text": "gh console utility",
      "url": "https://cli.github.com/"
    },
    {
      "text": "Can I use a different label than Backport to WP Beta/RC?",
      "url": "https://developer.wordpress.org/block-editor/#can-i-use-a-different-label-than-backport-to-wp-beta-rc"
    },
    {
      "text": "How can I use it for a Gutenberg plugin release?",
      "url": "https://developer.wordpress.org/block-editor/#how-can-i-use-it-for-a-gutenberg-plugin-release"
    },
    {
      "text": "Future improvements",
      "url": "https://developer.wordpress.org/block-editor/#future-improvements"
    },
    {
      "text": "React Native mobile editor →",
      "url": "https://developer.wordpress.org/block-editor/contributors/code/react-native/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Fcontributors%2Fcode%2Frelease%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/docs/contributors/code/release.md"
    },
    {
      "text": "Gutenberg development team",
      "url": "https://developer.wordpress.org/block-editor/block-editor/contributors/repository-management/#teams"
    },
    {
      "text": "#core-editor Slack channel",
      "url": "https://wordpress.slack.com/messages/C02QB2JS7"
    },
    {
      "text": "release WordPress’s npm packages",
      "url": "https://developer.wordpress.org/block-editor/#packages-releases-to-npm-and-wordpress-core-updates"
    },
    {
      "text": "Plugin Releases",
      "url": "https://developer.wordpress.org/block-editor/#plugin-releases"
    },
    {
      "text": "Schedule",
      "url": "https://developer.wordpress.org/block-editor/#schedule"
    },
    {
      "text": "tracked in GitHub milestones",
      "url": "https://github.com/WordPress/gutenberg/milestones"
    },
    {
      "text": "Preparation of the release post starts here",
      "url": "https://developer.wordpress.org/block-editor/block-editor/contributors/code/release/#writing-the-release-notes-and-post"
    },
    {
      "text": "performance audit",
      "url": "https://developer.wordpress.org/block-editor/block-editor/contributors/testing-overview/#performance-testing"
    },
    {
      "text": "Release Tool",
      "url": "https://developer.wordpress.org/block-editor/#release-tool"
    },
    {
      "text": "11-minute video walkthrough",
      "url": "https://youtu.be/TnSgJd3zpJY"
    },
    {
      "text": "Running workflow",
      "url": "https://developer.wordpress.org/block-editor/#running-workflow"
    },
    {
      "text": "“Build Gutenberg Plugin Zip” action",
      "url": "https://github.com/WordPress/gutenberg/actions/workflows/build-plugin-zip.yml"
    },
    {
      "text": "Publishing the @wordpress packages to NPM",
      "url": "https://developer.wordpress.org/block-editor/#publishing-the-wordpress-packages-to-npm"
    },
    {
      "text": "“Publish npm packages”",
      "url": "https://github.com/WordPress/gutenberg/actions/workflows/publish-npm-packages.yml"
    },
    {
      "text": "View the release draft",
      "url": "https://developer.wordpress.org/block-editor/#view-the-release-draft"
    },
    {
      "text": "Gutenberg Releases",
      "url": "https://github.com/WordPress/gutenberg/releases"
    },
    {
      "text": "Creating Release Candidate Patches",
      "url": "https://developer.wordpress.org/block-editor/#creating-release-candidate-patches"
    },
    {
      "text": "Do a search for any of these PRs",
      "url": "https://github.com/WordPress/gutenberg/pulls?q=is%3Apr+label%3A%22Backport+to+Gutenberg+RC%22+is%3Aclosed"
    },
    {
      "text": "npm run cherry-pick script",
      "url": "https://developer.wordpress.org/block-editor/contributors/code/auto-cherry-picking/"
    },
    {
      "text": "#core-editor",
      "url": "https://wordpress.slack.com/messages/C02QB2JS7"
    },
    {
      "text": "Publishing the release",
      "url": "https://developer.wordpress.org/block-editor/#publishing-the-release"
    },
    {
      "text": "another GHA workflow",
      "url": "https://github.com/WordPress/gutenberg/actions/workflows/upload-release-to-plugin-repo.yml"
    },
    {
      "text": "“Upload Gutenberg plugin to WordPress.org plugin repo” workflow",
      "url": "https://github.com/WordPress/gutenberg/actions/workflows/upload-release-to-plugin-repo.yml"
    },
    {
      "text": "approved",
      "url": "https://docs.github.com/en/actions/managing-workflow-runs/reviewing-deployments#approving-or-rejecting-a-job"
    },
    {
      "text": "make.wordpress.org/core",
      "url": "https://make.wordpress.org/core/"
    },
    {
      "text": "Documenting the release with the Release Notes and Post",
      "url": "https://developer.wordpress.org/block-editor/#documenting-the-release-with-the-release-notes-and-post"
    },
    {
      "text": "1. Curating the changelog",
      "url": "https://developer.wordpress.org/block-editor/#1-curating-the-changelog"
    },
    {
      "text": "2. Selecting the release highlights",
      "url": "https://developer.wordpress.org/block-editor/#2-selecting-the-release-highlights"
    },
    {
      "text": "3. Drafting the release post",
      "url": "https://developer.wordpress.org/block-editor/#3-drafting-the-release-post"
    },
    {
      "text": "4. Running the performance tests",
      "url": "https://developer.wordpress.org/block-editor/#4-running-the-performance-tests"
    },
    {
      "text": "Performance Tests workflows",
      "url": "https://github.com/WordPress/gutenberg/actions/workflows/performance.yml"
    },
    {
      "text": "5. Publishing the post",
      "url": "https://developer.wordpress.org/block-editor/#5-publishing-the-post"
    },
    {
      "text": "make/core posting guidelines",
      "url": "https://make.wordpress.org/core/handbook/best-practices/post-comment-guidelines/#peer-review"
    },
    {
      "text": "Creating Minor Releases",
      "url": "https://developer.wordpress.org/block-editor/#creating-minor-releases"
    },
    {
      "text": "tags",
      "url": "https://github.com/WordPress/gutenberg/releases/tag/v12.5.1"
    },
    {
      "text": "Updating the release branch",
      "url": "https://developer.wordpress.org/block-editor/#updating-the-release-branch"
    },
    {
      "text": "npm run cherry-pick",
      "url": "https://developer.wordpress.org/block-editor/contributors/code/auto-cherry-picking/"
    },
    {
      "text": "Running the minor release",
      "url": "https://developer.wordpress.org/block-editor/#running-the-minor-release"
    },
    {
      "text": "this Issue",
      "url": "https://github.com/WordPress/gutenberg/issues/33277#issuecomment-876289457"
    },
    {
      "text": "Packages Releases to npm and WordPress Core Updates",
      "url": "https://developer.wordpress.org/block-editor/#packages-releases-to-npm-and-wordpress-core-updates"
    },
    {
      "text": "WordPress SVN repository’s",
      "url": "https://make.wordpress.org/core/handbook/about/release-cycle/"
    },
    {
      "text": "bugfix release",
      "url": "https://developer.wordpress.org/block-editor/#standalone-bugfix-package-releases"
    },
    {
      "text": "Synchronizing Gutenberg Plugin",
      "url": "https://developer.wordpress.org/block-editor/#synchronizing-gutenberg-plugin"
    },
    {
      "text": "WordPress Releases",
      "url": "https://developer.wordpress.org/block-editor/#wordpress-releases"
    },
    {
      "text": "Development Releases",
      "url": "https://developer.wordpress.org/block-editor/#development-releases"
    },
    {
      "text": "Standalone Bugfix Package Releases",
      "url": "https://developer.wordpress.org/block-editor/#standalone-bugfix-package-releases"
    },
    {
      "text": "“Build Gutenberg Plugin Zip” workflow",
      "url": "https://github.com/WordPress/gutenberg/actions/workflows/build-plugin-zip.yml"
    },
    {
      "text": "lerna publish from-package",
      "url": "https://github.com/lerna/lerna/tree/HEAD/commands/publish#bump-from-package"
    },
    {
      "text": "“Publish npm packages” action",
      "url": "https://github.com/WordPress/gutenberg/actions/workflows/publish-npm-packages.yml"
    },
    {
      "text": "package release process",
      "url": "https://github.com/WordPress/gutenberg/blob/HEAD/packages/README.md#releasing-packages"
    },
    {
      "text": "branch to pass",
      "url": "https://github.com/WordPress/gutenberg/actions?query=branch%3Awp%2Ftrunk"
    },
    {
      "text": "@wordpress/scripts",
      "url": "https://github.com/WordPress/gutenberg/commits/HEAD/packages/scripts"
    },
    {
      "text": "lerna publish from-package",
      "url": "https://github.com/lerna/lerna/tree/main/libs/commands/publish#bump-from-package"
    },
    {
      "text": "package distribution tags",
      "url": "https://docs.npmjs.com/cli/v7/commands/npm-dist-tag"
    },
    {
      "text": "← Managing Packages",
      "url": "https://developer.wordpress.org/block-editor/contributors/code/managing-packages/"
    },
    {
      "text": "Cherry-picking automation →",
      "url": "https://developer.wordpress.org/block-editor/contributors/code/release/auto-cherry-picking/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Fcontributors%2Fcode%2Fmanaging-packages%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/docs/contributors/code/managing-packages.md"
    },
    {
      "text": "monorepo",
      "url": "https://monorepo.tools"
    },
    {
      "text": "lerna",
      "url": "https://lerna.js.org/"
    },
    {
      "text": "packages",
      "url": "https://github.com/WordPress/gutenberg/blob/HEAD/packages/README.md"
    },
    {
      "text": "Maintaining Changelogs",
      "url": "https://github.com/WordPress/gutenberg/blob/HEAD/packages/README.md#maintaining-changelogs"
    },
    {
      "text": "Gutenberg Release Process document",
      "url": "https://developer.wordpress.org/block-editor/contributors/code/release/#packages-releases-to-npm-and-wordpress-core-updates"
    },
    {
      "text": "← Scripts",
      "url": "https://developer.wordpress.org/block-editor/contributors/code/scripts/"
    },
    {
      "text": "Gutenberg Release Process →",
      "url": "https://developer.wordpress.org/block-editor/contributors/code/release/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Fcontributors%2Fcode%2Fscripts%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/docs/contributors/code/scripts.md"
    },
    {
      "text": "WP Scripts",
      "url": "https://developer.wordpress.org/block-editor/#wp-scripts"
    },
    {
      "text": "Blob",
      "url": "https://developer.wordpress.org/block-editor/reference-guide/packages/packages-blob/"
    },
    {
      "text": "Block Library",
      "url": "https://developer.wordpress.org/block-editor/reference-guide/packages/packages-block-library/"
    },
    {
      "text": "Blocks",
      "url": "https://developer.wordpress.org/block-editor/reference-guide/packages/packages-blocks/"
    },
    {
      "text": "Block Serialization Default Parser",
      "url": "https://developer.wordpress.org/block-editor/reference-guide/packages/packages-block-serialization-default-parser/"
    },
    {
      "text": "Block Serialization Spec Parser",
      "url": "https://developer.wordpress.org/block-editor/reference-guide/packages/packages-block-serialization-spec-parser/"
    },
    {
      "text": "Components",
      "url": "https://developer.wordpress.org/block-editor/reference-guide/components/"
    },
    {
      "text": "Compose",
      "url": "https://developer.wordpress.org/block-editor/reference-guide/packages/packages-compose/"
    },
    {
      "text": "Core Data",
      "url": "https://developer.wordpress.org/block-editor/reference-guide/packages/packages-core-data/"
    },
    {
      "text": "Data",
      "url": "https://developer.wordpress.org/block-editor/reference-guide/packages/packages-data/"
    },
    {
      "text": "Date",
      "url": "https://developer.wordpress.org/block-editor/reference-guide/packages/packages-date/"
    },
    {
      "text": "Deprecated",
      "url": "https://developer.wordpress.org/block-editor/reference-guide/packages/packages-deprecated/"
    },
    {
      "text": "Dom",
      "url": "https://developer.wordpress.org/block-editor/reference-guide/packages/packages-dom/"
    },
    {
      "text": "Dom Ready",
      "url": "https://developer.wordpress.org/block-editor/reference-guide/packages/packages-dom-ready/"
    },
    {
      "text": "Editor",
      "url": "https://developer.wordpress.org/block-editor/reference-guide/packages/packages-editor/"
    },
    {
      "text": "Edit Post",
      "url": "https://developer.wordpress.org/block-editor/reference-guide/packages/packages-edit-post/"
    },
    {
      "text": "Element",
      "url": "https://developer.wordpress.org/block-editor/reference-guide/packages/packages-element/"
    },
    {
      "text": "React",
      "url": "https://reactjs.org/"
    },
    {
      "text": "Escape Html",
      "url": "https://developer.wordpress.org/block-editor/reference-guide/packages/packages-escape-html/"
    },
    {
      "text": "Hooks",
      "url": "https://developer.wordpress.org/block-editor/reference-guide/packages/packages-hooks/"
    },
    {
      "text": "Html Entities",
      "url": "https://developer.wordpress.org/block-editor/reference-guide/packages/packages-html-entities/"
    },
    {
      "text": "I18N",
      "url": "https://developer.wordpress.org/block-editor/reference-guide/packages/packages-i18n/"
    },
    {
      "text": "Is Shallow Equal",
      "url": "https://developer.wordpress.org/block-editor/reference-guide/packages/packages-is-shallow-equal/"
    },
    {
      "text": "Keycodes",
      "url": "https://developer.wordpress.org/block-editor/reference-guide/packages/packages-keycodes/"
    },
    {
      "text": "List Reusable blocks",
      "url": "https://developer.wordpress.org/block-editor/reference-guide/packages/packages-list-reusable-blocks/"
    },
    {
      "text": "Plugins",
      "url": "https://developer.wordpress.org/block-editor/reference-guide/packages/packages-plugins/"
    },
    {
      "text": "Redux Routine",
      "url": "https://developer.wordpress.org/block-editor/reference-guide/packages/packages-redux-routine/"
    },
    {
      "text": "Rich Text",
      "url": "https://developer.wordpress.org/block-editor/reference-guide/packages/packages-rich-text/"
    },
    {
      "text": "Shortcode",
      "url": "https://developer.wordpress.org/block-editor/reference-guide/packages/packages-shortcode/"
    },
    {
      "text": "Token List",
      "url": "https://developer.wordpress.org/block-editor/reference-guide/packages/packages-token-list/"
    },
    {
      "text": "DOMTokenList",
      "url": "https://developer.mozilla.org/en-US/docs/Web/API/DOMTokenList"
    },
    {
      "text": "URL",
      "url": "https://developer.wordpress.org/block-editor/reference-guide/packages/packages-url/"
    },
    {
      "text": "Viewport",
      "url": "https://developer.wordpress.org/block-editor/reference-guide/packages/packages-viewport/"
    },
    {
      "text": "Wordcount",
      "url": "https://developer.wordpress.org/block-editor/reference-guide/packages/packages-wordcount/"
    },
    {
      "text": "Vendor Scripts",
      "url": "https://developer.wordpress.org/block-editor/#vendor-scripts"
    },
    {
      "text": "React",
      "url": "https://reactjs.org"
    },
    {
      "text": "React Dom",
      "url": "https://reactjs.org/docs/react-dom.html"
    },
    {
      "text": "Moment",
      "url": "https://momentjs.com/"
    },
    {
      "text": "Lodash",
      "url": "https://lodash.com"
    },
    {
      "text": "Polyfill Scripts",
      "url": "https://developer.wordpress.org/block-editor/#polyfill-scripts"
    },
    {
      "text": "Babel Polyfill",
      "url": "https://babeljs.io/docs/en/babel-polyfill"
    },
    {
      "text": "Fetch Polyfill",
      "url": "https://www.npmjs.com/package/whatwg-fetch"
    },
    {
      "text": "Promise Polyfill",
      "url": "https://www.npmjs.com/package/promise-polyfill"
    },
    {
      "text": "Formdata Polyfill",
      "url": "https://www.npmjs.com/package/formdata-polyfill"
    },
    {
      "text": "Node Contains Polyfill",
      "url": "https://polyfill.io"
    },
    {
      "text": "Element Closest Polyfill",
      "url": "https://www.npmjs.com/package/element-closest"
    },
    {
      "text": "Bundling and code sharing",
      "url": "https://developer.wordpress.org/block-editor/#bundling-and-code-sharing"
    },
    {
      "text": "webpack",
      "url": "https://webpack.js.org/"
    },
    {
      "text": "see\nwp_enqueue_script",
      "url": "https://developer.wordpress.org/reference/functions/wp_enqueue_script/#default-scripts-included-and-registered-by-wordpress"
    },
    {
      "text": "@wordpress/dependency-extraction-webpack-plugin",
      "url": "https://github.com/WordPress/gutenberg/tree/HEAD/packages/dependency-extraction-webpack-plugin"
    },
    {
      "text": "build",
      "url": "https://github.com/WordPress/gutenberg/tree/HEAD/packages/scripts#build"
    },
    {
      "text": "← Block Grammar",
      "url": "https://developer.wordpress.org/block-editor/contributors/code/grammar/"
    },
    {
      "text": "Managing Packages →",
      "url": "https://developer.wordpress.org/block-editor/contributors/code/managing-packages/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Fcontributors%2Fcode%2Fgrammar%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/docs/contributors/code/grammar.md"
    },
    {
      "text": "← Testing Overview",
      "url": "https://developer.wordpress.org/block-editor/contributors/code/testing-overview/"
    },
    {
      "text": "Scripts →",
      "url": "https://developer.wordpress.org/block-editor/contributors/code/scripts/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fpackages%2Fpackages-deprecated%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/packages/deprecated/README.md"
    },
    {
      "text": "Hook",
      "url": "https://developer.wordpress.org/block-editor/#hook"
    },
    {
      "text": "default",
      "url": "https://developer.wordpress.org/block-editor/#default"
    },
    {
      "text": "logged",
      "url": "https://developer.wordpress.org/block-editor/#logged"
    },
    {
      "text": "← @wordpress/dependency-extraction-webpack-plugin",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-dependency-extraction-webpack-plugin/"
    },
    {
      "text": "@wordpress/docgen →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-docgen/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fpackages%2Fpackages-block-serialization-default-parser%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/packages/block-serialization-default-parser/README.md"
    },
    {
      "text": "specification",
      "url": "https://github.com/WordPress/gutenberg/tree/HEAD/docs/contributors/code/grammar.md"
    },
    {
      "text": "@wordpress/block-serialization-spec-parser",
      "url": "https://github.com/WordPress/gutenberg/tree/HEAD/packages/block-serialization-spec-parser/README.md"
    },
    {
      "text": "Theory",
      "url": "https://developer.wordpress.org/block-editor/#theory"
    },
    {
      "text": "What is different about this one from the spec-parser?",
      "url": "https://developer.wordpress.org/block-editor/#what-is-different-about-this-one-from-the-spec-parser"
    },
    {
      "text": "How does it work?",
      "url": "https://developer.wordpress.org/block-editor/#how-does-it-work"
    },
    {
      "text": "I meant, how does it perform?",
      "url": "https://developer.wordpress.org/block-editor/#i-meant-how-does-it-perform"
    },
    {
      "text": "← @wordpress/block-library",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-block-library/"
    },
    {
      "text": "@wordpress/block-serialization-spec-parser →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-block-serialization-spec-parser/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Fcontributors%2Fcode%2Ftesting-overview%2Fe2e%2Foverusing-snapshots%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/docs/contributors/code/e2e/overusing-snapshots.md"
    },
    {
      "text": "Problems with snapshot testing",
      "url": "https://developer.wordpress.org/block-editor/#problems-with-snapshot-testing"
    },
    {
      "text": "snapshot testing",
      "url": "https://jestjs.io/docs/snapshot-testing"
    },
    {
      "text": "articles",
      "url": "https://kentcdodds.com/blog/effective-snapshot-testing"
    },
    {
      "text": "commit the wrong snapshots",
      "url": "https://github.com/WordPress/gutenberg/pull/42780#discussion_r949865612"
    },
    {
      "text": "inline snapshots",
      "url": "https://jestjs.io/docs/snapshot-testing#inline-snapshots"
    },
    {
      "text": "The solution",
      "url": "https://developer.wordpress.org/block-editor/#the-solution"
    },
    {
      "text": "Snapshot variants",
      "url": "https://developer.wordpress.org/block-editor/#snapshot-variants"
    },
    {
      "text": "What about test coverage?",
      "url": "https://developer.wordpress.org/block-editor/#what-about-test-coverage"
    },
    {
      "text": "full content",
      "url": "https://github.com/WordPress/gutenberg/blob/trunk/test/integration/fixtures/blocks/README.md"
    },
    {
      "text": "Best practices",
      "url": "https://developer.wordpress.org/block-editor/#best-practices"
    },
    {
      "text": "Avoid huge snapshots",
      "url": "https://developer.wordpress.org/block-editor/#avoid-huge-snapshots"
    },
    {
      "text": "Avoid repetitive snapshots",
      "url": "https://developer.wordpress.org/block-editor/#avoid-repetitive-snapshots"
    },
    {
      "text": "Further readings",
      "url": "https://developer.wordpress.org/block-editor/#further-readings"
    },
    {
      "text": "Effective Snapshot Testing – Kent C. Dodds",
      "url": "https://kentcdodds.com/blog/effective-snapshot-testing"
    },
    {
      "text": "Common Testing Mistakes – Kent C. Dodds",
      "url": "https://kentcdodds.com/blog/common-testing-mistakes"
    },
    {
      "text": "← Migration guide",
      "url": "https://developer.wordpress.org/block-editor/contributors/code/testing-overview/e2e/migration/"
    },
    {
      "text": "Block Grammar →",
      "url": "https://developer.wordpress.org/block-editor/contributors/code/grammar/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Fcontributors%2Fcode%2Ftesting-overview%2Fe2e%2Fmigration%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/docs/contributors/code/e2e/migration.md"
    },
    {
      "text": "best practices",
      "url": "https://github.com/WordPress/gutenberg/tree/HEAD/docs/contributors/code/e2e/README.md#best-practices"
    },
    {
      "text": "Migration steps for tests",
      "url": "https://developer.wordpress.org/block-editor/#migration-steps-for-tests"
    },
    {
      "text": "fixtures API",
      "url": "https://playwright.dev/docs/test-fixtures"
    },
    {
      "text": "guide",
      "url": "https://developer.wordpress.org/block-editor/#migration-steps-for-test-utils"
    },
    {
      "text": "Migration steps for test utils",
      "url": "https://developer.wordpress.org/block-editor/#migration-steps-for-test-utils"
    },
    {
      "text": "← End-to-End Testing",
      "url": "https://developer.wordpress.org/block-editor/contributors/code/testing-overview/e2e/"
    },
    {
      "text": "Overusing snapshots →",
      "url": "https://developer.wordpress.org/block-editor/contributors/code/testing-overview/e2e/overusing-snapshots/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Fcontributors%2Fcode%2Ftesting-overview%2Fe2e%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/docs/contributors/code/e2e/README.md"
    },
    {
      "text": "Running tests",
      "url": "https://developer.wordpress.org/block-editor/#running-tests"
    },
    {
      "text": "xvfb-run",
      "url": "https://manpages.ubuntu.com/manpages/xenial/man1/xvfb-run.1.html"
    },
    {
      "text": "best practices",
      "url": "https://playwright.dev/docs/best-practices"
    },
    {
      "text": "Forbid $, use locator instead",
      "url": "https://developer.wordpress.org/block-editor/#forbid-use-locator-instead"
    },
    {
      "text": "discouraged",
      "url": "https://playwright.dev/docs/api/class-page#page-query-selector"
    },
    {
      "text": "Locator",
      "url": "https://playwright.dev/docs/api/class-locator"
    },
    {
      "text": "assertions",
      "url": "https://playwright.dev/docs/api/class-locatorassertions"
    },
    {
      "text": "Use accessible selectors",
      "url": "https://developer.wordpress.org/block-editor/#use-accessible-selectors"
    },
    {
      "text": "getByRole",
      "url": "https://playwright.dev/docs/locators#locate-by-role"
    },
    {
      "text": "official documentation",
      "url": "https://playwright.dev/docs/locators"
    },
    {
      "text": "Selectors are strict by default",
      "url": "https://developer.wordpress.org/block-editor/#selectors-are-strict-by-default"
    },
    {
      "text": "strict",
      "url": "https://playwright.dev/docs/api/class-browser#browser-new-page-option-strict-selectors"
    },
    {
      "text": "Don’t overload test-utils, inline simple utils",
      "url": "https://developer.wordpress.org/block-editor/#dont-overload-test-utils-inline-simple-utils"
    },
    {
      "text": "Favor Page Object Model over utils",
      "url": "https://developer.wordpress.org/block-editor/#favor-page-object-model-over-utils"
    },
    {
      "text": "Page Object Model",
      "url": "https://playwright.dev/docs/test-pom"
    },
    {
      "text": "Restify actions to clear or set states",
      "url": "https://developer.wordpress.org/block-editor/#restify-actions-to-clear-or-set-states"
    },
    {
      "text": "REST API",
      "url": "https://developer.wordpress.org/rest-api/reference/"
    },
    {
      "text": "Avoid global variables",
      "url": "https://developer.wordpress.org/block-editor/#avoid-global-variables"
    },
    {
      "text": "fixtures",
      "url": "https://playwright.dev/docs/test-fixtures"
    },
    {
      "text": "Make explicit assertions",
      "url": "https://developer.wordpress.org/block-editor/#make-explicit-assertions"
    },
    {
      "text": "Common pitfalls",
      "url": "https://developer.wordpress.org/block-editor/#common-pitfalls"
    },
    {
      "text": "Overusing snapshots",
      "url": "https://developer.wordpress.org/block-editor/#overusing-snapshots"
    },
    {
      "text": "Cross-browser testing",
      "url": "https://developer.wordpress.org/block-editor/#cross-browser-testing"
    },
    {
      "text": "Migration guide →",
      "url": "https://developer.wordpress.org/block-editor/contributors/code/testing-overview/e2e/migration/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Fcontributors%2Fcode%2Ftesting-overview%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/docs/contributors/code/testing-overview.md"
    },
    {
      "text": "Why test?",
      "url": "https://developer.wordpress.org/block-editor/#why-test"
    },
    {
      "text": "JavaScript Testing",
      "url": "https://developer.wordpress.org/block-editor/#javascript-testing"
    },
    {
      "text": "Jest",
      "url": "https://jestjs.io/"
    },
    {
      "text": "globals",
      "url": "https://jestjs.io/docs/en/api.html"
    },
    {
      "text": "assertions",
      "url": "https://jestjs.io/docs/en/expect.html"
    },
    {
      "text": "mocks",
      "url": "https://jestjs.io/docs/en/mock-functions.html"
    },
    {
      "text": "spies",
      "url": "https://jestjs.io/docs/en/jest-object.html#jestspyonobject-methodname"
    },
    {
      "text": "mock functions",
      "url": "https://jestjs.io/docs/en/mock-function-api.html"
    },
    {
      "text": "React Testing Library",
      "url": "https://testing-library.com/docs/react-testing-library/intro"
    },
    {
      "text": "Enzyme",
      "url": "https://github.com/airbnb/enzyme"
    },
    {
      "text": "instructions",
      "url": "https://developer.wordpress.org/block-editor/contributors/code/getting-started-with-code-contribution/"
    },
    {
      "text": "ESLint",
      "url": "http://eslint.org/"
    },
    {
      "text": "TypeScript’s JavaScript type-checking",
      "url": "https://www.typescriptlang.org/docs/handbook/type-checking-javascript-files.html"
    },
    {
      "text": "getting started documentation",
      "url": "https://developer.wordpress.org/block-editor/contributors/code/getting-started-with-code-contribution/"
    },
    {
      "text": "Folder structure",
      "url": "https://developer.wordpress.org/block-editor/#folder-structure"
    },
    {
      "text": "Importing tests",
      "url": "https://developer.wordpress.org/block-editor/#importing-tests"
    },
    {
      "text": "Describing tests",
      "url": "https://developer.wordpress.org/block-editor/#describing-tests"
    },
    {
      "text": "Setup and Teardown methods",
      "url": "https://developer.wordpress.org/block-editor/#setup-and-teardown-methods"
    },
    {
      "text": "setup and teardown methods",
      "url": "https://jestjs.io/docs/en/setup-teardown.html"
    },
    {
      "text": "individual test cases",
      "url": "https://jestjs.io/docs/en/asynchronous.html#promises"
    },
    {
      "text": "Mocking dependencies",
      "url": "https://developer.wordpress.org/block-editor/#mocking-dependencies"
    },
    {
      "text": "Dependency injection",
      "url": "https://developer.wordpress.org/block-editor/#dependency-injection"
    },
    {
      "text": "Imported dependencies",
      "url": "https://developer.wordpress.org/block-editor/#imported-dependencies"
    },
    {
      "text": "Testing globals",
      "url": "https://developer.wordpress.org/block-editor/#testing-globals"
    },
    {
      "text": "Jest spies",
      "url": "https://jestjs.io/docs/en/jest-object.html#jestspyonobject-methodname"
    },
    {
      "text": "User interactions",
      "url": "https://developer.wordpress.org/block-editor/#user-interactions"
    },
    {
      "text": "fireEvent",
      "url": "https://testing-library.com/docs/dom-testing-library/api-events/#fireevent"
    },
    {
      "text": "user-event",
      "url": "https://testing-library.com/docs/user-event/intro/"
    },
    {
      "text": "Integration testing for block UI",
      "url": "https://developer.wordpress.org/block-editor/#integration-testing-for-block-ui"
    },
    {
      "text": "special instance of the block editor",
      "url": "https://github.com/WordPress/gutenberg/blob/trunk/test/integration/helpers/integration-test-editor.js#L60"
    },
    {
      "text": "The Cover block",
      "url": "https://github.com/WordPress/gutenberg/blob/trunk/packages/block-library/src/cover/test/edit.js"
    },
    {
      "text": "Snapshot testing",
      "url": "https://developer.wordpress.org/block-editor/#snapshot-testing"
    },
    {
      "text": "snapshot testing",
      "url": "https://jestjs.io/docs/en/snapshot-testing.html"
    },
    {
      "text": "TL;DR Broken snapshots",
      "url": "https://developer.wordpress.org/block-editor/#tldr-broken-snapshots"
    },
    {
      "text": "What are snapshots?",
      "url": "https://developer.wordpress.org/block-editor/#what-are-snapshots"
    },
    {
      "text": "Advantages",
      "url": "https://developer.wordpress.org/block-editor/#advantages"
    },
    {
      "text": "Disadvantages",
      "url": "https://developer.wordpress.org/block-editor/#disadvantages"
    },
    {
      "text": "Use cases",
      "url": "https://developer.wordpress.org/block-editor/#use-cases"
    },
    {
      "text": "Working with snapshots",
      "url": "https://developer.wordpress.org/block-editor/#working-with-snapshots"
    },
    {
      "text": "update snapshots",
      "url": "https://jestjs.io/docs/en/snapshot-testing.html#updating-snapshots"
    },
    {
      "text": "Pain points",
      "url": "https://developer.wordpress.org/block-editor/#pain-points"
    },
    {
      "text": "snapshot-diff package",
      "url": "https://github.com/jest-community/snapshot-diff"
    },
    {
      "text": "Mocking Refs for Snapshot Testing",
      "url": "https://reactjs.org/blog/2016/11/16/react-v15.4.0.html#mocking-refs-for-snapshot-testing"
    },
    {
      "text": "Debugging Jest unit tests",
      "url": "https://developer.wordpress.org/block-editor/#debugging-jest-unit-tests"
    },
    {
      "text": "node inspector client",
      "url": "https://nodejs.org/en/docs/guides/debugging-getting-started/#inspector-clients"
    },
    {
      "text": "wp-scripts documentation",
      "url": "https://developer.wordpress.org/block-editor/reference-guide/packages/packages-scripts/#debugging-jest-unit-tests"
    },
    {
      "text": "Native mobile testing",
      "url": "https://developer.wordpress.org/block-editor/#native-mobile-testing"
    },
    {
      "text": "Native mobile end-to-end tests",
      "url": "https://developer.wordpress.org/block-editor/#native-mobile-end-to-end-tests"
    },
    {
      "text": "native mobile tests in continuous integration",
      "url": "https://developer.wordpress.org/block-editor/contributors/code/react-native/integration-test-guide/"
    },
    {
      "text": "here",
      "url": "https://developer.wordpress.org/block-editor/reference-guide/packages/packages-react-native-editor/__device-tests__/"
    },
    {
      "text": "Native mobile integration tests",
      "url": "https://developer.wordpress.org/block-editor/#native-mobile-integration-tests"
    },
    {
      "text": "here",
      "url": "https://developer.wordpress.org/block-editor/contributors/code/react-native/integration-test-guide/"
    },
    {
      "text": "End-to-end Testing",
      "url": "https://developer.wordpress.org/block-editor/#end-to-end-testing"
    },
    {
      "text": "Puppeteer",
      "url": "https://github.com/puppeteer/puppeteer"
    },
    {
      "text": "project",
      "url": "https://github.com/WordPress/gutenberg/issues/38851"
    },
    {
      "text": "guide",
      "url": "https://developer.wordpress.org/block-editor/contributors/code/e2e/"
    },
    {
      "text": "Using wp-env",
      "url": "https://developer.wordpress.org/block-editor/#using-wp-env"
    },
    {
      "text": "local environment",
      "url": "https://developer.wordpress.org/block-editor/contributors/code/getting-started-with-code-contribution/#local-environment"
    },
    {
      "text": "Using alternate environment",
      "url": "https://developer.wordpress.org/block-editor/#using-alternate-environment"
    },
    {
      "text": "Scenario Testing",
      "url": "https://developer.wordpress.org/block-editor/#scenario-testing"
    },
    {
      "text": "Chrome docs: setCPUThrottlingRate",
      "url": "https://chromedevtools.github.io/devtools-protocol/tot/Emulation#method-setCPUThrottlingRate"
    },
    {
      "text": "Chrome docs: emulateNetworkConditions",
      "url": "https://chromedevtools.github.io/devtools-protocol/tot/Network#method-emulateNetworkConditions"
    },
    {
      "text": "NetworkManager.js",
      "url": "https://github.com/ChromeDevTools/devtools-frontend/blob/80c102878fd97a7a696572054007d40560dcdd21/front_end/sdk/NetworkManager.js#L252-L274"
    },
    {
      "text": "Core Block Testing",
      "url": "https://developer.wordpress.org/block-editor/#core-block-testing"
    },
    {
      "text": "the integration tests fixtures readme",
      "url": "https://github.com/wordpress/gutenberg/blob/HEAD/test/integration/fixtures/blocks/README.md"
    },
    {
      "text": "Flaky Tests",
      "url": "https://developer.wordpress.org/block-editor/#flaky-tests"
    },
    {
      "text": "[Type] Flaky Test",
      "url": "https://github.com/WordPress/gutenberg/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc+label%3A%22%5BType%5D+Flaky+Test%22"
    },
    {
      "text": "report-flaky-tests",
      "url": "https://github.com/WordPress/gutenberg/blob/trunk/.github/report-flaky-tests/index.js"
    },
    {
      "text": "PHP Testing",
      "url": "https://developer.wordpress.org/block-editor/#php-testing"
    },
    {
      "text": "PHPUnit",
      "url": "https://phpunit.de/"
    },
    {
      "text": "PHP_CodeSniffer",
      "url": "https://github.com/squizlabs/PHP_CodeSniffer"
    },
    {
      "text": "WordPress Coding Standards for PHP_CodeSniffer",
      "url": "https://github.com/WordPress-Coding-Standards/WordPress-Coding-Standards#installation"
    },
    {
      "text": "Composer",
      "url": "https://getcomposer.org/"
    },
    {
      "text": "Performance Testing",
      "url": "https://developer.wordpress.org/block-editor/#performance-testing"
    },
    {
      "text": "← Coding Guidelines",
      "url": "https://developer.wordpress.org/block-editor/contributors/code/coding-guidelines/"
    },
    {
      "text": "End-to-End Testing →",
      "url": "https://developer.wordpress.org/block-editor/contributors/code/testing-overview/e2e/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Fcontributors%2Fcode%2Fcoding-guidelines%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/docs/contributors/code/coding-guidelines.md"
    },
    {
      "text": "WordPress Coding Standards",
      "url": "https://developer.wordpress.org/coding-standards/wordpress-coding-standards/"
    },
    {
      "text": "CSS",
      "url": "https://developer.wordpress.org/block-editor/#css"
    },
    {
      "text": "Naming",
      "url": "https://developer.wordpress.org/block-editor/#naming"
    },
    {
      "text": "BEM (Block, Element, Modifier) methodology",
      "url": "https://en.bem.info/methodology/"
    },
    {
      "text": "classnames package",
      "url": "https://www.npmjs.com/package/classnames"
    },
    {
      "text": "_z-index.scss",
      "url": "https://github.com/WordPress/gutenberg/blob/HEAD/packages/base-styles/_z-index.scss"
    },
    {
      "text": "SCSS File Naming Conventions for Blocks",
      "url": "https://developer.wordpress.org/block-editor/#scss-file-naming-conventions-for-blocks"
    },
    {
      "text": "ECMAScript language specification",
      "url": "https://www.ecma-international.org/ecma-262/"
    },
    {
      "text": "JSX language syntax extension",
      "url": "https://reactjs.org/docs/introducing-jsx.html"
    },
    {
      "text": "@wordpress/babel-preset-default",
      "url": "https://github.com/WordPress/gutenberg/tree/HEAD/packages/babel-preset-default"
    },
    {
      "text": "Babel",
      "url": "https://babeljs.io/"
    },
    {
      "text": "staged process",
      "url": "https://tc39.es/process-document/"
    },
    {
      "text": "Imports",
      "url": "https://developer.wordpress.org/block-editor/#imports"
    },
    {
      "text": "the ES2015 import syntax",
      "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import"
    },
    {
      "text": "External Dependencies",
      "url": "https://developer.wordpress.org/block-editor/#external-dependencies"
    },
    {
      "text": "included in WordPress as a default script",
      "url": "https://developer.wordpress.org/reference/functions/wp_enqueue_script/#default-scripts-included-and-registered-by-wordpress"
    },
    {
      "text": "WordPress Dependencies",
      "url": "https://developer.wordpress.org/block-editor/#wordpress-dependencies"
    },
    {
      "text": "export",
      "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export"
    },
    {
      "text": "Internal Dependencies",
      "url": "https://developer.wordpress.org/block-editor/#internal-dependencies"
    },
    {
      "text": "Legacy Experimental APIs, Plugin-only APIs, and Private APIs",
      "url": "https://developer.wordpress.org/block-editor/#legacy-experimental-apis-plugin-only-apis-and-private-apis"
    },
    {
      "text": "Legacy Experimental APIs",
      "url": "https://developer.wordpress.org/block-editor/#legacy-experimental-apis"
    },
    {
      "text": "WordPress Backwards Compatibility policy",
      "url": "https://developer.wordpress.org/block-editor/contributors/code/backward-compatibility/"
    },
    {
      "text": "Plugin-only APIs",
      "url": "https://developer.wordpress.org/block-editor/#plugin-only-apis"
    },
    {
      "text": "Private APIs",
      "url": "https://developer.wordpress.org/block-editor/#private-apis"
    },
    {
      "text": "find out more about the @wordpress/private-apis package in the its README.md",
      "url": "https://developer.wordpress.org/block-editor/reference-guide/packages/packages-private-apis/"
    },
    {
      "text": "Private function arguments",
      "url": "https://developer.wordpress.org/block-editor/#private-function-arguments"
    },
    {
      "text": "Private React Component properties",
      "url": "https://developer.wordpress.org/block-editor/#private-react-component-properties"
    },
    {
      "text": "Private editor settings",
      "url": "https://developer.wordpress.org/block-editor/#private-editor-settings"
    },
    {
      "text": "/packages/block-editor/src/store/actions.js",
      "url": "https://developer.wordpress.org/block-editor/reference-guide/packages/packages-block-editor/src/store/actions.js/"
    },
    {
      "text": "Private block.json and theme.json APIs",
      "url": "https://developer.wordpress.org/block-editor/#private-block-json-and-theme-json-apis"
    },
    {
      "text": "Inline small actions in thunks",
      "url": "https://developer.wordpress.org/block-editor/#inline-small-actions-in-thunks"
    },
    {
      "text": "thunk",
      "url": "https://developer.wordpress.org/block-editor/how-to-guides/thunks/"
    },
    {
      "text": "Exposing private APIs publicly",
      "url": "https://developer.wordpress.org/block-editor/#exposing-private-apis-publicly"
    },
    {
      "text": "Objects",
      "url": "https://developer.wordpress.org/block-editor/#objects"
    },
    {
      "text": "shorthand notation",
      "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Object_initializer#New_notations_in_ECMAScript_2015"
    },
    {
      "text": "Strings",
      "url": "https://developer.wordpress.org/block-editor/#strings"
    },
    {
      "text": "Optional Chaining",
      "url": "https://developer.wordpress.org/block-editor/#optional-chaining"
    },
    {
      "text": "Optional chaining",
      "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Optional_chaining"
    },
    {
      "text": "falsy value",
      "url": "https://developer.mozilla.org/en-US/docs/Glossary/Falsy"
    },
    {
      "text": "#21984",
      "url": "https://github.com/WordPress/gutenberg/issues/21984"
    },
    {
      "text": "no-unsafe-negation",
      "url": "https://eslint.org/docs/rules/no-unsafe-negation"
    },
    {
      "text": "falsy",
      "url": "https://developer.mozilla.org/en-US/docs/Glossary/Falsy"
    },
    {
      "text": "Type-checking",
      "url": "https://github.com/WordPress/gutenberg/blob/HEAD/packages/README.md#typescript"
    },
    {
      "text": "the second argument is optional",
      "url": "https://developer.mozilla.org/en-US/docs/Web/API/DOMTokenList/toggle"
    },
    {
      "text": "controlled and uncontrolled inputs",
      "url": "https://reactjs.org/docs/uncontrolled-components.html"
    },
    {
      "text": "@wordpress/element (React) Components",
      "url": "https://developer.wordpress.org/block-editor/#wordpress-element-react-components"
    },
    {
      "text": "function components",
      "url": "https://reactjs.org/docs/components-and-props.html"
    },
    {
      "text": "hooks",
      "url": "https://reactjs.org/docs/hooks-reference.html"
    },
    {
      "text": "error boundaries",
      "url": "https://reactjs.org/docs/error-boundaries.html"
    },
    {
      "text": "WordPress guidance on Code Refactoring",
      "url": "https://make.wordpress.org/core/handbook/contribute/code-refactoring/"
    },
    {
      "text": "JavaScript Documentation using JSDoc",
      "url": "https://developer.wordpress.org/block-editor/#javascript-documentation-using-jsdoc"
    },
    {
      "text": "WordPress JavaScript Documentation Standards",
      "url": "https://make.wordpress.org/core/handbook/best-practices/inline-documentation-standards/javascript/"
    },
    {
      "text": "import semantics",
      "url": "https://developer.wordpress.org/block-editor/contributors/code/coding-guidelines/#imports"
    },
    {
      "text": "use of TypeScript tooling",
      "url": "https://developer.wordpress.org/block-editor/contributors/code/testing-overview/#javascript-testing"
    },
    {
      "text": "@wordpress/docgen",
      "url": "https://github.com/WordPress/gutenberg/tree/HEAD/packages/docgen"
    },
    {
      "text": "JSDoc Official Documentation",
      "url": "https://jsdoc.app/index.html"
    },
    {
      "text": "TypeScript Supported JSDoc",
      "url": "https://www.typescriptlang.org/docs/handbook/jsdoc-supported-types.html"
    },
    {
      "text": "Custom Types",
      "url": "https://developer.wordpress.org/block-editor/#custom-types"
    },
    {
      "text": "JSDoc @typedef tag",
      "url": "https://jsdoc.app/tags-typedef.html"
    },
    {
      "text": "type union",
      "url": "https://jsdoc.app/tags-type.html"
    },
    {
      "text": "JavaScript Coding Standards",
      "url": "https://make.wordpress.org/core/handbook/best-practices/coding-standards/javascript/"
    },
    {
      "text": "default function parameter",
      "url": "https://developer.wordpress.org/block-editor/#nullable-undefined-and-void-types"
    },
    {
      "text": "specifying the path",
      "url": "https://developer.wordpress.org/block-editor/#importing-and-exporting-types"
    },
    {
      "text": "Importing and Exporting Types",
      "url": "https://developer.wordpress.org/block-editor/#importing-and-exporting-types"
    },
    {
      "text": "TypeScript import function",
      "url": "https://www.typescriptlang.org/docs/handbook/jsdoc-supported-types.html#import-types"
    },
    {
      "text": "the import groupings",
      "url": "https://developer.wordpress.org/block-editor/contributors/code/coding-guidelines/#imports"
    },
    {
      "text": "External Dependencies",
      "url": "https://developer.wordpress.org/block-editor/#external-dependencies-2"
    },
    {
      "text": "TypeScript integration",
      "url": "https://github.com/Microsoft/TypeScript/wiki/TypeScript-Editor-Support"
    },
    {
      "text": "DefinitelyTyped",
      "url": "http://definitelytyped.org/"
    },
    {
      "text": "Generic Types",
      "url": "https://developer.wordpress.org/block-editor/#generic-types"
    },
    {
      "text": "TypeScript @type tag function recommendations",
      "url": "https://www.typescriptlang.org/docs/handbook/jsdoc-supported-types.html#type"
    },
    {
      "text": "TypeScript @template tag",
      "url": "https://www.typescriptlang.org/docs/handbook/jsdoc-supported-types.html#template"
    },
    {
      "text": "Nullable, Undefined, and Void Types",
      "url": "https://developer.wordpress.org/block-editor/#nullable-undefined-and-void-types"
    },
    {
      "text": "square-bracket notation",
      "url": "https://jsdoc.app/tags-param.html#optional-parameters-and-default-values"
    },
    {
      "text": "default parameter",
      "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Default_parameters"
    },
    {
      "text": "function type",
      "url": "https://github.com/WordPress/gutenberg/blob/add/typescript-jsdoc-guidelines/docs/contributors/coding-guidelines.md#record-types"
    },
    {
      "text": "Documenting Examples",
      "url": "https://developer.wordpress.org/block-editor/#documenting-examples"
    },
    {
      "text": "Documenting @wordpress/element (React) Components",
      "url": "https://developer.wordpress.org/block-editor/#documenting-wordpress-element-react-components"
    },
    {
      "text": "function components",
      "url": "https://reactjs.org/docs/components-and-props.html#function-and-class-components"
    },
    {
      "text": "hooks",
      "url": "https://reactjs.org/docs/hooks-intro.html"
    },
    {
      "text": "dot syntax for parameter properties",
      "url": "https://jsdoc.app/tags-param.html#parameters-with-properties"
    },
    {
      "text": "propTypes static class member",
      "url": "https://reactjs.org/docs/typechecking-with-proptypes.html"
    },
    {
      "text": "phpcs (PHP_CodeSniffer)",
      "url": "https://github.com/squizlabs/PHP_CodeSniffer"
    },
    {
      "text": "WordPress Coding Standards ruleset",
      "url": "https://github.com/WordPress-Coding-Standards/WordPress-Coding-Standards"
    },
    {
      "text": "Install composer",
      "url": "https://getcomposer.org/download/"
    },
    {
      "text": "← Git Workflow",
      "url": "https://developer.wordpress.org/block-editor/contributors/code/git-workflow/"
    },
    {
      "text": "Testing Overview →",
      "url": "https://developer.wordpress.org/block-editor/contributors/code/testing-overview/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Fcontributors%2Fcode%2Fgit-workflow%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/docs/contributors/code/git-workflow.md"
    },
    {
      "text": "Pro Git book",
      "url": "https://git-scm.com/book/en/v2"
    },
    {
      "text": "git tutorial",
      "url": "https://git-scm.com/docs/gittutorial"
    },
    {
      "text": "git user manual",
      "url": "https://git-scm.com/docs/user-manual"
    },
    {
      "text": "additional details about pull requests",
      "url": "https://docs.github.com/en/github/collaborating-with-issues-and-pull-requests"
    },
    {
      "text": "repository management document",
      "url": "https://developer.wordpress.org/block-editor/contributors/repository-management/"
    },
    {
      "text": "Git Workflow Walkthrough",
      "url": "https://developer.wordpress.org/block-editor/#git-workflow-walkthrough"
    },
    {
      "text": "video walk-through of contributing documentation",
      "url": "https://wordpress.tv/2020/09/02/marcus-kazmierczak-contribute-developer-documentation-to-gutenberg/"
    },
    {
      "text": "slides for contributing to Gutenberg",
      "url": "https://mkaz.blog/wordpress/contribute-documentation-to-gutenberg/"
    },
    {
      "text": "coding guidelines",
      "url": "https://developer.wordpress.org/block-editor/contributors/code/coding-guidelines/"
    },
    {
      "text": "testing overview",
      "url": "https://developer.wordpress.org/block-editor/contributors/code/testing-overview/"
    },
    {
      "text": "good commit message",
      "url": "https://make.wordpress.org/core/handbook/best-practices/commit-messages/"
    },
    {
      "text": "Branch Naming",
      "url": "https://developer.wordpress.org/block-editor/#branch-naming"
    },
    {
      "text": "Keeping Your Branch Up To Date",
      "url": "https://developer.wordpress.org/block-editor/#keeping-your-branch-up-to-date"
    },
    {
      "text": "section Perform a rebase",
      "url": "https://github.com/edx/edx-platform/wiki/How-to-Rebase-a-Pull-Request#perform-a-rebase"
    },
    {
      "text": "Keeping Your Fork Up To Date",
      "url": "https://developer.wordpress.org/block-editor/#keeping-your-fork-up-to-date"
    },
    {
      "text": "Miscellaneous",
      "url": "https://developer.wordpress.org/block-editor/#miscellaneous"
    },
    {
      "text": "Git Archeology",
      "url": "https://developer.wordpress.org/block-editor/#git-archeology"
    },
    {
      "text": "← Getting Started With Code Contribution",
      "url": "https://developer.wordpress.org/block-editor/contributors/code/getting-started-with-code-contribution/"
    },
    {
      "text": "Coding Guidelines →",
      "url": "https://developer.wordpress.org/block-editor/contributors/code/coding-guidelines/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Fcontributors%2Fcode%2Fgetting-started-with-code-contribution%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/docs/contributors/code/getting-started-with-code-contribution.md"
    },
    {
      "text": "Development Environment tutorial",
      "url": "https://developer.wordpress.org/block-editor/getting-started/devenv/"
    },
    {
      "text": "Node.js",
      "url": "https://nodejs.org/"
    },
    {
      "text": "LTS release schedule",
      "url": "https://github.com/nodejs/Release#release-schedule"
    },
    {
      "text": "Node Version Manager",
      "url": "https://github.com/nvm-sh/nvm"
    },
    {
      "text": "our Development Tools guide",
      "url": "https://developer.wordpress.org/block-editor/getting-started/devenv/#development-tools"
    },
    {
      "text": "wp-env package",
      "url": "https://developer.wordpress.org/block-editor/reference-guide/packages/packages-env/"
    },
    {
      "text": "Development Environment tutorial for additional details",
      "url": "https://developer.wordpress.org/block-editor/getting-started/devenv/"
    },
    {
      "text": "install instructions from Docker for Windows with WSL2",
      "url": "https://docs.docker.com/docker-for-windows/wsl/"
    },
    {
      "text": "Local",
      "url": "https://localwp.com/"
    },
    {
      "text": "WampServer",
      "url": "http://www.wampserver.com/en/"
    },
    {
      "text": "MAMP",
      "url": "https://www.mamp.info/"
    },
    {
      "text": "GitHub CLI",
      "url": "https://cli.github.com/"
    },
    {
      "text": "Getting the Gutenberg code",
      "url": "https://developer.wordpress.org/block-editor/#getting-the-gutenberg-code"
    },
    {
      "text": "Building Gutenberg as a plugin",
      "url": "https://developer.wordpress.org/block-editor/#building-gutenberg-as-a-plugin"
    },
    {
      "text": "Python",
      "url": "https://www.python.org/"
    },
    {
      "text": "Local WordPress Environment",
      "url": "https://developer.wordpress.org/block-editor/#local-wordpress-environment"
    },
    {
      "text": "Using Docker and wp-env",
      "url": "https://developer.wordpress.org/block-editor/#using-docker-and-wp-env"
    },
    {
      "text": "wp-env package",
      "url": "https://developer.wordpress.org/block-editor/reference-guide/packages/packages-env/#wp-envjson"
    },
    {
      "text": "package documentation",
      "url": "https://developer.wordpress.org/block-editor/reference-guide/packages/packages-env/"
    },
    {
      "text": "Accessing the Local WordPress Install",
      "url": "https://developer.wordpress.org/block-editor/#accessing-the-local-wordpress-install"
    },
    {
      "text": "Accessing the MySQL Database",
      "url": "https://developer.wordpress.org/block-editor/#accessing-the-mysql-database"
    },
    {
      "text": "Sequel Ace",
      "url": "https://sequel-ace.com/"
    },
    {
      "text": "article on accessing the WordPress database",
      "url": "https://wordpress.org/documentation/article/creating-database-for-wordpress/"
    },
    {
      "text": "troubleshooting section in wp-env documentation",
      "url": "https://developer.wordpress.org/block-editor/reference-guide/packages/packages-env/#troubleshooting-common-problems"
    },
    {
      "text": "Using Local or MAMP",
      "url": "https://developer.wordpress.org/block-editor/#using-local-or-mamp"
    },
    {
      "text": "Caching of PHP files",
      "url": "https://developer.wordpress.org/block-editor/#caching-of-php-files"
    },
    {
      "text": "Incoming connections",
      "url": "https://developer.wordpress.org/block-editor/#incoming-connections"
    },
    {
      "text": "Linking to other directories",
      "url": "https://developer.wordpress.org/block-editor/#linking-to-other-directories"
    },
    {
      "text": "Using WP-CLI",
      "url": "https://developer.wordpress.org/block-editor/#using-wp-cli"
    },
    {
      "text": "On A Remote Server",
      "url": "https://developer.wordpress.org/block-editor/#on-a-remote-server"
    },
    {
      "text": "Storybook",
      "url": "https://developer.wordpress.org/block-editor/#storybook"
    },
    {
      "text": "Storybook",
      "url": "https://storybook.js.org/"
    },
    {
      "text": "https://wordpress.github.io/gutenberg/",
      "url": "https://wordpress.github.io/gutenberg/"
    },
    {
      "text": "Developer Tools",
      "url": "https://developer.wordpress.org/block-editor/#developer-tools"
    },
    {
      "text": "EditorConfig",
      "url": "https://developer.wordpress.org/block-editor/#editorconfig"
    },
    {
      "text": "EditorConfig",
      "url": "https://editorconfig.org/"
    },
    {
      "text": "EditorConfig for VS Code",
      "url": "https://marketplace.visualstudio.com/items?itemName=editorconfig.editorconfig"
    },
    {
      "text": ".editorconfig",
      "url": "https://github.com/WordPress/gutenberg/blob/HEAD/.editorconfig"
    },
    {
      "text": "ESLint",
      "url": "https://developer.wordpress.org/block-editor/#eslint"
    },
    {
      "text": "ESLint",
      "url": "https://eslint.org/"
    },
    {
      "text": "ESLint Extension",
      "url": "https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint"
    },
    {
      "text": "more editor integrations",
      "url": "https://eslint.org/docs/user-guide/integrations"
    },
    {
      "text": ".eslintrc.js",
      "url": "https://github.com/WordPress/gutenberg/blob/HEAD/.eslintrc.js"
    },
    {
      "text": "Prettier",
      "url": "https://developer.wordpress.org/block-editor/#prettier"
    },
    {
      "text": "Prettier",
      "url": "https://prettier.io/"
    },
    {
      "text": "Prettier – Code formatter extension",
      "url": "https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode"
    },
    {
      "text": "@wordpress/prettier-config",
      "url": "https://developer.wordpress.org/block-editor/reference-guide/packages/packages-prettier-config/"
    },
    {
      "text": "Prettier’s Editor Integration docs",
      "url": "https://prettier.io/docs/en/editors.html"
    },
    {
      "text": "TypeScript",
      "url": "https://developer.wordpress.org/block-editor/#typescript"
    },
    {
      "text": "type check JavaScript files",
      "url": "https://www.typescriptlang.org/docs/handbook/type-checking-javascript-files.html"
    },
    {
      "text": "TypeScript Editor Support",
      "url": "https://github.com/Microsoft/TypeScript/wiki/TypeScript-Editor-Support"
    },
    {
      "text": "Git Workflow →",
      "url": "https://developer.wordpress.org/block-editor/contributors/code/git-workflow/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guide%2Fpackages%2Fpackages-react-native-editor%2F__device-tests__%2FCONTRIBUTING%2F&locale=en_US"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guide%2Fpackages%2Fpackages-react-native-editor%2F__device-tests__%2F&locale=en_US"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Fcontributors%2Fcode%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/docs/contributors/code/README.md"
    },
    {
      "text": "Make WordPress Core blog",
      "url": "https://make.wordpress.org/core/"
    },
    {
      "text": "Development Hub",
      "url": "https://developer.wordpress.org/block-editor/#development-hub"
    },
    {
      "text": "the issues list",
      "url": "https://github.com/wordpress/gutenberg/issues"
    },
    {
      "text": "good first issue",
      "url": "https://github.com/wordpress/gutenberg/issues?q=is%3Aopen+is%3Aissue+label%3A%22Good+First+Issue%22"
    },
    {
      "text": "good first review",
      "url": "https://github.com/WordPress/gutenberg/pulls?q=is%3Aopen+is%3Apr+label%3A%22Good+First+Review%22"
    },
    {
      "text": "Contributor Resources",
      "url": "https://developer.wordpress.org/block-editor/#contributor-resources"
    },
    {
      "text": "← Contributor Guide",
      "url": "https://developer.wordpress.org/block-editor/contributors/"
    },
    {
      "text": "Getting Started With Code Contribution →",
      "url": "https://developer.wordpress.org/block-editor/contributors/code/getting-started-with-code-contribution/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Fcontributors%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/docs/contributors/README.md"
    },
    {
      "text": "Core Contributor Handbook",
      "url": "https://make.wordpress.org/core/handbook/"
    },
    {
      "text": "Sections",
      "url": "https://developer.wordpress.org/block-editor/#sections"
    },
    {
      "text": "developer section",
      "url": "https://developer.wordpress.org/block-editor/contributors/code/"
    },
    {
      "text": "design section",
      "url": "https://developer.wordpress.org/block-editor/contributors/design/"
    },
    {
      "text": "documentation section",
      "url": "https://developer.wordpress.org/block-editor/contributors/documentation/"
    },
    {
      "text": "triaging issues section",
      "url": "https://developer.wordpress.org/block-editor/contributors/triage/"
    },
    {
      "text": "localizing and translating section",
      "url": "https://developer.wordpress.org/block-editor/contributors/localizing/"
    },
    {
      "text": "Repository Management",
      "url": "https://developer.wordpress.org/block-editor/#repository-management"
    },
    {
      "text": "Issue Management",
      "url": "https://developer.wordpress.org/block-editor/contributors/repository-management/#issues"
    },
    {
      "text": "Pull Requests",
      "url": "https://developer.wordpress.org/block-editor/contributors/repository-management/#pull-requests"
    },
    {
      "text": "Teams and Projects",
      "url": "https://developer.wordpress.org/block-editor/contributors/repository-management/#teams"
    },
    {
      "text": "Guidelines",
      "url": "https://developer.wordpress.org/block-editor/#guidelines"
    },
    {
      "text": "Contributing Guidelines",
      "url": "https://github.com/WordPress/gutenberg/blob/HEAD/CONTRIBUTING.md"
    },
    {
      "text": "← Explanations",
      "url": "https://developer.wordpress.org/block-editor/explanations/"
    },
    {
      "text": "Code Contributions →",
      "url": "https://developer.wordpress.org/block-editor/contributors/code/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Fexplanations%2Fhistory%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/docs/explanations/history.md"
    },
    {
      "text": "Survey",
      "url": "https://developer.wordpress.org/block-editor/#survey"
    },
    {
      "text": "https://make.wordpress.org/core/2017/04/07/editor-experience-survey-results/",
      "url": "https://make.wordpress.org/core/2017/04/07/editor-experience-survey-results/"
    },
    {
      "text": "Inspiration",
      "url": "https://developer.wordpress.org/block-editor/#inspiration"
    },
    {
      "text": "https://beta.livingdocs.io/articles",
      "url": "https://beta.livingdocs.io/articles"
    },
    {
      "text": "https://intenseminimalism.com/2017/parrot-an-integrated-site-builder-and-editor-concept-for-wordpress/",
      "url": "https://intenseminimalism.com/2017/parrot-an-integrated-site-builder-and-editor-concept-for-wordpress/"
    },
    {
      "text": "Blog posts by the team",
      "url": "https://developer.wordpress.org/block-editor/#blog-posts-by-the-team"
    },
    {
      "text": "https://make.wordpress.org/core/tag/gutenberg/",
      "url": "https://make.wordpress.org/core/tag/gutenberg/"
    },
    {
      "text": "https://make.wordpress.org/core/2017/08/11/revised-suggested-roadmap-for-gutenberg-and-customization/",
      "url": "https://make.wordpress.org/core/2017/08/11/revised-suggested-roadmap-for-gutenberg-and-customization/"
    },
    {
      "text": "https://make.wordpress.org/core/2017/08/08/discovering-gutenberg-and-next-steps/",
      "url": "https://make.wordpress.org/core/2017/08/08/discovering-gutenberg-and-next-steps/"
    },
    {
      "text": "← Glossary",
      "url": "https://developer.wordpress.org/block-editor/explanations/glossary/"
    },
    {
      "text": "Contributor Guide →",
      "url": "https://developer.wordpress.org/block-editor/contributors/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Fexplanations%2Fglossary%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/docs/explanations/glossary.md"
    },
    {
      "text": "Attribute sources",
      "url": "https://developer.wordpress.org/block-editor/#attribute-sources"
    },
    {
      "text": "Block",
      "url": "https://developer.wordpress.org/block-editor/#block"
    },
    {
      "text": "Global Styles",
      "url": "https://developer.wordpress.org/block-editor/#global-styles"
    },
    {
      "text": "Local Styles",
      "url": "https://developer.wordpress.org/block-editor/#local-styles"
    },
    {
      "text": "Block Styles",
      "url": "https://developer.wordpress.org/block-editor/explanations/architecture/styles/#block-styles"
    },
    {
      "text": "Block Supports",
      "url": "https://developer.wordpress.org/block-editor/#block-supports"
    },
    {
      "text": "Block Supports reference documentation",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/block-api/block-supports/"
    },
    {
      "text": "Block Theme",
      "url": "https://developer.wordpress.org/block-editor/#block-theme"
    },
    {
      "text": "Block categories",
      "url": "https://developer.wordpress.org/block-editor/#block-categories"
    },
    {
      "text": "Block ~Inserter~ Library",
      "url": "https://developer.wordpress.org/block-editor/#block-inserter-library"
    },
    {
      "text": "Block name",
      "url": "https://developer.wordpress.org/block-editor/#block-name"
    },
    {
      "text": "Block Templates",
      "url": "https://developer.wordpress.org/block-editor/#block-templates"
    },
    {
      "text": "templates documentation",
      "url": "https://developer.wordpress.org/developers/block-api/block-templates/"
    },
    {
      "text": "Block Template Parts",
      "url": "https://developer.wordpress.org/block-editor/#block-template-parts"
    },
    {
      "text": "Block type",
      "url": "https://developer.wordpress.org/block-editor/#block-type"
    },
    {
      "text": "Classic block",
      "url": "https://developer.wordpress.org/block-editor/#classic-block"
    },
    {
      "text": "Dynamic block",
      "url": "https://developer.wordpress.org/block-editor/#dynamic-block"
    },
    {
      "text": "Full Site Editing",
      "url": "https://developer.wordpress.org/block-editor/#full-site-editing"
    },
    {
      "text": "theme.json reference docs",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/theme-json-reference/"
    },
    {
      "text": "how to guide",
      "url": "https://developer.wordpress.org/block-editor/how-to-guides/themes/theme-json/"
    },
    {
      "text": "styles in the block editor",
      "url": "https://developer.wordpress.org/block-editor/explanations/architecture/styles/"
    },
    {
      "text": "block styles",
      "url": "https://developer.wordpress.org/block-editor/#block-styles"
    },
    {
      "text": "Inspector",
      "url": "https://developer.wordpress.org/block-editor/#inspector"
    },
    {
      "text": "Settings Sidebar.",
      "url": "https://developer.wordpress.org/block-editor/#settings-sidebar"
    },
    {
      "text": "Navigation Block",
      "url": "https://developer.wordpress.org/block-editor/#navigation-block"
    },
    {
      "text": "Post settings",
      "url": "https://developer.wordpress.org/block-editor/#post-settings"
    },
    {
      "text": "Query Block",
      "url": "https://developer.wordpress.org/block-editor/#query-block"
    },
    {
      "text": "WP_Query",
      "url": "https://developer.wordpress.org/reference/classes/wp_query/"
    },
    {
      "text": "Reusable block",
      "url": "https://developer.wordpress.org/block-editor/#reusable-block"
    },
    {
      "text": "RichText",
      "url": "https://developer.wordpress.org/block-editor/#richtext"
    },
    {
      "text": "Serialization",
      "url": "https://developer.wordpress.org/block-editor/#serialization"
    },
    {
      "text": "Settings Sidebar",
      "url": "https://developer.wordpress.org/block-editor/#settings-sidebar"
    },
    {
      "text": "Site Editor",
      "url": "https://developer.wordpress.org/block-editor/#site-editor"
    },
    {
      "text": "Static block",
      "url": "https://developer.wordpress.org/block-editor/#static-block"
    },
    {
      "text": "Template Editing Mode",
      "url": "https://developer.wordpress.org/block-editor/#template-editing-mode"
    },
    {
      "text": "Theme Blocks",
      "url": "https://developer.wordpress.org/block-editor/#theme-blocks"
    },
    {
      "text": "here",
      "url": "https://github.com/WordPress/gutenberg/issues/22724"
    },
    {
      "text": "TinyMCE",
      "url": "https://developer.wordpress.org/block-editor/#tinymce"
    },
    {
      "text": "TinyMCE",
      "url": "https://www.tinymce.com/"
    },
    {
      "text": "Toolbar",
      "url": "https://developer.wordpress.org/block-editor/#toolbar"
    },
    {
      "text": "← Frequently Asked Questions",
      "url": "https://developer.wordpress.org/block-editor/explanations/faq/"
    },
    {
      "text": "History →",
      "url": "https://developer.wordpress.org/block-editor/explanations/history/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Fexplanations%2Ffaq%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/docs/explanations/faq.md"
    },
    {
      "text": "just open up a GitHub issue",
      "url": "https://github.com/WordPress/gutenberg/issues"
    },
    {
      "text": "WordPress 5.0: A Gutenberg FAQ",
      "url": "https://ma.tt/2018/11/a-gutenberg-faq/"
    },
    {
      "text": "Table of Contents",
      "url": "https://developer.wordpress.org/block-editor/#table-of-contents"
    },
    {
      "text": "The Gutenberg Project",
      "url": "https://developer.wordpress.org/block-editor/#the-gutenberg-project"
    },
    {
      "text": "What is Gutenberg?",
      "url": "https://developer.wordpress.org/block-editor/#what-is-gutenberg"
    },
    {
      "text": "What’s on the roadmap long term?",
      "url": "https://developer.wordpress.org/block-editor/#whats-on-the-roadmap-long-term"
    },
    {
      "text": "When was Gutenberg started?",
      "url": "https://developer.wordpress.org/block-editor/#when-was-gutenberg-started"
    },
    {
      "text": "When was Gutenberg merged into WordPress?",
      "url": "https://developer.wordpress.org/block-editor/#when-was-gutenberg-merged-into-wordpress"
    },
    {
      "text": "WordPress is already the world’s most popular publishing platform. Why change the editor at all?",
      "url": "https://developer.wordpress.org/block-editor/#wordpress-is-already-the-worlds-most-popular-publishing-platform-why-change-the-editor-at-all"
    },
    {
      "text": "The Editing Experience",
      "url": "https://developer.wordpress.org/block-editor/#the-editing-experience"
    },
    {
      "text": "What are “blocks” and why are we using them?",
      "url": "https://developer.wordpress.org/block-editor/#what-are-blocks-and-why-are-we-using-them"
    },
    {
      "text": "What is the writing experience like?",
      "url": "https://developer.wordpress.org/block-editor/#what-is-the-writing-experience-like"
    },
    {
      "text": "Is Gutenberg built on top of TinyMCE?",
      "url": "https://developer.wordpress.org/block-editor/#is-gutenberg-built-on-top-of-tinymce"
    },
    {
      "text": "Are there Keyboard Shortcuts for Gutenberg?",
      "url": "https://developer.wordpress.org/block-editor/#are-there-keyboard-shortcuts-for-gutenberg"
    },
    {
      "text": "Editor shortcuts",
      "url": "https://developer.wordpress.org/block-editor/#editor-shortcuts"
    },
    {
      "text": "Selection shortcuts",
      "url": "https://developer.wordpress.org/block-editor/#selection-shortcuts"
    },
    {
      "text": "Block shortcuts",
      "url": "https://developer.wordpress.org/block-editor/#block-shortcuts"
    },
    {
      "text": "Text formatting",
      "url": "https://developer.wordpress.org/block-editor/#text-formatting"
    },
    {
      "text": "Does Gutenberg support columns?",
      "url": "https://developer.wordpress.org/block-editor/#does-gutenberg-support-columns"
    },
    {
      "text": "Does Gutenberg support nested blocks?",
      "url": "https://developer.wordpress.org/block-editor/#does-gutenberg-support-nested-blocks"
    },
    {
      "text": "Does drag and drop work for rearranging blocks?",
      "url": "https://developer.wordpress.org/block-editor/#does-drag-and-drop-work-for-rearranging-blocks"
    },
    {
      "text": "The Development Experience",
      "url": "https://developer.wordpress.org/block-editor/#the-development-experience"
    },
    {
      "text": "How do I make my own block?",
      "url": "https://developer.wordpress.org/block-editor/#how-do-i-make-my-own-block"
    },
    {
      "text": "Does Gutenberg involve editing posts/pages in the front-end?",
      "url": "https://developer.wordpress.org/block-editor/#does-gutenberg-involve-editing-posts-pages-in-the-front-end"
    },
    {
      "text": "Given Gutenberg is built in JavaScript, how do old meta boxes (PHP) work?",
      "url": "https://developer.wordpress.org/block-editor/#given-gutenberg-is-built-in-javascript-how-do-old-meta-boxes-php-work"
    },
    {
      "text": "How can plugins extend the Gutenberg UI?",
      "url": "https://developer.wordpress.org/block-editor/#how-can-plugins-extend-the-gutenberg-ui"
    },
    {
      "text": "Are Custom Post Types still supported?",
      "url": "https://developer.wordpress.org/block-editor/#are-custom-post-types-still-supported"
    },
    {
      "text": "Can themes style blocks?",
      "url": "https://developer.wordpress.org/block-editor/#can-themes-_style_-blocks"
    },
    {
      "text": "How do block styles work in both the front-end and back-end?",
      "url": "https://developer.wordpress.org/block-editor/#how-do-block-styles-work-in-both-the-front-end-and-back-end"
    },
    {
      "text": "What are block variations? Are they the same as block styles?",
      "url": "https://developer.wordpress.org/block-editor/#what-are-block-variations-are-they-the-same-as-block-styles"
    },
    {
      "text": "How do editor styles work?",
      "url": "https://developer.wordpress.org/block-editor/#how-do-editor-styles-work"
    },
    {
      "text": "What browsers does Gutenberg support?",
      "url": "https://developer.wordpress.org/block-editor/#what-browsers-does-gutenberg-support"
    },
    {
      "text": "Should I be concerned that Gutenberg will make my plugin obsolete?",
      "url": "https://developer.wordpress.org/block-editor/#should-i-be-concerned-that-gutenberg-will-make-my-plugin-obsolete"
    },
    {
      "text": "Is it possible to opt out of Gutenberg for my site?",
      "url": "https://developer.wordpress.org/block-editor/#is-it-possible-to-opt-out-of-gutenberg-for-my-site"
    },
    {
      "text": "How do custom TinyMCE buttons work in Gutenberg?",
      "url": "https://developer.wordpress.org/block-editor/#how-do-custom-tinymce-buttons-work-in-gutenberg"
    },
    {
      "text": "How do shortcodes work in Gutenberg?",
      "url": "https://developer.wordpress.org/block-editor/#how-do-shortcodes-work-in-gutenberg"
    },
    {
      "text": "Should I move shortcodes to content blocks?",
      "url": "https://developer.wordpress.org/block-editor/#should-i-move-shortcodes-to-content-blocks"
    },
    {
      "text": "Is Gutenberg made to be properly accessible?",
      "url": "https://developer.wordpress.org/block-editor/#is-gutenberg-made-to-be-properly-accessible"
    },
    {
      "text": "How is data stored? I’ve seen HTML comments, what is their purpose?",
      "url": "https://developer.wordpress.org/block-editor/#how-is-data-stored-ive-seen-html-comments-what-is-their-purpose"
    },
    {
      "text": "How can I parse the post content back out into blocks in PHP or JS?",
      "url": "https://developer.wordpress.org/block-editor/#how-can-i-parse-the-post-content-back-out-into-blocks-in-php-or-js"
    },
    {
      "text": "GitHub",
      "url": "https://github.com/WordPress/gutenberg"
    },
    {
      "text": "available in the plugin repository",
      "url": "https://wordpress.org/plugins/gutenberg/"
    },
    {
      "text": "official WordPress roadmap",
      "url": "https://wordpress.org/about/roadmap/"
    },
    {
      "text": "WordPress 5.0",
      "url": "https://wordpress.org/news/2018/12/bebo/"
    },
    {
      "text": "the versions in WordPress page",
      "url": "https://developer.wordpress.org/block-editor/principles/versions-in-wordpress/"
    },
    {
      "text": "share what you find on GitHub",
      "url": "https://github.com/WordPress/gutenberg/issues"
    },
    {
      "text": "head to this demo and give it a try",
      "url": "https://wordpress.org/gutenberg/"
    },
    {
      "text": "Nested Block Tutorial",
      "url": "https://developer.wordpress.org/block-editor/tutorials/block-tutorial/nested-blocks-inner-blocks/"
    },
    {
      "text": "Meta Box Tutorial",
      "url": "https://developer.wordpress.org/block-editor/how-to-guides/metabox/"
    },
    {
      "text": "Create a Block Tutorial",
      "url": "https://developer.wordpress.org/block-editor/getting-stared/create-block/"
    },
    {
      "text": "Does Gutenberg support columns?",
      "url": "https://developer.wordpress.org/block-editor/#does-gutenberg-support-columns-2"
    },
    {
      "text": "Does Gutenberg support nested blocks?",
      "url": "https://developer.wordpress.org/block-editor/#does-gutenberg-support-nested-blocks-2"
    },
    {
      "text": "Nested Block Tutorial",
      "url": "https://developer.wordpress.org/block-editor/how-to-guides/block-tutorial/nested-blocks-inner-blocks/"
    },
    {
      "text": "Does drag and drop work for rearranging blocks?",
      "url": "https://developer.wordpress.org/block-editor/#does-drag-and-drop-work-for-rearranging-blocks-2"
    },
    {
      "text": "Can themes style blocks?",
      "url": "https://developer.wordpress.org/block-editor/#can-themes-style-blocks"
    },
    {
      "text": "block based theme documentation",
      "url": "https://developer.wordpress.org/block-editor/how-to-guides/themes/block-theme-overview/"
    },
    {
      "text": "block variations",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/block-api/block-variations/"
    },
    {
      "text": "block styles",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/filters/block-filters/#block-style-variations"
    },
    {
      "text": "Editor Styles",
      "url": "https://developer.wordpress.org/block-editor/how-to-guides/themes/theme-support/#editor-styles"
    },
    {
      "text": "list of supported browsers can be found in the Make WordPress handbook",
      "url": "https://make.wordpress.org/core/handbook/best-practices/browser-support/"
    },
    {
      "text": "Classic Editor plugin",
      "url": "https://wordpress.org/plugins/classic-editor/"
    },
    {
      "text": "until December 2021",
      "url": "https://make.wordpress.org/core/2018/11/07/classic-editor-plugin-support-window/"
    },
    {
      "text": "here",
      "url": "https://github.com/WordPress/gutenberg/labels/Accessibility%20%28a11y%29"
    },
    {
      "text": "the technical overview introduction",
      "url": "https://make.wordpress.org/core/2017/01/17/editor-technical-overview/"
    },
    {
      "text": "gives us the flexibility",
      "url": "https://github.com/WordPress/gutenberg/issues/1516"
    },
    {
      "text": "Gutenberg key concepts",
      "url": "https://developer.wordpress.org/block-editor/getting-started/architecture/key-concepts/"
    },
    {
      "text": "← User Interface",
      "url": "https://developer.wordpress.org/block-editor/explanations/user-interface/"
    },
    {
      "text": "Glossary →",
      "url": "https://developer.wordpress.org/block-editor/explanations/glossary/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Fexplanations%2Fuser-interface%2Fdesign-resources%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/docs/explanations/user-interface/design-resources.md"
    },
    {
      "text": "Figma",
      "url": "https://developer.wordpress.org/block-editor/#figma"
    },
    {
      "text": "#design channel",
      "url": "https://app.slack.com/client/T024MFP4J/C02S78ZAL"
    },
    {
      "text": "How to contribute",
      "url": "https://developer.wordpress.org/block-editor/#how-to-contribute"
    },
    {
      "text": "Resources for learning how to use Figma",
      "url": "https://developer.wordpress.org/block-editor/#resources-for-learning-how-to-use-figma"
    },
    {
      "text": "Getting started with Figma",
      "url": "https://help.figma.com/category/9-getting-started"
    },
    {
      "text": "Top Online Tutorials to Learn Figma for UI/UX Design",
      "url": "https://medium.com/quick-design/top-online-tutorials-to-learn-figma-for-ui-ux-design-4e9c6721a72d"
    },
    {
      "text": "Take a Tour Around Figma",
      "url": "https://help.figma.com/article/12-getting-familiar-with-figma"
    },
    {
      "text": "Learning how to use files and projects",
      "url": "https://developer.wordpress.org/block-editor/#learning-how-to-use-files-and-projects"
    },
    {
      "text": "Getting started with Figma files and projects",
      "url": "https://help.figma.com/article/298-getting-started-with-files-and-projects"
    },
    {
      "text": "What are files?",
      "url": "https://help.figma.com/article/298-getting-started-with-files-and-projects#files"
    },
    {
      "text": "What are projects?",
      "url": "https://help.figma.com/article/298-getting-started-with-files-and-projects#projects"
    },
    {
      "text": "Video tutorial",
      "url": "https://www.youtube.com/watch?v=c5HS6smhq2E"
    },
    {
      "text": "FAQ",
      "url": "https://help.figma.com/article/298-getting-started-with-files-and-projects#faq"
    },
    {
      "text": "Learning how to use components",
      "url": "https://developer.wordpress.org/block-editor/#learning-how-to-use-components"
    },
    {
      "text": "Getting started with components",
      "url": "https://help.figma.com/article/66-components"
    },
    {
      "text": "What are components?",
      "url": "https://help.figma.com/article/66-components#components"
    },
    {
      "text": "Video tutorial",
      "url": "https://help.figma.com/article/66-components#videos"
    },
    {
      "text": "Learning how to use WordPress Figma libraries",
      "url": "https://developer.wordpress.org/block-editor/#learning-how-to-use-wordpress-figma-libraries"
    },
    {
      "text": "← Animation",
      "url": "https://developer.wordpress.org/block-editor/explanations/user-interface/animation/"
    },
    {
      "text": "Frequently Asked Questions →",
      "url": "https://developer.wordpress.org/block-editor/explanations/faq/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Fexplanations%2Fuser-interface%2Fanimation%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/docs/explanations/user-interface/animation.md"
    },
    {
      "text": "Point of Origin",
      "url": "https://developer.wordpress.org/block-editor/#point-of-origin"
    },
    {
      "text": "Speed",
      "url": "https://developer.wordpress.org/block-editor/#speed"
    },
    {
      "text": "Simple",
      "url": "https://developer.wordpress.org/block-editor/#simple"
    },
    {
      "text": "Consistency",
      "url": "https://developer.wordpress.org/block-editor/#consistency"
    },
    {
      "text": "Accessibility Considerations",
      "url": "https://developer.wordpress.org/block-editor/#accessibility-considerations"
    },
    {
      "text": "vestibular disorders triggered by motion",
      "url": "https://www.ncbi.nlm.nih.gov/pubmed/29017000"
    },
    {
      "text": "prefers-reduced-motion",
      "url": "https://developer.mozilla.org/en-US/docs/Web/CSS/@media/prefers-reduced-motion"
    },
    {
      "text": "Inventory of Reused Animations",
      "url": "https://developer.wordpress.org/block-editor/#inventory-of-reused-animations"
    },
    {
      "text": "the component documentation",
      "url": "https://developer.wordpress.org/block-editor/reference-guide/components/animate/"
    },
    {
      "text": "← Block Design",
      "url": "https://developer.wordpress.org/block-editor/explanations/user-interface/block-design/"
    },
    {
      "text": "Resources →",
      "url": "https://developer.wordpress.org/block-editor/explanations/user-interface/design-resources/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Fexplanations%2Fuser-interface%2Fblock-design%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/docs/explanations/user-interface/block-design.md"
    },
    {
      "text": "Best Practices",
      "url": "https://developer.wordpress.org/block-editor/#best-practices"
    },
    {
      "text": "The primary interface for a block is the content area of the block",
      "url": "https://developer.wordpress.org/block-editor/#the-primary-interface-for-a-block-is-the-content-area-of-the-block"
    },
    {
      "text": "The Block Toolbar is a secondary place for required options & controls",
      "url": "https://developer.wordpress.org/block-editor/#the-block-toolbar-is-a-secondary-place-for-required-options-controls"
    },
    {
      "text": "Group Block Toolbar controls with related items",
      "url": "https://developer.wordpress.org/block-editor/#group-block-toolbar-controls-with-related-items"
    },
    {
      "text": "The Settings Sidebar should only be used for advanced, tertiary controls",
      "url": "https://developer.wordpress.org/block-editor/#the-settings-sidebar-should-only-be-used-for-advanced-tertiary-controls"
    },
    {
      "text": "Setup state vs. live preview state",
      "url": "https://developer.wordpress.org/block-editor/#setup-state-vs-live-preview-state"
    },
    {
      "text": "Do’s and Don’ts",
      "url": "https://developer.wordpress.org/block-editor/#dos-and-donts"
    },
    {
      "text": "Block Toolbar",
      "url": "https://developer.wordpress.org/block-editor/#block-toolbar"
    },
    {
      "text": "Block Identification",
      "url": "https://developer.wordpress.org/block-editor/#block-identification"
    },
    {
      "text": "Material Design Icons",
      "url": "https://material.io/tools/icons/"
    },
    {
      "text": "Dashicons",
      "url": "https://developer.wordpress.org/resource/dashicons/"
    },
    {
      "text": "Block Description",
      "url": "https://developer.wordpress.org/block-editor/#block-description"
    },
    {
      "text": "registerBlockType function",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/block-api/block-registration/"
    },
    {
      "text": "Placeholders",
      "url": "https://developer.wordpress.org/block-editor/#placeholders"
    },
    {
      "text": "Selected and Unselected States",
      "url": "https://developer.wordpress.org/block-editor/#selected-and-unselected-states"
    },
    {
      "text": "Advanced Block Settings",
      "url": "https://developer.wordpress.org/block-editor/#advanced-block-settings"
    },
    {
      "text": "Consider mobile",
      "url": "https://developer.wordpress.org/block-editor/#consider-mobile"
    },
    {
      "text": "Support Gutenberg’s dark background editor scheme",
      "url": "https://developer.wordpress.org/block-editor/#support-gutenbergs-dark-background-editor-scheme"
    },
    {
      "text": "dark backgrounds",
      "url": "https://developer.wordpress.org/block-editor/how-to-guides/themes/theme-support/#dark-backgrounds"
    },
    {
      "text": "Paragraph",
      "url": "https://developer.wordpress.org/block-editor/#paragraph"
    },
    {
      "text": "Placeholder:",
      "url": "https://developer.wordpress.org/block-editor/#placeholder"
    },
    {
      "text": "Selected state:",
      "url": "https://developer.wordpress.org/block-editor/#selected-state"
    },
    {
      "text": "Image",
      "url": "https://developer.wordpress.org/block-editor/#image"
    },
    {
      "text": "Placeholder:",
      "url": "https://developer.wordpress.org/block-editor/#placeholder-2"
    },
    {
      "text": "Selected state:",
      "url": "https://developer.wordpress.org/block-editor/#selected-state-2"
    },
    {
      "text": "Block settings:",
      "url": "https://developer.wordpress.org/block-editor/#block-settings"
    },
    {
      "text": "Latest Post",
      "url": "https://developer.wordpress.org/block-editor/#latest-post"
    },
    {
      "text": "Placeholder:",
      "url": "https://developer.wordpress.org/block-editor/#placeholder-3"
    },
    {
      "text": "Selected state:",
      "url": "https://developer.wordpress.org/block-editor/#selected-state-3"
    },
    {
      "text": "Block settings:",
      "url": "https://developer.wordpress.org/block-editor/#block-settings-2"
    },
    {
      "text": "Animation →",
      "url": "https://developer.wordpress.org/block-editor/explanations/user-interface/animation/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Fexplanations%2Fuser-interface%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/docs/explanations/user-interface/README.md"
    },
    {
      "text": "The Block Editor",
      "url": "https://developer.wordpress.org/block-editor/#the-block-editor"
    },
    {
      "text": "The Block",
      "url": "https://developer.wordpress.org/block-editor/#the-block"
    },
    {
      "text": "Block Library",
      "url": "https://developer.wordpress.org/block-editor/#block-library"
    },
    {
      "text": "← Architecture",
      "url": "https://developer.wordpress.org/block-editor/explanations/architecture/"
    },
    {
      "text": "Block Design →",
      "url": "https://developer.wordpress.org/block-editor/explanations/user-interface/block-design/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Fexplanations%2Farchitecture%2Fstyles%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/docs/explanations/architecture/styles.md"
    },
    {
      "text": "Styles in the editor",
      "url": "https://developer.wordpress.org/block-editor/#styles-in-the-editor"
    },
    {
      "text": "HTML and CSS",
      "url": "https://developer.wordpress.org/block-editor/#html-and-css"
    },
    {
      "text": "From UI controls to HTML markup",
      "url": "https://developer.wordpress.org/block-editor/#from-ui-controls-to-html-markup"
    },
    {
      "text": "Block Supports API",
      "url": "https://developer.wordpress.org/block-editor/#block-supports-api"
    },
    {
      "text": "Current limitations of the Block Supports API",
      "url": "https://developer.wordpress.org/block-editor/#current-limitations-of-the-block-supports-api"
    },
    {
      "text": "Global styles",
      "url": "https://developer.wordpress.org/block-editor/#global-styles"
    },
    {
      "text": "Gather data",
      "url": "https://developer.wordpress.org/block-editor/#gather-data"
    },
    {
      "text": "Consolidate data",
      "url": "https://developer.wordpress.org/block-editor/#consolidate-data"
    },
    {
      "text": "From data to styles",
      "url": "https://developer.wordpress.org/block-editor/#from-data-to-styles"
    },
    {
      "text": "Current limitations of the Global Styles API",
      "url": "https://developer.wordpress.org/block-editor/#current-limitations-of-the-global-styles-api"
    },
    {
      "text": "Layout styles",
      "url": "https://developer.wordpress.org/block-editor/#layout-styles"
    },
    {
      "text": "Base layout styles",
      "url": "https://developer.wordpress.org/block-editor/#base-layout-styles"
    },
    {
      "text": "Individual layout styles",
      "url": "https://developer.wordpress.org/block-editor/#individual-layout-styles"
    },
    {
      "text": "Available layout types",
      "url": "https://developer.wordpress.org/block-editor/#available-layout-types"
    },
    {
      "text": "Targeting layout or container blocks from themes",
      "url": "https://developer.wordpress.org/block-editor/#targeting-layout-or-container-blocks-from-themes"
    },
    {
      "text": "Opting out of generated layout styles",
      "url": "https://developer.wordpress.org/block-editor/#opting-out-of-generated-layout-styles"
    },
    {
      "text": "WordPress templates",
      "url": "https://developer.wordpress.org/themes/basics/template-files/"
    },
    {
      "text": "learn more",
      "url": "https://developer.wordpress.org/themes/block-themes/#differences-and-similarities-between-classic-themes-and-block-themes"
    },
    {
      "text": "blocks",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/core-blocks/"
    },
    {
      "text": "this note",
      "url": "https://make.wordpress.org/core/2021/07/01/block-styles-loading-enhancements-in-wordpress-5-8/"
    },
    {
      "text": "note",
      "url": "https://make.wordpress.org/core/2021/06/25/introducing-theme-json-in-wordpress-5-8/"
    },
    {
      "text": "reference",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/theme-json-reference/"
    },
    {
      "text": "block tutorial",
      "url": "https://developer.wordpress.org/block-editor/how-to-guides/block-tutorial/"
    },
    {
      "text": "block API",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/block-api/"
    },
    {
      "text": "component library",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/"
    },
    {
      "text": "attributes",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/block-api/block-attributes/"
    },
    {
      "text": "list of data",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/theme-json-reference/theme-json-living/#settings"
    },
    {
      "text": "useSetting",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-block-editor/#usesetting"
    },
    {
      "text": "edit, save",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/block-api/block-edit-save/"
    },
    {
      "text": "render_callback",
      "url": "https://developer.wordpress.org/block-editor/how-to-guides/block-tutorial/creating-dynamic-blocks/"
    },
    {
      "text": "Block Supports",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/block-api/block-supports/"
    },
    {
      "text": "block.json file",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/block-api/block-metadata/"
    },
    {
      "text": "the theme.json reference",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/theme-json-reference/"
    },
    {
      "text": "static",
      "url": "https://developer.wordpress.org/block-editor/how-to-guides/block-tutorial/block-supports-in-static-blocks/"
    },
    {
      "text": "dynamic",
      "url": "https://developer.wordpress.org/block-editor/how-to-guides/block-tutorial/block-supports-in-dynamic-blocks/"
    },
    {
      "text": "styles available",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/block-api/block-supports/"
    },
    {
      "text": "this issue",
      "url": "https://github.com/WordPress/gutenberg/issues/33255"
    },
    {
      "text": "in the tracking issue",
      "url": "https://github.com/WordPress/gutenberg/issues/38167"
    },
    {
      "text": "this issue",
      "url": "https://github.com/WordPress/gutenberg/issues/28913"
    },
    {
      "text": "added in this PR",
      "url": "https://github.com/WordPress/gutenberg/pull/36293"
    },
    {
      "text": "introduced in WordPress 5.8",
      "url": "https://make.wordpress.org/core/2021/06/25/introducing-theme-json-in-wordpress-5-8/"
    },
    {
      "text": "bundled with WordPress",
      "url": "https://github.com/WordPress/wordpress-develop/blob/trunk/src/wp-includes/theme.json"
    },
    {
      "text": "theme.json format",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/theme-json-reference/"
    },
    {
      "text": "the latest version",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/theme-json-reference/theme-json-living/"
    },
    {
      "text": "the main PHP class",
      "url": "https://github.com/WordPress/wordpress-develop/blob/trunk/src/wp-includes/class-wp-theme-json.php"
    },
    {
      "text": "the core theme.json file",
      "url": "https://github.com/WordPress/wordpress-develop/blob/trunk/src/wp-includes/theme.json"
    },
    {
      "text": "layout.php",
      "url": "https://github.com/WordPress/wordpress-develop/blob/trunk/src/wp-includes/block-supports/layout.php"
    },
    {
      "text": "unique number",
      "url": "https://developer.wordpress.org/reference/functions/wp_unique_id/"
    },
    {
      "text": "What is blockGap and how can I use it?",
      "url": "https://developer.wordpress.org/block-editor/how-to-guides/themes/theme-json/#what-is-blockgap-and-how-can-i-use-it"
    },
    {
      "text": "this issue",
      "url": "https://github.com/WordPress/gutenberg/issues/38719"
    },
    {
      "text": "the entry under Theme Support",
      "url": "https://developer.wordpress.org/block-editor/how-to-guides/themes/theme-support/#disabling-base-layout-styles"
    },
    {
      "text": "← Site Editing Templates",
      "url": "https://developer.wordpress.org/block-editor/explanations/architecture/full-site-editing-templates/"
    },
    {
      "text": "User Interface →",
      "url": "https://developer.wordpress.org/block-editor/explanations/user-interface/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Fexplanations%2Farchitecture%2Ffull-site-editing-templates%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/docs/explanations/architecture/full-site-editing-templates.md"
    },
    {
      "text": "Template and template part flows",
      "url": "https://developer.wordpress.org/block-editor/#template-and-template-part-flows"
    },
    {
      "text": "block theme documentation",
      "url": "https://developer.wordpress.org/block-editor/how-to-guides/themes/block-theme-overview/"
    },
    {
      "text": "Storage",
      "url": "https://developer.wordpress.org/block-editor/#storage"
    },
    {
      "text": "Synchronization",
      "url": "https://developer.wordpress.org/block-editor/#synchronization"
    },
    {
      "text": "Switching themes",
      "url": "https://developer.wordpress.org/block-editor/#switching-themes"
    },
    {
      "text": "← Automated Testing",
      "url": "https://developer.wordpress.org/block-editor/explanations/architecture/automated-testing/"
    },
    {
      "text": "Styles →",
      "url": "https://developer.wordpress.org/block-editor/explanations/architecture/styles/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fpackages%2Fpackages-hooks%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/packages/hooks/README.md"
    },
    {
      "text": "The global instance",
      "url": "https://developer.wordpress.org/block-editor/#the-global-instance"
    },
    {
      "text": "API Usage",
      "url": "https://developer.wordpress.org/block-editor/#api-usage"
    },
    {
      "text": "Events on action/filter add or remove",
      "url": "https://developer.wordpress.org/block-editor/#events-on-action-filter-add-or-remove"
    },
    {
      "text": "The all hook",
      "url": "https://developer.wordpress.org/block-editor/#the-all-hook"
    },
    {
      "text": "← @wordpress/format-library",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-format-library/"
    },
    {
      "text": "@wordpress/html-entities →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-html-entities/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fpackages%2Fpackages-wordcount%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/packages/wordcount/README.md"
    },
    {
      "text": "count",
      "url": "https://developer.wordpress.org/block-editor/#count"
    },
    {
      "text": "← @wordpress/widgets",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-widgets/"
    },
    {
      "text": "Data Module Reference →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/data/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fpackages%2Fpackages-env%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/packages/env/README.md"
    },
    {
      "text": "Quick (tl;dr) instructions",
      "url": "https://developer.wordpress.org/block-editor/#quick-tldr-instructions"
    },
    {
      "text": "Accessing the MySQL Database",
      "url": "https://github.com/WordPress/gutenberg/blob/trunk/docs/contributors/code/getting-started-with-code-contribution.md#accessing-the-mysql-database"
    },
    {
      "text": "Windows",
      "url": "https://docs.docker.com/desktop/install/windows-install/"
    },
    {
      "text": "macOS",
      "url": "https://docs.docker.com/docker-for-mac/install/"
    },
    {
      "text": "Linux",
      "url": "https://docs.docker.com/desktop/install/linux-install/"
    },
    {
      "text": "Installation as a global package",
      "url": "https://developer.wordpress.org/block-editor/#installation-as-a-global-package"
    },
    {
      "text": "Installation as a local package",
      "url": "https://developer.wordpress.org/block-editor/#installation-as-a-local-package"
    },
    {
      "text": "npx",
      "url": "https://www.npmjs.com/package/npx"
    },
    {
      "text": "Starting the environment",
      "url": "https://developer.wordpress.org/block-editor/#starting-the-environment"
    },
    {
      "text": "Stopping the environment",
      "url": "https://developer.wordpress.org/block-editor/#stopping-the-environment"
    },
    {
      "text": "Troubleshooting common problems",
      "url": "https://developer.wordpress.org/block-editor/#troubleshooting-common-problems"
    },
    {
      "text": "1. Check that wp-env is running",
      "url": "https://developer.wordpress.org/block-editor/#1-check-that-wp-env-is-running"
    },
    {
      "text": "2. Check the port number",
      "url": "https://developer.wordpress.org/block-editor/#2-check-the-port-number"
    },
    {
      "text": "3. Restart wp-env with updates",
      "url": "https://developer.wordpress.org/block-editor/#3-restart-wp-env-with-updates"
    },
    {
      "text": "4. Restart Docker",
      "url": "https://developer.wordpress.org/block-editor/#4-restart-docker"
    },
    {
      "text": "5. Reset the database",
      "url": "https://developer.wordpress.org/block-editor/#5-reset-the-database"
    },
    {
      "text": "6. Destroy everything and start again 🔥",
      "url": "https://developer.wordpress.org/block-editor/#6-destroy-everything-and-start-again-%f0%9f%94%a5"
    },
    {
      "text": "7. Debug mode and inspecting the generated dockerfile.",
      "url": "https://developer.wordpress.org/block-editor/#7-debug-mode-and-inspecting-the-generated-dockerfile"
    },
    {
      "text": "Using included WordPress PHPUnit test files",
      "url": "https://developer.wordpress.org/block-editor/#using-included-wordpress-phpunit-test-files"
    },
    {
      "text": "WordPress’ PHPUnit test files",
      "url": "https://develop.svn.wordpress.org/trunk/tests/phpunit/"
    },
    {
      "text": "Customizing the wp-tests-config.php file",
      "url": "https://developer.wordpress.org/block-editor/#customizing-the-wp-tests-config-php-file"
    },
    {
      "text": "Using Xdebug",
      "url": "https://developer.wordpress.org/block-editor/#using-xdebug"
    },
    {
      "text": "Xdebug documentation",
      "url": "https://xdebug.org/docs/all_settings#mode"
    },
    {
      "text": "Xdebug IDE support",
      "url": "https://developer.wordpress.org/block-editor/#xdebug-ide-support"
    },
    {
      "text": "learn more about here",
      "url": "https://code.visualstudio.com/docs/editor/debugging#_launchjson-attributes"
    },
    {
      "text": "this PHP Debug extension",
      "url": "https://marketplace.visualstudio.com/items?itemName=felixfbecker.php-debug"
    },
    {
      "text": "global gitignore file",
      "url": "https://docs.github.com/en/get-started/getting-started-with-git/ignoring-files#configuring-ignored-files-for-all-repositories-on-your-computer"
    },
    {
      "text": "Command reference",
      "url": "https://developer.wordpress.org/block-editor/#command-reference"
    },
    {
      "text": "for compatibility with Snap Packages",
      "url": "https://github.com/WordPress/gutenberg/issues/20180#issuecomment-587046325"
    },
    {
      "text": "wp-env start",
      "url": "https://developer.wordpress.org/block-editor/#wp-env-start"
    },
    {
      "text": "wp-env stop",
      "url": "https://developer.wordpress.org/block-editor/#wp-env-stop"
    },
    {
      "text": "wp-env clean [environment]",
      "url": "https://developer.wordpress.org/block-editor/#wp-env-clean-environment"
    },
    {
      "text": "wp-env run [container] [command]",
      "url": "https://developer.wordpress.org/block-editor/#wp-env-run-container-command"
    },
    {
      "text": "Displaying the users on the development instance:",
      "url": "https://developer.wordpress.org/block-editor/#displaying-the-users-on-the-development-instance"
    },
    {
      "text": "Creating a post on the tests instance:",
      "url": "https://developer.wordpress.org/block-editor/#creating-a-post-on-the-tests-instance"
    },
    {
      "text": "Opening the WordPress shell on the tests instance and running PHP commands:",
      "url": "https://developer.wordpress.org/block-editor/#opening-the-wordpress-shell-on-the-tests-instance-and-running-php-commands"
    },
    {
      "text": "Installing a plugin or theme on the development instance",
      "url": "https://developer.wordpress.org/block-editor/#installing-a-plugin-or-theme-on-the-development-instance"
    },
    {
      "text": "wp-env destroy",
      "url": "https://developer.wordpress.org/block-editor/#wp-env-destroy"
    },
    {
      "text": "wp-env logs [environment]",
      "url": "https://developer.wordpress.org/block-editor/#wp-env-logs-environment"
    },
    {
      "text": "wp-env install-path",
      "url": "https://developer.wordpress.org/block-editor/#wp-env-install-path"
    },
    {
      "text": ".wp-env.json",
      "url": "https://developer.wordpress.org/block-editor/#wp-env-json"
    },
    {
      "text": ".wp-env.override.json",
      "url": "https://developer.wordpress.org/block-editor/#wp-env-override-json"
    },
    {
      "text": "Default wp-config values.",
      "url": "https://developer.wordpress.org/block-editor/#default-wp-config-values"
    },
    {
      "text": "Latest stable WordPress + current directory as a plugin",
      "url": "https://developer.wordpress.org/block-editor/#latest-stable-wordpress-current-directory-as-a-plugin"
    },
    {
      "text": "Latest development WordPress + current directory as a plugin",
      "url": "https://developer.wordpress.org/block-editor/#latest-development-wordpress-current-directory-as-a-plugin"
    },
    {
      "text": "Local wordpress-develop + current directory as a plugin",
      "url": "https://developer.wordpress.org/block-editor/#local-wordpress-develop-current-directory-as-a-plugin"
    },
    {
      "text": "A complete testing environment",
      "url": "https://developer.wordpress.org/block-editor/#a-complete-testing-environment"
    },
    {
      "text": "Add mu-plugins and other mapped directories",
      "url": "https://developer.wordpress.org/block-editor/#add-mu-plugins-and-other-mapped-directories"
    },
    {
      "text": "Avoid activating plugins or themes on the instance",
      "url": "https://developer.wordpress.org/block-editor/#avoid-activating-plugins-or-themes-on-the-instance"
    },
    {
      "text": "Map a plugin only in the tests environment",
      "url": "https://developer.wordpress.org/block-editor/#map-a-plugin-only-in-the-tests-environment"
    },
    {
      "text": "Custom Port Numbers",
      "url": "https://developer.wordpress.org/block-editor/#custom-port-numbers"
    },
    {
      "text": "Specific PHP Version",
      "url": "https://developer.wordpress.org/block-editor/#specific-php-version"
    },
    {
      "text": "← @wordpress/experiments",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-experiments/"
    },
    {
      "text": "@wordpress/escape-html →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-escape-html/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fcomponents%2Fanimate%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/packages/components/src/animate/README.md"
    },
    {
      "text": "Available Animation Types",
      "url": "https://developer.wordpress.org/block-editor/#available-animation-types"
    },
    {
      "text": "appear",
      "url": "https://developer.wordpress.org/block-editor/#appear"
    },
    {
      "text": "Options",
      "url": "https://developer.wordpress.org/block-editor/#options"
    },
    {
      "text": "loading",
      "url": "https://developer.wordpress.org/block-editor/#loading"
    },
    {
      "text": "slide-in",
      "url": "https://developer.wordpress.org/block-editor/#slide-in"
    },
    {
      "text": "Options",
      "url": "https://developer.wordpress.org/block-editor/#options-2"
    },
    {
      "text": "← AnglePickerControl",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/angle-picker-control/"
    },
    {
      "text": "Autocomplete →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/autocomplete/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fpackages%2Fpackages-prettier-config%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/packages/prettier-config/README.md"
    },
    {
      "text": "Prettier",
      "url": "https://prettier.io"
    },
    {
      "text": "← @wordpress/preferences",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-preferences/"
    },
    {
      "text": "@wordpress/primitives →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-primitives/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Fgetting-started%2Fcreate-block%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/docs/getting-started/create-block/README.md"
    },
    {
      "text": "setting up your development environment documentation",
      "url": "https://developer.wordpress.org/block-editor/getting-started/devenv/"
    },
    {
      "text": "Quick Start",
      "url": "https://developer.wordpress.org/block-editor/#quick-start"
    },
    {
      "text": "create-block package documentation",
      "url": "https://www.npmjs.com/package/@wordpress/create-block"
    },
    {
      "text": "Node Development Tools",
      "url": "https://developer.wordpress.org/block-editor/getting-started/devenv/#node-development-tools"
    },
    {
      "text": "npx command",
      "url": "https://docs.npmjs.com/cli/v8/commands/npx"
    },
    {
      "text": "Anatomy of a Gutenberg Block",
      "url": "https://developer.wordpress.org/block-editor/getting-started/create-block/block-anatomy/"
    },
    {
      "text": "← Development Environment",
      "url": "https://developer.wordpress.org/block-editor/getting-started/devenv/"
    },
    {
      "text": "WordPress Plugin →",
      "url": "https://developer.wordpress.org/block-editor/getting-started/create-block/wp-plugin/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Fhow-to-guides%2Fblock-tutorial%2Fnested-blocks-inner-blocks%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/docs/how-to-guides/block-tutorial/nested-blocks-inner-blocks.md"
    },
    {
      "text": "InnerBlocks",
      "url": "https://github.com/WordPress/gutenberg/tree/HEAD/packages/block-editor/src/components/inner-blocks/README.md"
    },
    {
      "text": "Allowed Blocks",
      "url": "https://developer.wordpress.org/block-editor/#allowed-blocks"
    },
    {
      "text": "Orientation",
      "url": "https://developer.wordpress.org/block-editor/#orientation"
    },
    {
      "text": "Template",
      "url": "https://developer.wordpress.org/block-editor/#template"
    },
    {
      "text": "templateLock documentation",
      "url": "https://github.com/WordPress/gutenberg/tree/HEAD/packages/block-editor/src/components/inner-blocks/README.md#templatelock"
    },
    {
      "text": "Post Template",
      "url": "https://developer.wordpress.org/block-editor/#post-template"
    },
    {
      "text": "post template",
      "url": "https://developer.wordpress.org/block-editor/developers/block-api/block-templates/"
    },
    {
      "text": "Child InnerBlocks: Parent and Ancestors",
      "url": "https://developer.wordpress.org/block-editor/#child-innerblocks-parent-and-ancestors"
    },
    {
      "text": "Column code for reference",
      "url": "https://github.com/WordPress/gutenberg/tree/HEAD/packages/block-library/src/column"
    },
    {
      "text": "Comment Author Name code for reference",
      "url": "https://github.com/WordPress/gutenberg/tree/HEAD/packages/block-library/src/comment-author-name"
    },
    {
      "text": "Using a react hook",
      "url": "https://developer.wordpress.org/block-editor/#using-a-react-hook"
    },
    {
      "text": "← Generate Blocks with WP-CLI",
      "url": "https://developer.wordpress.org/block-editor/how-to-guides/block-tutorial/generate-blocks-with-wp-cli/"
    },
    {
      "text": "Extending the Query Loop block →",
      "url": "https://developer.wordpress.org/block-editor/how-to-guides/block-tutorial/extending-the-query-loop-block/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guide%2Fpackages%2Fpackages-block-editor%2Fsrc%2Fstore%2Factions.js%2F&locale=en_US"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fpackages%2Fpackages-private-apis%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/packages/private-apis/README.md"
    },
    {
      "text": "publicly exposing them to WordPress extenders",
      "url": "https://make.wordpress.org/core/2022/08/10/proposal-stop-merging-experimental-apis-from-gutenberg-to-wordpress-core/#respond"
    },
    {
      "text": "Shipping experimental APIs",
      "url": "https://developer.wordpress.org/block-editor/#shipping-experimental-apis"
    },
    {
      "text": "Experimental and Unstable APIs chapter of Coding Guidelines",
      "url": "https://developer.wordpress.org/block-editor/contributors/code/coding-guidelines/"
    },
    {
      "text": "Technical limitations",
      "url": "https://developer.wordpress.org/block-editor/#technical-limitations"
    },
    {
      "text": "← @wordpress/priority-queue",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-priority-queue/"
    },
    {
      "text": "@wordpress/project-management-automation →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-project-management-automation/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fpackages%2Fpackages-scripts%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/packages/scripts/README.md"
    },
    {
      "text": "react-scripts",
      "url": "https://www.npmjs.com/package/react-scripts"
    },
    {
      "text": "kcd-scripts",
      "url": "https://www.npmjs.com/package/kcd-scripts"
    },
    {
      "text": "JavaScript Build Setup tutorial",
      "url": "https://github.com/WordPress/gutenberg/tree/HEAD/docs/how-to-guides/javascript/js-build-setup.md"
    },
    {
      "text": "build",
      "url": "https://developer.wordpress.org/block-editor/#build"
    },
    {
      "text": "start",
      "url": "https://developer.wordpress.org/block-editor/#start"
    },
    {
      "text": "Automatic block.json detection and the source code directory",
      "url": "https://developer.wordpress.org/block-editor/#automatic-block-json-detection-and-the-source-code-directory"
    },
    {
      "text": "Updating to New Release",
      "url": "https://developer.wordpress.org/block-editor/#updating-to-new-release"
    },
    {
      "text": "changelog",
      "url": "https://github.com/WordPress/gutenberg/blob/HEAD/packages/scripts/CHANGELOG.md"
    },
    {
      "text": "Available Scripts",
      "url": "https://developer.wordpress.org/block-editor/#available-scripts"
    },
    {
      "text": "Advanced information",
      "url": "https://developer.wordpress.org/block-editor/#advanced-information"
    },
    {
      "text": "Advanced Usage",
      "url": "https://developer.wordpress.org/block-editor/#advanced-usage"
    },
    {
      "text": "check-engines",
      "url": "https://developer.wordpress.org/block-editor/#check-engines"
    },
    {
      "text": "semantic version",
      "url": "https://semver.org/"
    },
    {
      "text": "Advanced information",
      "url": "https://developer.wordpress.org/block-editor/#advanced-information-2"
    },
    {
      "text": "check-node-version",
      "url": "https://www.npmjs.com/package/check-node-version"
    },
    {
      "text": "installation",
      "url": "https://developer.wordpress.org/block-editor/#installation"
    },
    {
      "text": "check-node-version docs",
      "url": "https://www.npmjs.com/package/check-node-version"
    },
    {
      "text": "check-licenses",
      "url": "https://developer.wordpress.org/block-editor/#check-licenses"
    },
    {
      "text": "GPLv2 license compatibility",
      "url": "https://www.gnu.org/licenses/license-list.en.html"
    },
    {
      "text": "format",
      "url": "https://developer.wordpress.org/block-editor/#format"
    },
    {
      "text": "lint-js",
      "url": "https://developer.wordpress.org/block-editor/#lint-js"
    },
    {
      "text": "more examples",
      "url": "https://eslint.org/docs/user-guide/command-line-interface"
    },
    {
      "text": "Advanced information",
      "url": "https://developer.wordpress.org/block-editor/#advanced-information-3"
    },
    {
      "text": "eslint",
      "url": "https://eslint.org/"
    },
    {
      "text": "@wordpress/eslint-plugin",
      "url": "https://www.npmjs.com/package/@wordpress/eslint-plugin"
    },
    {
      "text": "eslint docs",
      "url": "https://eslint.org/docs/rules/"
    },
    {
      "text": "lint-pkg-json",
      "url": "https://developer.wordpress.org/block-editor/#lint-pkg-json"
    },
    {
      "text": "more examples",
      "url": "https://github.com/tclindner/npm-package-json-lint/blob/HEAD/README.md#examples"
    },
    {
      "text": "Advanced information",
      "url": "https://developer.wordpress.org/block-editor/#advanced-information-4"
    },
    {
      "text": "npm-package-json-lint",
      "url": "https://www.npmjs.com/package/npm-package-json-lint"
    },
    {
      "text": "@wordpress/npm-package-json-lint-config",
      "url": "https://www.npmjs.com/package/@wordpress/npm-package-json-lint-config"
    },
    {
      "text": "npm-package-json-lint wiki",
      "url": "https://github.com/tclindner/npm-package-json-lint/wiki"
    },
    {
      "text": "lint-md-docs",
      "url": "https://developer.wordpress.org/block-editor/#lint-md-docs"
    },
    {
      "text": "Advanced information",
      "url": "https://developer.wordpress.org/block-editor/#advanced-information-5"
    },
    {
      "text": "markdownlint",
      "url": "https://github.com/DavidAnson/markdownlint"
    },
    {
      "text": ".markdownlint.json",
      "url": "https://github.com/WordPress/gutenberg/blob/HEAD/packages/scripts/config/.markdownlint.json"
    },
    {
      "text": "markdownlint-cli",
      "url": "https://github.com/igorshubovych/markdownlint-cli/"
    },
    {
      "text": "lint-style",
      "url": "https://developer.wordpress.org/block-editor/#lint-style"
    },
    {
      "text": "globby",
      "url": "https://github.com/sindresorhus/globby"
    },
    {
      "text": "more examples",
      "url": "https://github.com/stylelint/stylelint/blob/HEAD/docs/user-guide/cli.md#examples"
    },
    {
      "text": "Advanced information",
      "url": "https://developer.wordpress.org/block-editor/#advanced-information-6"
    },
    {
      "text": "stylelint",
      "url": "https://github.com/stylelint/stylelint"
    },
    {
      "text": "@wordpress/stylelint-config",
      "url": "https://www.npmjs.com/package/@wordpress/stylelint-config"
    },
    {
      "text": "WordPress CSS Coding Standards",
      "url": "https://developer.wordpress.org/coding-standards/wordpress-coding-standards/css/"
    },
    {
      "text": "stylelint user guide",
      "url": "https://stylelint.io/user-guide/configure"
    },
    {
      "text": "packages-update",
      "url": "https://developer.wordpress.org/block-editor/#packages-update"
    },
    {
      "text": "@wordpress/dependency-extraction-webpack-plugin",
      "url": "https://www.npmjs.com/package/@wordpress/dependency-extraction-webpack-plugin"
    },
    {
      "text": "Advanced information",
      "url": "https://developer.wordpress.org/block-editor/#advanced-information-7"
    },
    {
      "text": "plugin-zip",
      "url": "https://developer.wordpress.org/block-editor/#plugin-zip"
    },
    {
      "text": "Plugin Handbook best practices",
      "url": "https://developer.wordpress.org/plugins/plugin-basics/best-practices/#file-organization"
    },
    {
      "text": "Advanced information",
      "url": "https://developer.wordpress.org/block-editor/#advanced-information-8"
    },
    {
      "text": "npm-packlist",
      "url": "https://www.npmjs.com/package/npm-packlist"
    },
    {
      "text": "Gutenberg",
      "url": "https://wordpress.org/plugins/gutenberg/"
    },
    {
      "text": "Advanced information",
      "url": "https://developer.wordpress.org/block-editor/#advanced-information-9"
    },
    {
      "text": "test-e2e",
      "url": "https://developer.wordpress.org/block-editor/#test-e2e"
    },
    {
      "text": "Jest API",
      "url": "https://jestjs.io/docs/en/api"
    },
    {
      "text": "Puppeteer API",
      "url": "https://github.com/GoogleChrome/puppeteer/blob/HEAD/docs/api.md"
    },
    {
      "text": "Puppeteer",
      "url": "https://pptr.dev/"
    },
    {
      "text": "DevTools Protocol",
      "url": "https://chromedevtools.github.io/devtools-protocol/"
    },
    {
      "text": "headless",
      "url": "https://developers.google.com/web/updates/2017/04/headless-chrome"
    },
    {
      "text": "debugging tests",
      "url": "https://developer.wordpress.org/block-editor/#debugging-e2e-tests"
    },
    {
      "text": "jest-puppeteer",
      "url": "https://github.com/smooth-code/jest-puppeteer#jest-puppeteerconfigjs"
    },
    {
      "text": "–runInBand",
      "url": "https://jestjs.io/docs/en/cli#runinband"
    },
    {
      "text": "Failed Test Artifacts",
      "url": "https://developer.wordpress.org/block-editor/#failed-test-artifacts"
    },
    {
      "text": "Advanced information",
      "url": "https://developer.wordpress.org/block-editor/#advanced-information-10"
    },
    {
      "text": "CLI options",
      "url": "https://jestjs.io/docs/en/cli.html"
    },
    {
      "text": "test-unit-js",
      "url": "https://developer.wordpress.org/block-editor/#test-unit-js"
    },
    {
      "text": "debug mode",
      "url": "https://developer.wordpress.org/block-editor/#debugging-tests"
    },
    {
      "text": "Advanced information",
      "url": "https://developer.wordpress.org/block-editor/#advanced-information-11"
    },
    {
      "text": "@wordpress/jest-preset-default",
      "url": "https://www.npmjs.com/package/@wordpress/jest-preset-default"
    },
    {
      "text": "Jest documentation",
      "url": "https://jestjs.io/docs/en/configuration"
    },
    {
      "text": "Passing Node.js options",
      "url": "https://developer.wordpress.org/block-editor/#passing-node-js-options"
    },
    {
      "text": "Node.js CLI options",
      "url": "https://nodejs.org/api/cli.html"
    },
    {
      "text": "Debugging tests",
      "url": "https://developer.wordpress.org/block-editor/#debugging-tests"
    },
    {
      "text": "inspector client",
      "url": "https://nodejs.org/en/docs/guides/debugging-getting-started/#inspector-clients"
    },
    {
      "text": "Chrome DevTools Protocol",
      "url": "https://chromedevtools.github.io/devtools-protocol/"
    },
    {
      "text": "Debugging in Google Chrome",
      "url": "https://developer.wordpress.org/block-editor/#debugging-in-google-chrome"
    },
    {
      "text": "Debugging in Visual Studio Code",
      "url": "https://developer.wordpress.org/block-editor/#debugging-in-visual-studio-code"
    },
    {
      "text": "version 1.23",
      "url": "https://code.visualstudio.com/blogs/2018/07/12/introducing-logpoints-and-auto-attach#_npm-scripts-and-debugging"
    },
    {
      "text": "Debugging in Visual Studio Code",
      "url": "https://code.visualstudio.com/Docs/editor/debugging"
    },
    {
      "text": "Debugging e2e tests",
      "url": "https://developer.wordpress.org/block-editor/#debugging-e2e-tests"
    },
    {
      "text": "Puppeteer debugging docs",
      "url": "https://developers.google.com/web/tools/puppeteer/debugging"
    },
    {
      "text": "Working with build scripts",
      "url": "https://developer.wordpress.org/block-editor/#working-with-build-scripts"
    },
    {
      "text": "Default webpack config",
      "url": "https://developer.wordpress.org/block-editor/#default-webpack-config"
    },
    {
      "text": "Entry",
      "url": "https://webpack.js.org/configuration/entry-context/#entry"
    },
    {
      "text": "Output",
      "url": "https://webpack.js.org/configuration/output"
    },
    {
      "text": "Loaders",
      "url": "https://webpack.js.org/loaders/"
    },
    {
      "text": "babel-loader",
      "url": "https://webpack.js.org/loaders/babel-loader/"
    },
    {
      "text": "@svgr/webpack",
      "url": "https://www.npmjs.com/package/@svgr/webpack"
    },
    {
      "text": "url-loader",
      "url": "https://webpack.js.org/loaders/url-loader/"
    },
    {
      "text": "css-loader",
      "url": "https://webpack.js.org/loaders/css-loader/"
    },
    {
      "text": "postcss-loader",
      "url": "https://webpack.js.org/loaders/postcss-loader/"
    },
    {
      "text": "sass-loader",
      "url": "https://webpack.js.org/loaders/sass-loader/"
    },
    {
      "text": "Plugins",
      "url": "https://webpack.js.org/configuration/plugins"
    },
    {
      "text": "CopyWebpackPlugin",
      "url": "https://webpack.js.org/plugins/copy-webpack-plugin/"
    },
    {
      "text": "MiniCssExtractPlugin",
      "url": "https://webpack.js.org/plugins/mini-css-extract-plugin/"
    },
    {
      "text": "@wordpress/dependency-extraction-webpack-plugin",
      "url": "https://github.com/WordPress/gutenberg/tree/HEAD/packages/dependency-extraction-webpack-plugin/README.md"
    },
    {
      "text": "Using CSS",
      "url": "https://developer.wordpress.org/block-editor/#using-css"
    },
    {
      "text": "Using fonts and images",
      "url": "https://developer.wordpress.org/block-editor/#using-fonts-and-images"
    },
    {
      "text": "Using SVG",
      "url": "https://developer.wordpress.org/block-editor/#using-svg"
    },
    {
      "text": "Provide your own webpack config",
      "url": "https://developer.wordpress.org/block-editor/#provide-your-own-webpack-config"
    },
    {
      "text": "spread operator",
      "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax"
    },
    {
      "text": "toml",
      "url": "https://www.npmjs.com/package/toml"
    },
    {
      "text": "package’s CHANGELOG",
      "url": "https://github.com/WordPress/gutenberg/blob/HEAD/packages/scripts/CHANGELOG.md"
    },
    {
      "text": "← @wordpress/rich-text",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-rich-text/"
    },
    {
      "text": "@wordpress/server-side-render →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-server-side-render/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fpackages%2Fpackages-viewport%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/packages/viewport/README.md"
    },
    {
      "text": "data module",
      "url": "https://github.com/WordPress/gutenberg/tree/HEAD/packages/data/README.md"
    },
    {
      "text": "Data Module",
      "url": "https://developer.wordpress.org/block-editor/#data-module"
    },
    {
      "text": "Higher-Order Components",
      "url": "https://developer.wordpress.org/block-editor/#higher-order-components"
    },
    {
      "text": "ifViewportMatches",
      "url": "https://developer.wordpress.org/block-editor/#ifviewportmatches"
    },
    {
      "text": "withViewportMatch",
      "url": "https://developer.wordpress.org/block-editor/#withviewportmatch"
    },
    {
      "text": "← @wordpress/url",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-url/"
    },
    {
      "text": "@wordpress/warning →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-warning/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fpackages%2Fpackages-url%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/packages/url/README.md"
    },
    {
      "text": "addQueryArgs",
      "url": "https://developer.wordpress.org/block-editor/#addqueryargs"
    },
    {
      "text": "buildQueryString",
      "url": "https://developer.wordpress.org/block-editor/#buildquerystring"
    },
    {
      "text": "cleanForSlug",
      "url": "https://developer.wordpress.org/block-editor/#cleanforslug"
    },
    {
      "text": "filterURLForDisplay",
      "url": "https://developer.wordpress.org/block-editor/#filterurlfordisplay"
    },
    {
      "text": "getAuthority",
      "url": "https://developer.wordpress.org/block-editor/#getauthority"
    },
    {
      "text": "getFilename",
      "url": "https://developer.wordpress.org/block-editor/#getfilename"
    },
    {
      "text": "getFragment",
      "url": "https://developer.wordpress.org/block-editor/#getfragment"
    },
    {
      "text": "getPath",
      "url": "https://developer.wordpress.org/block-editor/#getpath"
    },
    {
      "text": "getPathAndQueryString",
      "url": "https://developer.wordpress.org/block-editor/#getpathandquerystring"
    },
    {
      "text": "getProtocol",
      "url": "https://developer.wordpress.org/block-editor/#getprotocol"
    },
    {
      "text": "getQueryArg",
      "url": "https://developer.wordpress.org/block-editor/#getqueryarg"
    },
    {
      "text": "getQueryArgs",
      "url": "https://developer.wordpress.org/block-editor/#getqueryargs"
    },
    {
      "text": "getQueryString",
      "url": "https://developer.wordpress.org/block-editor/#getquerystring"
    },
    {
      "text": "hasQueryArg",
      "url": "https://developer.wordpress.org/block-editor/#hasqueryarg"
    },
    {
      "text": "isEmail",
      "url": "https://developer.wordpress.org/block-editor/#isemail"
    },
    {
      "text": "isURL",
      "url": "https://developer.wordpress.org/block-editor/#isurl"
    },
    {
      "text": "https://url.spec.whatwg.org/",
      "url": "https://url.spec.whatwg.org/"
    },
    {
      "text": "https://url.spec.whatwg.org/#valid-url-string",
      "url": "https://url.spec.whatwg.org/#valid-url-string"
    },
    {
      "text": "isValidAuthority",
      "url": "https://developer.wordpress.org/block-editor/#isvalidauthority"
    },
    {
      "text": "isValidFragment",
      "url": "https://developer.wordpress.org/block-editor/#isvalidfragment"
    },
    {
      "text": "isValidPath",
      "url": "https://developer.wordpress.org/block-editor/#isvalidpath"
    },
    {
      "text": "isValidProtocol",
      "url": "https://developer.wordpress.org/block-editor/#isvalidprotocol"
    },
    {
      "text": "isValidQueryString",
      "url": "https://developer.wordpress.org/block-editor/#isvalidquerystring"
    },
    {
      "text": "normalizePath",
      "url": "https://developer.wordpress.org/block-editor/#normalizepath"
    },
    {
      "text": "prependHTTP",
      "url": "https://developer.wordpress.org/block-editor/#prependhttp"
    },
    {
      "text": "prependHTTPS",
      "url": "https://developer.wordpress.org/block-editor/#prependhttps"
    },
    {
      "text": "removeQueryArgs",
      "url": "https://developer.wordpress.org/block-editor/#removequeryargs"
    },
    {
      "text": "safeDecodeURI",
      "url": "https://developer.wordpress.org/block-editor/#safedecodeuri"
    },
    {
      "text": "safeDecodeURIComponent",
      "url": "https://developer.wordpress.org/block-editor/#safedecodeuricomponent"
    },
    {
      "text": "← @wordpress/token-list",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-token-list/"
    },
    {
      "text": "@wordpress/viewport →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-viewport/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fpackages%2Fpackages-token-list%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/packages/token-list/README.md"
    },
    {
      "text": "methods of DOMTokenList",
      "url": "https://developer.mozilla.org/en-US/docs/Web/API/DOMTokenList#Methods"
    },
    {
      "text": "specification",
      "url": "https://dom.spec.whatwg.org/#domtokenlist"
    },
    {
      "text": "throwing an error",
      "url": "https://dom.spec.whatwg.org/#dom-domtokenlist-add"
    },
    {
      "text": "Browser Support",
      "url": "https://developer.wordpress.org/block-editor/#browser-support"
    },
    {
      "text": "← @wordpress/stylelint-config",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-stylelint-config/"
    },
    {
      "text": "@wordpress/url →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-url/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fpackages%2Fpackages-shortcode%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/packages/shortcode/README.md"
    },
    {
      "text": "attrs",
      "url": "https://developer.wordpress.org/block-editor/#attrs"
    },
    {
      "text": "fromMatch",
      "url": "https://developer.wordpress.org/block-editor/#frommatch"
    },
    {
      "text": "next",
      "url": "https://developer.wordpress.org/block-editor/#next"
    },
    {
      "text": "regexp",
      "url": "https://developer.wordpress.org/block-editor/#regexp"
    },
    {
      "text": "replace",
      "url": "https://developer.wordpress.org/block-editor/#replace"
    },
    {
      "text": "string",
      "url": "https://developer.wordpress.org/block-editor/#string"
    },
    {
      "text": "← @wordpress/server-side-render",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-server-side-render/"
    },
    {
      "text": "@wordpress/style-engine →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-style-engine/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Fexplanations%2Farchitecture%2Fkey-concepts%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/docs/explanations/architecture/key-concepts.md"
    },
    {
      "text": "Composability",
      "url": "https://developer.wordpress.org/block-editor/#composability"
    },
    {
      "text": "Data & Attributes",
      "url": "https://developer.wordpress.org/block-editor/#data-attributes"
    },
    {
      "text": "Data format and data flow",
      "url": "https://developer.wordpress.org/block-editor/explanations/architecture/data-flow/"
    },
    {
      "text": "Block Transforms",
      "url": "https://developer.wordpress.org/block-editor/#block-transforms"
    },
    {
      "text": "Block Variations",
      "url": "https://developer.wordpress.org/block-editor/#block-variations"
    },
    {
      "text": "the API documentation",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/block-api/block-registration/#variations-optional"
    },
    {
      "text": "Block API",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/block-api/"
    },
    {
      "text": "Tutorial: Building A Custom Block",
      "url": "https://developer.wordpress.org/block-editor/getting-started/create-block/"
    },
    {
      "text": "Reusable Blocks",
      "url": "https://developer.wordpress.org/block-editor/#reusable-blocks"
    },
    {
      "text": "block pattern",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/block-api/block-patterns/"
    },
    {
      "text": "template",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/block-api/block-templates/"
    },
    {
      "text": "Site editing templates",
      "url": "https://developer.wordpress.org/block-editor/explanations/architecture/full-site-editing-templates/"
    },
    {
      "text": "a theme.json file",
      "url": "https://developer.wordpress.org/block-editor/how-to-guides/themes/theme-json/"
    },
    {
      "text": "Global Styles",
      "url": "https://developer.wordpress.org/block-editor/explanations/architecture/styles/#global-styles"
    },
    {
      "text": "Data Flow and Data Format →",
      "url": "https://developer.wordpress.org/block-editor/explanations/architecture/data-flow/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fpackages%2Fpackages-rich-text%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/packages/rich-text/README.md"
    },
    {
      "text": "The RichTextValue object",
      "url": "https://developer.wordpress.org/block-editor/#the-richtextvalue-object"
    },
    {
      "text": "formats",
      "url": "https://developer.wordpress.org/block-editor/how-to-guides/format-api/"
    },
    {
      "text": "Selections",
      "url": "https://developer.wordpress.org/block-editor/#selections"
    },
    {
      "text": "Collapsed selections",
      "url": "https://developer.wordpress.org/block-editor/#collapsed-selections"
    },
    {
      "text": "applyFormat",
      "url": "https://developer.wordpress.org/block-editor/#applyformat"
    },
    {
      "text": "concat",
      "url": "https://developer.wordpress.org/block-editor/#concat"
    },
    {
      "text": "create",
      "url": "https://developer.wordpress.org/block-editor/#create"
    },
    {
      "text": "getActiveFormat",
      "url": "https://developer.wordpress.org/block-editor/#getactiveformat"
    },
    {
      "text": "getActiveFormats",
      "url": "https://developer.wordpress.org/block-editor/#getactiveformats"
    },
    {
      "text": "getActiveObject",
      "url": "https://developer.wordpress.org/block-editor/#getactiveobject"
    },
    {
      "text": "getTextContent",
      "url": "https://developer.wordpress.org/block-editor/#gettextcontent"
    },
    {
      "text": "insert",
      "url": "https://developer.wordpress.org/block-editor/#insert"
    },
    {
      "text": "insertObject",
      "url": "https://developer.wordpress.org/block-editor/#insertobject"
    },
    {
      "text": "isCollapsed",
      "url": "https://developer.wordpress.org/block-editor/#iscollapsed"
    },
    {
      "text": "isEmpty",
      "url": "https://developer.wordpress.org/block-editor/#isempty"
    },
    {
      "text": "join",
      "url": "https://developer.wordpress.org/block-editor/#join"
    },
    {
      "text": "registerFormatType",
      "url": "https://developer.wordpress.org/block-editor/#registerformattype"
    },
    {
      "text": "remove",
      "url": "https://developer.wordpress.org/block-editor/#remove"
    },
    {
      "text": "removeFormat",
      "url": "https://developer.wordpress.org/block-editor/#removeformat"
    },
    {
      "text": "slice",
      "url": "https://developer.wordpress.org/block-editor/#slice"
    },
    {
      "text": "split",
      "url": "https://developer.wordpress.org/block-editor/#split"
    },
    {
      "text": "toggleFormat",
      "url": "https://developer.wordpress.org/block-editor/#toggleformat"
    },
    {
      "text": "toHTMLString",
      "url": "https://developer.wordpress.org/block-editor/#tohtmlstring"
    },
    {
      "text": "unregisterFormatType",
      "url": "https://developer.wordpress.org/block-editor/#unregisterformattype"
    },
    {
      "text": "useAnchor",
      "url": "https://developer.wordpress.org/block-editor/#useanchor"
    },
    {
      "text": "useAnchorRef",
      "url": "https://developer.wordpress.org/block-editor/#useanchorref"
    },
    {
      "text": "← @wordpress/reusable-blocks",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-reusable-blocks/"
    },
    {
      "text": "@wordpress/scripts →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-scripts/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fpackages%2Fpackages-redux-routine%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/packages/redux-routine/README.md"
    },
    {
      "text": "Motivation",
      "url": "https://developer.wordpress.org/block-editor/#motivation"
    },
    {
      "text": "Testing",
      "url": "https://developer.wordpress.org/block-editor/#testing"
    },
    {
      "text": "← @wordpress/readable-js-assets-webpack-plugin",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-readable-js-assets-webpack-plugin/"
    },
    {
      "text": "@wordpress/reusable-blocks →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-reusable-blocks/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fpackages%2Fpackages-list-reusable-blocks%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/packages/list-reusable-blocks/README.md"
    },
    {
      "text": "← @wordpress/lazy-import",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-lazy-import/"
    },
    {
      "text": "@wordpress/media-utils →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-media-utils/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fpackages%2Fpackages-keycodes%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/packages/keycodes/README.md"
    },
    {
      "text": "ALT",
      "url": "https://developer.wordpress.org/block-editor/#alt"
    },
    {
      "text": "BACKSPACE",
      "url": "https://developer.wordpress.org/block-editor/#backspace"
    },
    {
      "text": "COMMAND",
      "url": "https://developer.wordpress.org/block-editor/#command"
    },
    {
      "text": "CTRL",
      "url": "https://developer.wordpress.org/block-editor/#ctrl"
    },
    {
      "text": "DELETE",
      "url": "https://developer.wordpress.org/block-editor/#delete"
    },
    {
      "text": "displayShortcut",
      "url": "https://developer.wordpress.org/block-editor/#displayshortcut"
    },
    {
      "text": "displayShortcutList",
      "url": "https://developer.wordpress.org/block-editor/#displayshortcutlist"
    },
    {
      "text": "DOWN",
      "url": "https://developer.wordpress.org/block-editor/#down"
    },
    {
      "text": "END",
      "url": "https://developer.wordpress.org/block-editor/#end"
    },
    {
      "text": "ENTER",
      "url": "https://developer.wordpress.org/block-editor/#enter"
    },
    {
      "text": "ESCAPE",
      "url": "https://developer.wordpress.org/block-editor/#escape"
    },
    {
      "text": "F10",
      "url": "https://developer.wordpress.org/block-editor/#f10"
    },
    {
      "text": "HOME",
      "url": "https://developer.wordpress.org/block-editor/#home"
    },
    {
      "text": "isAppleOS",
      "url": "https://developer.wordpress.org/block-editor/#isappleos"
    },
    {
      "text": "isKeyboardEvent",
      "url": "https://developer.wordpress.org/block-editor/#iskeyboardevent"
    },
    {
      "text": "LEFT",
      "url": "https://developer.wordpress.org/block-editor/#left"
    },
    {
      "text": "modifiers",
      "url": "https://developer.wordpress.org/block-editor/#modifiers"
    },
    {
      "text": "PAGEDOWN",
      "url": "https://developer.wordpress.org/block-editor/#pagedown"
    },
    {
      "text": "PAGEUP",
      "url": "https://developer.wordpress.org/block-editor/#pageup"
    },
    {
      "text": "rawShortcut",
      "url": "https://developer.wordpress.org/block-editor/#rawshortcut"
    },
    {
      "text": "RIGHT",
      "url": "https://developer.wordpress.org/block-editor/#right"
    },
    {
      "text": "SHIFT",
      "url": "https://developer.wordpress.org/block-editor/#shift"
    },
    {
      "text": "shortcutAriaLabel",
      "url": "https://developer.wordpress.org/block-editor/#shortcutarialabel"
    },
    {
      "text": "SPACE",
      "url": "https://developer.wordpress.org/block-editor/#space"
    },
    {
      "text": "TAB",
      "url": "https://developer.wordpress.org/block-editor/#tab"
    },
    {
      "text": "UP",
      "url": "https://developer.wordpress.org/block-editor/#up"
    },
    {
      "text": "ZERO",
      "url": "https://developer.wordpress.org/block-editor/#zero"
    },
    {
      "text": "← @wordpress/keyboard-shortcuts",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-keyboard-shortcuts/"
    },
    {
      "text": "@wordpress/library-export-default-webpack-plugin →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-library-export-default-webpack-plugin/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fpackages%2Fpackages-is-shallow-equal%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/packages/is-shallow-equal/README.md"
    },
    {
      "text": "Object Equality in JavaScript.",
      "url": "http://adripofjavascript.com/blog/drips/object-equality-in-javascript.html"
    },
    {
      "text": "fast-deep-equal",
      "url": "https://github.com/epoberezkin/fast-deep-equal"
    },
    {
      "text": "is-equal-shallow",
      "url": "https://www.npmjs.com/package/is-equal-shallow"
    },
    {
      "text": "shallow-equal",
      "url": "https://www.npmjs.com/package/shallow-equal"
    },
    {
      "text": "shallow-equals",
      "url": "https://www.npmjs.com/package/shallow-equals"
    },
    {
      "text": "fbjs/lib/shallowEqual",
      "url": "https://www.npmjs.com/package/fbjs"
    },
    {
      "text": "Benchmarks",
      "url": "https://developer.wordpress.org/block-editor/#benchmarks"
    },
    {
      "text": "← @wordpress/interface",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-interface/"
    },
    {
      "text": "@wordpress/jest-console →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-jest-console/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fpackages%2Fpackages-i18n%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/packages/i18n/README.md"
    },
    {
      "text": "How to Internationalize Your Plugin",
      "url": "https://developer.wordpress.org/plugins/internationalization/how-to-internationalize-your-plugin/"
    },
    {
      "text": "Internationalization section of the Block Editor Handbook",
      "url": "https://developer.wordpress.org/block-editor/developers/internationalization/"
    },
    {
      "text": "createI18n",
      "url": "https://developer.wordpress.org/block-editor/#createi18n"
    },
    {
      "text": "defaultI18n",
      "url": "https://developer.wordpress.org/block-editor/#defaulti18n"
    },
    {
      "text": "getLocaleData",
      "url": "https://developer.wordpress.org/block-editor/#getlocaledata"
    },
    {
      "text": "http://messageformat.github.io/Jed/",
      "url": "http://messageformat.github.io/Jed/"
    },
    {
      "text": "hasTranslation",
      "url": "https://developer.wordpress.org/block-editor/#hastranslation"
    },
    {
      "text": "isRTL",
      "url": "https://developer.wordpress.org/block-editor/#isrtl"
    },
    {
      "text": "resetLocaleData",
      "url": "https://developer.wordpress.org/block-editor/#resetlocaledata"
    },
    {
      "text": "setLocaleData",
      "url": "https://developer.wordpress.org/block-editor/#setlocaledata"
    },
    {
      "text": "sprintf",
      "url": "https://developer.wordpress.org/block-editor/#sprintf"
    },
    {
      "text": "https://www.npmjs.com/package/sprintf-js",
      "url": "https://www.npmjs.com/package/sprintf-js"
    },
    {
      "text": "subscribe",
      "url": "https://developer.wordpress.org/block-editor/#subscribe"
    },
    {
      "text": "_n",
      "url": "https://developer.wordpress.org/block-editor/#n"
    },
    {
      "text": "https://developer.wordpress.org/reference/functions/_n/",
      "url": "https://developer.wordpress.org/reference/functions/_n/"
    },
    {
      "text": "_nx",
      "url": "https://developer.wordpress.org/block-editor/#nx"
    },
    {
      "text": "https://developer.wordpress.org/reference/functions/_nx/",
      "url": "https://developer.wordpress.org/reference/functions/_nx/"
    },
    {
      "text": "_x",
      "url": "https://developer.wordpress.org/block-editor/#x"
    },
    {
      "text": "https://developer.wordpress.org/reference/functions/_x/",
      "url": "https://developer.wordpress.org/reference/functions/_x/"
    },
    {
      "text": "__",
      "url": "https://developer.wordpress.org/block-editor/"
    },
    {
      "text": "https://developer.wordpress.org/reference/functions/__/",
      "url": "https://developer.wordpress.org/reference/functions/__/"
    },
    {
      "text": "← @wordpress/html-entities",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-html-entities/"
    },
    {
      "text": "@wordpress/icons →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-icons/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fpackages%2Fpackages-html-entities%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/packages/html-entities/README.md"
    },
    {
      "text": "decodeEntities",
      "url": "https://developer.wordpress.org/block-editor/#decodeentities"
    },
    {
      "text": "← @wordpress/hooks",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-hooks/"
    },
    {
      "text": "@wordpress/i18n →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-i18n/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fpackages%2Fpackages-escape-html%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/packages/escape-html/README.md"
    },
    {
      "text": "escapeAmpersand",
      "url": "https://developer.wordpress.org/block-editor/#escapeampersand"
    },
    {
      "text": "https://w3c.github.io/html/syntax.html#character-references",
      "url": "https://w3c.github.io/html/syntax.html#character-references"
    },
    {
      "text": "https://w3c.github.io/html/syntax.html#ambiguous-ampersand",
      "url": "https://w3c.github.io/html/syntax.html#ambiguous-ampersand"
    },
    {
      "text": "https://w3c.github.io/html/syntax.html#named-character-references",
      "url": "https://w3c.github.io/html/syntax.html#named-character-references"
    },
    {
      "text": "escapeAttribute",
      "url": "https://developer.wordpress.org/block-editor/#escapeattribute"
    },
    {
      "text": "https://w3c.github.io/html/syntax.html#elements-attributes",
      "url": "https://w3c.github.io/html/syntax.html#elements-attributes"
    },
    {
      "text": "https://core.trac.wordpress.org/ticket/45387",
      "url": "https://core.trac.wordpress.org/ticket/45387"
    },
    {
      "text": "escapeEditableHTML",
      "url": "https://developer.wordpress.org/block-editor/#escapeeditablehtml"
    },
    {
      "text": "escapeHTML",
      "url": "https://developer.wordpress.org/block-editor/#escapehtml"
    },
    {
      "text": "https://w3c.github.io/html/syntax.html#writing-html-documents-elements",
      "url": "https://w3c.github.io/html/syntax.html#writing-html-documents-elements"
    },
    {
      "text": "escapeLessThan",
      "url": "https://developer.wordpress.org/block-editor/#escapelessthan"
    },
    {
      "text": "escapeQuotationMark",
      "url": "https://developer.wordpress.org/block-editor/#escapequotationmark"
    },
    {
      "text": "isValidAttributeName",
      "url": "https://developer.wordpress.org/block-editor/#isvalidattributename"
    },
    {
      "text": "← @wordpress/env",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-env/"
    },
    {
      "text": "@wordpress/eslint-plugin →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-eslint-plugin/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fpackages%2Fpackages-editor%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/packages/editor/README.md"
    },
    {
      "text": "How it works",
      "url": "https://developer.wordpress.org/block-editor/#how-it-works"
    },
    {
      "text": "Components",
      "url": "https://developer.wordpress.org/block-editor/#components"
    },
    {
      "text": "BlockControls",
      "url": "https://developer.wordpress.org/block-editor/#blockcontrols"
    },
    {
      "text": "contenteditable input",
      "url": "https://developer.mozilla.org/en-US/docs/Web/Guide/HTML/Editable_content"
    },
    {
      "text": "controlled component",
      "url": "https://facebook.github.io/react/docs/forms.html#controlled-components"
    },
    {
      "text": "input and textarea attribute of the same name",
      "url": "https://developer.mozilla.org/en-US/docs/Learn/HTML/Forms/HTML5_updates#The_placeholder_attribute"
    },
    {
      "text": "← @wordpress/edit-widgets",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-edit-widgets/"
    },
    {
      "text": "@wordpress/element →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-element/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fpackages%2Fpackages-dom-ready%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/packages/dom-ready/README.md"
    },
    {
      "text": "Browser support",
      "url": "https://developer.wordpress.org/block-editor/#browser-support"
    },
    {
      "text": "https://make.wordpress.org/core/handbook/best-practices/browser-support/",
      "url": "https://make.wordpress.org/core/handbook/best-practices/browser-support/"
    },
    {
      "text": "← @wordpress/docgen",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-docgen/"
    },
    {
      "text": "@wordpress/dom →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-dom/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fpackages%2Fpackages-dom%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/packages/dom/README.md"
    },
    {
      "text": "computeCaretRect",
      "url": "https://developer.wordpress.org/block-editor/#computecaretrect"
    },
    {
      "text": "documentHasSelection",
      "url": "https://developer.wordpress.org/block-editor/#documenthasselection"
    },
    {
      "text": "documentHasTextSelection",
      "url": "https://developer.wordpress.org/block-editor/#documenthastextselection"
    },
    {
      "text": "https://developer.mozilla.org/en-US/docs/Web/API/Window/getSelection#Related_objects",
      "url": "https://developer.mozilla.org/en-US/docs/Web/API/Window/getSelection#Related_objects"
    },
    {
      "text": "documentHasUncollapsedSelection",
      "url": "https://developer.wordpress.org/block-editor/#documenthasuncollapsedselection"
    },
    {
      "text": "focus",
      "url": "https://developer.wordpress.org/block-editor/#focus"
    },
    {
      "text": "getFilesFromDataTransfer",
      "url": "https://developer.wordpress.org/block-editor/#getfilesfromdatatransfer"
    },
    {
      "text": "getOffsetParent",
      "url": "https://developer.wordpress.org/block-editor/#getoffsetparent"
    },
    {
      "text": "https://drafts.csswg.org/cssom-view/#dom-htmlelement-offsetparent",
      "url": "https://drafts.csswg.org/cssom-view/#dom-htmlelement-offsetparent"
    },
    {
      "text": "https://developer.mozilla.org/en-US/docs/Web/Guide/HTML/Content_categories#Phrasing_content",
      "url": "https://developer.mozilla.org/en-US/docs/Web/Guide/HTML/Content_categories#Phrasing_content"
    },
    {
      "text": "getRectangleFromRange",
      "url": "https://developer.wordpress.org/block-editor/#getrectanglefromrange"
    },
    {
      "text": "getScrollContainer",
      "url": "https://developer.wordpress.org/block-editor/#getscrollcontainer"
    },
    {
      "text": "insertAfter",
      "url": "https://developer.wordpress.org/block-editor/#insertafter"
    },
    {
      "text": "isEntirelySelected",
      "url": "https://developer.wordpress.org/block-editor/#isentirelyselected"
    },
    {
      "text": "isFormElement",
      "url": "https://developer.wordpress.org/block-editor/#isformelement"
    },
    {
      "text": "isHorizontalEdge",
      "url": "https://developer.wordpress.org/block-editor/#ishorizontaledge"
    },
    {
      "text": "isNumberInput",
      "url": "https://developer.wordpress.org/block-editor/#isnumberinput"
    },
    {
      "text": "isPhrasingContent",
      "url": "https://developer.wordpress.org/block-editor/#isphrasingcontent"
    },
    {
      "text": "isTextContent",
      "url": "https://developer.wordpress.org/block-editor/#istextcontent"
    },
    {
      "text": "isTextField",
      "url": "https://developer.wordpress.org/block-editor/#istextfield"
    },
    {
      "text": "https://html.spec.whatwg.org/#textFieldSelection",
      "url": "https://html.spec.whatwg.org/#textFieldSelection"
    },
    {
      "text": "isVerticalEdge",
      "url": "https://developer.wordpress.org/block-editor/#isverticaledge"
    },
    {
      "text": "placeCaretAtHorizontalEdge",
      "url": "https://developer.wordpress.org/block-editor/#placecaretathorizontaledge"
    },
    {
      "text": "placeCaretAtVerticalEdge",
      "url": "https://developer.wordpress.org/block-editor/#placecaretatverticaledge"
    },
    {
      "text": "removeInvalidHTML",
      "url": "https://developer.wordpress.org/block-editor/#removeinvalidhtml"
    },
    {
      "text": "replaceTag",
      "url": "https://developer.wordpress.org/block-editor/#replacetag"
    },
    {
      "text": "safeHTML",
      "url": "https://developer.wordpress.org/block-editor/#safehtml"
    },
    {
      "text": "unwrap",
      "url": "https://developer.wordpress.org/block-editor/#unwrap"
    },
    {
      "text": "wrap",
      "url": "https://developer.wordpress.org/block-editor/#wrap"
    },
    {
      "text": "← @wordpress/dom-ready",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-dom-ready/"
    },
    {
      "text": "@wordpress/e2e-test-utils →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-e2e-test-utils/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fpackages%2Fpackages-date%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/packages/date/README.md"
    },
    {
      "text": "date",
      "url": "https://developer.wordpress.org/block-editor/#date"
    },
    {
      "text": "https://en.wikipedia.org/wiki/List_of_tz_database_time_zones",
      "url": "https://en.wikipedia.org/wiki/List_of_tz_database_time_zones"
    },
    {
      "text": "https://en.wikipedia.org/wiki/ISO_8601#Time_offsets_from_UTC",
      "url": "https://en.wikipedia.org/wiki/ISO_8601#Time_offsets_from_UTC"
    },
    {
      "text": "dateI18n",
      "url": "https://developer.wordpress.org/block-editor/#datei18n"
    },
    {
      "text": "getDate",
      "url": "https://developer.wordpress.org/block-editor/#getdate"
    },
    {
      "text": "getSettings",
      "url": "https://developer.wordpress.org/block-editor/#getsettings"
    },
    {
      "text": "gmdate",
      "url": "https://developer.wordpress.org/block-editor/#gmdate"
    },
    {
      "text": "gmdateI18n",
      "url": "https://developer.wordpress.org/block-editor/#gmdatei18n"
    },
    {
      "text": "isInTheFuture",
      "url": "https://developer.wordpress.org/block-editor/#isinthefuture"
    },
    {
      "text": "setSettings",
      "url": "https://developer.wordpress.org/block-editor/#setsettings"
    },
    {
      "text": "← @wordpress/data",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-data/"
    },
    {
      "text": "@wordpress/dependency-extraction-webpack-plugin →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-dependency-extraction-webpack-plugin/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fpackages%2Fpackages-core-data%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/packages/core-data/README.md"
    },
    {
      "text": "TypeScript definitions for WordPress data types",
      "url": "https://github.com/WordPress/gutenberg/tree/HEAD/packages/core-data/src/entity-types/README.md"
    },
    {
      "text": "subscribe",
      "url": "https://github.com/WordPress/gutenberg/tree/HEAD/packages/data/README.md#subscribe-function"
    },
    {
      "text": "higher-order components",
      "url": "https://github.com/WordPress/gutenberg/tree/HEAD/packages/data/README.md#higher-order-components"
    },
    {
      "text": "Actions",
      "url": "https://developer.wordpress.org/block-editor/#actions"
    },
    {
      "text": "addEntities",
      "url": "https://developer.wordpress.org/block-editor/#addentities"
    },
    {
      "text": "deleteEntityRecord",
      "url": "https://developer.wordpress.org/block-editor/#deleteentityrecord"
    },
    {
      "text": "editEntityRecord",
      "url": "https://developer.wordpress.org/block-editor/#editentityrecord"
    },
    {
      "text": "receiveEntityRecords",
      "url": "https://developer.wordpress.org/block-editor/#receiveentityrecords"
    },
    {
      "text": "receiveThemeSupports",
      "url": "https://developer.wordpress.org/block-editor/#receivethemesupports"
    },
    {
      "text": "receiveUploadPermissions",
      "url": "https://developer.wordpress.org/block-editor/#receiveuploadpermissions"
    },
    {
      "text": "redo",
      "url": "https://developer.wordpress.org/block-editor/#redo"
    },
    {
      "text": "saveEditedEntityRecord",
      "url": "https://developer.wordpress.org/block-editor/#saveeditedentityrecord"
    },
    {
      "text": "saveEntityRecord",
      "url": "https://developer.wordpress.org/block-editor/#saveentityrecord"
    },
    {
      "text": "undo",
      "url": "https://developer.wordpress.org/block-editor/#undo"
    },
    {
      "text": "canUser",
      "url": "https://developer.wordpress.org/block-editor/#canuser"
    },
    {
      "text": "https://developer.wordpress.org/rest-api/reference/",
      "url": "https://developer.wordpress.org/rest-api/reference/"
    },
    {
      "text": "canUserEditEntityRecord",
      "url": "https://developer.wordpress.org/block-editor/#canusereditentityrecord"
    },
    {
      "text": "getAuthors",
      "url": "https://developer.wordpress.org/block-editor/#getauthors"
    },
    {
      "text": "getAutosave",
      "url": "https://developer.wordpress.org/block-editor/#getautosave"
    },
    {
      "text": "getAutosaves",
      "url": "https://developer.wordpress.org/block-editor/#getautosaves"
    },
    {
      "text": "getBlockPatternCategories",
      "url": "https://developer.wordpress.org/block-editor/#getblockpatterncategories"
    },
    {
      "text": "getBlockPatterns",
      "url": "https://developer.wordpress.org/block-editor/#getblockpatterns"
    },
    {
      "text": "getCurrentTheme",
      "url": "https://developer.wordpress.org/block-editor/#getcurrenttheme"
    },
    {
      "text": "getCurrentUser",
      "url": "https://developer.wordpress.org/block-editor/#getcurrentuser"
    },
    {
      "text": "getEditedEntityRecord",
      "url": "https://developer.wordpress.org/block-editor/#geteditedentityrecord"
    },
    {
      "text": "getEmbedPreview",
      "url": "https://developer.wordpress.org/block-editor/#getembedpreview"
    },
    {
      "text": "getEntitiesByKind",
      "url": "https://developer.wordpress.org/block-editor/#getentitiesbykind"
    },
    {
      "text": "getEntitiesConfig",
      "url": "https://developer.wordpress.org/block-editor/#getentitiesconfig"
    },
    {
      "text": "getEntity",
      "url": "https://developer.wordpress.org/block-editor/#getentity"
    },
    {
      "text": "getEntityConfig",
      "url": "https://developer.wordpress.org/block-editor/#getentityconfig"
    },
    {
      "text": "getEntityRecord",
      "url": "https://developer.wordpress.org/block-editor/#getentityrecord"
    },
    {
      "text": "getEntityRecordEdits",
      "url": "https://developer.wordpress.org/block-editor/#getentityrecordedits"
    },
    {
      "text": "getEntityRecordNonTransientEdits",
      "url": "https://developer.wordpress.org/block-editor/#getentityrecordnontransientedits"
    },
    {
      "text": "getEntityRecords",
      "url": "https://developer.wordpress.org/block-editor/#getentityrecords"
    },
    {
      "text": "getLastEntityDeleteError",
      "url": "https://developer.wordpress.org/block-editor/#getlastentitydeleteerror"
    },
    {
      "text": "getLastEntitySaveError",
      "url": "https://developer.wordpress.org/block-editor/#getlastentitysaveerror"
    },
    {
      "text": "getRawEntityRecord",
      "url": "https://developer.wordpress.org/block-editor/#getrawentityrecord"
    },
    {
      "text": "getRedoEdit",
      "url": "https://developer.wordpress.org/block-editor/#getredoedit"
    },
    {
      "text": "getReferenceByDistinctEdits",
      "url": "https://developer.wordpress.org/block-editor/#getreferencebydistinctedits"
    },
    {
      "text": "getThemeSupports",
      "url": "https://developer.wordpress.org/block-editor/#getthemesupports"
    },
    {
      "text": "getUndoEdit",
      "url": "https://developer.wordpress.org/block-editor/#getundoedit"
    },
    {
      "text": "getUserQueryResults",
      "url": "https://developer.wordpress.org/block-editor/#getuserqueryresults"
    },
    {
      "text": "hasEditsForEntityRecord",
      "url": "https://developer.wordpress.org/block-editor/#haseditsforentityrecord"
    },
    {
      "text": "hasEntityRecords",
      "url": "https://developer.wordpress.org/block-editor/#hasentityrecords"
    },
    {
      "text": "hasFetchedAutosaves",
      "url": "https://developer.wordpress.org/block-editor/#hasfetchedautosaves"
    },
    {
      "text": "hasRedo",
      "url": "https://developer.wordpress.org/block-editor/#hasredo"
    },
    {
      "text": "hasUndo",
      "url": "https://developer.wordpress.org/block-editor/#hasundo"
    },
    {
      "text": "isAutosavingEntityRecord",
      "url": "https://developer.wordpress.org/block-editor/#isautosavingentityrecord"
    },
    {
      "text": "isDeletingEntityRecord",
      "url": "https://developer.wordpress.org/block-editor/#isdeletingentityrecord"
    },
    {
      "text": "isPreviewEmbedFallback",
      "url": "https://developer.wordpress.org/block-editor/#ispreviewembedfallback"
    },
    {
      "text": "isRequestingEmbedPreview",
      "url": "https://developer.wordpress.org/block-editor/#isrequestingembedpreview"
    },
    {
      "text": "isSavingEntityRecord",
      "url": "https://developer.wordpress.org/block-editor/#issavingentityrecord"
    },
    {
      "text": "Hooks",
      "url": "https://developer.wordpress.org/block-editor/#hooks"
    },
    {
      "text": "useEntityRecord",
      "url": "https://developer.wordpress.org/block-editor/#useentityrecord"
    },
    {
      "text": "useEntityRecords",
      "url": "https://developer.wordpress.org/block-editor/#useentityrecords"
    },
    {
      "text": "useResourcePermissions",
      "url": "https://developer.wordpress.org/block-editor/#useresourcepermissions"
    },
    {
      "text": "← @wordpress/compose",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-compose/"
    },
    {
      "text": "@wordpress/create-block-tutorial-template →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-create-block-tutorial-template/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fpackages%2Fpackages-compose%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/packages/compose/README.md"
    },
    {
      "text": "Hooks",
      "url": "https://reactjs.org/docs/hooks-intro.html"
    },
    {
      "text": "Higher Order Components",
      "url": "https://facebook.github.io/react/docs/higher-order-components.html"
    },
    {
      "text": "flowRight",
      "url": "https://lodash.com/docs/#flowRight"
    },
    {
      "text": "PluginSidebar component",
      "url": "https://github.com/WordPress/gutenberg/blob/HEAD/packages/edit-post/src/components/sidebar/plugin-sidebar/index.js"
    },
    {
      "text": "Available components are located here.",
      "url": "https://github.com/WordPress/gutenberg/tree/HEAD/packages/compose/src"
    },
    {
      "text": "compose",
      "url": "https://developer.wordpress.org/block-editor/#compose"
    },
    {
      "text": "https://docs-lodash.com/v4/flow-right/",
      "url": "https://docs-lodash.com/v4/flow-right/"
    },
    {
      "text": "createHigherOrderComponent",
      "url": "https://developer.wordpress.org/block-editor/#createhigherordercomponent"
    },
    {
      "text": "debounce",
      "url": "https://developer.wordpress.org/block-editor/#debounce"
    },
    {
      "text": "ifCondition",
      "url": "https://developer.wordpress.org/block-editor/#ifcondition"
    },
    {
      "text": "pipe",
      "url": "https://developer.wordpress.org/block-editor/#pipe"
    },
    {
      "text": "https://docs-lodash.com/v4/flow/",
      "url": "https://docs-lodash.com/v4/flow/"
    },
    {
      "text": "pure",
      "url": "https://developer.wordpress.org/block-editor/#pure"
    },
    {
      "text": "throttle",
      "url": "https://developer.wordpress.org/block-editor/#throttle"
    },
    {
      "text": "useAsyncList",
      "url": "https://developer.wordpress.org/block-editor/#useasynclist"
    },
    {
      "text": "useConstrainedTabbing",
      "url": "https://developer.wordpress.org/block-editor/#useconstrainedtabbing"
    },
    {
      "text": "useCopyOnClick",
      "url": "https://developer.wordpress.org/block-editor/#usecopyonclick"
    },
    {
      "text": "useCopyToClipboard",
      "url": "https://developer.wordpress.org/block-editor/#usecopytoclipboard"
    },
    {
      "text": "useDebounce",
      "url": "https://developer.wordpress.org/block-editor/#usedebounce"
    },
    {
      "text": "https://docs-lodash.com/v4/debounce/",
      "url": "https://docs-lodash.com/v4/debounce/"
    },
    {
      "text": "useDisabled",
      "url": "https://developer.wordpress.org/block-editor/#usedisabled"
    },
    {
      "text": "useFocusableIframe",
      "url": "https://developer.wordpress.org/block-editor/#usefocusableiframe"
    },
    {
      "text": "useFocusOnMount",
      "url": "https://developer.wordpress.org/block-editor/#usefocusonmount"
    },
    {
      "text": "useFocusReturn",
      "url": "https://developer.wordpress.org/block-editor/#usefocusreturn"
    },
    {
      "text": "useInstanceId",
      "url": "https://developer.wordpress.org/block-editor/#useinstanceid"
    },
    {
      "text": "useIsomorphicLayoutEffect",
      "url": "https://developer.wordpress.org/block-editor/#useisomorphiclayouteffect"
    },
    {
      "text": "useKeyboardShortcut",
      "url": "https://developer.wordpress.org/block-editor/#usekeyboardshortcut"
    },
    {
      "text": "https://craig.is/killing/mice#api.bind",
      "url": "https://craig.is/killing/mice#api.bind"
    },
    {
      "text": "useMediaQuery",
      "url": "https://developer.wordpress.org/block-editor/#usemediaquery"
    },
    {
      "text": "useMergeRefs",
      "url": "https://developer.wordpress.org/block-editor/#usemergerefs"
    },
    {
      "text": "usePrevious",
      "url": "https://developer.wordpress.org/block-editor/#useprevious"
    },
    {
      "text": "https://usehooks.com/usePrevious/",
      "url": "https://usehooks.com/usePrevious/"
    },
    {
      "text": "useReducedMotion",
      "url": "https://developer.wordpress.org/block-editor/#usereducedmotion"
    },
    {
      "text": "useRefEffect",
      "url": "https://developer.wordpress.org/block-editor/#userefeffect"
    },
    {
      "text": "useResizeObserver",
      "url": "https://developer.wordpress.org/block-editor/#useresizeobserver"
    },
    {
      "text": "useThrottle",
      "url": "https://developer.wordpress.org/block-editor/#usethrottle"
    },
    {
      "text": "https://docs-lodash.com/v4/throttle/",
      "url": "https://docs-lodash.com/v4/throttle/"
    },
    {
      "text": "useViewportMatch",
      "url": "https://developer.wordpress.org/block-editor/#useviewportmatch"
    },
    {
      "text": "useWarnOnChange",
      "url": "https://developer.wordpress.org/block-editor/#usewarnonchange"
    },
    {
      "text": "withGlobalEvents",
      "url": "https://developer.wordpress.org/block-editor/#withglobalevents"
    },
    {
      "text": "withInstanceId",
      "url": "https://developer.wordpress.org/block-editor/#withinstanceid"
    },
    {
      "text": "withSafeTimeout",
      "url": "https://developer.wordpress.org/block-editor/#withsafetimeout"
    },
    {
      "text": "withState",
      "url": "https://developer.wordpress.org/block-editor/#withstate"
    },
    {
      "text": "← @wordpress/components",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-components/"
    },
    {
      "text": "@wordpress/core-data →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-core-data/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fblock-api%2Fblock-templates%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/docs/reference-guides/block-api/block-templates.md"
    },
    {
      "text": "Meta Block Tutorial",
      "url": "https://developer.wordpress.org/block-editor/how-to-guides/metabox/#step-4-finishing-touches"
    },
    {
      "text": "Block Attributes",
      "url": "https://developer.wordpress.org/block-editor/#block-attributes"
    },
    {
      "text": "packages/block-library/src/heading/block.json",
      "url": "https://github.com/WordPress/gutenberg/blob/c62ccd80c7c6abb85740cf8745439029bf0f4d35/packages/block-library/src/heading/block.json#L5-L25"
    },
    {
      "text": "Custom Post types",
      "url": "https://developer.wordpress.org/block-editor/#custom-post-types"
    },
    {
      "text": "Locking",
      "url": "https://developer.wordpress.org/block-editor/#locking"
    },
    {
      "text": "Individual block locking",
      "url": "https://developer.wordpress.org/block-editor/#individual-block-locking"
    },
    {
      "text": "Nested Templates",
      "url": "https://developer.wordpress.org/block-editor/#nested-templates"
    },
    {
      "text": "← Supports",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/block-api/block-supports/"
    },
    {
      "text": "Transforms →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/block-api/block-transforms/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fcomponents%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/packages/components/README.md"
    },
    {
      "text": "wp_enqueue_style documentation",
      "url": "https://developer.wordpress.org/reference/functions/wp_enqueue_style/#parameters"
    },
    {
      "text": "Popovers and Tooltips",
      "url": "https://developer.wordpress.org/block-editor/#popovers-and-tooltips"
    },
    {
      "text": "Popover",
      "url": "https://developer.wordpress.org/block-editor/reference-guide/components/popover/"
    },
    {
      "text": "Tooltip",
      "url": "https://developer.wordpress.org/block-editor/reference-guide/components/tooltip/"
    },
    {
      "text": "SlotFill",
      "url": "https://developer.wordpress.org/block-editor/reference-guide/components/slot-fill/"
    },
    {
      "text": "Docs & examples",
      "url": "https://developer.wordpress.org/block-editor/#docs-examples"
    },
    {
      "text": "contributing information",
      "url": "https://github.com/WordPress/gutenberg/tree/HEAD/packages/components/CONTRIBUTING.md"
    },
    {
      "text": "← Theme.json Reference",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/theme-json-reference/"
    },
    {
      "text": "AlignmentMatrixControl →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/alignment-matrix-control/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fpackages%2Fpackages-block-serialization-spec-parser%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/packages/block-serialization-spec-parser/README.md"
    },
    {
      "text": "PEG.js",
      "url": "https://pegjs.org"
    },
    {
      "text": "Parsing expression grammar",
      "url": "https://en.wikipedia.org/wiki/Parsing_expression_grammar"
    },
    {
      "text": "← @wordpress/block-serialization-default-parser",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-block-serialization-default-parser/"
    },
    {
      "text": "@wordpress/blocks →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-blocks/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fpackages%2Fpackages-block-library%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/packages/block-library/README.md"
    },
    {
      "text": "registerCoreBlocks",
      "url": "https://developer.wordpress.org/block-editor/#registercoreblocks"
    },
    {
      "text": "Registering individual blocks",
      "url": "https://developer.wordpress.org/block-editor/#registering-individual-blocks"
    },
    {
      "text": "Adding new blocks",
      "url": "https://developer.wordpress.org/block-editor/#adding-new-blocks"
    },
    {
      "text": "index.js",
      "url": "https://github.com/WordPress/gutenberg/blob/trunk/packages/block-library/index.js"
    },
    {
      "text": "lib/blocks.php",
      "url": "https://github.com/WordPress/gutenberg/blob/trunk/lib/blocks.php"
    },
    {
      "text": "static block",
      "url": "https://developer.wordpress.org/block-editor/explanations/glossary/#static-block"
    },
    {
      "text": "dynamic block",
      "url": "https://developer.wordpress.org/block-editor/explanations/glossary/#dynamic-block"
    },
    {
      "text": "← @wordpress/block-editor",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-block-editor/"
    },
    {
      "text": "@wordpress/block-serialization-default-parser →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-block-serialization-default-parser/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fpackages%2Fpackages-blob%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/packages/blob/README.md"
    },
    {
      "text": "createBlobURL",
      "url": "https://developer.wordpress.org/block-editor/#createbloburl"
    },
    {
      "text": "getBlobByURL",
      "url": "https://developer.wordpress.org/block-editor/#getblobbyurl"
    },
    {
      "text": "getBlobTypeByURL",
      "url": "https://developer.wordpress.org/block-editor/#getblobtypebyurl"
    },
    {
      "text": "isBlobURL",
      "url": "https://developer.wordpress.org/block-editor/#isbloburl"
    },
    {
      "text": "revokeBlobURL",
      "url": "https://developer.wordpress.org/block-editor/#revokebloburl"
    },
    {
      "text": "← @wordpress/base-styles",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-base-styles/"
    },
    {
      "text": "@wordpress/block-directory →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-block-directory/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Fexplanations%2Farchitecture%2Fautomated-testing%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/docs/explanations/architecture/automated-testing.md"
    },
    {
      "text": "Puppeteer",
      "url": "https://developers.google.com/web/tools/puppeteer/"
    },
    {
      "text": "Cypress",
      "url": "https://cypress.io/"
    },
    {
      "text": "Selenium",
      "url": "https://www.selenium.dev/"
    },
    {
      "text": "Playwright",
      "url": "https://github.com/microsoft/playwright"
    },
    {
      "text": "async and await syntax",
      "url": "https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Asynchronous/Async_await"
    },
    {
      "text": "example",
      "url": "https://github.com/WordPress/gutenberg/pull/11287"
    },
    {
      "text": "Testing Overview: End-to-End Testing",
      "url": "https://developer.wordpress.org/block-editor/contributors/code/testing-overview/#end-to-end-testing"
    },
    {
      "text": "Testing: Experiment with Puppeteer for E2E testing",
      "url": "https://github.com/WordPress/gutenberg/pull/5618"
    },
    {
      "text": "JavaScript Chat Summary: January 28, 2020",
      "url": "https://make.wordpress.org/core/2020/02/04/javascript-chat-summary-january-28-2020/"
    },
    {
      "text": "← Performance",
      "url": "https://developer.wordpress.org/block-editor/explanations/architecture/performance/"
    },
    {
      "text": "Site Editing Templates →",
      "url": "https://developer.wordpress.org/block-editor/explanations/architecture/full-site-editing-templates/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Fexplanations%2Farchitecture%2Fperformance%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/docs/explanations/architecture/performance.md"
    },
    {
      "text": "Metrics",
      "url": "https://developer.wordpress.org/block-editor/#metrics"
    },
    {
      "text": "performance benchmark job",
      "url": "https://developer.wordpress.org/block-editor/#the-performance-benchmark-job"
    },
    {
      "text": "Key Performance Decisions and Solutions",
      "url": "https://developer.wordpress.org/block-editor/#key-performance-decisions-and-solutions"
    },
    {
      "text": "The performance benchmark job",
      "url": "https://developer.wordpress.org/block-editor/#the-performance-benchmark-job"
    },
    {
      "text": "Going further",
      "url": "https://developer.wordpress.org/block-editor/#going-further"
    },
    {
      "text": "Journey towards a performant editor",
      "url": "https://riad.blog/2020/02/14/a-journey-towards-a-performant-web-editor/"
    },
    {
      "text": "← Modularity",
      "url": "https://developer.wordpress.org/block-editor/explanations/architecture/modularity/"
    },
    {
      "text": "Automated Testing →",
      "url": "https://developer.wordpress.org/block-editor/explanations/architecture/automated-testing/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Fexplanations%2Farchitecture%2Fmodularity%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/docs/explanations/architecture/modularity.md"
    },
    {
      "text": "WordPress packages",
      "url": "https://www.npmjs.com/org/wordpress"
    },
    {
      "text": "Why?",
      "url": "https://developer.wordpress.org/block-editor/#why"
    },
    {
      "text": "Types of packages",
      "url": "https://developer.wordpress.org/block-editor/#types-of-packages"
    },
    {
      "text": "Production packages",
      "url": "https://developer.wordpress.org/block-editor/#production-packages"
    },
    {
      "text": "@wordpress/scripts",
      "url": "https://developer.wordpress.org/block-editor/packages/packages-scripts/#build"
    },
    {
      "text": "@wordpress/dependency-extraction-webpack-plugin",
      "url": "https://developer.wordpress.org/block-editor/packages/packages-dependency-extraction-webpack-plugin/"
    },
    {
      "text": "Packages with stylesheets",
      "url": "https://developer.wordpress.org/block-editor/#packages-with-stylesheets"
    },
    {
      "text": "Packages with data stores",
      "url": "https://developer.wordpress.org/block-editor/#packages-with-data-stores"
    },
    {
      "text": "Development packages",
      "url": "https://developer.wordpress.org/block-editor/#development-packages"
    },
    {
      "text": "Editor Packages",
      "url": "https://developer.wordpress.org/block-editor/#editor-packages"
    },
    {
      "text": "What’s the difference between the different editor packages? What’s the purpose of each package?",
      "url": "https://developer.wordpress.org/block-editor/#whats-the-difference-between-the-different-editor-packages-whats-the-purpose-of-each-package"
    },
    {
      "text": "← Data Flow and Data Format",
      "url": "https://developer.wordpress.org/block-editor/explanations/architecture/data-flow/"
    },
    {
      "text": "Performance →",
      "url": "https://developer.wordpress.org/block-editor/explanations/architecture/performance/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Fexplanations%2Farchitecture%2Fdata-flow%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/docs/explanations/architecture/data-flow.md"
    },
    {
      "text": "The format",
      "url": "https://developer.wordpress.org/block-editor/#the-format"
    },
    {
      "text": "chase",
      "url": "https://en.wikipedia.org/wiki/Chase_(printing)"
    },
    {
      "text": "sorts",
      "url": "https://en.wikipedia.org/wiki/Sort_(typesetting)"
    },
    {
      "text": "The block object",
      "url": "https://developer.wordpress.org/block-editor/#the-block-object"
    },
    {
      "text": "Serialization and Parsing",
      "url": "https://developer.wordpress.org/block-editor/#serialization-and-parsing"
    },
    {
      "text": "Delimiters and Parsing Expression Grammar",
      "url": "https://developer.wordpress.org/block-editor/#delimiters-and-parsing-expression-grammar"
    },
    {
      "text": "The Anatomy of a Serialized Block",
      "url": "https://developer.wordpress.org/block-editor/#the-anatomy-of-a-serialized-block"
    },
    {
      "text": "The Data Lifecycle",
      "url": "https://developer.wordpress.org/block-editor/#the-data-lifecycle"
    },
    {
      "text": "← Key Concepts",
      "url": "https://developer.wordpress.org/block-editor/explanations/architecture/key-concepts/"
    },
    {
      "text": "Modularity →",
      "url": "https://developer.wordpress.org/block-editor/explanations/architecture/modularity/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Fhow-to-guides%2Finternationalization%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/docs/how-to-guides/internationalization.md"
    },
    {
      "text": "What is Internationalization?",
      "url": "https://developer.wordpress.org/block-editor/#what-is-internationalization"
    },
    {
      "text": "How to use i18n in JavaScript",
      "url": "https://developer.wordpress.org/block-editor/#how-to-use-i18n-in-javascript"
    },
    {
      "text": "",
      "url": "https://developer.wordpress.org/reference/functions/wp_set_script_translations/"
    },
    {
      "text": "wp_set_script_translations()",
      "url": "https://developer.wordpress.org/reference/functions/wp_set_script_translations/"
    },
    {
      "text": "WordPress Translations",
      "url": "https://make.wordpress.org/meta/handbook/documentation/translations/"
    },
    {
      "text": "Provide Your Own Translations",
      "url": "https://developer.wordpress.org/block-editor/#provide-your-own-translations"
    },
    {
      "text": "Create Translation File",
      "url": "https://developer.wordpress.org/block-editor/#create-translation-file"
    },
    {
      "text": "WP-CLI",
      "url": "https://wp-cli.org/"
    },
    {
      "text": "GlotPress",
      "url": "https://glotpress.blog/"
    },
    {
      "text": "Poedit",
      "url": "https://poedit.net/"
    },
    {
      "text": "wp i18n make-json command",
      "url": "https://developer.wordpress.org/cli/commands/i18n/make-json/"
    },
    {
      "text": "Load Translation File",
      "url": "https://developer.wordpress.org/block-editor/#load-translation-file"
    },
    {
      "text": "Test Translations",
      "url": "https://developer.wordpress.org/block-editor/#test-translations"
    },
    {
      "text": "Filtering Translations",
      "url": "https://developer.wordpress.org/block-editor/#filtering-translations"
    },
    {
      "text": "← How to use JavaScript with the Block Editor",
      "url": "https://developer.wordpress.org/block-editor/how-to-guides/javascript/"
    },
    {
      "text": "Meta Boxes →",
      "url": "https://developer.wordpress.org/block-editor/how-to-guides/metabox/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Fexplanations%2Farchitecture%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/docs/explanations/architecture/README.md"
    },
    {
      "text": "Editor",
      "url": "https://developer.wordpress.org/block-editor/#editor"
    },
    {
      "text": "Key concepts",
      "url": "https://developer.wordpress.org/block-editor/explanations/architecture/key-concepts/"
    },
    {
      "text": "Styles in the editor",
      "url": "https://developer.wordpress.org/block-editor/explanations/architecture/styles/"
    },
    {
      "text": "Gutenberg Repository",
      "url": "https://developer.wordpress.org/block-editor/#gutenberg-repository"
    },
    {
      "text": "Modularity and WordPress Packages",
      "url": "https://developer.wordpress.org/block-editor/explanations/architecture/modularity/"
    },
    {
      "text": "Understand the repository folder structure",
      "url": "https://developer.wordpress.org/block-editor/contributors/folder-structure/"
    },
    {
      "text": "Why is Puppeteer the tool of choice for end-to-end tests?",
      "url": "https://developer.wordpress.org/block-editor/explanations/architecture/automated-testing/"
    },
    {
      "text": "Key Concepts →",
      "url": "https://developer.wordpress.org/block-editor/explanations/architecture/key-concepts/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Fexplanations%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/docs/explanations/README.md"
    },
    {
      "text": "Data Format And Data Flow",
      "url": "https://developer.wordpress.org/block-editor/explanations/architecture/data-flow/"
    },
    {
      "text": "Block Editor Performance",
      "url": "https://developer.wordpress.org/block-editor/explanations/architecture/performance/"
    },
    {
      "text": "What’s the difference between the different editor packages? What’s the purpose of each package?",
      "url": "https://developer.wordpress.org/block-editor/explanations/architecture/modularity.md/#whats-the-difference-between-the-different-editor-packages-whats-the-purpose-of-each-package"
    },
    {
      "text": "Template and template parts flows",
      "url": "https://developer.wordpress.org/block-editor/explanations/architecture/full-site-editing-templates/"
    },
    {
      "text": "Architecture →",
      "url": "https://developer.wordpress.org/block-editor/explanations/architecture/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fdata%2Fdata-core-viewport%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/docs/reference-guides/data/data-core-viewport.md"
    },
    {
      "text": "isViewportMatch",
      "url": "https://developer.wordpress.org/block-editor/#isviewportmatch"
    },
    {
      "text": "← Rich Text",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/data/data-core-rich-text/"
    },
    {
      "text": "Explanations →",
      "url": "https://developer.wordpress.org/block-editor/explanations/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fdata%2Fdata-core-rich-text%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/docs/reference-guides/data/data-core-rich-text.md"
    },
    {
      "text": "getFormatType",
      "url": "https://developer.wordpress.org/block-editor/#getformattype"
    },
    {
      "text": "getFormatTypeForBareElement",
      "url": "https://developer.wordpress.org/block-editor/#getformattypeforbareelement"
    },
    {
      "text": "getFormatTypeForClassName",
      "url": "https://developer.wordpress.org/block-editor/#getformattypeforclassname"
    },
    {
      "text": "getFormatTypes",
      "url": "https://developer.wordpress.org/block-editor/#getformattypes"
    },
    {
      "text": "addFormatTypes",
      "url": "https://developer.wordpress.org/block-editor/#addformattypes"
    },
    {
      "text": "removeFormatTypes",
      "url": "https://developer.wordpress.org/block-editor/#removeformattypes"
    },
    {
      "text": "← Reusable blocks",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/data/data-core-reusable-blocks/"
    },
    {
      "text": "The Viewport Data →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/data/data-core-viewport/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fdata%2Fdata-core-reusable-blocks%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/docs/reference-guides/data/data-core-reusable-blocks.md"
    },
    {
      "text": "← The NUX (New User Experience) Data",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/data/data-core-nux/"
    },
    {
      "text": "Rich Text →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/data/data-core-rich-text/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fdata%2Fdata-core-nux%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/docs/reference-guides/data/data-core-nux.md"
    },
    {
      "text": "areTipsEnabled",
      "url": "https://developer.wordpress.org/block-editor/#aretipsenabled"
    },
    {
      "text": "getAssociatedGuide",
      "url": "https://developer.wordpress.org/block-editor/#getassociatedguide"
    },
    {
      "text": "isTipVisible",
      "url": "https://developer.wordpress.org/block-editor/#istipvisible"
    },
    {
      "text": "disableTips",
      "url": "https://developer.wordpress.org/block-editor/#disabletips"
    },
    {
      "text": "dismissTip",
      "url": "https://developer.wordpress.org/block-editor/#dismisstip"
    },
    {
      "text": "enableTips",
      "url": "https://developer.wordpress.org/block-editor/#enabletips"
    },
    {
      "text": "triggerGuide",
      "url": "https://developer.wordpress.org/block-editor/#triggerguide"
    },
    {
      "text": "← Preferences",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/data/data-core-preferences/"
    },
    {
      "text": "Reusable blocks →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/data/data-core-reusable-blocks/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fdata%2Fdata-core-preferences%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/docs/reference-guides/data/data-core-preferences.md"
    },
    {
      "text": "get",
      "url": "https://developer.wordpress.org/block-editor/#get"
    },
    {
      "text": "set",
      "url": "https://developer.wordpress.org/block-editor/#set"
    },
    {
      "text": "setDefaults",
      "url": "https://developer.wordpress.org/block-editor/#setdefaults"
    },
    {
      "text": "setPersistenceLayer",
      "url": "https://developer.wordpress.org/block-editor/#setpersistencelayer"
    },
    {
      "text": "toggle",
      "url": "https://developer.wordpress.org/block-editor/#toggle"
    },
    {
      "text": "← Notices Data",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/data/data-core-notices/"
    },
    {
      "text": "The NUX (New User Experience) Data →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/data/data-core-nux/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fdata%2Fdata-core-notices%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/docs/reference-guides/data/data-core-notices.md"
    },
    {
      "text": "getNotices",
      "url": "https://developer.wordpress.org/block-editor/#getnotices"
    },
    {
      "text": "createErrorNotice",
      "url": "https://developer.wordpress.org/block-editor/#createerrornotice"
    },
    {
      "text": "createInfoNotice",
      "url": "https://developer.wordpress.org/block-editor/#createinfonotice"
    },
    {
      "text": "createNotice",
      "url": "https://developer.wordpress.org/block-editor/#createnotice"
    },
    {
      "text": "createSuccessNotice",
      "url": "https://developer.wordpress.org/block-editor/#createsuccessnotice"
    },
    {
      "text": "createWarningNotice",
      "url": "https://developer.wordpress.org/block-editor/#createwarningnotice"
    },
    {
      "text": "removeNotice",
      "url": "https://developer.wordpress.org/block-editor/#removenotice"
    },
    {
      "text": "← The Keyboard Shortcuts Data",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/data/data-core-keyboard-shortcuts/"
    },
    {
      "text": "Preferences →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/data/data-core-preferences/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fdata%2Fdata-core-keyboard-shortcuts%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/docs/reference-guides/data/data-core-keyboard-shortcuts.md"
    },
    {
      "text": "getAllShortcutKeyCombinations",
      "url": "https://developer.wordpress.org/block-editor/#getallshortcutkeycombinations"
    },
    {
      "text": "getAllShortcutRawKeyCombinations",
      "url": "https://developer.wordpress.org/block-editor/#getallshortcutrawkeycombinations"
    },
    {
      "text": "getCategoryShortcuts",
      "url": "https://developer.wordpress.org/block-editor/#getcategoryshortcuts"
    },
    {
      "text": "getShortcutAliases",
      "url": "https://developer.wordpress.org/block-editor/#getshortcutaliases"
    },
    {
      "text": "getShortcutDescription",
      "url": "https://developer.wordpress.org/block-editor/#getshortcutdescription"
    },
    {
      "text": "getShortcutKeyCombination",
      "url": "https://developer.wordpress.org/block-editor/#getshortcutkeycombination"
    },
    {
      "text": "getShortcutRepresentation",
      "url": "https://developer.wordpress.org/block-editor/#getshortcutrepresentation"
    },
    {
      "text": "registerShortcut",
      "url": "https://developer.wordpress.org/block-editor/#registershortcut"
    },
    {
      "text": "unregisterShortcut",
      "url": "https://developer.wordpress.org/block-editor/#unregistershortcut"
    },
    {
      "text": "← The Post Editor’s Data",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/data/data-core-editor/"
    },
    {
      "text": "Notices Data →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/data/data-core-notices/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fdata%2Fdata-core-editor%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/docs/reference-guides/data/data-core-editor.md"
    },
    {
      "text": "canInsertBlockType",
      "url": "https://developer.wordpress.org/block-editor/#caninsertblocktype"
    },
    {
      "text": "canUserUseUnfilteredHTML",
      "url": "https://developer.wordpress.org/block-editor/#canuseruseunfilteredhtml"
    },
    {
      "text": "didPostSaveRequestFail",
      "url": "https://developer.wordpress.org/block-editor/#didpostsaverequestfail"
    },
    {
      "text": "didPostSaveRequestSucceed",
      "url": "https://developer.wordpress.org/block-editor/#didpostsaverequestsucceed"
    },
    {
      "text": "getActivePostLock",
      "url": "https://developer.wordpress.org/block-editor/#getactivepostlock"
    },
    {
      "text": "getAdjacentBlockClientId",
      "url": "https://developer.wordpress.org/block-editor/#getadjacentblockclientid"
    },
    {
      "text": "getAutosaveAttribute",
      "url": "https://developer.wordpress.org/block-editor/#getautosaveattribute"
    },
    {
      "text": "getBlock",
      "url": "https://developer.wordpress.org/block-editor/#getblock"
    },
    {
      "text": "getBlockCount",
      "url": "https://developer.wordpress.org/block-editor/#getblockcount"
    },
    {
      "text": "getBlockHierarchyRootClientId",
      "url": "https://developer.wordpress.org/block-editor/#getblockhierarchyrootclientid"
    },
    {
      "text": "getBlockIndex",
      "url": "https://developer.wordpress.org/block-editor/#getblockindex"
    },
    {
      "text": "getBlockInsertionPoint",
      "url": "https://developer.wordpress.org/block-editor/#getblockinsertionpoint"
    },
    {
      "text": "getBlockListSettings",
      "url": "https://developer.wordpress.org/block-editor/#getblocklistsettings"
    },
    {
      "text": "getBlockMode",
      "url": "https://developer.wordpress.org/block-editor/#getblockmode"
    },
    {
      "text": "getBlockName",
      "url": "https://developer.wordpress.org/block-editor/#getblockname"
    },
    {
      "text": "getBlockOrder",
      "url": "https://developer.wordpress.org/block-editor/#getblockorder"
    },
    {
      "text": "getBlockRootClientId",
      "url": "https://developer.wordpress.org/block-editor/#getblockrootclientid"
    },
    {
      "text": "getBlocks",
      "url": "https://developer.wordpress.org/block-editor/#getblocks"
    },
    {
      "text": "getBlocksByClientId",
      "url": "https://developer.wordpress.org/block-editor/#getblocksbyclientid"
    },
    {
      "text": "getBlockSelectionEnd",
      "url": "https://developer.wordpress.org/block-editor/#getblockselectionend"
    },
    {
      "text": "getBlockSelectionStart",
      "url": "https://developer.wordpress.org/block-editor/#getblockselectionstart"
    },
    {
      "text": "getClientIdsOfDescendants",
      "url": "https://developer.wordpress.org/block-editor/#getclientidsofdescendants"
    },
    {
      "text": "getClientIdsWithDescendants",
      "url": "https://developer.wordpress.org/block-editor/#getclientidswithdescendants"
    },
    {
      "text": "getCurrentPost",
      "url": "https://developer.wordpress.org/block-editor/#getcurrentpost"
    },
    {
      "text": "getCurrentPostAttribute",
      "url": "https://developer.wordpress.org/block-editor/#getcurrentpostattribute"
    },
    {
      "text": "getCurrentPostId",
      "url": "https://developer.wordpress.org/block-editor/#getcurrentpostid"
    },
    {
      "text": "getCurrentPostLastRevisionId",
      "url": "https://developer.wordpress.org/block-editor/#getcurrentpostlastrevisionid"
    },
    {
      "text": "getCurrentPostRevisionsCount",
      "url": "https://developer.wordpress.org/block-editor/#getcurrentpostrevisionscount"
    },
    {
      "text": "getCurrentPostType",
      "url": "https://developer.wordpress.org/block-editor/#getcurrentposttype"
    },
    {
      "text": "getEditedPostAttribute",
      "url": "https://developer.wordpress.org/block-editor/#geteditedpostattribute"
    },
    {
      "text": "getEditedPostContent",
      "url": "https://developer.wordpress.org/block-editor/#geteditedpostcontent"
    },
    {
      "text": "getEditedPostPreviewLink",
      "url": "https://developer.wordpress.org/block-editor/#geteditedpostpreviewlink"
    },
    {
      "text": "getEditedPostSlug",
      "url": "https://developer.wordpress.org/block-editor/#geteditedpostslug"
    },
    {
      "text": "getEditedPostVisibility",
      "url": "https://developer.wordpress.org/block-editor/#geteditedpostvisibility"
    },
    {
      "text": "getEditorBlocks",
      "url": "https://developer.wordpress.org/block-editor/#geteditorblocks"
    },
    {
      "text": "getEditorSelection",
      "url": "https://developer.wordpress.org/block-editor/#geteditorselection"
    },
    {
      "text": "getEditorSelectionEnd",
      "url": "https://developer.wordpress.org/block-editor/#geteditorselectionend"
    },
    {
      "text": "getEditorSelectionStart",
      "url": "https://developer.wordpress.org/block-editor/#geteditorselectionstart"
    },
    {
      "text": "getEditorSettings",
      "url": "https://developer.wordpress.org/block-editor/#geteditorsettings"
    },
    {
      "text": "getFirstMultiSelectedBlockClientId",
      "url": "https://developer.wordpress.org/block-editor/#getfirstmultiselectedblockclientid"
    },
    {
      "text": "getGlobalBlockCount",
      "url": "https://developer.wordpress.org/block-editor/#getglobalblockcount"
    },
    {
      "text": "getInserterItems",
      "url": "https://developer.wordpress.org/block-editor/#getinserteritems"
    },
    {
      "text": "getLastMultiSelectedBlockClientId",
      "url": "https://developer.wordpress.org/block-editor/#getlastmultiselectedblockclientid"
    },
    {
      "text": "getMultiSelectedBlockClientIds",
      "url": "https://developer.wordpress.org/block-editor/#getmultiselectedblockclientids"
    },
    {
      "text": "getMultiSelectedBlocks",
      "url": "https://developer.wordpress.org/block-editor/#getmultiselectedblocks"
    },
    {
      "text": "getMultiSelectedBlocksEndClientId",
      "url": "https://developer.wordpress.org/block-editor/#getmultiselectedblocksendclientid"
    },
    {
      "text": "getMultiSelectedBlocksStartClientId",
      "url": "https://developer.wordpress.org/block-editor/#getmultiselectedblocksstartclientid"
    },
    {
      "text": "getNextBlockClientId",
      "url": "https://developer.wordpress.org/block-editor/#getnextblockclientid"
    },
    {
      "text": "getPermalink",
      "url": "https://developer.wordpress.org/block-editor/#getpermalink"
    },
    {
      "text": "getPermalinkParts",
      "url": "https://developer.wordpress.org/block-editor/#getpermalinkparts"
    },
    {
      "text": "getPostEdits",
      "url": "https://developer.wordpress.org/block-editor/#getpostedits"
    },
    {
      "text": "getPostLockUser",
      "url": "https://developer.wordpress.org/block-editor/#getpostlockuser"
    },
    {
      "text": "getPostTypeLabel",
      "url": "https://developer.wordpress.org/block-editor/#getposttypelabel"
    },
    {
      "text": "getPreviousBlockClientId",
      "url": "https://developer.wordpress.org/block-editor/#getpreviousblockclientid"
    },
    {
      "text": "getSelectedBlock",
      "url": "https://developer.wordpress.org/block-editor/#getselectedblock"
    },
    {
      "text": "getSelectedBlockClientId",
      "url": "https://developer.wordpress.org/block-editor/#getselectedblockclientid"
    },
    {
      "text": "getSelectedBlockCount",
      "url": "https://developer.wordpress.org/block-editor/#getselectedblockcount"
    },
    {
      "text": "getSelectedBlocksInitialCaretPosition",
      "url": "https://developer.wordpress.org/block-editor/#getselectedblocksinitialcaretposition"
    },
    {
      "text": "getStateBeforeOptimisticTransaction",
      "url": "https://developer.wordpress.org/block-editor/#getstatebeforeoptimistictransaction"
    },
    {
      "text": "getSuggestedPostFormat",
      "url": "https://developer.wordpress.org/block-editor/#getsuggestedpostformat"
    },
    {
      "text": "getTemplate",
      "url": "https://developer.wordpress.org/block-editor/#gettemplate"
    },
    {
      "text": "getTemplateLock",
      "url": "https://developer.wordpress.org/block-editor/#gettemplatelock"
    },
    {
      "text": "hasChangedContent",
      "url": "https://developer.wordpress.org/block-editor/#haschangedcontent"
    },
    {
      "text": "hasEditorRedo",
      "url": "https://developer.wordpress.org/block-editor/#haseditorredo"
    },
    {
      "text": "hasEditorUndo",
      "url": "https://developer.wordpress.org/block-editor/#haseditorundo"
    },
    {
      "text": "hasInserterItems",
      "url": "https://developer.wordpress.org/block-editor/#hasinserteritems"
    },
    {
      "text": "hasMultiSelection",
      "url": "https://developer.wordpress.org/block-editor/#hasmultiselection"
    },
    {
      "text": "hasNonPostEntityChanges",
      "url": "https://developer.wordpress.org/block-editor/#hasnonpostentitychanges"
    },
    {
      "text": "hasSelectedBlock",
      "url": "https://developer.wordpress.org/block-editor/#hasselectedblock"
    },
    {
      "text": "hasSelectedInnerBlock",
      "url": "https://developer.wordpress.org/block-editor/#hasselectedinnerblock"
    },
    {
      "text": "inSomeHistory",
      "url": "https://developer.wordpress.org/block-editor/#insomehistory"
    },
    {
      "text": "isAncestorMultiSelected",
      "url": "https://developer.wordpress.org/block-editor/#isancestormultiselected"
    },
    {
      "text": "isAutosavingPost",
      "url": "https://developer.wordpress.org/block-editor/#isautosavingpost"
    },
    {
      "text": "isBlockInsertionPointVisible",
      "url": "https://developer.wordpress.org/block-editor/#isblockinsertionpointvisible"
    },
    {
      "text": "isBlockMultiSelected",
      "url": "https://developer.wordpress.org/block-editor/#isblockmultiselected"
    },
    {
      "text": "isBlockSelected",
      "url": "https://developer.wordpress.org/block-editor/#isblockselected"
    },
    {
      "text": "isBlockValid",
      "url": "https://developer.wordpress.org/block-editor/#isblockvalid"
    },
    {
      "text": "isBlockWithinSelection",
      "url": "https://developer.wordpress.org/block-editor/#isblockwithinselection"
    },
    {
      "text": "isCaretWithinFormattedText",
      "url": "https://developer.wordpress.org/block-editor/#iscaretwithinformattedtext"
    },
    {
      "text": "isCleanNewPost",
      "url": "https://developer.wordpress.org/block-editor/#iscleannewpost"
    },
    {
      "text": "isCurrentPostPending",
      "url": "https://developer.wordpress.org/block-editor/#iscurrentpostpending"
    },
    {
      "text": "isCurrentPostPublished",
      "url": "https://developer.wordpress.org/block-editor/#iscurrentpostpublished"
    },
    {
      "text": "isCurrentPostScheduled",
      "url": "https://developer.wordpress.org/block-editor/#iscurrentpostscheduled"
    },
    {
      "text": "isDeletingPost",
      "url": "https://developer.wordpress.org/block-editor/#isdeletingpost"
    },
    {
      "text": "isEditedPostAutosaveable",
      "url": "https://developer.wordpress.org/block-editor/#iseditedpostautosaveable"
    },
    {
      "text": "isEditedPostBeingScheduled",
      "url": "https://developer.wordpress.org/block-editor/#iseditedpostbeingscheduled"
    },
    {
      "text": "isEditedPostDateFloating",
      "url": "https://developer.wordpress.org/block-editor/#iseditedpostdatefloating"
    },
    {
      "text": "isEditedPostDirty",
      "url": "https://developer.wordpress.org/block-editor/#iseditedpostdirty"
    },
    {
      "text": "isEditedPostEmpty",
      "url": "https://developer.wordpress.org/block-editor/#iseditedpostempty"
    },
    {
      "text": "isEditedPostNew",
      "url": "https://developer.wordpress.org/block-editor/#iseditedpostnew"
    },
    {
      "text": "isEditedPostPublishable",
      "url": "https://developer.wordpress.org/block-editor/#iseditedpostpublishable"
    },
    {
      "text": "isEditedPostSaveable",
      "url": "https://developer.wordpress.org/block-editor/#iseditedpostsaveable"
    },
    {
      "text": "isFirstMultiSelectedBlock",
      "url": "https://developer.wordpress.org/block-editor/#isfirstmultiselectedblock"
    },
    {
      "text": "isMultiSelecting",
      "url": "https://developer.wordpress.org/block-editor/#ismultiselecting"
    },
    {
      "text": "isPermalinkEditable",
      "url": "https://developer.wordpress.org/block-editor/#ispermalinkeditable"
    },
    {
      "text": "isPostAutosavingLocked",
      "url": "https://developer.wordpress.org/block-editor/#ispostautosavinglocked"
    },
    {
      "text": "isPostLocked",
      "url": "https://developer.wordpress.org/block-editor/#ispostlocked"
    },
    {
      "text": "isPostLockTakeover",
      "url": "https://developer.wordpress.org/block-editor/#ispostlocktakeover"
    },
    {
      "text": "isPostSavingLocked",
      "url": "https://developer.wordpress.org/block-editor/#ispostsavinglocked"
    },
    {
      "text": "isPreviewingPost",
      "url": "https://developer.wordpress.org/block-editor/#ispreviewingpost"
    },
    {
      "text": "isPublishingPost",
      "url": "https://developer.wordpress.org/block-editor/#ispublishingpost"
    },
    {
      "text": "isPublishSidebarEnabled",
      "url": "https://developer.wordpress.org/block-editor/#ispublishsidebarenabled"
    },
    {
      "text": "isSavingNonPostEntityChanges",
      "url": "https://developer.wordpress.org/block-editor/#issavingnonpostentitychanges"
    },
    {
      "text": "isSavingPost",
      "url": "https://developer.wordpress.org/block-editor/#issavingpost"
    },
    {
      "text": "isSelectionEnabled",
      "url": "https://developer.wordpress.org/block-editor/#isselectionenabled"
    },
    {
      "text": "isTyping",
      "url": "https://developer.wordpress.org/block-editor/#istyping"
    },
    {
      "text": "isValidTemplate",
      "url": "https://developer.wordpress.org/block-editor/#isvalidtemplate"
    },
    {
      "text": "autosave",
      "url": "https://developer.wordpress.org/block-editor/#autosave"
    },
    {
      "text": "clearSelectedBlock",
      "url": "https://developer.wordpress.org/block-editor/#clearselectedblock"
    },
    {
      "text": "createUndoLevel",
      "url": "https://developer.wordpress.org/block-editor/#createundolevel"
    },
    {
      "text": "disablePublishSidebar",
      "url": "https://developer.wordpress.org/block-editor/#disablepublishsidebar"
    },
    {
      "text": "editPost",
      "url": "https://developer.wordpress.org/block-editor/#editpost"
    },
    {
      "text": "enablePublishSidebar",
      "url": "https://developer.wordpress.org/block-editor/#enablepublishsidebar"
    },
    {
      "text": "enterFormattedText",
      "url": "https://developer.wordpress.org/block-editor/#enterformattedtext"
    },
    {
      "text": "exitFormattedText",
      "url": "https://developer.wordpress.org/block-editor/#exitformattedtext"
    },
    {
      "text": "hideInsertionPoint",
      "url": "https://developer.wordpress.org/block-editor/#hideinsertionpoint"
    },
    {
      "text": "insertBlock",
      "url": "https://developer.wordpress.org/block-editor/#insertblock"
    },
    {
      "text": "insertBlocks",
      "url": "https://developer.wordpress.org/block-editor/#insertblocks"
    },
    {
      "text": "insertDefaultBlock",
      "url": "https://developer.wordpress.org/block-editor/#insertdefaultblock"
    },
    {
      "text": "lockPostAutosaving",
      "url": "https://developer.wordpress.org/block-editor/#lockpostautosaving"
    },
    {
      "text": "lockPostSaving",
      "url": "https://developer.wordpress.org/block-editor/#lockpostsaving"
    },
    {
      "text": "mergeBlocks",
      "url": "https://developer.wordpress.org/block-editor/#mergeblocks"
    },
    {
      "text": "moveBlocksDown",
      "url": "https://developer.wordpress.org/block-editor/#moveblocksdown"
    },
    {
      "text": "moveBlocksUp",
      "url": "https://developer.wordpress.org/block-editor/#moveblocksup"
    },
    {
      "text": "moveBlockToPosition",
      "url": "https://developer.wordpress.org/block-editor/#moveblocktoposition"
    },
    {
      "text": "multiSelect",
      "url": "https://developer.wordpress.org/block-editor/#multiselect"
    },
    {
      "text": "receiveBlocks",
      "url": "https://developer.wordpress.org/block-editor/#receiveblocks"
    },
    {
      "text": "refreshPost",
      "url": "https://developer.wordpress.org/block-editor/#refreshpost"
    },
    {
      "text": "removeBlock",
      "url": "https://developer.wordpress.org/block-editor/#removeblock"
    },
    {
      "text": "removeBlocks",
      "url": "https://developer.wordpress.org/block-editor/#removeblocks"
    },
    {
      "text": "replaceBlock",
      "url": "https://developer.wordpress.org/block-editor/#replaceblock"
    },
    {
      "text": "replaceBlocks",
      "url": "https://developer.wordpress.org/block-editor/#replaceblocks"
    },
    {
      "text": "resetBlocks",
      "url": "https://developer.wordpress.org/block-editor/#resetblocks"
    },
    {
      "text": "resetEditorBlocks",
      "url": "https://developer.wordpress.org/block-editor/#reseteditorblocks"
    },
    {
      "text": "resetPost",
      "url": "https://developer.wordpress.org/block-editor/#resetpost"
    },
    {
      "text": "savePost",
      "url": "https://developer.wordpress.org/block-editor/#savepost"
    },
    {
      "text": "selectBlock",
      "url": "https://developer.wordpress.org/block-editor/#selectblock"
    },
    {
      "text": "setTemplateValidity",
      "url": "https://developer.wordpress.org/block-editor/#settemplatevalidity"
    },
    {
      "text": "setupEditor",
      "url": "https://developer.wordpress.org/block-editor/#setupeditor"
    },
    {
      "text": "setupEditorState",
      "url": "https://developer.wordpress.org/block-editor/#setupeditorstate"
    },
    {
      "text": "showInsertionPoint",
      "url": "https://developer.wordpress.org/block-editor/#showinsertionpoint"
    },
    {
      "text": "startMultiSelect",
      "url": "https://developer.wordpress.org/block-editor/#startmultiselect"
    },
    {
      "text": "startTyping",
      "url": "https://developer.wordpress.org/block-editor/#starttyping"
    },
    {
      "text": "stopMultiSelect",
      "url": "https://developer.wordpress.org/block-editor/#stopmultiselect"
    },
    {
      "text": "stopTyping",
      "url": "https://developer.wordpress.org/block-editor/#stoptyping"
    },
    {
      "text": "synchronizeTemplate",
      "url": "https://developer.wordpress.org/block-editor/#synchronizetemplate"
    },
    {
      "text": "toggleBlockMode",
      "url": "https://developer.wordpress.org/block-editor/#toggleblockmode"
    },
    {
      "text": "toggleSelection",
      "url": "https://developer.wordpress.org/block-editor/#toggleselection"
    },
    {
      "text": "trashPost",
      "url": "https://developer.wordpress.org/block-editor/#trashpost"
    },
    {
      "text": "unlockPostAutosaving",
      "url": "https://developer.wordpress.org/block-editor/#unlockpostautosaving"
    },
    {
      "text": "unlockPostSaving",
      "url": "https://developer.wordpress.org/block-editor/#unlockpostsaving"
    },
    {
      "text": "updateBlock",
      "url": "https://developer.wordpress.org/block-editor/#updateblock"
    },
    {
      "text": "updateBlockAttributes",
      "url": "https://developer.wordpress.org/block-editor/#updateblockattributes"
    },
    {
      "text": "updateBlockListSettings",
      "url": "https://developer.wordpress.org/block-editor/#updateblocklistsettings"
    },
    {
      "text": "updateEditorSettings",
      "url": "https://developer.wordpress.org/block-editor/#updateeditorsettings"
    },
    {
      "text": "updatePost",
      "url": "https://developer.wordpress.org/block-editor/#updatepost"
    },
    {
      "text": "updatePostLock",
      "url": "https://developer.wordpress.org/block-editor/#updatepostlock"
    },
    {
      "text": "← Edit Widgets",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/data/data-core-edit-widgets/"
    },
    {
      "text": "The Keyboard Shortcuts Data →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/data/data-core-keyboard-shortcuts/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fdata%2Fdata-core-edit-widgets%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/docs/reference-guides/data/data-core-edit-widgets.md"
    },
    {
      "text": "canInsertBlockInWidgetArea",
      "url": "https://developer.wordpress.org/block-editor/#caninsertblockinwidgetarea"
    },
    {
      "text": "getEditedWidgetAreas",
      "url": "https://developer.wordpress.org/block-editor/#geteditedwidgetareas"
    },
    {
      "text": "getIsWidgetAreaOpen",
      "url": "https://developer.wordpress.org/block-editor/#getiswidgetareaopen"
    },
    {
      "text": "getParentWidgetAreaBlock",
      "url": "https://developer.wordpress.org/block-editor/#getparentwidgetareablock"
    },
    {
      "text": "getReferenceWidgetBlocks",
      "url": "https://developer.wordpress.org/block-editor/#getreferencewidgetblocks"
    },
    {
      "text": "getWidget",
      "url": "https://developer.wordpress.org/block-editor/#getwidget"
    },
    {
      "text": "getWidgetAreaForWidgetId",
      "url": "https://developer.wordpress.org/block-editor/#getwidgetareaforwidgetid"
    },
    {
      "text": "getWidgetAreas",
      "url": "https://developer.wordpress.org/block-editor/#getwidgetareas"
    },
    {
      "text": "getWidgets",
      "url": "https://developer.wordpress.org/block-editor/#getwidgets"
    },
    {
      "text": "isInserterOpened",
      "url": "https://developer.wordpress.org/block-editor/#isinserteropened"
    },
    {
      "text": "isListViewOpened",
      "url": "https://developer.wordpress.org/block-editor/#islistviewopened"
    },
    {
      "text": "isSavingWidgetAreas",
      "url": "https://developer.wordpress.org/block-editor/#issavingwidgetareas"
    },
    {
      "text": "closeGeneralSidebar",
      "url": "https://developer.wordpress.org/block-editor/#closegeneralsidebar"
    },
    {
      "text": "moveBlockToWidgetArea",
      "url": "https://developer.wordpress.org/block-editor/#moveblocktowidgetarea"
    },
    {
      "text": "persistStubPost",
      "url": "https://developer.wordpress.org/block-editor/#persiststubpost"
    },
    {
      "text": "saveEditedWidgetAreas",
      "url": "https://developer.wordpress.org/block-editor/#saveeditedwidgetareas"
    },
    {
      "text": "saveWidgetArea",
      "url": "https://developer.wordpress.org/block-editor/#savewidgetarea"
    },
    {
      "text": "saveWidgetAreas",
      "url": "https://developer.wordpress.org/block-editor/#savewidgetareas"
    },
    {
      "text": "setIsInserterOpened",
      "url": "https://developer.wordpress.org/block-editor/#setisinserteropened"
    },
    {
      "text": "setIsListViewOpened",
      "url": "https://developer.wordpress.org/block-editor/#setislistviewopened"
    },
    {
      "text": "setIsWidgetAreaOpen",
      "url": "https://developer.wordpress.org/block-editor/#setiswidgetareaopen"
    },
    {
      "text": "setWidgetAreasOpenState",
      "url": "https://developer.wordpress.org/block-editor/#setwidgetareasopenstate"
    },
    {
      "text": "setWidgetIdForClientId",
      "url": "https://developer.wordpress.org/block-editor/#setwidgetidforclientid"
    },
    {
      "text": "← Edit Site",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/data/data-core-edit-site/"
    },
    {
      "text": "The Post Editor’s Data →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/data/data-core-editor/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fdata%2Fdata-core-edit-site%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/docs/reference-guides/data/data-core-edit-site.md"
    },
    {
      "text": "getCanUserCreateMedia",
      "url": "https://developer.wordpress.org/block-editor/#getcanusercreatemedia"
    },
    {
      "text": "getCurrentTemplateNavigationPanelSubMenu",
      "url": "https://developer.wordpress.org/block-editor/#getcurrenttemplatenavigationpanelsubmenu"
    },
    {
      "text": "getCurrentTemplateTemplateParts",
      "url": "https://developer.wordpress.org/block-editor/#getcurrenttemplatetemplateparts"
    },
    {
      "text": "getEditedPostContext",
      "url": "https://developer.wordpress.org/block-editor/#geteditedpostcontext"
    },
    {
      "text": "getEditedPostId",
      "url": "https://developer.wordpress.org/block-editor/#geteditedpostid"
    },
    {
      "text": "getEditedPostType",
      "url": "https://developer.wordpress.org/block-editor/#geteditedposttype"
    },
    {
      "text": "getEditorMode",
      "url": "https://developer.wordpress.org/block-editor/#geteditormode"
    },
    {
      "text": "getHomeTemplateId",
      "url": "https://developer.wordpress.org/block-editor/#gethometemplateid"
    },
    {
      "text": "getNavigationPanelActiveMenu",
      "url": "https://developer.wordpress.org/block-editor/#getnavigationpanelactivemenu"
    },
    {
      "text": "getPage",
      "url": "https://developer.wordpress.org/block-editor/#getpage"
    },
    {
      "text": "getReusableBlocks",
      "url": "https://developer.wordpress.org/block-editor/#getreusableblocks"
    },
    {
      "text": "isFeatureActive",
      "url": "https://developer.wordpress.org/block-editor/#isfeatureactive"
    },
    {
      "text": "isNavigationOpened",
      "url": "https://developer.wordpress.org/block-editor/#isnavigationopened"
    },
    {
      "text": "isSaveViewOpened",
      "url": "https://developer.wordpress.org/block-editor/#issaveviewopened"
    },
    {
      "text": "addTemplate",
      "url": "https://developer.wordpress.org/block-editor/#addtemplate"
    },
    {
      "text": "openGeneralSidebar",
      "url": "https://developer.wordpress.org/block-editor/#opengeneralsidebar"
    },
    {
      "text": "openNavigationPanelToMenu",
      "url": "https://developer.wordpress.org/block-editor/#opennavigationpaneltomenu"
    },
    {
      "text": "removeTemplate",
      "url": "https://developer.wordpress.org/block-editor/#removetemplate"
    },
    {
      "text": "revertTemplate",
      "url": "https://developer.wordpress.org/block-editor/#reverttemplate"
    },
    {
      "text": "setEditedPostContext",
      "url": "https://developer.wordpress.org/block-editor/#seteditedpostcontext"
    },
    {
      "text": "setHomeTemplateId",
      "url": "https://developer.wordpress.org/block-editor/#sethometemplateid"
    },
    {
      "text": "setIsNavigationPanelOpened",
      "url": "https://developer.wordpress.org/block-editor/#setisnavigationpanelopened"
    },
    {
      "text": "setIsSaveViewOpened",
      "url": "https://developer.wordpress.org/block-editor/#setissaveviewopened"
    },
    {
      "text": "setNavigationPanelActiveMenu",
      "url": "https://developer.wordpress.org/block-editor/#setnavigationpanelactivemenu"
    },
    {
      "text": "setPage",
      "url": "https://developer.wordpress.org/block-editor/#setpage"
    },
    {
      "text": "setTemplate",
      "url": "https://developer.wordpress.org/block-editor/#settemplate"
    },
    {
      "text": "setTemplatePart",
      "url": "https://developer.wordpress.org/block-editor/#settemplatepart"
    },
    {
      "text": "switchEditorMode",
      "url": "https://developer.wordpress.org/block-editor/#switcheditormode"
    },
    {
      "text": "toggleFeature",
      "url": "https://developer.wordpress.org/block-editor/#togglefeature"
    },
    {
      "text": "updateSettings",
      "url": "https://developer.wordpress.org/block-editor/#updatesettings"
    },
    {
      "text": "← The Editor’s UI Data",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/data/data-core-edit-post/"
    },
    {
      "text": "Edit Widgets →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/data/data-core-edit-widgets/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fdata%2Fdata-core-edit-post%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/docs/reference-guides/data/data-core-edit-post.md"
    },
    {
      "text": "areMetaBoxesInitialized",
      "url": "https://developer.wordpress.org/block-editor/#aremetaboxesinitialized"
    },
    {
      "text": "getActiveGeneralSidebarName",
      "url": "https://developer.wordpress.org/block-editor/#getactivegeneralsidebarname"
    },
    {
      "text": "getActiveMetaBoxLocations",
      "url": "https://developer.wordpress.org/block-editor/#getactivemetaboxlocations"
    },
    {
      "text": "getAllMetaBoxes",
      "url": "https://developer.wordpress.org/block-editor/#getallmetaboxes"
    },
    {
      "text": "getEditedPostTemplate",
      "url": "https://developer.wordpress.org/block-editor/#geteditedposttemplate"
    },
    {
      "text": "getHiddenBlockTypes",
      "url": "https://developer.wordpress.org/block-editor/#gethiddenblocktypes"
    },
    {
      "text": "getMetaBoxesPerLocation",
      "url": "https://developer.wordpress.org/block-editor/#getmetaboxesperlocation"
    },
    {
      "text": "getPreference",
      "url": "https://developer.wordpress.org/block-editor/#getpreference"
    },
    {
      "text": "getPreferences",
      "url": "https://developer.wordpress.org/block-editor/#getpreferences"
    },
    {
      "text": "hasMetaBoxes",
      "url": "https://developer.wordpress.org/block-editor/#hasmetaboxes"
    },
    {
      "text": "isEditingTemplate",
      "url": "https://developer.wordpress.org/block-editor/#iseditingtemplate"
    },
    {
      "text": "isEditorPanelEnabled",
      "url": "https://developer.wordpress.org/block-editor/#iseditorpanelenabled"
    },
    {
      "text": "isEditorPanelOpened",
      "url": "https://developer.wordpress.org/block-editor/#iseditorpanelopened"
    },
    {
      "text": "isEditorPanelRemoved",
      "url": "https://developer.wordpress.org/block-editor/#iseditorpanelremoved"
    },
    {
      "text": "isEditorSidebarOpened",
      "url": "https://developer.wordpress.org/block-editor/#iseditorsidebaropened"
    },
    {
      "text": "isMetaBoxLocationActive",
      "url": "https://developer.wordpress.org/block-editor/#ismetaboxlocationactive"
    },
    {
      "text": "isMetaBoxLocationVisible",
      "url": "https://developer.wordpress.org/block-editor/#ismetaboxlocationvisible"
    },
    {
      "text": "isModalActive",
      "url": "https://developer.wordpress.org/block-editor/#ismodalactive"
    },
    {
      "text": "isPluginItemPinned",
      "url": "https://developer.wordpress.org/block-editor/#ispluginitempinned"
    },
    {
      "text": "isPluginSidebarOpened",
      "url": "https://developer.wordpress.org/block-editor/#ispluginsidebaropened"
    },
    {
      "text": "isPublishSidebarOpened",
      "url": "https://developer.wordpress.org/block-editor/#ispublishsidebaropened"
    },
    {
      "text": "isSavingMetaBoxes",
      "url": "https://developer.wordpress.org/block-editor/#issavingmetaboxes"
    },
    {
      "text": "closeModal",
      "url": "https://developer.wordpress.org/block-editor/#closemodal"
    },
    {
      "text": "closePublishSidebar",
      "url": "https://developer.wordpress.org/block-editor/#closepublishsidebar"
    },
    {
      "text": "hideBlockTypes",
      "url": "https://developer.wordpress.org/block-editor/#hideblocktypes"
    },
    {
      "text": "initializeMetaBoxes",
      "url": "https://developer.wordpress.org/block-editor/#initializemetaboxes"
    },
    {
      "text": "metaBoxUpdatesFailure",
      "url": "https://developer.wordpress.org/block-editor/#metaboxupdatesfailure"
    },
    {
      "text": "metaBoxUpdatesSuccess",
      "url": "https://developer.wordpress.org/block-editor/#metaboxupdatessuccess"
    },
    {
      "text": "openModal",
      "url": "https://developer.wordpress.org/block-editor/#openmodal"
    },
    {
      "text": "openPublishSidebar",
      "url": "https://developer.wordpress.org/block-editor/#openpublishsidebar"
    },
    {
      "text": "removeEditorPanel",
      "url": "https://developer.wordpress.org/block-editor/#removeeditorpanel"
    },
    {
      "text": "requestMetaBoxUpdates",
      "url": "https://developer.wordpress.org/block-editor/#requestmetaboxupdates"
    },
    {
      "text": "setAvailableMetaBoxesPerLocation",
      "url": "https://developer.wordpress.org/block-editor/#setavailablemetaboxesperlocation"
    },
    {
      "text": "setIsEditingTemplate",
      "url": "https://developer.wordpress.org/block-editor/#setiseditingtemplate"
    },
    {
      "text": "showBlockTypes",
      "url": "https://developer.wordpress.org/block-editor/#showblocktypes"
    },
    {
      "text": "toggleEditorPanelEnabled",
      "url": "https://developer.wordpress.org/block-editor/#toggleeditorpanelenabled"
    },
    {
      "text": "toggleEditorPanelOpened",
      "url": "https://developer.wordpress.org/block-editor/#toggleeditorpanelopened"
    },
    {
      "text": "togglePinnedPluginItem",
      "url": "https://developer.wordpress.org/block-editor/#togglepinnedpluginitem"
    },
    {
      "text": "togglePublishSidebar",
      "url": "https://developer.wordpress.org/block-editor/#togglepublishsidebar"
    },
    {
      "text": "updatePreferredStyleVariations",
      "url": "https://developer.wordpress.org/block-editor/#updatepreferredstylevariations"
    },
    {
      "text": "← Customize Widgets",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/data/data-core-customize-widgets/"
    },
    {
      "text": "Edit Site →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/data/data-core-edit-site/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fdata%2Fdata-core-customize-widgets%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/docs/reference-guides/data/data-core-customize-widgets.md"
    },
    {
      "text": "← Block Types Data",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/data/data-core-blocks/"
    },
    {
      "text": "The Editor’s UI Data →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/data/data-core-edit-post/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fdata%2Fdata-core-blocks%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/docs/reference-guides/data/data-core-blocks.md"
    },
    {
      "text": "getActiveBlockVariation",
      "url": "https://developer.wordpress.org/block-editor/#getactiveblockvariation"
    },
    {
      "text": "getBlockStyles",
      "url": "https://developer.wordpress.org/block-editor/#getblockstyles"
    },
    {
      "text": "getBlockVariations",
      "url": "https://developer.wordpress.org/block-editor/#getblockvariations"
    },
    {
      "text": "getCategories",
      "url": "https://developer.wordpress.org/block-editor/#getcategories"
    },
    {
      "text": "getCollections",
      "url": "https://developer.wordpress.org/block-editor/#getcollections"
    },
    {
      "text": "getDefaultBlockVariation",
      "url": "https://developer.wordpress.org/block-editor/#getdefaultblockvariation"
    },
    {
      "text": "getFreeformFallbackBlockName",
      "url": "https://developer.wordpress.org/block-editor/#getfreeformfallbackblockname"
    },
    {
      "text": "getUnregisteredFallbackBlockName",
      "url": "https://developer.wordpress.org/block-editor/#getunregisteredfallbackblockname"
    },
    {
      "text": "isMatchingSearchTerm",
      "url": "https://developer.wordpress.org/block-editor/#ismatchingsearchterm"
    },
    {
      "text": "here",
      "url": "https://developer.wordpress.org/block-editor/reference-guide/packages/packages-blocks/"
    },
    {
      "text": "← The Block Editor’s Data",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/data/data-core-block-editor/"
    },
    {
      "text": "Customize Widgets →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/data/data-core-customize-widgets/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fpackages%2Fpackages-dependency-extraction-webpack-plugin%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/packages/dependency-extraction-webpack-plugin/README.md"
    },
    {
      "text": "webpack website",
      "url": "https://webpack.js.org"
    },
    {
      "text": "Webpack",
      "url": "https://developer.wordpress.org/block-editor/#webpack"
    },
    {
      "text": "webpack externals",
      "url": "https://webpack.js.org/configuration/externals"
    },
    {
      "text": "WordPress",
      "url": "https://developer.wordpress.org/block-editor/#wordpress"
    },
    {
      "text": "← @wordpress/date",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-date/"
    },
    {
      "text": "@wordpress/deprecated →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-deprecated/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Fexplanations%2Farchitecture%2Fmodularity.md%2F&locale=en_US"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fcomponents%2Fslot-fill%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/packages/components/src/slot-fill/README.md"
    },
    {
      "text": "react-slot-fill library",
      "url": "https://github.com/camwest/react-slot-fill"
    },
    {
      "text": "← SelectControl",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/select-control/"
    },
    {
      "text": "Snackbar →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/snackbar/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fcomponents%2Ftooltip%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/packages/components/src/tooltip/README.md"
    },
    {
      "text": "position",
      "url": "https://developer.wordpress.org/block-editor/#position"
    },
    {
      "text": "children",
      "url": "https://developer.wordpress.org/block-editor/#children"
    },
    {
      "text": "text",
      "url": "https://developer.wordpress.org/block-editor/#text"
    },
    {
      "text": "shortcut (web only)",
      "url": "https://developer.wordpress.org/block-editor/#shortcut-web-only"
    },
    {
      "text": "delay (web only)",
      "url": "https://developer.wordpress.org/block-editor/#delay-web-only"
    },
    {
      "text": "visible (native only)",
      "url": "https://developer.wordpress.org/block-editor/#visible-native-only"
    },
    {
      "text": "← ToolsPanel",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/tools-panel/"
    },
    {
      "text": "TreeGrid →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/tree-grid/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fcomponents%2Fpopover%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/packages/components/src/popover/README.md"
    },
    {
      "text": "anchor: Element | VirtualElement | null",
      "url": "https://developer.wordpress.org/block-editor/#anchor-element-virtualelement-null"
    },
    {
      "text": "anchorRect: DomRectWithOwnerDocument",
      "url": "https://developer.wordpress.org/block-editor/#anchorrect-domrectwithownerdocument"
    },
    {
      "text": "anchorRef: Element | PopoverAnchorRefReference | PopoverAnchorRefTopBottom | Range",
      "url": "https://developer.wordpress.org/block-editor/#anchorref-element-popoveranchorrefreference-popoveranchorreftopbottom-range"
    },
    {
      "text": "animate: boolean",
      "url": "https://developer.wordpress.org/block-editor/#animate-boolean"
    },
    {
      "text": "children: ReactNode",
      "url": "https://developer.wordpress.org/block-editor/#children-reactnode"
    },
    {
      "text": "expandOnMobile: boolean",
      "url": "https://developer.wordpress.org/block-editor/#expandonmobile-boolean"
    },
    {
      "text": "flip: boolean",
      "url": "https://developer.wordpress.org/block-editor/#flip-boolean"
    },
    {
      "text": "focusOnMount: 'firstElement' | boolean",
      "url": "https://developer.wordpress.org/block-editor/#focusonmount-firstelement-boolean"
    },
    {
      "text": "onFocusOutside: ( event: SyntheticEvent ) => void",
      "url": "https://developer.wordpress.org/block-editor/#onfocusoutside-event-syntheticevent-void"
    },
    {
      "text": "getAnchorRect: ( fallbackReferenceElement: Element | null ) => DomRectWithOwnerDocument",
      "url": "https://developer.wordpress.org/block-editor/#getanchorrect-fallbackreferenceelement-element-null-domrectwithownerdocument"
    },
    {
      "text": "headerTitle: string",
      "url": "https://developer.wordpress.org/block-editor/#headertitle-string"
    },
    {
      "text": "isAlternate: boolean",
      "url": "https://developer.wordpress.org/block-editor/#isalternate-boolean"
    },
    {
      "text": "noArrow: boolean",
      "url": "https://developer.wordpress.org/block-editor/#noarrow-boolean"
    },
    {
      "text": "offset: number",
      "url": "https://developer.wordpress.org/block-editor/#offset-number"
    },
    {
      "text": "onClose: () => void",
      "url": "https://developer.wordpress.org/block-editor/#onclose-void"
    },
    {
      "text": "placement: 'top' | 'top-start' | 'top-end' | 'right' | 'right-start' | 'right-end' | 'bottom' | 'bottom-start' | 'bottom-end' | 'left' | 'left-start' | 'left-end' | 'overlay'",
      "url": "https://developer.wordpress.org/block-editor/#placement-top-top-start-top-end-right-right-start-right-end-bottom-bottom-start-bottom-end-left-left-start-left-end-overlay"
    },
    {
      "text": "position: [yAxis] [xAxis] [optionalCorner]",
      "url": "https://developer.wordpress.org/block-editor/#position-yaxis-xaxis-optionalcorner"
    },
    {
      "text": "resize: boolean",
      "url": "https://developer.wordpress.org/block-editor/#resize-boolean"
    },
    {
      "text": "variant: 'toolbar' | 'unstyled'",
      "url": "https://developer.wordpress.org/block-editor/#variant-toolbar-unstyled"
    },
    {
      "text": "Toolbar component",
      "url": "https://developer.wordpress.org/block-editor/reference-guide/components/toolbar/"
    },
    {
      "text": "← Placeholder",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/placeholder/"
    },
    {
      "text": "QueryControls →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/query-controls/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fdata%2Fdata-core-block-editor%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/docs/reference-guides/data/data-core-block-editor.md"
    },
    {
      "text": "areInnerBlocksControlled",
      "url": "https://developer.wordpress.org/block-editor/#areinnerblockscontrolled"
    },
    {
      "text": "canEditBlock",
      "url": "https://developer.wordpress.org/block-editor/#caneditblock"
    },
    {
      "text": "canInsertBlocks",
      "url": "https://developer.wordpress.org/block-editor/#caninsertblocks"
    },
    {
      "text": "canLockBlockType",
      "url": "https://developer.wordpress.org/block-editor/#canlockblocktype"
    },
    {
      "text": "canMoveBlock",
      "url": "https://developer.wordpress.org/block-editor/#canmoveblock"
    },
    {
      "text": "canMoveBlocks",
      "url": "https://developer.wordpress.org/block-editor/#canmoveblocks"
    },
    {
      "text": "canRemoveBlock",
      "url": "https://developer.wordpress.org/block-editor/#canremoveblock"
    },
    {
      "text": "canRemoveBlocks",
      "url": "https://developer.wordpress.org/block-editor/#canremoveblocks"
    },
    {
      "text": "didAutomaticChange",
      "url": "https://developer.wordpress.org/block-editor/#didautomaticchange"
    },
    {
      "text": "getAllowedBlocks",
      "url": "https://developer.wordpress.org/block-editor/#getallowedblocks"
    },
    {
      "text": "getBlockNamesByClientId",
      "url": "https://developer.wordpress.org/block-editor/#getblocknamesbyclientid"
    },
    {
      "text": "getBlockParents",
      "url": "https://developer.wordpress.org/block-editor/#getblockparents"
    },
    {
      "text": "getBlockParentsByBlockName",
      "url": "https://developer.wordpress.org/block-editor/#getblockparentsbyblockname"
    },
    {
      "text": "getBlockTransformItems",
      "url": "https://developer.wordpress.org/block-editor/#getblocktransformitems"
    },
    {
      "text": "https://en.wikipedia.org/wiki/Frecency",
      "url": "https://en.wikipedia.org/wiki/Frecency"
    },
    {
      "text": "getDraggedBlockClientIds",
      "url": "https://developer.wordpress.org/block-editor/#getdraggedblockclientids"
    },
    {
      "text": "getLowestCommonAncestorWithSelectedBlock",
      "url": "https://developer.wordpress.org/block-editor/#getlowestcommonancestorwithselectedblock"
    },
    {
      "text": "getPatternsByBlockTypes",
      "url": "https://developer.wordpress.org/block-editor/#getpatternsbyblocktypes"
    },
    {
      "text": "getSelectedBlockClientIds",
      "url": "https://developer.wordpress.org/block-editor/#getselectedblockclientids"
    },
    {
      "text": "getSelectionEnd",
      "url": "https://developer.wordpress.org/block-editor/#getselectionend"
    },
    {
      "text": "getSelectionStart",
      "url": "https://developer.wordpress.org/block-editor/#getselectionstart"
    },
    {
      "text": "hasBlockMovingClientId",
      "url": "https://developer.wordpress.org/block-editor/#hasblockmovingclientid"
    },
    {
      "text": "hasDraggedInnerBlock",
      "url": "https://developer.wordpress.org/block-editor/#hasdraggedinnerblock"
    },
    {
      "text": "isAncestorBeingDragged",
      "url": "https://developer.wordpress.org/block-editor/#isancestorbeingdragged"
    },
    {
      "text": "isBlockBeingDragged",
      "url": "https://developer.wordpress.org/block-editor/#isblockbeingdragged"
    },
    {
      "text": "isBlockHighlighted",
      "url": "https://developer.wordpress.org/block-editor/#isblockhighlighted"
    },
    {
      "text": "isBlockVisible",
      "url": "https://developer.wordpress.org/block-editor/#isblockvisible"
    },
    {
      "text": "isDraggingBlocks",
      "url": "https://developer.wordpress.org/block-editor/#isdraggingblocks"
    },
    {
      "text": "isLastBlockChangePersistent",
      "url": "https://developer.wordpress.org/block-editor/#islastblockchangepersistent"
    },
    {
      "text": "isNavigationMode",
      "url": "https://developer.wordpress.org/block-editor/#isnavigationmode"
    },
    {
      "text": "wasBlockJustInserted",
      "url": "https://developer.wordpress.org/block-editor/#wasblockjustinserted"
    },
    {
      "text": "duplicateBlocks",
      "url": "https://developer.wordpress.org/block-editor/#duplicateblocks"
    },
    {
      "text": "flashBlock",
      "url": "https://developer.wordpress.org/block-editor/#flashblock"
    },
    {
      "text": "insertAfterBlock",
      "url": "https://developer.wordpress.org/block-editor/#insertafterblock"
    },
    {
      "text": "insertBeforeBlock",
      "url": "https://developer.wordpress.org/block-editor/#insertbeforeblock"
    },
    {
      "text": "moveBlocksToPosition",
      "url": "https://developer.wordpress.org/block-editor/#moveblockstoposition"
    },
    {
      "text": "replaceInnerBlocks",
      "url": "https://developer.wordpress.org/block-editor/#replaceinnerblocks"
    },
    {
      "text": "resetSelection",
      "url": "https://developer.wordpress.org/block-editor/#resetselection"
    },
    {
      "text": "selectionChange",
      "url": "https://developer.wordpress.org/block-editor/#selectionchange"
    },
    {
      "text": "selectNextBlock",
      "url": "https://developer.wordpress.org/block-editor/#selectnextblock"
    },
    {
      "text": "selectPreviousBlock",
      "url": "https://developer.wordpress.org/block-editor/#selectpreviousblock"
    },
    {
      "text": "setBlockMovingClientId",
      "url": "https://developer.wordpress.org/block-editor/#setblockmovingclientid"
    },
    {
      "text": "setBlockVisibility",
      "url": "https://developer.wordpress.org/block-editor/#setblockvisibility"
    },
    {
      "text": "setHasControlledInnerBlocks",
      "url": "https://developer.wordpress.org/block-editor/#sethascontrolledinnerblocks"
    },
    {
      "text": "setNavigationMode",
      "url": "https://developer.wordpress.org/block-editor/#setnavigationmode"
    },
    {
      "text": "startDraggingBlocks",
      "url": "https://developer.wordpress.org/block-editor/#startdraggingblocks"
    },
    {
      "text": "stopDraggingBlocks",
      "url": "https://developer.wordpress.org/block-editor/#stopdraggingblocks"
    },
    {
      "text": "toggleBlockHighlight",
      "url": "https://developer.wordpress.org/block-editor/#toggleblockhighlight"
    },
    {
      "text": "validateBlocksToTemplate",
      "url": "https://developer.wordpress.org/block-editor/#validateblockstotemplate"
    },
    {
      "text": "← Block directory",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/data/data-core-block-directory/"
    },
    {
      "text": "Block Types Data →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/data/data-core-blocks/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fdata%2Fdata-core-block-directory%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/docs/reference-guides/data/data-core-block-directory.md"
    },
    {
      "text": "getDownloadableBlocks",
      "url": "https://developer.wordpress.org/block-editor/#getdownloadableblocks"
    },
    {
      "text": "getErrorNoticeForBlock",
      "url": "https://developer.wordpress.org/block-editor/#geterrornoticeforblock"
    },
    {
      "text": "getErrorNotices",
      "url": "https://developer.wordpress.org/block-editor/#geterrornotices"
    },
    {
      "text": "getInstalledBlockTypes",
      "url": "https://developer.wordpress.org/block-editor/#getinstalledblocktypes"
    },
    {
      "text": "getNewBlockTypes",
      "url": "https://developer.wordpress.org/block-editor/#getnewblocktypes"
    },
    {
      "text": "getUnusedBlockTypes",
      "url": "https://developer.wordpress.org/block-editor/#getunusedblocktypes"
    },
    {
      "text": "isInstalling",
      "url": "https://developer.wordpress.org/block-editor/#isinstalling"
    },
    {
      "text": "isRequestingDownloadableBlocks",
      "url": "https://developer.wordpress.org/block-editor/#isrequestingdownloadableblocks"
    },
    {
      "text": "addInstalledBlockType",
      "url": "https://developer.wordpress.org/block-editor/#addinstalledblocktype"
    },
    {
      "text": "clearErrorNotice",
      "url": "https://developer.wordpress.org/block-editor/#clearerrornotice"
    },
    {
      "text": "fetchDownloadableBlocks",
      "url": "https://developer.wordpress.org/block-editor/#fetchdownloadableblocks"
    },
    {
      "text": "installBlockType",
      "url": "https://developer.wordpress.org/block-editor/#installblocktype"
    },
    {
      "text": "receiveDownloadableBlocks",
      "url": "https://developer.wordpress.org/block-editor/#receivedownloadableblocks"
    },
    {
      "text": "removeInstalledBlockType",
      "url": "https://developer.wordpress.org/block-editor/#removeinstalledblocktype"
    },
    {
      "text": "setErrorNotice",
      "url": "https://developer.wordpress.org/block-editor/#seterrornotice"
    },
    {
      "text": "setIsInstalling",
      "url": "https://developer.wordpress.org/block-editor/#setisinstalling"
    },
    {
      "text": "uninstallBlockType",
      "url": "https://developer.wordpress.org/block-editor/#uninstallblocktype"
    },
    {
      "text": "← Annotations",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/data/data-core-annotations/"
    },
    {
      "text": "The Block Editor’s Data →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/data/data-core-block-editor/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fdata%2Fdata-core-annotations%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/docs/reference-guides/data/data-core-annotations.md"
    },
    {
      "text": "← WordPress Core Data",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/data/data-core/"
    },
    {
      "text": "Block directory →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/data/data-core-block-directory/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fdata%2Fdata-core%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/docs/reference-guides/data/data-core.md"
    },
    {
      "text": "← Data Module Reference",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/data/"
    },
    {
      "text": "Annotations →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/data/data-core-annotations/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fdata%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/docs/reference-guides/data/README.md"
    },
    {
      "text": "← Package Reference",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/"
    },
    {
      "text": "WordPress Core Data →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/data/data-core/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fpackages%2Fpackages-widgets%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/packages/widgets/README.md"
    },
    {
      "text": "← @wordpress/warning",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-warning/"
    },
    {
      "text": "@wordpress/wordcount →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-wordcount/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fpackages%2Fpackages-warning%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/packages/warning/README.md"
    },
    {
      "text": "Reducing bundle size",
      "url": "https://developer.wordpress.org/block-editor/#reducing-bundle-size"
    },
    {
      "text": "babel config",
      "url": "https://babeljs.io/docs/en/plugins#plugin-options"
    },
    {
      "text": "@wordpress/babel-preset-default",
      "url": "https://www.npmjs.com/package/@wordpress/babel-preset-default"
    },
    {
      "text": "UglifyJS",
      "url": "https://github.com/mishoo/UglifyJS2"
    },
    {
      "text": "Terser",
      "url": "https://github.com/terser/terser"
    },
    {
      "text": "dead code elimination",
      "url": "https://en.wikipedia.org/wiki/Dead_code_elimination"
    },
    {
      "text": "webpack",
      "url": "https://github.com/webpack/webpack"
    },
    {
      "text": "← @wordpress/viewport",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-viewport/"
    },
    {
      "text": "@wordpress/widgets →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-widgets/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fpackages%2Fpackages-stylelint-config%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/packages/stylelint-config/README.md"
    },
    {
      "text": "stylelint",
      "url": "https://stylelint.io/"
    },
    {
      "text": "stylelint-config-recommended-scss",
      "url": "https://github.com/kristerkari/stylelint-config-recommended-scss"
    },
    {
      "text": "SCSS",
      "url": "https://developer.wordpress.org/block-editor/#scss"
    },
    {
      "text": "Extending the config",
      "url": "https://developer.wordpress.org/block-editor/#extending-the-config"
    },
    {
      "text": "← @wordpress/style-engine",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-style-engine/"
    },
    {
      "text": "@wordpress/token-list →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-token-list/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fpackages%2Fpackages-style-engine%2Fusing-the-style-engine-with-block-supports%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/packages/style-engine/docs/using-the-style-engine-with-block-supports.md"
    },
    {
      "text": "Block supports",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/block-api/block-supports/"
    },
    {
      "text": "Use case",
      "url": "https://developer.wordpress.org/block-editor/#use-case"
    },
    {
      "text": "registering a block support",
      "url": "https://developer.wordpress.org/reference/classes/wp_block_supports/register/"
    },
    {
      "text": "Site Title block",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/core-blocks/#site-title"
    },
    {
      "text": "color block support",
      "url": "https://github.com/WordPress/gutenberg/tree/HEAD/lib/block-supports/color.php"
    },
    {
      "text": "Checking for block support and skip serialization",
      "url": "https://developer.wordpress.org/block-editor/#checking-for-block-support-and-skip-serialization"
    },
    {
      "text": "block API documentation",
      "url": "https://developer.wordpress.org/block-editor/explanations/architecture/styles/#block-supports-api"
    },
    {
      "text": "block_has_support()",
      "url": "https://developer.wordpress.org/reference/functions/block_has_support/"
    },
    {
      "text": "Generating classnames and CSS custom selectors from presets",
      "url": "https://developer.wordpress.org/block-editor/#generating-classnames-and-css-custom-selectors-from-presets"
    },
    {
      "text": "global styles",
      "url": "https://developer.wordpress.org/block-editor/explanations/architecture/styles/#global-styles"
    },
    {
      "text": "preset CSS custom properties",
      "url": "https://developer.wordpress.org/block-editor/how-to-guides/themes/theme-json/#css-custom-properties-presets-custom"
    },
    {
      "text": "theme supports",
      "url": "https://developer.wordpress.org/block-editor/how-to-guides/themes/theme-support/"
    },
    {
      "text": "@wordpress/stylelint-config →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-stylelint-config/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fpackages%2Fpackages-style-engine%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/packages/style-engine/README.md"
    },
    {
      "text": "Please note",
      "url": "https://developer.wordpress.org/block-editor/#please-note"
    },
    {
      "text": "Block editor styles: initiatives and goals",
      "url": "https://make.wordpress.org/core/2022/06/24/block-editor-styles-initiatives-and-goals/"
    },
    {
      "text": "Github project board",
      "url": "https://github.com/orgs/WordPress/projects/19"
    },
    {
      "text": "notes on contributing",
      "url": "https://github.com/WordPress/gutenberg/tree/HEAD/packages/style-engine/CONTRIBUTING.md"
    },
    {
      "text": "Backend API",
      "url": "https://developer.wordpress.org/block-editor/#backend-api"
    },
    {
      "text": "",
      "url": "https://developer.wordpress.org/block-editor/#wp_style_engine_get_styles"
    },
    {
      "text": "wp_style_engine_get_styles()",
      "url": "https://developer.wordpress.org/reference/functions/wp_style_engine_get_styles/"
    },
    {
      "text": "block’s attributes.style object",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/theme-json-reference/theme-json-living/#styles"
    },
    {
      "text": "top level styles in theme.json",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/block-api/block-supports/"
    },
    {
      "text": "Using the Style Engine to generate block supports styles",
      "url": "https://github.com/WordPress/gutenberg/tree/HEAD/packages/style-engine/docs/using-the-style-engine-with-block-supports.md"
    },
    {
      "text": "using the Style Engine to generate block supports styles",
      "url": "https://github.com/WordPress/gutenberg/tree/HEAD/packages/style-engine/docs/using-the-style-engine-with-block-supports.md"
    },
    {
      "text": "",
      "url": "https://developer.wordpress.org/block-editor/#wp_style_engine_get_stylesheet_from_css_rules"
    },
    {
      "text": "wp_style_engine_get_stylesheet_from_css_rules()",
      "url": "https://developer.wordpress.org/reference/functions/wp_style_engine_get_stylesheet_from_css_rules/"
    },
    {
      "text": "",
      "url": "https://developer.wordpress.org/block-editor/#wp_style_engine_get_stylesheet_from_context"
    },
    {
      "text": "wp_style_engine_get_stylesheet_from_context()",
      "url": "https://developer.wordpress.org/reference/functions/wp_style_engine_get_stylesheet_from_context/"
    },
    {
      "text": "Usage",
      "url": "https://developer.wordpress.org/block-editor/#usage-3"
    },
    {
      "text": "Installation (JS only)",
      "url": "https://developer.wordpress.org/block-editor/#installation-js-only"
    },
    {
      "text": "Usage",
      "url": "https://developer.wordpress.org/block-editor/#usage-4"
    },
    {
      "text": "compileCSS",
      "url": "https://developer.wordpress.org/block-editor/#compilecss"
    },
    {
      "text": "getCSSRules",
      "url": "https://developer.wordpress.org/block-editor/#getcssrules"
    },
    {
      "text": "Glossary",
      "url": "https://developer.wordpress.org/block-editor/#glossary"
    },
    {
      "text": "MDN CSS selectors article",
      "url": "https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors"
    },
    {
      "text": "HTML style tag",
      "url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/style"
    },
    {
      "text": "MDN article on CSS custom properties",
      "url": "https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_custom_properties"
    },
    {
      "text": "WP_Style_Engine_Processor",
      "url": "https://developer.wordpress.org/reference/classes/wp_style_engine_processor/"
    },
    {
      "text": "WP_Style_Engine_CSS_Rules_Store",
      "url": "https://developer.wordpress.org/reference/classes/wp_style_engine_css_rules_store/"
    },
    {
      "text": "← @wordpress/shortcode",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-shortcode/"
    },
    {
      "text": "@wordpress/style-engine Using the Style Engine to generate block supports styles →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-style-engine/using-the-style-engine-with-block-supports/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fpackages%2Fpackages-server-side-render%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/packages/server-side-render/README.md"
    },
    {
      "text": "block",
      "url": "https://developer.wordpress.org/block-editor/#block"
    },
    {
      "text": "httpMethod",
      "url": "https://developer.wordpress.org/block-editor/#httpmethod"
    },
    {
      "text": "skipBlockSupportAttributes",
      "url": "https://developer.wordpress.org/block-editor/#skipblocksupportattributes"
    },
    {
      "text": "urlQueryArgs",
      "url": "https://developer.wordpress.org/block-editor/#urlqueryargs"
    },
    {
      "text": "EmptyResponsePlaceholder",
      "url": "https://developer.wordpress.org/block-editor/#emptyresponseplaceholder"
    },
    {
      "text": "ErrorResponsePlaceholder",
      "url": "https://developer.wordpress.org/block-editor/#errorresponseplaceholder"
    },
    {
      "text": "LoadingResponsePlaceholder",
      "url": "https://developer.wordpress.org/block-editor/#loadingresponseplaceholder"
    },
    {
      "text": "Example usage",
      "url": "https://developer.wordpress.org/block-editor/#example-usage"
    },
    {
      "text": "Output",
      "url": "https://developer.wordpress.org/block-editor/#output"
    },
    {
      "text": "API Endpoint",
      "url": "https://developer.wordpress.org/block-editor/#api-endpoint"
    },
    {
      "text": "← @wordpress/scripts",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-scripts/"
    },
    {
      "text": "@wordpress/shortcode →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-shortcode/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fpackages%2Fpackages-reusable-blocks%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/packages/reusable-blocks/README.md"
    },
    {
      "text": "← @wordpress/redux-routine",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-redux-routine/"
    },
    {
      "text": "@wordpress/rich-text →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-rich-text/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fpackages%2Fpackages-readable-js-assets-webpack-plugin%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/packages/readable-js-assets-webpack-plugin/README.md"
    },
    {
      "text": "← @wordpress/react-i18n",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-react-i18n/"
    },
    {
      "text": "@wordpress/redux-routine →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-redux-routine/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fpackages%2Fpackages-react-i18n%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/packages/react-i18n/README.md"
    },
    {
      "text": "@wordpress/i18n",
      "url": "https://developer.wordpress.org/i18n"
    },
    {
      "text": "I18nProvider",
      "url": "https://developer.wordpress.org/block-editor/#i18nprovider"
    },
    {
      "text": "useI18n",
      "url": "https://developer.wordpress.org/block-editor/#usei18n"
    },
    {
      "text": "withI18n",
      "url": "https://developer.wordpress.org/block-editor/#withi18n"
    },
    {
      "text": "← @wordpress/project-management-automation",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-project-management-automation/"
    },
    {
      "text": "@wordpress/readable-js-assets-webpack-plugin →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-readable-js-assets-webpack-plugin/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fpackages%2Fpackages-project-management-automation%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/packages/project-management-automation/README.md"
    },
    {
      "text": "GitHub Action",
      "url": "https://help.github.com/en/categories/automating-your-workflow-with-github-actions"
    },
    {
      "text": "First Time Contributor",
      "url": "https://github.com/WordPress/gutenberg/tree/HEAD/packages/project-management-automation/lib/tasks/first-time-contributor"
    },
    {
      "text": "Add Milestone",
      "url": "https://github.com/WordPress/gutenberg/tree/HEAD/packages/project-management-automation/lib/tasks/add-milestone"
    },
    {
      "text": "Assign Fixed Issues",
      "url": "https://github.com/WordPress/gutenberg/tree/HEAD/packages/project-management-automation/lib/tasks/assign-fixed-issues"
    },
    {
      "text": "Installation and usage",
      "url": "https://developer.wordpress.org/block-editor/#installation-and-usage"
    },
    {
      "text": "Inputs",
      "url": "https://developer.wordpress.org/block-editor/#inputs"
    },
    {
      "text": "Outputs",
      "url": "https://developer.wordpress.org/block-editor/#outputs"
    },
    {
      "text": "← @wordpress/private-apis",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-private-apis/"
    },
    {
      "text": "@wordpress/react-i18n →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-react-i18n/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fpackages%2Fpackages-priority-queue%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/packages/priority-queue/README.md"
    },
    {
      "text": "createQueue",
      "url": "https://developer.wordpress.org/block-editor/#createqueue"
    },
    {
      "text": "← @wordpress/primitives",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-primitives/"
    },
    {
      "text": "@wordpress/private-apis →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-private-apis/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fpackages%2Fpackages-preferences%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/packages/preferences/README.md"
    },
    {
      "text": "Key concepts",
      "url": "https://developer.wordpress.org/block-editor/#key-concepts"
    },
    {
      "text": "Scope",
      "url": "https://developer.wordpress.org/block-editor/#scope"
    },
    {
      "text": "Key",
      "url": "https://developer.wordpress.org/block-editor/#key"
    },
    {
      "text": "Value",
      "url": "https://developer.wordpress.org/block-editor/#value"
    },
    {
      "text": "Defaults",
      "url": "https://developer.wordpress.org/block-editor/#defaults"
    },
    {
      "text": "Data store",
      "url": "https://developer.wordpress.org/block-editor/#data-store"
    },
    {
      "text": "Setting up a persistence layer",
      "url": "https://developer.wordpress.org/block-editor/#setting-up-a-persistence-layer"
    },
    {
      "text": "API Reference",
      "url": "https://developer.wordpress.org/block-editor/#api-reference"
    },
    {
      "text": "← @wordpress/preferences-persistence",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-preferences-persistence/"
    },
    {
      "text": "@wordpress/prettier-config →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-prettier-config/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fcomponents%2Ftoolbar%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/packages/components/src/toolbar/toolbar/README.md"
    },
    {
      "text": "States",
      "url": "https://developer.wordpress.org/block-editor/#states"
    },
    {
      "text": "Active and available toolbars",
      "url": "https://developer.wordpress.org/block-editor/#active-and-available-toolbars"
    },
    {
      "text": "Disabled toolbars",
      "url": "https://developer.wordpress.org/block-editor/#disabled-toolbars"
    },
    {
      "text": "className: string",
      "url": "https://developer.wordpress.org/block-editor/#classname-string"
    },
    {
      "text": "label: string",
      "url": "https://developer.wordpress.org/block-editor/#label-string"
    },
    {
      "text": "ToolbarGroup",
      "url": "https://developer.wordpress.org/block-editor/reference-guide/components/toolbar-group/"
    },
    {
      "text": "ToolbarButton",
      "url": "https://developer.wordpress.org/block-editor/reference-guide/components/toolbar-button/"
    },
    {
      "text": "ToolbarItem",
      "url": "https://developer.wordpress.org/block-editor/reference-guide/components/toolbar-Item/"
    },
    {
      "text": "← ToolbarItem",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/toolbar-item/"
    },
    {
      "text": "ToolsPanelHeader →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/tools-panel-header/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fpackages%2Fpackages-preferences-persistence%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/packages/preferences-persistence/README.md"
    },
    {
      "text": "Reference",
      "url": "https://developer.wordpress.org/block-editor/#reference"
    },
    {
      "text": "← @wordpress/postcss-themes",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-postcss-themes/"
    },
    {
      "text": "@wordpress/preferences →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-preferences/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fpackages%2Fpackages-postcss-themes%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/packages/postcss-themes/README.md"
    },
    {
      "text": "← @wordpress/postcss-plugins-preset",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-postcss-plugins-preset/"
    },
    {
      "text": "@wordpress/preferences-persistence →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-preferences-persistence/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fpackages%2Fpackages-postcss-plugins-preset%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/packages/postcss-plugins-preset/README.md"
    },
    {
      "text": "← @wordpress/react-native-editor",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-react-native-editor/"
    },
    {
      "text": "@wordpress/postcss-themes →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-postcss-themes/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fpackages%2Fpackages-react-native-editor%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/packages/react-native-editor/README.md"
    },
    {
      "text": "WordPress Android",
      "url": "https://github.com/wordpress-mobile/WordPress-Android"
    },
    {
      "text": "WordPress iOS",
      "url": "https://github.com/wordpress-mobile/WordPress-iOS"
    },
    {
      "text": "Getting Started for the React Native based Mobile Gutenberg",
      "url": "https://github.com/WordPress/gutenberg/tree/HEAD/docs/contributors/code/react-native/getting-started-react-native.md"
    },
    {
      "text": "License",
      "url": "https://developer.wordpress.org/block-editor/#license"
    },
    {
      "text": "GNU General Public License version 2",
      "url": "https://developer.wordpress.org/block-editor/LICENSE"
    },
    {
      "text": "← @wordpress/plugins",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-plugins/"
    },
    {
      "text": "@wordpress/postcss-plugins-preset →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-postcss-plugins-preset/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fpackages%2Fpackages-nux%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/packages/nux/README.md"
    },
    {
      "text": "DotTip",
      "url": "https://developer.wordpress.org/block-editor/#dottip"
    },
    {
      "text": "the component’s README",
      "url": "https://github.com/WordPress/gutenberg/tree/HEAD/packages/nux/src/components/dot-tip/README.md"
    },
    {
      "text": "Determining if a tip is visible",
      "url": "https://developer.wordpress.org/block-editor/#determining-if-a-tip-is-visible"
    },
    {
      "text": "Manually dismissing a tip",
      "url": "https://developer.wordpress.org/block-editor/#manually-dismissing-a-tip"
    },
    {
      "text": "Disabling and enabling tips",
      "url": "https://developer.wordpress.org/block-editor/#disabling-and-enabling-tips"
    },
    {
      "text": "Triggering a guide",
      "url": "https://developer.wordpress.org/block-editor/#triggering-a-guide"
    },
    {
      "text": "Getting information about a guide",
      "url": "https://developer.wordpress.org/block-editor/#getting-information-about-a-guide"
    },
    {
      "text": "← @wordpress/react-native-bridge",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-react-native-bridge/"
    },
    {
      "text": "@wordpress/plugins →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-plugins/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fpackages%2Fpackages-react-native-bridge%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/packages/react-native-bridge/README.md"
    },
    {
      "text": "Mostly automatic installation",
      "url": "https://developer.wordpress.org/block-editor/#mostly-automatic-installation"
    },
    {
      "text": "Manual installation",
      "url": "https://developer.wordpress.org/block-editor/#manual-installation"
    },
    {
      "text": "← @wordpress/npm-package-json-lint-config",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-npm-package-json-lint-config/"
    },
    {
      "text": "@wordpress/nux →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-nux/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fpackages%2Fpackages-npm-package-json-lint-config%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/packages/npm-package-json-lint-config/README.md"
    },
    {
      "text": "npm-package-json-lint",
      "url": "https://github.com/tclindner/npm-package-json-lint"
    },
    {
      "text": "npm-package-json-lint",
      "url": "https://github.com/tclindner/npm-package-json-lint/wiki"
    },
    {
      "text": "← @wordpress/react-native-aztec",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-react-native-aztec/"
    },
    {
      "text": "@wordpress/react-native-bridge →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-react-native-bridge/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fpackages%2Fpackages-react-native-aztec%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/packages/react-native-aztec/README.md"
    },
    {
      "text": "RCTAztecView",
      "url": "https://developer.wordpress.org/block-editor/#rctaztecview"
    },
    {
      "text": "blockType",
      "url": "https://developer.wordpress.org/block-editor/#blocktype"
    },
    {
      "text": "isMultiline",
      "url": "https://developer.wordpress.org/block-editor/#ismultiline"
    },
    {
      "text": "activeFormats",
      "url": "https://developer.wordpress.org/block-editor/#activeformats"
    },
    {
      "text": "disableEditingMenu",
      "url": "https://developer.wordpress.org/block-editor/#disableeditingmenu"
    },
    {
      "text": "maxImagesWidth",
      "url": "https://developer.wordpress.org/block-editor/#maximageswidth"
    },
    {
      "text": "minWidth",
      "url": "https://developer.wordpress.org/block-editor/#minwidth"
    },
    {
      "text": "maxWidth",
      "url": "https://developer.wordpress.org/block-editor/#maxwidth"
    },
    {
      "text": "fontFamily",
      "url": "https://developer.wordpress.org/block-editor/#fontfamily"
    },
    {
      "text": "fontSize",
      "url": "https://developer.wordpress.org/block-editor/#fontsize"
    },
    {
      "text": "fontWeight",
      "url": "https://developer.wordpress.org/block-editor/#fontweight"
    },
    {
      "text": "fontStyle",
      "url": "https://developer.wordpress.org/block-editor/#fontstyle"
    },
    {
      "text": "deleteEnter",
      "url": "https://developer.wordpress.org/block-editor/#deleteenter"
    },
    {
      "text": "color",
      "url": "https://developer.wordpress.org/block-editor/#color"
    },
    {
      "text": "selectionColor",
      "url": "https://developer.wordpress.org/block-editor/#selectioncolor"
    },
    {
      "text": "placeholder",
      "url": "https://developer.wordpress.org/block-editor/#placeholder"
    },
    {
      "text": "placeholderTextColor",
      "url": "https://developer.wordpress.org/block-editor/#placeholdertextcolor"
    },
    {
      "text": "textAlign",
      "url": "https://developer.wordpress.org/block-editor/#textalign"
    },
    {
      "text": "onChange( value: Event )",
      "url": "https://developer.wordpress.org/block-editor/#onchange-value-event"
    },
    {
      "text": "onKeyDown( value: Event )",
      "url": "https://developer.wordpress.org/block-editor/#onkeydown-value-event"
    },
    {
      "text": "onFocus( value: Event )",
      "url": "https://developer.wordpress.org/block-editor/#onfocus-value-event"
    },
    {
      "text": "onBlur( value: Event )",
      "url": "https://developer.wordpress.org/block-editor/#onblur-value-event"
    },
    {
      "text": "onPaste( value: Event )",
      "url": "https://developer.wordpress.org/block-editor/#onpaste-value-event"
    },
    {
      "text": "onContentSizeChange( value: Event )",
      "url": "https://developer.wordpress.org/block-editor/#oncontentsizechange-value-event"
    },
    {
      "text": "onCaretVerticalPositionChange( value: Event )",
      "url": "https://developer.wordpress.org/block-editor/#oncaretverticalpositionchange-value-event"
    },
    {
      "text": "onSelectionChange( value: Event )",
      "url": "https://developer.wordpress.org/block-editor/#onselectionchange-value-event"
    },
    {
      "text": "Native Implementation details",
      "url": "https://developer.wordpress.org/block-editor/#native-implementation-details"
    },
    {
      "text": "ReactAztecText",
      "url": "https://github.com/WordPress/gutenberg/blob/7532a485b400f86638145b71f94f6f717e5add25/packages/react-native-aztec/android/src/main/java/org/wordpress/mobile/ReactNativeAztec/ReactAztecText.java#L50"
    },
    {
      "text": "AztecText",
      "url": "https://github.com/wordpress-mobile/AztecEditor-Android/blob/437ecec9034003c32b9b8b0b00ec76cb5b248679/aztec/src/main/kotlin/org/wordpress/aztec/AztecText.kt#L130"
    },
    {
      "text": "Aztec Library for Android",
      "url": "https://github.com/wordpress-mobile/AztecEditor-Android"
    },
    {
      "text": "ReactAztecManager",
      "url": "https://github.com/WordPress/gutenberg/blob/7532a485b400f86638145b71f94f6f717e5add25/packages/react-native-aztec/android/src/main/java/org/wordpress/mobile/ReactNativeAztec/ReactAztecManager.java#L62"
    },
    {
      "text": "← @wordpress/notices",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-notices/"
    },
    {
      "text": "@wordpress/npm-package-json-lint-config →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-npm-package-json-lint-config/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fpackages%2Fpackages-notices%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/packages/notices/README.md"
    },
    {
      "text": "the @wordpress/data documentation on Data Access and Manipulation",
      "url": "https://github.com/WordPress/gutenberg/tree/HEAD/packages/data/README.md#data-access-and-manipulation"
    },
    {
      "text": "Notices Data Handbook page",
      "url": "https://github.com/WordPress/gutenberg/tree/HEAD/docs/reference-guides/data/data-core-notices.md"
    },
    {
      "text": "← @wordpress/media-utils",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-media-utils/"
    },
    {
      "text": "@wordpress/react-native-aztec →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-react-native-aztec/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fpackages%2Fpackages-media-utils%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/packages/media-utils/README.md"
    },
    {
      "text": "uploadMedia",
      "url": "https://developer.wordpress.org/block-editor/#uploadmedia"
    },
    {
      "text": "MediaUpload",
      "url": "https://developer.wordpress.org/block-editor/#mediaupload"
    },
    {
      "text": "← @wordpress/list-reusable-blocks",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-list-reusable-blocks/"
    },
    {
      "text": "@wordpress/notices →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-notices/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fpackages%2Fpackages-lazy-import%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/packages/lazy-import/README.md"
    },
    {
      "text": "Requirements",
      "url": "https://developer.wordpress.org/block-editor/#requirements"
    },
    {
      "text": "package aliases feature",
      "url": "https://github.com/npm/rfcs/blob/latest/implemented/0001-package-aliases.md"
    },
    {
      "text": "dynamic import function",
      "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import#Dynamic_Imports"
    },
    {
      "text": "CommonJS require",
      "url": "https://nodejs.org/docs/latest-v12.x/api/modules.html#modules_require_id"
    },
    {
      "text": "ES Modules support",
      "url": "https://nodejs.org/docs/latest-v14.x/api/esm.html"
    },
    {
      "text": "version ranges",
      "url": "https://docs.npmjs.com/misc/semver#ranges"
    },
    {
      "text": "top-level await",
      "url": "https://v8.dev/features/top-level-await"
    },
    {
      "text": "localPath",
      "url": "https://developer.wordpress.org/block-editor/#localpath"
    },
    {
      "text": "onInstall",
      "url": "https://developer.wordpress.org/block-editor/#oninstall"
    },
    {
      "text": "← @wordpress/library-export-default-webpack-plugin",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-library-export-default-webpack-plugin/"
    },
    {
      "text": "@wordpress/list-reusable-blocks →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-list-reusable-blocks/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fpackages%2Fpackages-library-export-default-webpack-plugin%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/packages/library-export-default-webpack-plugin/README.md"
    },
    {
      "text": "output.library.export",
      "url": "https://webpack.js.org/configuration/output/#outputlibraryexport"
    },
    {
      "text": "ExportPropertyMainTemplatePlugin",
      "url": "https://github.com/webpack/webpack/blob/51b0df77e4f366163730ee465f01458bfad81f34/lib/ExportPropertyMainTemplatePlugin.js"
    },
    {
      "text": "← @wordpress/keycodes",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-keycodes/"
    },
    {
      "text": "@wordpress/lazy-import →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-lazy-import/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fpackages%2Fpackages-keyboard-shortcuts%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/packages/keyboard-shortcuts/README.md"
    },
    {
      "text": "ShortcutProvider",
      "url": "https://developer.wordpress.org/block-editor/#shortcutprovider"
    },
    {
      "text": "useShortcut",
      "url": "https://developer.wordpress.org/block-editor/#useshortcut"
    },
    {
      "text": "← @wordpress/jest-puppeteer-axe",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-jest-puppeteer-axe/"
    },
    {
      "text": "@wordpress/keycodes →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-keycodes/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fpackages%2Fpackages-jest-puppeteer-axe%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/packages/jest-puppeteer-axe/README.md"
    },
    {
      "text": "Axe",
      "url": "https://www.deque.com/axe/"
    },
    {
      "text": "Axe rules",
      "url": "https://github.com/dequelabs/axe-core/blob/HEAD/doc/rule-descriptions.md"
    },
    {
      "text": "axe-core API documentation",
      "url": "https://github.com/dequelabs/axe-core/blob/HEAD/doc/API.md#options-parameter"
    },
    {
      "text": "axe-core API documentation",
      "url": "https://github.com/dequelabs/axe-core/blob/HEAD/doc/API.md#api-name-axeconfigure"
    },
    {
      "text": "← @wordpress/jest-preset-default",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-jest-preset-default/"
    },
    {
      "text": "@wordpress/keyboard-shortcuts →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-keyboard-shortcuts/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fpackages%2Fpackages-jest-preset-default%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/packages/jest-preset-default/README.md"
    },
    {
      "text": "Via jest.config.json or jest field in package.json",
      "url": "https://developer.wordpress.org/block-editor/#via-jest-config-json-or-jest-field-in-package-json"
    },
    {
      "text": "Brief explanations of options included",
      "url": "https://developer.wordpress.org/block-editor/#brief-explanations-of-options-included"
    },
    {
      "text": "babel-jest",
      "url": "https://github.com/facebook/jest/tree/HEAD/packages/babel-jest"
    },
    {
      "text": "Using enzyme",
      "url": "https://developer.wordpress.org/block-editor/#using-enzyme"
    },
    {
      "text": "setupFilesAfterEnv",
      "url": "https://jestjs.io/docs/configuration#setupfilesafterenv-array"
    },
    {
      "text": "snapshotSerializers",
      "url": "https://jestjs.io/docs/configuration#snapshotserializers-arraystring"
    },
    {
      "text": "← @wordpress/jest-console",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-jest-console/"
    },
    {
      "text": "@wordpress/jest-puppeteer-axe →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-jest-puppeteer-axe/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fpackages%2Fpackages-jest-console%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/packages/jest-console/README.md"
    },
    {
      "text": "Console",
      "url": "https://developer.mozilla.org/en-US/docs/Web/API/Console"
    },
    {
      "text": ".toHaveErrored()",
      "url": "https://developer.wordpress.org/block-editor/#tohaveerrored"
    },
    {
      "text": ".toHaveErroredWith( arg1, arg2, ... )",
      "url": "https://developer.wordpress.org/block-editor/#tohaveerroredwith-arg1-arg2"
    },
    {
      "text": ".toHaveInformed()",
      "url": "https://developer.wordpress.org/block-editor/#tohaveinformed"
    },
    {
      "text": ".toHaveInformedWith( arg1, arg2, ... )",
      "url": "https://developer.wordpress.org/block-editor/#tohaveinformedwith-arg1-arg2"
    },
    {
      "text": ".toHaveLogged()",
      "url": "https://developer.wordpress.org/block-editor/#tohavelogged"
    },
    {
      "text": ".toHaveLoggedWith( arg1, arg2, ... )",
      "url": "https://developer.wordpress.org/block-editor/#tohaveloggedwith-arg1-arg2"
    },
    {
      "text": ".toHaveWarned()",
      "url": "https://developer.wordpress.org/block-editor/#tohavewarned"
    },
    {
      "text": ".toHaveWarnedWith( arg1, arg2, ... )",
      "url": "https://developer.wordpress.org/block-editor/#tohavewarnedwith-arg1-arg2"
    },
    {
      "text": "← @wordpress/is-shallow-equal",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-is-shallow-equal/"
    },
    {
      "text": "@wordpress/jest-preset-default →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-jest-preset-default/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fcomponents%2Ftoolbar-item%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/packages/components/src/toolbar/toolbar-item/README.md"
    },
    {
      "text": "Toolbar",
      "url": "https://developer.wordpress.org/block-editor/designers-developers/developers/components/toolbar/"
    },
    {
      "text": "ToolbarGroup",
      "url": "https://developer.wordpress.org/block-editor/designers-developers/developers/components/toolbar-group/"
    },
    {
      "text": "BlockControls",
      "url": "https://developer.wordpress.org/block-editor/how-to-guides/block-tutorial/block-controls-toolbar-and-sidebar/"
    },
    {
      "text": "as prop",
      "url": "https://developer.wordpress.org/block-editor/#as-prop"
    },
    {
      "text": "render prop",
      "url": "https://developer.wordpress.org/block-editor/#render-prop"
    },
    {
      "text": "Inside BlockControls",
      "url": "https://developer.wordpress.org/block-editor/#inside-blockcontrols"
    },
    {
      "text": "ToolbarButton",
      "url": "https://developer.wordpress.org/block-editor/designers-developers/developers/components/toolbar-button/"
    },
    {
      "text": "← ToolbarGroup",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/toolbar-group/"
    },
    {
      "text": "Toolbar →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/toolbar/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fcomponents%2Ftoolbar-button%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/packages/components/src/toolbar/toolbar-button/README.md"
    },
    {
      "text": "Toolbar",
      "url": "https://developer.wordpress.org/block-editor/reference-guide/components/toolbar/"
    },
    {
      "text": "Button",
      "url": "https://developer.wordpress.org/block-editor/reference-guide/components/button/"
    },
    {
      "text": "WAI-ARIA toolbar pattern",
      "url": "https://www.w3.org/TR/wai-aria-practices/#toolbar"
    },
    {
      "text": "the same API of the Button",
      "url": "https://developer.wordpress.org/block-editor/reference-guide/components/button/#props"
    },
    {
      "text": "containerClassName: string",
      "url": "https://developer.wordpress.org/block-editor/#containerclassname-string"
    },
    {
      "text": "subscript: string",
      "url": "https://developer.wordpress.org/block-editor/#subscript-string"
    },
    {
      "text": "Dropdown",
      "url": "https://developer.wordpress.org/block-editor/reference-guide/components/dropdown/"
    },
    {
      "text": "← ToggleGroupControl",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/toggle-group-control/"
    },
    {
      "text": "ToolbarDropdownMenu →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/toolbar-dropdown-menu/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fcomponents%2Ftoolbar-group%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/packages/components/src/toolbar/toolbar-group/README.md"
    },
    {
      "text": "ToolbarItem",
      "url": "https://developer.wordpress.org/block-editor/designers-developers/developers/components/toolbar-Item/"
    },
    {
      "text": "← ToolbarDropdownMenu",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/toolbar-dropdown-menu/"
    },
    {
      "text": "ToolbarItem →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/toolbar-item/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fpackages%2Fpackages-interface%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/packages/interface/README.md"
    },
    {
      "text": "Complementary Areas",
      "url": "https://developer.wordpress.org/block-editor/#complementary-areas"
    },
    {
      "text": "complementary landmark",
      "url": "https://www.w3.org/TR/wai-aria-practices/examples/landmarks/complementary.html"
    },
    {
      "text": "Pinned Items",
      "url": "https://developer.wordpress.org/block-editor/#pinned-items"
    },
    {
      "text": "Preferences",
      "url": "https://developer.wordpress.org/block-editor/#preferences"
    },
    {
      "text": "Features",
      "url": "https://developer.wordpress.org/block-editor/#features"
    },
    {
      "text": "← @wordpress/icons",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-icons/"
    },
    {
      "text": "@wordpress/is-shallow-equal →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-is-shallow-equal/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2FLICENSE&locale=en_US"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fpackages%2Fpackages-icons%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/packages/icons/README.md"
    },
    {
      "text": "← @wordpress/i18n",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-i18n/"
    },
    {
      "text": "@wordpress/interface →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-interface/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fpackages%2Fpackages-format-library%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/packages/format-library/README.md"
    },
    {
      "text": "← @wordpress/eslint-plugin",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-eslint-plugin/"
    },
    {
      "text": "@wordpress/hooks →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-hooks/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fpackages%2Fpackages-eslint-plugin%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/packages/eslint-plugin/README.md"
    },
    {
      "text": "ESLint documentation on Shareable Configs",
      "url": "http://eslint.org/docs/developer-guide/shareable-configs"
    },
    {
      "text": "eslint-plugin-jsdoc",
      "url": "https://github.com/gajus/eslint-plugin-jsdoc"
    },
    {
      "text": "eslint-plugin-jsx-a11y",
      "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y"
    },
    {
      "text": "eslint-plugin-react",
      "url": "https://github.com/yannickcr/eslint-plugin-react"
    },
    {
      "text": "eslint-plugin-prettier",
      "url": "https://github.com/prettier/eslint-plugin-prettier"
    },
    {
      "text": "prettier",
      "url": "https://www.npmjs.com/package/prettier"
    },
    {
      "text": "@typescript-eslint/eslint-plugin",
      "url": "https://github.com/typescript-eslint/typescript-eslint"
    },
    {
      "text": "TypeScript",
      "url": "https://www.typescriptlang.org"
    },
    {
      "text": "typescript",
      "url": "https://www.npmjs.com/package/typescript"
    },
    {
      "text": "Rulesets",
      "url": "https://developer.wordpress.org/block-editor/#rulesets"
    },
    {
      "text": "Rules",
      "url": "https://developer.wordpress.org/block-editor/#rules"
    },
    {
      "text": "data-no-store-string-literals",
      "url": "https://github.com/WordPress/gutenberg/tree/HEAD/packages/eslint-plugin/docs/rules/data-no-store-string-literals.md"
    },
    {
      "text": "dependency-group",
      "url": "https://github.com/WordPress/gutenberg/tree/HEAD/packages/eslint-plugin/docs/rules/dependency-group.md"
    },
    {
      "text": "is-gutenberg-plugin",
      "url": "https://developer.wordpress.org/block-editor/docs/rules/is-gutenberg-plugin.md"
    },
    {
      "text": "no-base-control-with-label-without-id",
      "url": "https://github.com/WordPress/gutenberg/tree/HEAD/packages/eslint-plugin/docs/rules/no-base-control-with-label-without-id.md"
    },
    {
      "text": "no-unguarded-get-range-at",
      "url": "https://github.com/WordPress/gutenberg/tree/HEAD/packages/eslint-plugin/docs/rules/no-unguarded-get-range-at.md"
    },
    {
      "text": "no-unsafe-wp-apis",
      "url": "https://github.com/WordPress/gutenberg/tree/HEAD/packages/eslint-plugin/docs/rules/no-unsafe-wp-apis.md"
    },
    {
      "text": "no-unused-vars-before-return",
      "url": "https://github.com/WordPress/gutenberg/tree/HEAD/packages/eslint-plugin/docs/rules/no-unused-vars-before-return.md"
    },
    {
      "text": "react-no-unsafe-timeout",
      "url": "https://github.com/WordPress/gutenberg/tree/HEAD/packages/eslint-plugin/docs/rules/react-no-unsafe-timeout.md"
    },
    {
      "text": "valid-sprintf",
      "url": "https://github.com/WordPress/gutenberg/tree/HEAD/packages/eslint-plugin/docs/rules/valid-sprintf.md"
    },
    {
      "text": "i18n-ellipsis",
      "url": "https://github.com/WordPress/gutenberg/tree/HEAD/packages/eslint-plugin/docs/rules/i18n-ellipsis.md"
    },
    {
      "text": "i18n-no-collapsible-whitespace",
      "url": "https://github.com/WordPress/gutenberg/tree/HEAD/packages/eslint-plugin/docs/rules/i18n-no-collapsible-whitespace.md"
    },
    {
      "text": "i18n-no-placeholders-only",
      "url": "https://github.com/WordPress/gutenberg/tree/HEAD/packages/eslint-plugin/docs/rules/i18n-no-placeholders-only.md"
    },
    {
      "text": "i18n-no-variables",
      "url": "https://github.com/WordPress/gutenberg/tree/HEAD/packages/eslint-plugin/docs/rules/i18n-no-variables.md"
    },
    {
      "text": "i18n-text-domain",
      "url": "https://github.com/WordPress/gutenberg/tree/HEAD/packages/eslint-plugin/docs/rules/i18n-text-domain.md"
    },
    {
      "text": "i18n-translator-comments",
      "url": "https://github.com/WordPress/gutenberg/tree/HEAD/packages/eslint-plugin/docs/rules/i18n-translator-comments.md"
    },
    {
      "text": "i18n-no-flanking-whitespace",
      "url": "https://github.com/WordPress/gutenberg/tree/HEAD/packages/eslint-plugin/docs/rules/i18n-no-flanking-whitespace.md"
    },
    {
      "text": "i18n-hyphenated-range",
      "url": "https://github.com/WordPress/gutenberg/tree/HEAD/packages/eslint-plugin/docs/rules/i18n-hyphenated-range.md"
    },
    {
      "text": "Legacy",
      "url": "https://developer.wordpress.org/block-editor/#legacy"
    },
    {
      "text": "← @wordpress/escape-html",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-escape-html/"
    },
    {
      "text": "@wordpress/format-library →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-format-library/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fpackages%2Fpackages-experiments%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/packages/experiments/README.md"
    },
    {
      "text": "← @wordpress/element",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-element/"
    },
    {
      "text": "@wordpress/env →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-env/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fpackages%2Fpackages-edit-widgets%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/packages/edit-widgets/README.md"
    },
    {
      "text": "Batch processing",
      "url": "https://developer.wordpress.org/block-editor/#batch-processing"
    },
    {
      "text": "How this works",
      "url": "https://developer.wordpress.org/block-editor/#how-this-works"
    },
    {
      "text": "← @wordpress/edit-site",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-edit-site/"
    },
    {
      "text": "@wordpress/editor →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-editor/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fpackages%2Fpackages-edit-site%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/packages/edit-site/README.md"
    },
    {
      "text": "← @wordpress/edit-post",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-edit-post/"
    },
    {
      "text": "@wordpress/edit-widgets →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-edit-widgets/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fpackages%2Fpackages-e2e-tests%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/packages/e2e-tests/README.md"
    },
    {
      "text": "Run all available tests",
      "url": "https://developer.wordpress.org/block-editor/#run-all-available-tests"
    },
    {
      "text": "Run all available tests and listen for changes.",
      "url": "https://developer.wordpress.org/block-editor/#run-all-available-tests-and-listen-for-changes"
    },
    {
      "text": "Run a specific test file",
      "url": "https://developer.wordpress.org/block-editor/#run-a-specific-test-file"
    },
    {
      "text": "Debugging",
      "url": "https://developer.wordpress.org/block-editor/#debugging"
    },
    {
      "text": "Debugging in vscode",
      "url": "https://developer.wordpress.org/block-editor/#debugging-in-vscode"
    },
    {
      "text": "← @wordpress/e2e-test-utils",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-e2e-test-utils/"
    },
    {
      "text": "@wordpress/edit-post →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-edit-post/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fpackages%2Fpackages-e2e-test-utils%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/packages/e2e-test-utils/README.md"
    },
    {
      "text": "activatePlugin",
      "url": "https://developer.wordpress.org/block-editor/#activateplugin"
    },
    {
      "text": "activateTheme",
      "url": "https://developer.wordpress.org/block-editor/#activatetheme"
    },
    {
      "text": "arePrePublishChecksEnabled",
      "url": "https://developer.wordpress.org/block-editor/#areprepublishchecksenabled"
    },
    {
      "text": "canvas",
      "url": "https://developer.wordpress.org/block-editor/#canvas"
    },
    {
      "text": "changeSiteTimezone",
      "url": "https://developer.wordpress.org/block-editor/#changesitetimezone"
    },
    {
      "text": "clearLocalStorage",
      "url": "https://developer.wordpress.org/block-editor/#clearlocalstorage"
    },
    {
      "text": "clickBlockAppender",
      "url": "https://developer.wordpress.org/block-editor/#clickblockappender"
    },
    {
      "text": "clickBlockToolbarButton",
      "url": "https://developer.wordpress.org/block-editor/#clickblocktoolbarbutton"
    },
    {
      "text": "clickButton",
      "url": "https://developer.wordpress.org/block-editor/#clickbutton"
    },
    {
      "text": "clickMenuItem",
      "url": "https://developer.wordpress.org/block-editor/#clickmenuitem"
    },
    {
      "text": "clickOnCloseModalButton",
      "url": "https://developer.wordpress.org/block-editor/#clickonclosemodalbutton"
    },
    {
      "text": "clickOnMoreMenuItem",
      "url": "https://developer.wordpress.org/block-editor/#clickonmoremenuitem"
    },
    {
      "text": "closeGlobalBlockInserter",
      "url": "https://developer.wordpress.org/block-editor/#closeglobalblockinserter"
    },
    {
      "text": "closeListView",
      "url": "https://developer.wordpress.org/block-editor/#closelistview"
    },
    {
      "text": "createEmbeddingMatcher",
      "url": "https://developer.wordpress.org/block-editor/#createembeddingmatcher"
    },
    {
      "text": "createJSONResponse",
      "url": "https://developer.wordpress.org/block-editor/#createjsonresponse"
    },
    {
      "text": "createMenu",
      "url": "https://developer.wordpress.org/block-editor/#createmenu"
    },
    {
      "text": "createNewPost",
      "url": "https://developer.wordpress.org/block-editor/#createnewpost"
    },
    {
      "text": "createNewTemplate",
      "url": "https://developer.wordpress.org/block-editor/#createnewtemplate"
    },
    {
      "text": "createReusableBlock",
      "url": "https://developer.wordpress.org/block-editor/#createreusableblock"
    },
    {
      "text": "createURL",
      "url": "https://developer.wordpress.org/block-editor/#createurl"
    },
    {
      "text": "createURLMatcher",
      "url": "https://developer.wordpress.org/block-editor/#createurlmatcher"
    },
    {
      "text": "createUser",
      "url": "https://developer.wordpress.org/block-editor/#createuser"
    },
    {
      "text": "deactivatePlugin",
      "url": "https://developer.wordpress.org/block-editor/#deactivateplugin"
    },
    {
      "text": "deleteAllMenus",
      "url": "https://developer.wordpress.org/block-editor/#deleteallmenus"
    },
    {
      "text": "deleteAllTemplates",
      "url": "https://developer.wordpress.org/block-editor/#deletealltemplates"
    },
    {
      "text": "deleteAllWidgets",
      "url": "https://developer.wordpress.org/block-editor/#deleteallwidgets"
    },
    {
      "text": "deleteTheme",
      "url": "https://developer.wordpress.org/block-editor/#deletetheme"
    },
    {
      "text": "deleteUser",
      "url": "https://developer.wordpress.org/block-editor/#deleteuser"
    },
    {
      "text": "disableFocusLossObservation",
      "url": "https://developer.wordpress.org/block-editor/#disablefocuslossobservation"
    },
    {
      "text": "disablePageDialogAccept",
      "url": "https://developer.wordpress.org/block-editor/#disablepagedialogaccept"
    },
    {
      "text": "disablePrePublishChecks",
      "url": "https://developer.wordpress.org/block-editor/#disableprepublishchecks"
    },
    {
      "text": "disableSiteEditorWelcomeGuide",
      "url": "https://developer.wordpress.org/block-editor/#disablesiteeditorwelcomeguide"
    },
    {
      "text": "dragAndResize",
      "url": "https://developer.wordpress.org/block-editor/#dragandresize"
    },
    {
      "text": "enableFocusLossObservation",
      "url": "https://developer.wordpress.org/block-editor/#enablefocuslossobservation"
    },
    {
      "text": "enablePageDialogAccept",
      "url": "https://developer.wordpress.org/block-editor/#enablepagedialogaccept"
    },
    {
      "text": "enablePrePublishChecks",
      "url": "https://developer.wordpress.org/block-editor/#enableprepublishchecks"
    },
    {
      "text": "ensureSidebarOpened",
      "url": "https://developer.wordpress.org/block-editor/#ensuresidebaropened"
    },
    {
      "text": "enterEditMode",
      "url": "https://developer.wordpress.org/block-editor/#entereditmode"
    },
    {
      "text": "findSidebarPanelToggleButtonWithTitle",
      "url": "https://developer.wordpress.org/block-editor/#findsidebarpaneltogglebuttonwithtitle"
    },
    {
      "text": "findSidebarPanelWithTitle",
      "url": "https://developer.wordpress.org/block-editor/#findsidebarpanelwithtitle"
    },
    {
      "text": "getAllBlockInserterItemTitles",
      "url": "https://developer.wordpress.org/block-editor/#getallblockinserteritemtitles"
    },
    {
      "text": "getAllBlocks",
      "url": "https://developer.wordpress.org/block-editor/#getallblocks"
    },
    {
      "text": "getAvailableBlockTransforms",
      "url": "https://developer.wordpress.org/block-editor/#getavailableblocktransforms"
    },
    {
      "text": "getBlockSetting",
      "url": "https://developer.wordpress.org/block-editor/#getblocksetting"
    },
    {
      "text": "getCurrentPostContent",
      "url": "https://developer.wordpress.org/block-editor/#getcurrentpostcontent"
    },
    {
      "text": "getCurrentSiteEditorContent",
      "url": "https://developer.wordpress.org/block-editor/#getcurrentsiteeditorcontent"
    },
    {
      "text": "getListViewBlocks",
      "url": "https://developer.wordpress.org/block-editor/#getlistviewblocks"
    },
    {
      "text": "getOption",
      "url": "https://developer.wordpress.org/block-editor/#getoption"
    },
    {
      "text": "getPageError",
      "url": "https://developer.wordpress.org/block-editor/#getpageerror"
    },
    {
      "text": "http://php.net/manual/en/function.error-reporting.php",
      "url": "http://php.net/manual/en/function.error-reporting.php"
    },
    {
      "text": "hasBlockSwitcher",
      "url": "https://developer.wordpress.org/block-editor/#hasblockswitcher"
    },
    {
      "text": "insertBlockDirectoryBlock",
      "url": "https://developer.wordpress.org/block-editor/#insertblockdirectoryblock"
    },
    {
      "text": "insertPattern",
      "url": "https://developer.wordpress.org/block-editor/#insertpattern"
    },
    {
      "text": "insertReusableBlock",
      "url": "https://developer.wordpress.org/block-editor/#insertreusableblock"
    },
    {
      "text": "installPlugin",
      "url": "https://developer.wordpress.org/block-editor/#installplugin"
    },
    {
      "text": "installTheme",
      "url": "https://developer.wordpress.org/block-editor/#installtheme"
    },
    {
      "text": "isCurrentURL",
      "url": "https://developer.wordpress.org/block-editor/#iscurrenturl"
    },
    {
      "text": "isInDefaultBlock",
      "url": "https://developer.wordpress.org/block-editor/#isindefaultblock"
    },
    {
      "text": "isListViewOpen",
      "url": "https://developer.wordpress.org/block-editor/#islistviewopen"
    },
    {
      "text": "isOfflineMode",
      "url": "https://developer.wordpress.org/block-editor/#isofflinemode"
    },
    {
      "text": "isThemeInstalled",
      "url": "https://developer.wordpress.org/block-editor/#isthemeinstalled"
    },
    {
      "text": "loginUser",
      "url": "https://developer.wordpress.org/block-editor/#loginuser"
    },
    {
      "text": "logout",
      "url": "https://developer.wordpress.org/block-editor/#logout"
    },
    {
      "text": "mockOrTransform",
      "url": "https://developer.wordpress.org/block-editor/#mockortransform"
    },
    {
      "text": "openDocumentSettingsSidebar",
      "url": "https://developer.wordpress.org/block-editor/#opendocumentsettingssidebar"
    },
    {
      "text": "openGlobalBlockInserter",
      "url": "https://developer.wordpress.org/block-editor/#openglobalblockinserter"
    },
    {
      "text": "openGlobalStylesPanel",
      "url": "https://developer.wordpress.org/block-editor/#openglobalstylespanel"
    },
    {
      "text": "openListView",
      "url": "https://developer.wordpress.org/block-editor/#openlistview"
    },
    {
      "text": "openPreviewPage",
      "url": "https://developer.wordpress.org/block-editor/#openpreviewpage"
    },
    {
      "text": "openPreviousGlobalStylesPanel",
      "url": "https://developer.wordpress.org/block-editor/#openpreviousglobalstylespanel"
    },
    {
      "text": "openPublishPanel",
      "url": "https://developer.wordpress.org/block-editor/#openpublishpanel"
    },
    {
      "text": "openTypographyToolsPanelMenu",
      "url": "https://developer.wordpress.org/block-editor/#opentypographytoolspanelmenu"
    },
    {
      "text": "pressKeyTimes",
      "url": "https://developer.wordpress.org/block-editor/#presskeytimes"
    },
    {
      "text": "pressKeyWithModifier",
      "url": "https://developer.wordpress.org/block-editor/#presskeywithmodifier"
    },
    {
      "text": "publishPost",
      "url": "https://developer.wordpress.org/block-editor/#publishpost"
    },
    {
      "text": "publishPostWithPrePublishChecksDisabled",
      "url": "https://developer.wordpress.org/block-editor/#publishpostwithprepublishchecksdisabled"
    },
    {
      "text": "resetPreferences",
      "url": "https://developer.wordpress.org/block-editor/#resetpreferences"
    },
    {
      "text": "saveDraft",
      "url": "https://developer.wordpress.org/block-editor/#savedraft"
    },
    {
      "text": "searchForBlock",
      "url": "https://developer.wordpress.org/block-editor/#searchforblock"
    },
    {
      "text": "searchForBlockDirectoryBlock",
      "url": "https://developer.wordpress.org/block-editor/#searchforblockdirectoryblock"
    },
    {
      "text": "searchForPattern",
      "url": "https://developer.wordpress.org/block-editor/#searchforpattern"
    },
    {
      "text": "searchForReusableBlock",
      "url": "https://developer.wordpress.org/block-editor/#searchforreusableblock"
    },
    {
      "text": "selectBlockByClientId",
      "url": "https://developer.wordpress.org/block-editor/#selectblockbyclientid"
    },
    {
      "text": "setBrowserViewport",
      "url": "https://developer.wordpress.org/block-editor/#setbrowserviewport"
    },
    {
      "text": "setClipboardData",
      "url": "https://developer.wordpress.org/block-editor/#setclipboarddata"
    },
    {
      "text": "setOption",
      "url": "https://developer.wordpress.org/block-editor/#setoption"
    },
    {
      "text": "setPostContent",
      "url": "https://developer.wordpress.org/block-editor/#setpostcontent"
    },
    {
      "text": "setUpResponseMocking",
      "url": "https://developer.wordpress.org/block-editor/#setupresponsemocking"
    },
    {
      "text": "showBlockToolbar",
      "url": "https://developer.wordpress.org/block-editor/#showblocktoolbar"
    },
    {
      "text": "switchBlockInspectorTab",
      "url": "https://developer.wordpress.org/block-editor/#switchblockinspectortab"
    },
    {
      "text": "switchEditorModeTo",
      "url": "https://developer.wordpress.org/block-editor/#switcheditormodeto"
    },
    {
      "text": "switchUserToAdmin",
      "url": "https://developer.wordpress.org/block-editor/#switchusertoadmin"
    },
    {
      "text": "switchUserToTest",
      "url": "https://developer.wordpress.org/block-editor/#switchusertotest"
    },
    {
      "text": "toggleGlobalBlockInserter",
      "url": "https://developer.wordpress.org/block-editor/#toggleglobalblockinserter"
    },
    {
      "text": "toggleGlobalStyles",
      "url": "https://developer.wordpress.org/block-editor/#toggleglobalstyles"
    },
    {
      "text": "toggleMoreMenu",
      "url": "https://developer.wordpress.org/block-editor/#togglemoremenu"
    },
    {
      "text": "toggleOfflineMode",
      "url": "https://developer.wordpress.org/block-editor/#toggleofflinemode"
    },
    {
      "text": "togglePreferencesOption",
      "url": "https://developer.wordpress.org/block-editor/#togglepreferencesoption"
    },
    {
      "text": "transformBlockTo",
      "url": "https://developer.wordpress.org/block-editor/#transformblockto"
    },
    {
      "text": "trashAllComments",
      "url": "https://developer.wordpress.org/block-editor/#trashallcomments"
    },
    {
      "text": "trashAllPosts",
      "url": "https://developer.wordpress.org/block-editor/#trashallposts"
    },
    {
      "text": "uninstallPlugin",
      "url": "https://developer.wordpress.org/block-editor/#uninstallplugin"
    },
    {
      "text": "visitAdminPage",
      "url": "https://developer.wordpress.org/block-editor/#visitadminpage"
    },
    {
      "text": "visitSiteEditor",
      "url": "https://developer.wordpress.org/block-editor/#visitsiteeditor"
    },
    {
      "text": "waitForWindowDimensions",
      "url": "https://developer.wordpress.org/block-editor/#waitforwindowdimensions"
    },
    {
      "text": "https://github.com/GoogleChrome/puppeteer/issues/1751",
      "url": "https://github.com/GoogleChrome/puppeteer/issues/1751"
    },
    {
      "text": "wpDataSelect",
      "url": "https://developer.wordpress.org/block-editor/#wpdataselect"
    },
    {
      "text": "https://pptr.dev/#?product=Puppeteer&version=v9.0.0&show=api-pageevaluatepagefunction-args",
      "url": "https://pptr.dev/#?product=Puppeteer&version=v9.0.0&show=api-pageevaluatepagefunction-args"
    },
    {
      "text": "https://github.com/WordPress/gutenberg/pull/31199",
      "url": "https://github.com/WordPress/gutenberg/pull/31199"
    },
    {
      "text": "← @wordpress/dom",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-dom/"
    },
    {
      "text": "@wordpress/e2e-tests →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-e2e-tests/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fpackages%2Fpackages-docgen%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/packages/docgen/README.md"
    },
    {
      "text": "CLI options",
      "url": "https://developer.wordpress.org/block-editor/#cli-options"
    },
    {
      "text": "Babel Configuration",
      "url": "https://developer.wordpress.org/block-editor/#babel-configuration"
    },
    {
      "text": "project-wide configuration of Babel",
      "url": "https://babeljs.io/docs/en/next/config-files#project-wide-configuration"
    },
    {
      "text": "supported extensions",
      "url": "https://babeljs.io/docs/en/next/config-files#supported-file-extensions"
    },
    {
      "text": "Default export",
      "url": "https://developer.wordpress.org/block-editor/#default-export"
    },
    {
      "text": "Named export",
      "url": "https://developer.wordpress.org/block-editor/#named-export"
    },
    {
      "text": "Namespace export",
      "url": "https://developer.wordpress.org/block-editor/#namespace-export"
    },
    {
      "text": "TypeScript support",
      "url": "https://developer.wordpress.org/block-editor/#typescript-support"
    },
    {
      "text": "← @wordpress/deprecated",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-deprecated/"
    },
    {
      "text": "@wordpress/dom-ready →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-dom-ready/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fpackages%2Fpackages-data-controls%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/packages/data-controls/README.md"
    },
    {
      "text": "@wordpress/data",
      "url": "https://github.com/WordPress/gutenberg/tree/HEAD/packages/data/README.md"
    },
    {
      "text": "more details on controls here",
      "url": "https://github.com/WordPress/gutenberg/tree/HEAD/packages/data#controls"
    },
    {
      "text": "apiFetch",
      "url": "https://developer.wordpress.org/block-editor/#apifetch"
    },
    {
      "text": "controls",
      "url": "https://developer.wordpress.org/block-editor/#controls"
    },
    {
      "text": "syncSelect",
      "url": "https://developer.wordpress.org/block-editor/#syncselect"
    },
    {
      "text": "← @wordpress/customize-widgets",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-customize-widgets/"
    },
    {
      "text": "@wordpress/data →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-data/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fcomponents%2Fdropdown%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/packages/components/src/dropdown/README.md"
    },
    {
      "text": "contentClassName: string",
      "url": "https://developer.wordpress.org/block-editor/#contentclassname-string"
    },
    {
      "text": "onToggle: ( willOpen: boolean ) => void",
      "url": "https://developer.wordpress.org/block-editor/#ontoggle-willopen-boolean-void"
    },
    {
      "text": "popoverProps: WordPressComponentProps< Omit< PopoverProps, 'children' > 'div', false >",
      "url": "https://developer.wordpress.org/block-editor/#popoverprops-wordpresscomponentprops-omit-popoverprops-children-div-false"
    },
    {
      "text": "renderContent: ( props: CallbackProps ) => ReactNode",
      "url": "https://developer.wordpress.org/block-editor/#rendercontent-props-callbackprops-reactnode"
    },
    {
      "text": "renderToggle: ( props: CallbackProps ) => ReactNode",
      "url": "https://developer.wordpress.org/block-editor/#rendertoggle-props-callbackprops-reactnode"
    },
    {
      "text": "style: React.CSSProperties",
      "url": "https://developer.wordpress.org/block-editor/#style-react-cssproperties"
    },
    {
      "text": "← Flyout",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/flyout/"
    },
    {
      "text": "DuotonePicker →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/duotone-picker/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Fdocs%2Frules%2Fis-gutenberg-plugin.md&locale=en_US"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fcomponents%2Fbutton%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/packages/components/src/button/README.md"
    },
    {
      "text": "Content guidelines",
      "url": "https://developer.wordpress.org/block-editor/#content-guidelines"
    },
    {
      "text": "Types",
      "url": "https://developer.wordpress.org/block-editor/#types"
    },
    {
      "text": "Link button",
      "url": "https://developer.wordpress.org/block-editor/#link-button"
    },
    {
      "text": "Default button",
      "url": "https://developer.wordpress.org/block-editor/#default-button"
    },
    {
      "text": "Primary button",
      "url": "https://developer.wordpress.org/block-editor/#primary-button"
    },
    {
      "text": "Text label",
      "url": "https://developer.wordpress.org/block-editor/#text-label"
    },
    {
      "text": "Hierarchy",
      "url": "https://developer.wordpress.org/block-editor/#hierarchy"
    },
    {
      "text": "Placement",
      "url": "https://developer.wordpress.org/block-editor/#placement"
    },
    {
      "text": "describedBy: string",
      "url": "https://developer.wordpress.org/block-editor/#describedby-string"
    },
    {
      "text": "disabled: boolean",
      "url": "https://developer.wordpress.org/block-editor/#disabled-boolean"
    },
    {
      "text": "focus: boolean",
      "url": "https://developer.wordpress.org/block-editor/#focus-boolean"
    },
    {
      "text": "href: string",
      "url": "https://developer.wordpress.org/block-editor/#href-string"
    },
    {
      "text": "icon: IconProps< unknown >[ 'icon' ]",
      "url": "https://developer.wordpress.org/block-editor/#icon-iconprops-unknown-icon"
    },
    {
      "text": "Icon",
      "url": "https://developer.wordpress.org/block-editor/reference-guide/components/icon/"
    },
    {
      "text": "iconPosition: 'left' | 'right'",
      "url": "https://developer.wordpress.org/block-editor/#iconposition-left-right"
    },
    {
      "text": "iconSize: IconProps< unknown >[ 'size' ]",
      "url": "https://developer.wordpress.org/block-editor/#iconsize-iconprops-unknown-size"
    },
    {
      "text": "isBusy: boolean",
      "url": "https://developer.wordpress.org/block-editor/#isbusy-boolean"
    },
    {
      "text": "isDestructive: boolean",
      "url": "https://developer.wordpress.org/block-editor/#isdestructive-boolean"
    },
    {
      "text": "isPressed: boolean",
      "url": "https://developer.wordpress.org/block-editor/#ispressed-boolean"
    },
    {
      "text": "isSmall: boolean",
      "url": "https://developer.wordpress.org/block-editor/#issmall-boolean"
    },
    {
      "text": "shortcut: string | { display: string; ariaLabel: string; }",
      "url": "https://developer.wordpress.org/block-editor/#shortcut-string-display-string-arialabel-string"
    },
    {
      "text": "showTooltip: boolean",
      "url": "https://developer.wordpress.org/block-editor/#showtooltip-boolean"
    },
    {
      "text": "target: string",
      "url": "https://developer.wordpress.org/block-editor/#target-string"
    },
    {
      "text": "text: string",
      "url": "https://developer.wordpress.org/block-editor/#text-string"
    },
    {
      "text": "tooltipPosition: PopoverProps[ 'position' ]",
      "url": "https://developer.wordpress.org/block-editor/#tooltipposition-popoverprops-position"
    },
    {
      "text": "variant: 'primary' | 'secondary' | 'tertiary' | 'link'",
      "url": "https://developer.wordpress.org/block-editor/#variant-primary-secondary-tertiary-link"
    },
    {
      "text": "ButtonGroup",
      "url": "https://developer.wordpress.org/block-editor/reference-guide/components/button-group/"
    },
    {
      "text": "← ButtonGroup",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/button-group/"
    },
    {
      "text": "CardBody →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/card-body/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fpackages%2Fpackages-customize-widgets%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/packages/customize-widgets/README.md"
    },
    {
      "text": "Technical implementation details",
      "url": "https://developer.wordpress.org/block-editor/#technical-implementation-details"
    },
    {
      "text": "the Customize API",
      "url": "https://developer.wordpress.org/themes/customize-api/"
    },
    {
      "text": "← @wordpress/edit-navigation",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-edit-navigation/"
    },
    {
      "text": "@wordpress/data-controls →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-data-controls/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fpackages%2Fpackages-create-block%2Fpackages-create-block-external-template%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/packages/create-block/docs/external-template.md"
    },
    {
      "text": "Project Template Configuration",
      "url": "https://developer.wordpress.org/block-editor/#project-template-configuration"
    },
    {
      "text": "pluginTemplatesPath",
      "url": "https://developer.wordpress.org/block-editor/#plugintemplatespath"
    },
    {
      "text": "blockTemplatesPath",
      "url": "https://developer.wordpress.org/block-editor/#blocktemplatespath"
    },
    {
      "text": "assetsPath",
      "url": "https://developer.wordpress.org/block-editor/#assetspath"
    },
    {
      "text": "defaultValues",
      "url": "https://developer.wordpress.org/block-editor/#defaultvalues"
    },
    {
      "text": "npm install",
      "url": "https://docs.npmjs.com/cli/v8/commands/npm-install"
    },
    {
      "text": "npm install --save-dev",
      "url": "https://docs.npmjs.com/cli/v8/commands/npm-install"
    },
    {
      "text": "learn more",
      "url": "https://developer.wordpress.org/plugins/plugin-basics/header-requirements/"
    },
    {
      "text": "more info",
      "url": "https://developer.wordpress.org/plugins/internationalization/how-to-internationalize-your-plugin/#domain-path"
    },
    {
      "text": "related dev note",
      "url": "https://make.wordpress.org/core/2021/06/29/introducing-update-uri-plugin-header-in-wordpress-5-8/"
    },
    {
      "text": "learn more",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/block-api/block-metadata/"
    },
    {
      "text": "related dev note",
      "url": "https://make.wordpress.org/core/2020/11/18/block-api-version-2/"
    },
    {
      "text": "available values",
      "url": "https://developer.wordpress.org/resource/dashicons/"
    },
    {
      "text": "more details",
      "url": "https://developer.wordpress.org/block-editor/developers/block-api/block-attributes/"
    },
    {
      "text": "more details",
      "url": "https://developer.wordpress.org/block-editor/developers/block-api/block-supports/"
    },
    {
      "text": "← @wordpress/create-block",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-create-block/"
    },
    {
      "text": "@wordpress/edit-navigation →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-edit-navigation/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fpackages%2Fpackages-create-block%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/packages/create-block/README.md"
    },
    {
      "text": "create-react-app",
      "url": "https://create-react-app.dev/docs/getting-started"
    },
    {
      "text": "@gaearon",
      "url": "https://github.com/gaearon"
    },
    {
      "text": "page and post builder-like functionality",
      "url": "https://wordpress.org/gutenberg/"
    },
    {
      "text": "Block API at the Gutenberg HandBook",
      "url": "https://developer.wordpress.org/block-editor/developers/block-api/block-registration/"
    },
    {
      "text": "Quick start",
      "url": "https://developer.wordpress.org/block-editor/#quick-start"
    },
    {
      "text": "Interactive Mode",
      "url": "https://developer.wordpress.org/block-editor/#interactive-mode"
    },
    {
      "text": "slug",
      "url": "https://developer.wordpress.org/block-editor/#slug"
    },
    {
      "text": "options",
      "url": "https://developer.wordpress.org/block-editor/#options"
    },
    {
      "text": "Available Commands",
      "url": "https://developer.wordpress.org/block-editor/#available-commands"
    },
    {
      "text": "External Project Templates",
      "url": "https://developer.wordpress.org/block-editor/#external-project-templates"
    },
    {
      "text": "be installed manually",
      "url": "https://wordpress.org/documentation/article/manage-plugins/#manual-plugin-installation"
    },
    {
      "text": "Watch a video introduction to create-block on Learn.wordpress.org",
      "url": "https://learn.wordpress.org/tutorial/using-the-create-block-tool/"
    },
    {
      "text": "--template",
      "url": "https://developer.wordpress.org/block-editor/#template"
    },
    {
      "text": "--variant",
      "url": "https://developer.wordpress.org/block-editor/#variant"
    },
    {
      "text": "--help",
      "url": "https://developer.wordpress.org/block-editor/#help"
    },
    {
      "text": "--no-plugin",
      "url": "https://developer.wordpress.org/block-editor/#no-plugin"
    },
    {
      "text": "--wp-env",
      "url": "https://developer.wordpress.org/block-editor/#wp-env"
    },
    {
      "text": "wp-env package",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-env/"
    },
    {
      "text": "Available commands in the scaffolded project",
      "url": "https://developer.wordpress.org/block-editor/#available-commands-in-the-scaffolded-project"
    },
    {
      "text": "Click here",
      "url": "https://github.com/WordPress/gutenberg/tree/HEAD/packages/scripts#available-scripts"
    },
    {
      "text": "webpack",
      "url": "https://webpack.js.org"
    },
    {
      "text": "Babel",
      "url": "https://babeljs.io"
    },
    {
      "text": "ESLint",
      "url": "https://eslint.org"
    },
    {
      "text": "Click here",
      "url": "https://github.com/WordPress/gutenberg/tree/HEAD/packages/create-block/docs/external-template.md"
    },
    {
      "text": "← @wordpress/custom-templated-path-webpack-plugin",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-custom-templated-path-webpack-plugin/"
    },
    {
      "text": "External Project Templates →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-create-block/packages-create-block-external-template/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fpackages%2Fpackages-custom-templated-path-webpack-plugin%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/packages/custom-templated-path-webpack-plugin/README.md"
    },
    {
      "text": "output.filename",
      "url": "https://webpack.js.org/configuration/output/#outputfilename"
    },
    {
      "text": "default set of template tags",
      "url": "https://webpack.js.org/configuration/output/#output-filename"
    },
    {
      "text": "TemplatedPathPlugin.js",
      "url": "https://github.com/webpack/webpack/blob/v4.1.1/lib/TemplatedPathPlugin.js"
    },
    {
      "text": "← @wordpress/create-block-tutorial-template",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-create-block-tutorial-template/"
    },
    {
      "text": "@wordpress/create-block →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-create-block/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fpackages%2Fpackages-create-block-tutorial-template%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/packages/create-block-tutorial-template/README.md"
    },
    {
      "text": "@wordpress/create-block",
      "url": "https://github.com/WordPress/gutenberg/tree/HEAD/packages/create-block/README.md"
    },
    {
      "text": "WordPress Tutorial",
      "url": "https://github.com/WordPress/gutenberg/tree/HEAD/docs/getting-started/create-block/README.md"
    },
    {
      "text": "← @wordpress/core-data",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-core-data/"
    },
    {
      "text": "@wordpress/custom-templated-path-webpack-plugin →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-custom-templated-path-webpack-plugin/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fpackages%2Fpackages-components%2F&locale=en_US"
    },
    {
      "text": "← @wordpress/commands",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-commands/"
    },
    {
      "text": "@wordpress/compose →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-compose/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fpackages%2Fpackages-commands%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/packages/commands/README.md"
    },
    {
      "text": "CommandMenu",
      "url": "https://developer.wordpress.org/block-editor/#commandmenu"
    },
    {
      "text": "privateApis",
      "url": "https://developer.wordpress.org/block-editor/#privateapis"
    },
    {
      "text": "← @wordpress/browserslist-config",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-browserslist-config/"
    },
    {
      "text": "@wordpress/components →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-components/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fpackages%2Fpackages-browserslist-config%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/packages/browserslist-config/README.md"
    },
    {
      "text": "WordPress Browserslist",
      "url": "https://make.wordpress.org/core/handbook/best-practices/browser-support/"
    },
    {
      "text": "Browserslist",
      "url": "https://www.npmjs.com/package/browserslist"
    },
    {
      "text": "Browserslist examples",
      "url": "https://github.com/ai/browserslist-example#browserslist-example"
    },
    {
      "text": "← @wordpress/blocks",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-blocks/"
    },
    {
      "text": "@wordpress/commands →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-commands/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fpackages%2Fpackages-block-editor%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/packages/block-editor/README.md"
    },
    {
      "text": "API",
      "url": "https://developer.wordpress.org/block-editor/#API"
    },
    {
      "text": "@wordpress/components",
      "url": "https://developer.wordpress.org/block-editor/reference-guide/components/"
    },
    {
      "text": "creating an editor",
      "url": "https://developer.wordpress.org/block-editor/docs/how-to-guides/platform/custom-block-editor/README.md"
    },
    {
      "text": "AlignmentControl",
      "url": "https://developer.wordpress.org/block-editor/#alignmentcontrol"
    },
    {
      "text": "https://github.com/WordPress/gutenberg/blob/HEAD/packages/block-editor/src/components/alignment-control/README.md",
      "url": "https://github.com/WordPress/gutenberg/blob/HEAD/packages/block-editor/src/components/alignment-control/README.md"
    },
    {
      "text": "AlignmentToolbar",
      "url": "https://developer.wordpress.org/block-editor/#alignmenttoolbar"
    },
    {
      "text": "Autocomplete",
      "url": "https://developer.wordpress.org/block-editor/#autocomplete"
    },
    {
      "text": "https://github.com/WordPress/gutenberg/blob/HEAD/packages/block-editor/src/components/autocomplete/README.md",
      "url": "https://github.com/WordPress/gutenberg/blob/HEAD/packages/block-editor/src/components/autocomplete/README.md"
    },
    {
      "text": "BlockAlignmentControl",
      "url": "https://developer.wordpress.org/block-editor/#blockalignmentcontrol"
    },
    {
      "text": "https://github.com/WordPress/gutenberg/blob/HEAD/packages/block-editor/src/components/block-alignment-control/README.md",
      "url": "https://github.com/WordPress/gutenberg/blob/HEAD/packages/block-editor/src/components/block-alignment-control/README.md"
    },
    {
      "text": "BlockAlignmentToolbar",
      "url": "https://developer.wordpress.org/block-editor/#blockalignmenttoolbar"
    },
    {
      "text": "BlockBreadcrumb",
      "url": "https://developer.wordpress.org/block-editor/#blockbreadcrumb"
    },
    {
      "text": "BlockColorsStyleSelector",
      "url": "https://developer.wordpress.org/block-editor/#blockcolorsstyleselector"
    },
    {
      "text": "BlockContextProvider",
      "url": "https://developer.wordpress.org/block-editor/#blockcontextprovider"
    },
    {
      "text": "https://github.com/WordPress/gutenberg/blob/HEAD/packages/block-editor/src/components/block-context/README.md",
      "url": "https://github.com/WordPress/gutenberg/blob/HEAD/packages/block-editor/src/components/block-context/README.md"
    },
    {
      "text": "BlockEdit",
      "url": "https://developer.wordpress.org/block-editor/#blockedit"
    },
    {
      "text": "BlockEditorKeyboardShortcuts",
      "url": "https://developer.wordpress.org/block-editor/#blockeditorkeyboardshortcuts"
    },
    {
      "text": "BlockEditorProvider",
      "url": "https://developer.wordpress.org/block-editor/#blockeditorprovider"
    },
    {
      "text": "BlockFormatControls",
      "url": "https://developer.wordpress.org/block-editor/#blockformatcontrols"
    },
    {
      "text": "BlockIcon",
      "url": "https://developer.wordpress.org/block-editor/#blockicon"
    },
    {
      "text": "https://github.com/WordPress/gutenberg/blob/HEAD/packages/block-editor/src/components/block-icon/README.md",
      "url": "https://github.com/WordPress/gutenberg/blob/HEAD/packages/block-editor/src/components/block-icon/README.md"
    },
    {
      "text": "BlockInspector",
      "url": "https://developer.wordpress.org/block-editor/#blockinspector"
    },
    {
      "text": "https://github.com/WordPress/gutenberg/blob/HEAD/packages/block-editor/src/components/block-inspector/README.md",
      "url": "https://github.com/WordPress/gutenberg/blob/HEAD/packages/block-editor/src/components/block-inspector/README.md"
    },
    {
      "text": "BlockList",
      "url": "https://developer.wordpress.org/block-editor/#blocklist"
    },
    {
      "text": "BlockMover",
      "url": "https://developer.wordpress.org/block-editor/#blockmover"
    },
    {
      "text": "https://github.com/WordPress/gutenberg/blob/HEAD/packages/block-editor/src/components/block-mover/README.md",
      "url": "https://github.com/WordPress/gutenberg/blob/HEAD/packages/block-editor/src/components/block-mover/README.md"
    },
    {
      "text": "BlockNavigationDropdown",
      "url": "https://developer.wordpress.org/block-editor/#blocknavigationdropdown"
    },
    {
      "text": "BlockPreview",
      "url": "https://developer.wordpress.org/block-editor/#blockpreview"
    },
    {
      "text": "https://github.com/WordPress/gutenberg/blob/HEAD/packages/block-editor/src/components/block-preview/README.md",
      "url": "https://github.com/WordPress/gutenberg/blob/HEAD/packages/block-editor/src/components/block-preview/README.md"
    },
    {
      "text": "BlockSelectionClearer",
      "url": "https://developer.wordpress.org/block-editor/#blockselectionclearer"
    },
    {
      "text": "BlockSettingsMenu",
      "url": "https://developer.wordpress.org/block-editor/#blocksettingsmenu"
    },
    {
      "text": "BlockSettingsMenuControls",
      "url": "https://developer.wordpress.org/block-editor/#blocksettingsmenucontrols"
    },
    {
      "text": "https://github.com/WordPress/gutenberg/blob/HEAD/packages/block-editor/src/components/block-settings-menu-controls/README.md",
      "url": "https://github.com/WordPress/gutenberg/blob/HEAD/packages/block-editor/src/components/block-settings-menu-controls/README.md"
    },
    {
      "text": "BlockStyles",
      "url": "https://developer.wordpress.org/block-editor/#blockstyles"
    },
    {
      "text": "BlockTitle",
      "url": "https://developer.wordpress.org/block-editor/#blocktitle"
    },
    {
      "text": "BlockToolbar",
      "url": "https://developer.wordpress.org/block-editor/#blocktoolbar"
    },
    {
      "text": "https://github.com/WordPress/gutenberg/blob/HEAD/packages/block-editor/src/components/block-toolbar/README.md",
      "url": "https://github.com/WordPress/gutenberg/blob/HEAD/packages/block-editor/src/components/block-toolbar/README.md"
    },
    {
      "text": "BlockTools",
      "url": "https://developer.wordpress.org/block-editor/#blocktools"
    },
    {
      "text": "BlockVerticalAlignmentControl",
      "url": "https://developer.wordpress.org/block-editor/#blockverticalalignmentcontrol"
    },
    {
      "text": "https://github.com/WordPress/gutenberg/blob/HEAD/packages/block-editor/src/components/block-vertical-alignment-control/README.md",
      "url": "https://github.com/WordPress/gutenberg/blob/HEAD/packages/block-editor/src/components/block-vertical-alignment-control/README.md"
    },
    {
      "text": "BlockVerticalAlignmentToolbar",
      "url": "https://developer.wordpress.org/block-editor/#blockverticalalignmenttoolbar"
    },
    {
      "text": "ButtonBlockAppender",
      "url": "https://developer.wordpress.org/block-editor/#buttonblockappender"
    },
    {
      "text": "https://github.com/WordPress/gutenberg/blob/HEAD/packages/block-editor/src/components/button-block-appender/README.md",
      "url": "https://github.com/WordPress/gutenberg/blob/HEAD/packages/block-editor/src/components/button-block-appender/README.md"
    },
    {
      "text": "ButtonBlockerAppender",
      "url": "https://developer.wordpress.org/block-editor/#buttonblockerappender"
    },
    {
      "text": "ColorPalette",
      "url": "https://developer.wordpress.org/block-editor/#colorpalette"
    },
    {
      "text": "ColorPaletteControl",
      "url": "https://developer.wordpress.org/block-editor/#colorpalettecontrol"
    },
    {
      "text": "ContrastChecker",
      "url": "https://developer.wordpress.org/block-editor/#contrastchecker"
    },
    {
      "text": "https://github.com/WordPress/gutenberg/blob/HEAD/packages/block-editor/src/components/contrast-checker/README.md",
      "url": "https://github.com/WordPress/gutenberg/blob/HEAD/packages/block-editor/src/components/contrast-checker/README.md"
    },
    {
      "text": "CopyHandler",
      "url": "https://developer.wordpress.org/block-editor/#copyhandler"
    },
    {
      "text": "https://github.com/WordPress/gutenberg/blob/HEAD/packages/block-editor/src/components/copy-handler/README.md",
      "url": "https://github.com/WordPress/gutenberg/blob/HEAD/packages/block-editor/src/components/copy-handler/README.md"
    },
    {
      "text": "createCustomColorsHOC",
      "url": "https://developer.wordpress.org/block-editor/#createcustomcolorshoc"
    },
    {
      "text": "DefaultBlockAppender",
      "url": "https://developer.wordpress.org/block-editor/#defaultblockappender"
    },
    {
      "text": "FontSizePicker",
      "url": "https://developer.wordpress.org/block-editor/#fontsizepicker"
    },
    {
      "text": "https://github.com/WordPress/gutenberg/blob/HEAD/packages/block-editor/src/components/font-sizes/README.md",
      "url": "https://github.com/WordPress/gutenberg/blob/HEAD/packages/block-editor/src/components/font-sizes/README.md"
    },
    {
      "text": "getColorClassName",
      "url": "https://developer.wordpress.org/block-editor/#getcolorclassname"
    },
    {
      "text": "getColorObjectByAttributeValues",
      "url": "https://developer.wordpress.org/block-editor/#getcolorobjectbyattributevalues"
    },
    {
      "text": "getColorObjectByColorValue",
      "url": "https://developer.wordpress.org/block-editor/#getcolorobjectbycolorvalue"
    },
    {
      "text": "getComputedFluidTypographyValue",
      "url": "https://developer.wordpress.org/block-editor/#getcomputedfluidtypographyvalue"
    },
    {
      "text": "getCustomValueFromPreset",
      "url": "https://developer.wordpress.org/block-editor/#getcustomvaluefrompreset"
    },
    {
      "text": "getFontSize",
      "url": "https://developer.wordpress.org/block-editor/#getfontsize"
    },
    {
      "text": "getFontSizeClass",
      "url": "https://developer.wordpress.org/block-editor/#getfontsizeclass"
    },
    {
      "text": "getFontSizeObjectByValue",
      "url": "https://developer.wordpress.org/block-editor/#getfontsizeobjectbyvalue"
    },
    {
      "text": "getGradientSlugByValue",
      "url": "https://developer.wordpress.org/block-editor/#getgradientslugbyvalue"
    },
    {
      "text": "getGradientValueBySlug",
      "url": "https://developer.wordpress.org/block-editor/#getgradientvaluebyslug"
    },
    {
      "text": "getPxFromCssUnit",
      "url": "https://developer.wordpress.org/block-editor/#getpxfromcssunit"
    },
    {
      "text": "getSpacingPresetCssVar",
      "url": "https://developer.wordpress.org/block-editor/#getspacingpresetcssvar"
    },
    {
      "text": "getTypographyClassesAndStyles",
      "url": "https://developer.wordpress.org/block-editor/#gettypographyclassesandstyles"
    },
    {
      "text": "HeightControl",
      "url": "https://developer.wordpress.org/block-editor/#heightcontrol"
    },
    {
      "text": "https://github.com/WordPress/gutenberg/blob/HEAD/packages/block-editor/src/components/height-control/README.md",
      "url": "https://github.com/WordPress/gutenberg/blob/HEAD/packages/block-editor/src/components/height-control/README.md"
    },
    {
      "text": "InnerBlocks",
      "url": "https://developer.wordpress.org/block-editor/#innerblocks"
    },
    {
      "text": "https://github.com/WordPress/gutenberg/blob/HEAD/packages/block-editor/src/components/inner-blocks/README.md",
      "url": "https://github.com/WordPress/gutenberg/blob/HEAD/packages/block-editor/src/components/inner-blocks/README.md"
    },
    {
      "text": "Inserter",
      "url": "https://developer.wordpress.org/block-editor/#inserter"
    },
    {
      "text": "InspectorAdvancedControls",
      "url": "https://developer.wordpress.org/block-editor/#inspectoradvancedcontrols"
    },
    {
      "text": "InspectorControls",
      "url": "https://developer.wordpress.org/block-editor/#inspectorcontrols"
    },
    {
      "text": "https://github.com/WordPress/gutenberg/blob/HEAD/packages/block-editor/src/components/inspector-controls/README.md",
      "url": "https://github.com/WordPress/gutenberg/blob/HEAD/packages/block-editor/src/components/inspector-controls/README.md"
    },
    {
      "text": "isValueSpacingPreset",
      "url": "https://developer.wordpress.org/block-editor/#isvaluespacingpreset"
    },
    {
      "text": "JustifyContentControl",
      "url": "https://developer.wordpress.org/block-editor/#justifycontentcontrol"
    },
    {
      "text": "https://github.com/WordPress/gutenberg/blob/HEAD/packages/block-editor/src/components/justify-content-control/README.md",
      "url": "https://github.com/WordPress/gutenberg/blob/HEAD/packages/block-editor/src/components/justify-content-control/README.md"
    },
    {
      "text": "JustifyToolbar",
      "url": "https://developer.wordpress.org/block-editor/#justifytoolbar"
    },
    {
      "text": "LineHeightControl",
      "url": "https://developer.wordpress.org/block-editor/#lineheightcontrol"
    },
    {
      "text": "https://github.com/WordPress/gutenberg/blob/HEAD/packages/block-editor/src/components/line-height-control/README.md",
      "url": "https://github.com/WordPress/gutenberg/blob/HEAD/packages/block-editor/src/components/line-height-control/README.md"
    },
    {
      "text": "MediaPlaceholder",
      "url": "https://developer.wordpress.org/block-editor/#mediaplaceholder"
    },
    {
      "text": "https://github.com/WordPress/gutenberg/blob/HEAD/packages/block-editor/src/components/media-placeholder/README.md",
      "url": "https://github.com/WordPress/gutenberg/blob/HEAD/packages/block-editor/src/components/media-placeholder/README.md"
    },
    {
      "text": "MediaReplaceFlow",
      "url": "https://developer.wordpress.org/block-editor/#mediareplaceflow"
    },
    {
      "text": "https://github.com/WordPress/gutenberg/blob/HEAD/packages/block-editor/src/components/media-replace-flow/README.md",
      "url": "https://github.com/WordPress/gutenberg/blob/HEAD/packages/block-editor/src/components/media-replace-flow/README.md"
    },
    {
      "text": "https://github.com/WordPress/gutenberg/blob/HEAD/packages/block-editor/src/components/media-upload/README.md",
      "url": "https://github.com/WordPress/gutenberg/blob/HEAD/packages/block-editor/src/components/media-upload/README.md"
    },
    {
      "text": "MediaUploadCheck",
      "url": "https://developer.wordpress.org/block-editor/#mediauploadcheck"
    },
    {
      "text": "MultiSelectScrollIntoView",
      "url": "https://developer.wordpress.org/block-editor/#multiselectscrollintoview"
    },
    {
      "text": "NavigableToolbar",
      "url": "https://developer.wordpress.org/block-editor/#navigabletoolbar"
    },
    {
      "text": "ObserveTyping",
      "url": "https://developer.wordpress.org/block-editor/#observetyping"
    },
    {
      "text": "https://github.com/WordPress/gutenberg/blob/HEAD/packages/block-editor/src/components/observe-typing/README.md",
      "url": "https://github.com/WordPress/gutenberg/blob/HEAD/packages/block-editor/src/components/observe-typing/README.md"
    },
    {
      "text": "PanelColorSettings",
      "url": "https://developer.wordpress.org/block-editor/#panelcolorsettings"
    },
    {
      "text": "PlainText",
      "url": "https://developer.wordpress.org/block-editor/#plaintext"
    },
    {
      "text": "https://github.com/WordPress/gutenberg/blob/HEAD/packages/block-editor/src/components/plain-text/README.md",
      "url": "https://github.com/WordPress/gutenberg/blob/HEAD/packages/block-editor/src/components/plain-text/README.md"
    },
    {
      "text": "https://github.com/WordPress/gutenberg/blob/HEAD/packages/block-editor/src/components/rich-text/README.md",
      "url": "https://github.com/WordPress/gutenberg/blob/HEAD/packages/block-editor/src/components/rich-text/README.md"
    },
    {
      "text": "RichTextShortcut",
      "url": "https://developer.wordpress.org/block-editor/#richtextshortcut"
    },
    {
      "text": "RichTextToolbarButton",
      "url": "https://developer.wordpress.org/block-editor/#richtexttoolbarbutton"
    },
    {
      "text": "SETTINGS_DEFAULTS",
      "url": "https://developer.wordpress.org/block-editor/#settings_defaults"
    },
    {
      "text": "SkipToSelectedBlock",
      "url": "https://developer.wordpress.org/block-editor/#skiptoselectedblock"
    },
    {
      "text": "https://github.com/WordPress/gutenberg/blob/HEAD/packages/block-editor/src/components/skip-to-selected-block/README.md",
      "url": "https://github.com/WordPress/gutenberg/blob/HEAD/packages/block-editor/src/components/skip-to-selected-block/README.md"
    },
    {
      "text": "storeConfig",
      "url": "https://developer.wordpress.org/block-editor/#storeconfig"
    },
    {
      "text": "https://github.com/WordPress/gutenberg/blob/HEAD/packages/data/README.md#registerStore",
      "url": "https://github.com/WordPress/gutenberg/blob/HEAD/packages/data/README.md#registerStore"
    },
    {
      "text": "ToolSelector",
      "url": "https://developer.wordpress.org/block-editor/#toolselector"
    },
    {
      "text": "transformStyles",
      "url": "https://developer.wordpress.org/block-editor/#transformstyles"
    },
    {
      "text": "Typewriter",
      "url": "https://developer.wordpress.org/block-editor/#typewriter"
    },
    {
      "text": "URLInput",
      "url": "https://developer.wordpress.org/block-editor/#urlinput"
    },
    {
      "text": "https://github.com/WordPress/gutenberg/blob/HEAD/packages/block-editor/src/components/url-input/README.md",
      "url": "https://github.com/WordPress/gutenberg/blob/HEAD/packages/block-editor/src/components/url-input/README.md"
    },
    {
      "text": "URLInputButton",
      "url": "https://developer.wordpress.org/block-editor/#urlinputbutton"
    },
    {
      "text": "URLPopover",
      "url": "https://developer.wordpress.org/block-editor/#urlpopover"
    },
    {
      "text": "https://github.com/WordPress/gutenberg/blob/HEAD/packages/block-editor/src/components/url-popover/README.md",
      "url": "https://github.com/WordPress/gutenberg/blob/HEAD/packages/block-editor/src/components/url-popover/README.md"
    },
    {
      "text": "useBlockDisplayInformation",
      "url": "https://developer.wordpress.org/block-editor/#useblockdisplayinformation"
    },
    {
      "text": "useBlockEditContext",
      "url": "https://developer.wordpress.org/block-editor/#useblockeditcontext"
    },
    {
      "text": "useBlockProps",
      "url": "https://developer.wordpress.org/block-editor/#useblockprops"
    },
    {
      "text": "useCachedTruthy",
      "url": "https://developer.wordpress.org/block-editor/#usecachedtruthy"
    },
    {
      "text": "useInnerBlocksProps",
      "url": "https://developer.wordpress.org/block-editor/#useinnerblocksprops"
    },
    {
      "text": "useSetting",
      "url": "https://developer.wordpress.org/block-editor/#usesetting"
    },
    {
      "text": "Warning",
      "url": "https://developer.wordpress.org/block-editor/#warning"
    },
    {
      "text": "https://github.com/WordPress/gutenberg/blob/HEAD/packages/block-editor/src/components/warning/README.md",
      "url": "https://github.com/WordPress/gutenberg/blob/HEAD/packages/block-editor/src/components/warning/README.md"
    },
    {
      "text": "withColorContext",
      "url": "https://developer.wordpress.org/block-editor/#withcolorcontext"
    },
    {
      "text": "withColors",
      "url": "https://developer.wordpress.org/block-editor/#withcolors"
    },
    {
      "text": "withFontSizes",
      "url": "https://developer.wordpress.org/block-editor/#withfontsizes"
    },
    {
      "text": "WritingFlow",
      "url": "https://developer.wordpress.org/block-editor/#writingflow"
    },
    {
      "text": "← @wordpress/block-directory",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-block-directory/"
    },
    {
      "text": "@wordpress/block-library →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-block-library/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fpackages%2Fpackages-block-directory%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/packages/block-directory/README.md"
    },
    {
      "text": "installs, activates, and injects the block into the post.",
      "url": "https://developer.wordpress.org/block-editor/src/store/actions.js#L49"
    },
    {
      "text": "silently uninstalled",
      "url": "https://developer.wordpress.org/block-editor/src/store/actions.js#L129"
    },
    {
      "text": "← @wordpress/blob",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-blob/"
    },
    {
      "text": "@wordpress/block-editor →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-block-editor/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fpackages%2Fpackages-base-styles%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/packages/base-styles/README.md"
    },
    {
      "text": "Use",
      "url": "https://developer.wordpress.org/block-editor/#use"
    },
    {
      "text": "SCSS utilities and variables",
      "url": "https://developer.wordpress.org/block-editor/#scss-utilities-and-variables"
    },
    {
      "text": "Webpack",
      "url": "https://webpack.js.org/"
    },
    {
      "text": "sass",
      "url": "https://www.npmjs.com/package/sass"
    },
    {
      "text": "node-sass",
      "url": "https://www.npmjs.com/package/node-sass"
    },
    {
      "text": "includePaths option",
      "url": "https://sass-lang.com/documentation/js-api#includepaths"
    },
    {
      "text": "← @wordpress/babel-preset-default",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-babel-preset-default/"
    },
    {
      "text": "@wordpress/blob →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-blob/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fpackages%2Fpackages-babel-preset-default%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/packages/babel-preset-default/README.md"
    },
    {
      "text": "ECMAScript proposals",
      "url": "https://github.com/tc39/proposals"
    },
    {
      "text": "Stage 4 (“Finished”)",
      "url": "https://tc39.es/process-document/"
    },
    {
      "text": "JSX syntax extension",
      "url": "https://reactjs.org/docs/introducing-jsx.html"
    },
    {
      "text": "JavaScript Coding Guidelines",
      "url": "https://github.com/WordPress/gutenberg/blob/HEAD/docs/contributors/coding-guidelines.md#javascript"
    },
    {
      "text": "Babel’s Configuration documentation",
      "url": "https://babeljs.io/docs/en/configuration"
    },
    {
      "text": "Extending Configuration",
      "url": "https://developer.wordpress.org/block-editor/#extending-configuration"
    },
    {
      "text": "the implementation of the configuration",
      "url": "https://github.com/WordPress/gutenberg/blob/HEAD/packages/babel-preset-default/index.js"
    },
    {
      "text": "Polyfill",
      "url": "https://developer.wordpress.org/block-editor/#polyfill"
    },
    {
      "text": "browsers supported",
      "url": "https://make.wordpress.org/core/handbook/best-practices/browser-support/"
    },
    {
      "text": "#31279",
      "url": "https://github.com/WordPress/gutenberg/pull/31279"
    },
    {
      "text": "core-js",
      "url": "https://github.com/zloirock/core-js"
    },
    {
      "text": "TC39 Proposals",
      "url": "https://developer.wordpress.org/block-editor/#tc39-proposals"
    },
    {
      "text": "← @wordpress/babel-plugin-makepot",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-babel-plugin-makepot/"
    },
    {
      "text": "@wordpress/base-styles →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-base-styles/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fpackages%2Fpackages-babel-plugin-makepot%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/packages/babel-plugin-makepot/README.md"
    },
    {
      "text": "gettext POT formatted",
      "url": "https://en.wikipedia.org/wiki/Gettext"
    },
    {
      "text": "← @wordpress/babel-plugin-import-jsx-pragma",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-babel-plugin-import-jsx-pragma/"
    },
    {
      "text": "@wordpress/babel-preset-default →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-babel-preset-default/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fpackages%2Fpackages-babel-plugin-import-jsx-pragma%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/packages/babel-plugin-import-jsx-pragma/README.md"
    },
    {
      "text": "React JSX Transform plugin",
      "url": "http://babeljs.io/docs/en/babel-plugin-transform-react-jsx"
    },
    {
      "text": "JSX",
      "url": "https://reactjs.org/docs/jsx-in-depth.html"
    },
    {
      "text": "Babel Plugins documentation",
      "url": "http://babeljs.io/docs/en/plugins"
    },
    {
      "text": "@babel/plugin-transform-react-jsx",
      "url": "https://babeljs.io/docs/en/babel-plugin-transform-react-jsx/"
    },
    {
      "text": "scopeVariable",
      "url": "https://developer.wordpress.org/block-editor/#scopevariable"
    },
    {
      "text": "scopeVariableFrag",
      "url": "https://developer.wordpress.org/block-editor/#scopevariablefrag"
    },
    {
      "text": "source",
      "url": "https://developer.wordpress.org/block-editor/#source"
    },
    {
      "text": "isDefault",
      "url": "https://developer.wordpress.org/block-editor/#isdefault"
    },
    {
      "text": "← @wordpress/autop",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-autop/"
    },
    {
      "text": "@wordpress/babel-plugin-makepot →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-babel-plugin-makepot/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fpackages%2Fpackages-autop%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/packages/autop/README.md"
    },
    {
      "text": "autop",
      "url": "https://developer.wordpress.org/block-editor/#autop"
    },
    {
      "text": "removep",
      "url": "https://developer.wordpress.org/block-editor/#removep"
    },
    {
      "text": "← @wordpress/api-fetch",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-api-fetch/"
    },
    {
      "text": "@wordpress/babel-plugin-import-jsx-pragma →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-babel-plugin-import-jsx-pragma/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fpackages%2Fpackages-api-fetch%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/packages/api-fetch/README.md"
    },
    {
      "text": "GET",
      "url": "https://developer.wordpress.org/block-editor/#get"
    },
    {
      "text": "GET with Query Args",
      "url": "https://developer.wordpress.org/block-editor/#get-with-query-args"
    },
    {
      "text": "POST",
      "url": "https://developer.wordpress.org/block-editor/#post"
    },
    {
      "text": "options of the fetch global",
      "url": "https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch"
    },
    {
      "text": "path (string)",
      "url": "https://developer.wordpress.org/block-editor/#path-string"
    },
    {
      "text": "url (string)",
      "url": "https://developer.wordpress.org/block-editor/#url-string"
    },
    {
      "text": "parse (boolean, default true)",
      "url": "https://developer.wordpress.org/block-editor/#parse-boolean-default-true"
    },
    {
      "text": "data (object)",
      "url": "https://developer.wordpress.org/block-editor/#data-object"
    },
    {
      "text": "Aborting a request",
      "url": "https://developer.wordpress.org/block-editor/#aborting-a-request"
    },
    {
      "text": "AbortController",
      "url": "https://developer.mozilla.org/en-US/docs/Web/API/AbortController"
    },
    {
      "text": "Middlewares",
      "url": "https://developer.wordpress.org/block-editor/#middlewares"
    },
    {
      "text": "Built-in middlewares",
      "url": "https://developer.wordpress.org/block-editor/#built-in-middlewares"
    },
    {
      "text": "Custom fetch handler",
      "url": "https://developer.wordpress.org/block-editor/#custom-fetch-handler"
    },
    {
      "text": "axios",
      "url": "https://github.com/axios/axios"
    },
    {
      "text": "← @wordpress/annotations",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-annotations/"
    },
    {
      "text": "@wordpress/autop →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-autop/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fpackages%2Fpackages-annotations%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/packages/annotations/README.md"
    },
    {
      "text": "See this page for more detailed usage instructions",
      "url": "https://developer.wordpress.org/block-editor/developers/block-api/block-annotations"
    },
    {
      "text": "← @wordpress/a11y",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-a11y/"
    },
    {
      "text": "@wordpress/api-fetch →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-api-fetch/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fpackages%2Fpackages-a11y%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/packages/a11y/README.md"
    },
    {
      "text": "setup",
      "url": "https://developer.wordpress.org/block-editor/#setup"
    },
    {
      "text": "speak",
      "url": "https://developer.wordpress.org/block-editor/#speak"
    },
    {
      "text": "Background",
      "url": "https://developer.wordpress.org/block-editor/#background"
    },
    {
      "text": "this article on WordPress.org",
      "url": "https://make.wordpress.org/accessibility/2015/04/15/let-wordpress-speak-new-in-wordpress-4-2/"
    },
    {
      "text": "@joedolson",
      "url": "https://github.com/joedolson"
    },
    {
      "text": "Why.",
      "url": "https://developer.wordpress.org/block-editor/#why"
    },
    {
      "text": "What.",
      "url": "https://developer.wordpress.org/block-editor/#what"
    },
    {
      "text": "How.",
      "url": "https://developer.wordpress.org/block-editor/#how"
    },
    {
      "text": "https://make.wordpress.org/design/handbook/design-guide/browser-support/",
      "url": "https://make.wordpress.org/design/handbook/design-guide/browser-support/"
    },
    {
      "text": "← @wordpress/admin-manifest",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-admin-manifest/"
    },
    {
      "text": "@wordpress/annotations →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-annotations/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fblock-api%2Fblock-supports%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/docs/reference-guides/block-api/block-supports.md"
    },
    {
      "text": "anchor",
      "url": "https://developer.wordpress.org/block-editor/#anchor"
    },
    {
      "text": "align",
      "url": "https://developer.wordpress.org/block-editor/#align"
    },
    {
      "text": "alignWide",
      "url": "https://developer.wordpress.org/block-editor/#alignwide"
    },
    {
      "text": "wide alignment",
      "url": "https://developer.wordpress.org/block-editor/how-to-guides/themes/theme-support/#wide-alignment"
    },
    {
      "text": "ariaLabel",
      "url": "https://developer.wordpress.org/block-editor/#arialabel"
    },
    {
      "text": "color.background",
      "url": "https://developer.wordpress.org/block-editor/#color-background"
    },
    {
      "text": "theme support",
      "url": "https://developer.wordpress.org/block-editor/how-to-guides/themes/theme-support/#block-color-palettes"
    },
    {
      "text": "color.__experimentalDuotone",
      "url": "https://developer.wordpress.org/block-editor/#color-__experimentalduotone"
    },
    {
      "text": "filter.duotone",
      "url": "https://developer.wordpress.org/block-editor/#filter-duotone"
    },
    {
      "text": "color.gradients",
      "url": "https://developer.wordpress.org/block-editor/#color-gradients"
    },
    {
      "text": "theme support",
      "url": "https://developer.wordpress.org/block-editor/how-to-guides/themes/theme-support/#block-gradient-presets"
    },
    {
      "text": "color.link",
      "url": "https://developer.wordpress.org/block-editor/#color-link"
    },
    {
      "text": "color.text",
      "url": "https://developer.wordpress.org/block-editor/#color-text"
    },
    {
      "text": "customClassName",
      "url": "https://developer.wordpress.org/block-editor/#customclassname"
    },
    {
      "text": "defaultStylePicker",
      "url": "https://developer.wordpress.org/block-editor/#defaultstylepicker"
    },
    {
      "text": "dimensions",
      "url": "https://developer.wordpress.org/block-editor/#dimensions"
    },
    {
      "text": "the theme declares support",
      "url": "https://developer.wordpress.org/block-editor/how-to-guides/themes/theme-json/#opt-in-into-ui-controls"
    },
    {
      "text": "filter",
      "url": "https://developer.wordpress.org/block-editor/#filter"
    },
    {
      "text": "html",
      "url": "https://developer.wordpress.org/block-editor/#html"
    },
    {
      "text": "inserter",
      "url": "https://developer.wordpress.org/block-editor/#inserter"
    },
    {
      "text": "multiple",
      "url": "https://developer.wordpress.org/block-editor/#multiple"
    },
    {
      "text": "reusable",
      "url": "https://developer.wordpress.org/block-editor/#reusable"
    },
    {
      "text": "lock",
      "url": "https://developer.wordpress.org/block-editor/#lock"
    },
    {
      "text": "spacing",
      "url": "https://developer.wordpress.org/block-editor/#spacing"
    },
    {
      "text": "the theme declares support",
      "url": "https://developer.wordpress.org/block-editor/how-to-guides/themes/theme-support/#cover-block-padding"
    },
    {
      "text": "typography",
      "url": "https://developer.wordpress.org/block-editor/#typography"
    },
    {
      "text": "typography.fontSize",
      "url": "https://developer.wordpress.org/block-editor/#typography-fontsize"
    },
    {
      "text": "theme support",
      "url": "https://developer.wordpress.org/block-editor/how-to-guides/themes/theme-support/#block-font-sizes"
    },
    {
      "text": "typography.lineHeight",
      "url": "https://developer.wordpress.org/block-editor/#typography-lineheight"
    },
    {
      "text": "the theme declares support",
      "url": "https://developer.wordpress.org/block-editor/how-to-guides/themes/theme-support/#supporting-custom-line-heights"
    },
    {
      "text": "← Styles",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/block-api/block-styles/"
    },
    {
      "text": "Templates →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/block-api/block-templates/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fcomponents%2Fbutton-group%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/packages/components/src/button-group/README.md"
    },
    {
      "text": "Selected action",
      "url": "https://developer.wordpress.org/block-editor/#selected-action"
    },
    {
      "text": "← BoxControl",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/box-control/"
    },
    {
      "text": "Button →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/button/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fcomponents%2Ficon%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/packages/components/src/icon/README.md"
    },
    {
      "text": "With a Dashicon",
      "url": "https://developer.wordpress.org/block-editor/#with-a-dashicon"
    },
    {
      "text": "With a function",
      "url": "https://developer.wordpress.org/block-editor/#with-a-function"
    },
    {
      "text": "With a Component",
      "url": "https://developer.wordpress.org/block-editor/#with-a-component"
    },
    {
      "text": "With an SVG",
      "url": "https://developer.wordpress.org/block-editor/#with-an-svg"
    },
    {
      "text": "Specifying a className",
      "url": "https://developer.wordpress.org/block-editor/#specifying-a-classname"
    },
    {
      "text": "icon",
      "url": "https://developer.wordpress.org/block-editor/#icon"
    },
    {
      "text": "size",
      "url": "https://developer.wordpress.org/block-editor/#size"
    },
    {
      "text": "← WithSpokenMessages",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/with-spoken-messages/"
    },
    {
      "text": "InputControl →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/input-control/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fpackages%2Fpackages-admin-manifest%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/packages/admin-manifest/README.md"
    },
    {
      "text": "manifest",
      "url": "https://w3c.github.io/manifest/"
    },
    {
      "text": "@wordpress/a11y →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-a11y/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fpackages%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/docs/reference-guides/packages.md"
    },
    {
      "text": "Using the Packages via WordPress Global",
      "url": "https://developer.wordpress.org/block-editor/#using-the-packages-via-wordpress-global"
    },
    {
      "text": "Using the Packages via npm",
      "url": "https://developer.wordpress.org/block-editor/#using-the-packages-via-npm"
    },
    {
      "text": "npm",
      "url": "https://www.npmjs.com/org/wordpress"
    },
    {
      "text": "Testing JavaScript code from a specific major WordPress version",
      "url": "https://developer.wordpress.org/block-editor/#testing-javascript-code-from-a-specific-major-wordpress-version"
    },
    {
      "text": "npm distribution tags",
      "url": "https://docs.npmjs.com/cli/v8/commands/npm-dist-tag"
    },
    {
      "text": "← Component Reference",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/"
    },
    {
      "text": "@wordpress/admin-manifest →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-admin-manifest/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fcomponents%2Fz-stack%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/packages/components/src/z-stack/README.md"
    },
    {
      "text": "isLayered: boolean",
      "url": "https://developer.wordpress.org/block-editor/#islayered-boolean"
    },
    {
      "text": "isReversed: boolean",
      "url": "https://developer.wordpress.org/block-editor/#isreversed-boolean"
    },
    {
      "text": "← VisuallyHidden",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/visually-hidden/"
    },
    {
      "text": "Package Reference →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fcomponents%2Fvisually-hidden%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/packages/components/src/visually-hidden/README.md"
    },
    {
      "text": "stacking context",
      "url": "https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Positioning/Understanding_z_index/The_stacking_context"
    },
    {
      "text": "← VStack",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/v-stack/"
    },
    {
      "text": "ZStack →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/z-stack/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Fdocs%2Fhow-to-guides%2Fplatform%2Fcustom-block-editor%2FREADME.md&locale=en_US"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fcomponents%2Fv-stack%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/packages/components/src/v-stack/README.md"
    },
    {
      "text": "Spacer",
      "url": "https://developer.wordpress.org/block-editor/#spacer"
    },
    {
      "text": "← UnitControl",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/unit-control/"
    },
    {
      "text": "VisuallyHidden →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/visually-hidden/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fcomponents%2Funit-control%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/packages/components/src/unit-control/README.md"
    },
    {
      "text": "disableUnits: boolean",
      "url": "https://developer.wordpress.org/block-editor/#disableunits-boolean"
    },
    {
      "text": "isPressEnterToChange: boolean",
      "url": "https://developer.wordpress.org/block-editor/#ispressentertochange-boolean"
    },
    {
      "text": "isResetValueOnUnitChange: boolean",
      "url": "https://developer.wordpress.org/block-editor/#isresetvalueonunitchange-boolean"
    },
    {
      "text": "isUnitSelectTabbable: boolean",
      "url": "https://developer.wordpress.org/block-editor/#isunitselecttabbable-boolean"
    },
    {
      "text": "labelPosition: string",
      "url": "https://developer.wordpress.org/block-editor/#labelposition-string"
    },
    {
      "text": "onBlur: FocusEventHandler< HTMLInputElement | HTMLSelectElement >",
      "url": "https://developer.wordpress.org/block-editor/#onblur-focuseventhandler-htmlinputelement-htmlselectelement"
    },
    {
      "text": "onFocus: FocusEventHandler< HTMLInputElement | HTMLSelectElement >",
      "url": "https://developer.wordpress.org/block-editor/#onfocus-focuseventhandler-htmlinputelement-htmlselectelement"
    },
    {
      "text": "onChange: UnitControlOnChangeCallback",
      "url": "https://developer.wordpress.org/block-editor/#onchange-unitcontrolonchangecallback"
    },
    {
      "text": "onUnitChange: UnitControlOnChangeCallback",
      "url": "https://developer.wordpress.org/block-editor/#onunitchange-unitcontrolonchangecallback"
    },
    {
      "text": "size: string",
      "url": "https://developer.wordpress.org/block-editor/#size-string"
    },
    {
      "text": "unit: string",
      "url": "https://developer.wordpress.org/block-editor/#unit-string"
    },
    {
      "text": "units: WPUnitControlUnit[]",
      "url": "https://developer.wordpress.org/block-editor/#units-wpunitcontrolunit"
    },
    {
      "text": "value: number | string",
      "url": "https://developer.wordpress.org/block-editor/#value-number-string"
    },
    {
      "text": "← Truncate",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/truncate/"
    },
    {
      "text": "VStack →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/v-stack/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fcomponents%2Ftruncate%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/packages/components/src/truncate/README.md"
    },
    {
      "text": "← TreeSelect",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/tree-select/"
    },
    {
      "text": "UnitControl →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/unit-control/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fcomponents%2Ftree-select%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/packages/components/src/tree-select/README.md"
    },
    {
      "text": "noOptionLabel",
      "url": "https://developer.wordpress.org/block-editor/#nooptionlabel"
    },
    {
      "text": "selectedId",
      "url": "https://developer.wordpress.org/block-editor/#selectedid"
    },
    {
      "text": "tree",
      "url": "https://developer.wordpress.org/block-editor/#tree"
    },
    {
      "text": "← TreeGrid",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/tree-grid/"
    },
    {
      "text": "Truncate →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/truncate/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Fsrc%2Fstore%2Factions.js&locale=en_US"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fcomponents%2Ftree-grid%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/packages/components/src/tree-grid/README.md"
    },
    {
      "text": "Sub-Components",
      "url": "https://developer.wordpress.org/block-editor/#sub-components"
    },
    {
      "text": "TreeGrid",
      "url": "https://developer.wordpress.org/block-editor/#treegrid"
    },
    {
      "text": "TreeGridRow",
      "url": "https://developer.wordpress.org/block-editor/#treegridrow"
    },
    {
      "text": "TreeGridCell",
      "url": "https://developer.wordpress.org/block-editor/#treegridcell"
    },
    {
      "text": "children as a function",
      "url": "https://developer.wordpress.org/block-editor/#children-as-a-function"
    },
    {
      "text": "← Tooltip",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/tooltip/"
    },
    {
      "text": "TreeSelect →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/tree-select/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fcomponents%2Ftools-panel%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/packages/components/src/tools-panel/tools-panel/README.md"
    },
    {
      "text": "ToolsPanel Layout",
      "url": "https://developer.wordpress.org/block-editor/#toolspanel-layout"
    },
    {
      "text": "hasInnerWrapper: boolean",
      "url": "https://developer.wordpress.org/block-editor/#hasinnerwrapper-boolean"
    },
    {
      "text": "headingLevel: 1 | 2 | 3 | 4 | 5 | 6 | '1' | '2' | '3' | '4' | '5' | '6'",
      "url": "https://developer.wordpress.org/block-editor/#headinglevel-1-2-3-4-5-6-1-2-3-4-5-6"
    },
    {
      "text": "panelId: string | null",
      "url": "https://developer.wordpress.org/block-editor/#panelid-string-null"
    },
    {
      "text": "resetAll: ( filters?: ResetAllFilter[] ) => void",
      "url": "https://developer.wordpress.org/block-editor/#resetall-filters-resetallfilter-void"
    },
    {
      "text": "shouldRenderPlaceholderItems: boolean",
      "url": "https://developer.wordpress.org/block-editor/#shouldrenderplaceholderitems-boolean"
    },
    {
      "text": "← ToolsPanelItem",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/tools-panel-item/"
    },
    {
      "text": "Tooltip →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/tooltip/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fcomponents%2Ftools-panel-item%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/packages/components/src/tools-panel/tools-panel-item/README.md"
    },
    {
      "text": "tools-panel/README.md#usage",
      "url": "https://developer.wordpress.org/block-editor/reference-guide/components/tools-panel/tools-panel/"
    },
    {
      "text": "hasValue: () => boolean",
      "url": "https://developer.wordpress.org/block-editor/#hasvalue-boolean"
    },
    {
      "text": "isShownByDefault: boolean",
      "url": "https://developer.wordpress.org/block-editor/#isshownbydefault-boolean"
    },
    {
      "text": "onDeselect: () => void",
      "url": "https://developer.wordpress.org/block-editor/#ondeselect-void"
    },
    {
      "text": "onSelect: () => void",
      "url": "https://developer.wordpress.org/block-editor/#onselect-void"
    },
    {
      "text": "resetAllFilter: ( attributes?: any ) => any",
      "url": "https://developer.wordpress.org/block-editor/#resetallfilter-attributes-any-any"
    },
    {
      "text": "← ToolsPanelHeader",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/tools-panel-header/"
    },
    {
      "text": "ToolsPanel →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/tools-panel/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fcomponents%2Ftools-panel-header%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/packages/components/src/tools-panel/tools-panel-header/README.md"
    },
    {
      "text": "resetAll: () => void",
      "url": "https://developer.wordpress.org/block-editor/#resetall-void"
    },
    {
      "text": "toggleItem: ( label: string ) => void",
      "url": "https://developer.wordpress.org/block-editor/#toggleitem-label-string-void"
    },
    {
      "text": "← Toolbar",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/toolbar/"
    },
    {
      "text": "ToolsPanelItem →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/tools-panel-item/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fcomponents%2Ftoolbar-dropdown-menu%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/packages/components/src/toolbar/toolbar-dropdown-menu/README.md"
    },
    {
      "text": "DropdownMenu",
      "url": "https://developer.wordpress.org/block-editor/designers-developers/developers/components/dropdown-menu/"
    },
    {
      "text": "the same API of the DropdownMenu",
      "url": "https://developer.wordpress.org/block-editor/designers-developers/developers/components/dropdown-menu/#props"
    },
    {
      "text": "← ToolbarButton",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/toolbar-button/"
    },
    {
      "text": "ToolbarGroup →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/toolbar-group/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fcomponents%2Ftoggle-group-control%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/packages/components/src/toggle-group-control/toggle-group-control/README.md"
    },
    {
      "text": "ToggleGroupControlOption",
      "url": "https://developer.wordpress.org/block-editor/reference-guide/components/toggle-group-control/toggle-group-control-option/"
    },
    {
      "text": "TabPanel",
      "url": "https://developer.wordpress.org/block-editor/reference-guide/components/tab-panel/"
    },
    {
      "text": "SelectControl",
      "url": "https://developer.wordpress.org/block-editor/reference-guide/components/select-control/"
    },
    {
      "text": "CustomSelectControl",
      "url": "https://developer.wordpress.org/block-editor/reference-guide/components/custom-select-control/"
    },
    {
      "text": "help: ReactNode",
      "url": "https://developer.wordpress.org/block-editor/#help-reactnode"
    },
    {
      "text": "hideLabelFromVision: boolean",
      "url": "https://developer.wordpress.org/block-editor/#hidelabelfromvision-boolean"
    },
    {
      "text": "isAdaptiveWidth: boolean",
      "url": "https://developer.wordpress.org/block-editor/#isadaptivewidth-boolean"
    },
    {
      "text": "isDeselectable: boolean",
      "url": "https://developer.wordpress.org/block-editor/#isdeselectable-boolean"
    },
    {
      "text": "isBlock: boolean",
      "url": "https://developer.wordpress.org/block-editor/#isblock-boolean"
    },
    {
      "text": "onChange: ( value?: string | number ) => void",
      "url": "https://developer.wordpress.org/block-editor/#onchange-value-string-number-void"
    },
    {
      "text": "value: string | number",
      "url": "https://developer.wordpress.org/block-editor/#value-string-number"
    },
    {
      "text": "← ToggleGroupControlOption",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/toggle-group-control-option/"
    },
    {
      "text": "ToolbarButton →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/toolbar-button/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fcomponents%2Ftoggle-group-control-option%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/packages/components/src/toggle-group-control/toggle-group-control-option/README.md"
    },
    {
      "text": "ToggleGroupControl",
      "url": "https://developer.wordpress.org/block-editor/(/packages/components/src/toggle-group-control/toggle-group-control/README.md)"
    },
    {
      "text": "← ToggleGroupControlOptionIcon",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/toggle-group-control-option-icon/"
    },
    {
      "text": "ToggleGroupControl →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/toggle-group-control/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fcomponents%2Ftoggle-group-control-option-icon%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/packages/components/src/toggle-group-control/toggle-group-control-option-icon/README.md"
    },
    {
      "text": "icon: WPComponent",
      "url": "https://developer.wordpress.org/block-editor/#icon-wpcomponent"
    },
    {
      "text": "← ToggleGroupControlOptionBase",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/toggle-group-control-option-base/"
    },
    {
      "text": "ToggleGroupControlOption →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/toggle-group-control-option/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fcomponents%2Ftoggle-group-control-option-base%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/packages/components/src/toggle-group-control/toggle-group-control-option-base/README.md"
    },
    {
      "text": "← ToggleControl",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/toggle-control/"
    },
    {
      "text": "ToggleGroupControlOptionIcon →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/toggle-group-control-option-icon/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fcomponents%2Ftoggle-control%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/packages/components/src/toggle-control/README.md"
    },
    {
      "text": "checked",
      "url": "https://developer.wordpress.org/block-editor/#checked"
    },
    {
      "text": "disabled",
      "url": "https://developer.wordpress.org/block-editor/#disabled"
    },
    {
      "text": "← TextareaControl",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/textarea-control/"
    },
    {
      "text": "ToggleGroupControlOptionBase →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/toggle-group-control-option-base/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fcomponents%2Ftextarea-control%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/packages/components/src/textarea-control/README.md"
    },
    {
      "text": "When to use TextareaControl",
      "url": "https://developer.wordpress.org/block-editor/#when-to-use-textareacontrol"
    },
    {
      "text": "When not to use TextareaControl",
      "url": "https://developer.wordpress.org/block-editor/#when-not-to-use-textareacontrol"
    },
    {
      "text": "Error text",
      "url": "https://developer.wordpress.org/block-editor/#error-text"
    },
    {
      "text": "help: string | WPElement",
      "url": "https://developer.wordpress.org/block-editor/#help-string-wpelement"
    },
    {
      "text": "onChange: ( value: string ) => void",
      "url": "https://developer.wordpress.org/block-editor/#onchange-value-string-void"
    },
    {
      "text": "rows: number",
      "url": "https://developer.wordpress.org/block-editor/#rows-number"
    },
    {
      "text": "value: string",
      "url": "https://developer.wordpress.org/block-editor/#value-string"
    },
    {
      "text": "← Text",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/text/"
    },
    {
      "text": "ToggleControl →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/toggle-control/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fcomponents%2Ftext%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/packages/components/src/text/README.md"
    },
    {
      "text": "adjustLineHeightForInnerControls",
      "url": "https://developer.wordpress.org/block-editor/#adjustlineheightforinnercontrols"
    },
    {
      "text": "display",
      "url": "https://developer.wordpress.org/block-editor/#display"
    },
    {
      "text": "ellipsis",
      "url": "https://developer.wordpress.org/block-editor/#ellipsis"
    },
    {
      "text": "ellipsizeMode",
      "url": "https://developer.wordpress.org/block-editor/#ellipsizemode"
    },
    {
      "text": "highlightCaseSensitive",
      "url": "https://developer.wordpress.org/block-editor/#highlightcasesensitive"
    },
    {
      "text": "highlightEscape",
      "url": "https://developer.wordpress.org/block-editor/#highlightescape"
    },
    {
      "text": "highlightSanitize",
      "url": "https://developer.wordpress.org/block-editor/#highlightsanitize"
    },
    {
      "text": "highlightWords",
      "url": "https://developer.wordpress.org/block-editor/#highlightwords"
    },
    {
      "text": "isBlock",
      "url": "https://developer.wordpress.org/block-editor/#isblock"
    },
    {
      "text": "isDestructive",
      "url": "https://developer.wordpress.org/block-editor/#isdestructive"
    },
    {
      "text": "limit",
      "url": "https://developer.wordpress.org/block-editor/#limit"
    },
    {
      "text": "lineHeight",
      "url": "https://developer.wordpress.org/block-editor/#lineheight"
    },
    {
      "text": "numberOfLines",
      "url": "https://developer.wordpress.org/block-editor/#numberoflines"
    },
    {
      "text": "optimizeReadabilityFor",
      "url": "https://developer.wordpress.org/block-editor/#optimizereadabilityfor"
    },
    {
      "text": "truncate",
      "url": "https://developer.wordpress.org/block-editor/#truncate"
    },
    {
      "text": "upperCase",
      "url": "https://developer.wordpress.org/block-editor/#uppercase"
    },
    {
      "text": "variant",
      "url": "https://developer.wordpress.org/block-editor/#variant"
    },
    {
      "text": "weight",
      "url": "https://developer.wordpress.org/block-editor/#weight"
    },
    {
      "text": "← Theme",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/theme/"
    },
    {
      "text": "TextareaControl →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/textarea-control/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fcomponents%2Ftheme%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/packages/components/src/theme/README.md"
    },
    {
      "text": "accent: string",
      "url": "https://developer.wordpress.org/block-editor/#accent-string"
    },
    {
      "text": "background: string",
      "url": "https://developer.wordpress.org/block-editor/#background-string"
    },
    {
      "text": "Writing themeable components",
      "url": "https://developer.wordpress.org/block-editor/#writing-themeable-components"
    },
    {
      "text": "← TextHighlight",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/text-highlight/"
    },
    {
      "text": "Text →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/text/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fcomponents%2Ftext-highlight%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/packages/components/src/text-highlight/README.md"
    },
    {
      "text": "<mark> tag",
      "url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/mark"
    },
    {
      "text": "highlight: string",
      "url": "https://developer.wordpress.org/block-editor/#highlight-string"
    },
    {
      "text": "← TextControl",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/text-control/"
    },
    {
      "text": "Theme →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/theme/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fcomponents%2Ftab-panel%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/packages/components/src/tab-panel/README.md"
    },
    {
      "text": "Tabs in a set",
      "url": "https://developer.wordpress.org/block-editor/#tabs-in-a-set"
    },
    {
      "text": "Active tab indicators",
      "url": "https://developer.wordpress.org/block-editor/#active-tab-indicators"
    },
    {
      "text": "Behavior",
      "url": "https://developer.wordpress.org/block-editor/#behavior"
    },
    {
      "text": "orientation",
      "url": "https://developer.wordpress.org/block-editor/#orientation"
    },
    {
      "text": "onSelect",
      "url": "https://developer.wordpress.org/block-editor/#onselect"
    },
    {
      "text": "tabs",
      "url": "https://developer.wordpress.org/block-editor/#tabs"
    },
    {
      "text": "activeClass",
      "url": "https://developer.wordpress.org/block-editor/#activeclass"
    },
    {
      "text": "initialTabName",
      "url": "https://developer.wordpress.org/block-editor/#initialtabname"
    },
    {
      "text": "selectOnMove",
      "url": "https://developer.wordpress.org/block-editor/#selectonmove"
    },
    {
      "text": "official W3C docs",
      "url": "https://www.w3.org/WAI/ARIA/apg/patterns/tabpanel/"
    },
    {
      "text": "← Surface",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/surface/"
    },
    {
      "text": "TextControl →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/text-control/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fcomponents%2Fsurface%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/packages/components/src/surface/README.md"
    },
    {
      "text": "backgroundSize: number",
      "url": "https://developer.wordpress.org/block-editor/#backgroundsize-number"
    },
    {
      "text": "borderBottom: boolean",
      "url": "https://developer.wordpress.org/block-editor/#borderbottom-boolean"
    },
    {
      "text": "borderLeft: boolean",
      "url": "https://developer.wordpress.org/block-editor/#borderleft-boolean"
    },
    {
      "text": "borderRight: boolean",
      "url": "https://developer.wordpress.org/block-editor/#borderright-boolean"
    },
    {
      "text": "borderTop: boolean",
      "url": "https://developer.wordpress.org/block-editor/#bordertop-boolean"
    },
    {
      "text": "variant: string",
      "url": "https://developer.wordpress.org/block-editor/#variant-string"
    },
    {
      "text": "← Spinner",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/spinner/"
    },
    {
      "text": "TabPanel →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/tab-panel/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fcomponents%2Fspinner%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/packages/components/src/spinner/README.md"
    },
    {
      "text": "← Spacer",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/spacer/"
    },
    {
      "text": "Surface →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/surface/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fcomponents%2Fspacer%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/packages/components/src/spacer/README.md"
    },
    {
      "text": "margin: number",
      "url": "https://developer.wordpress.org/block-editor/#margin-number"
    },
    {
      "text": "marginBottom: number",
      "url": "https://developer.wordpress.org/block-editor/#marginbottom-number"
    },
    {
      "text": "marginLeft: number",
      "url": "https://developer.wordpress.org/block-editor/#marginleft-number"
    },
    {
      "text": "marginRight: number",
      "url": "https://developer.wordpress.org/block-editor/#marginright-number"
    },
    {
      "text": "marginTop: number",
      "url": "https://developer.wordpress.org/block-editor/#margintop-number"
    },
    {
      "text": "marginX: number",
      "url": "https://developer.wordpress.org/block-editor/#marginx-number"
    },
    {
      "text": "marginY: number",
      "url": "https://developer.wordpress.org/block-editor/#marginy-number"
    },
    {
      "text": "padding: number",
      "url": "https://developer.wordpress.org/block-editor/#padding-number"
    },
    {
      "text": "paddingBottom: number",
      "url": "https://developer.wordpress.org/block-editor/#paddingbottom-number"
    },
    {
      "text": "paddingLeft: number",
      "url": "https://developer.wordpress.org/block-editor/#paddingleft-number"
    },
    {
      "text": "paddingRight: number",
      "url": "https://developer.wordpress.org/block-editor/#paddingright-number"
    },
    {
      "text": "paddingTop: number",
      "url": "https://developer.wordpress.org/block-editor/#paddingtop-number"
    },
    {
      "text": "paddingX: number",
      "url": "https://developer.wordpress.org/block-editor/#paddingx-number"
    },
    {
      "text": "paddingY: number",
      "url": "https://developer.wordpress.org/block-editor/#paddingy-number"
    },
    {
      "text": "← Snackbar",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/snackbar/"
    },
    {
      "text": "Spinner →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/spinner/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fcomponents%2Fsnackbar%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/packages/components/src/snackbar/README.md"
    },
    {
      "text": "actions: NoticeAction[]",
      "url": "https://developer.wordpress.org/block-editor/#actions-noticeaction"
    },
    {
      "text": "children: string",
      "url": "https://developer.wordpress.org/block-editor/#children-string"
    },
    {
      "text": "explicitDismiss: boolean",
      "url": "https://developer.wordpress.org/block-editor/#explicitdismiss-boolean"
    },
    {
      "text": "icon: ReactNode",
      "url": "https://developer.wordpress.org/block-editor/#icon-reactnode"
    },
    {
      "text": "listRef: MutableRefObject< HTMLDivElement | null >",
      "url": "https://developer.wordpress.org/block-editor/#listref-mutablerefobject-htmldivelement-null"
    },
    {
      "text": "onDismiss: () => void",
      "url": "https://developer.wordpress.org/block-editor/#ondismiss-void"
    },
    {
      "text": "onRemove: () => void",
      "url": "https://developer.wordpress.org/block-editor/#onremove-void"
    },
    {
      "text": "politeness: 'polite' | 'assertive'",
      "url": "https://developer.wordpress.org/block-editor/#politeness-polite-assertive"
    },
    {
      "text": "an aria-live attribute value",
      "url": "https://www.w3.org/TR/wai-aria-1.1/#aria-live"
    },
    {
      "text": "spokenMessage: string",
      "url": "https://developer.wordpress.org/block-editor/#spokenmessage-string"
    },
    {
      "text": "← SlotFill",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/slot-fill/"
    },
    {
      "text": "Spacer →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/spacer/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fcomponents%2Fdropdown-menu%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/packages/components/src/dropdown-menu/README.md"
    },
    {
      "text": "When to use a DropdownMenu",
      "url": "https://developer.wordpress.org/block-editor/#when-to-use-a-dropdownmenu"
    },
    {
      "text": "https://developer.wordpress.org/resource/dashicons/",
      "url": "https://developer.wordpress.org/resource/dashicons/"
    },
    {
      "text": "function render prop",
      "url": "https://reactjs.org/docs/render-props.html#using-props-other-than-render"
    },
    {
      "text": "Dropdown‘s renderContent",
      "url": "https://developer.wordpress.org/block-editor/reference-guide/components/dropdown/#rendercontent"
    },
    {
      "text": "popoverProps",
      "url": "https://developer.wordpress.org/block-editor/#popoverprops"
    },
    {
      "text": "toggleProps",
      "url": "https://developer.wordpress.org/block-editor/#toggleprops"
    },
    {
      "text": "menuProps",
      "url": "https://developer.wordpress.org/block-editor/#menuprops"
    },
    {
      "text": "disableOpenOnArrowDown",
      "url": "https://developer.wordpress.org/block-editor/#disableopenonarrowdown"
    },
    {
      "text": "← DropZone",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/drop-zone/"
    },
    {
      "text": "Flyout →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/flyout/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fcomponents%2Fselect-control%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/packages/components/src/select-control/README.md"
    },
    {
      "text": "When to use a select control",
      "url": "https://developer.wordpress.org/block-editor/#when-to-use-a-select-control"
    },
    {
      "text": "Opening and Closing",
      "url": "https://developer.wordpress.org/block-editor/#opening-and-closing"
    },
    {
      "text": "Content Guidelines",
      "url": "https://developer.wordpress.org/block-editor/#content-guidelines"
    },
    {
      "text": "labelPosition",
      "url": "https://developer.wordpress.org/block-editor/#labelposition"
    },
    {
      "text": "__nextHasNoMarginBottom",
      "url": "https://developer.wordpress.org/block-editor/#__nexthasnomarginbottom"
    },
    {
      "text": "← SearchControl",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/search-control/"
    },
    {
      "text": "SlotFill →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/slot-fill/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2F%28%2Fpackages%2Fcomponents%2Fsrc%2Ftoggle-group-control%2Ftoggle-group-control%2FREADME.md&locale=en_US"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fcomponents%2Fcustom-select-control%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/packages/components/src/custom-select-control/README.md"
    },
    {
      "text": "the ones for SelectControls",
      "url": "https://developer.wordpress.org/block-editor/reference-guide/components/select-control/#design-guidelines"
    },
    {
      "text": "describedBy",
      "url": "https://developer.wordpress.org/block-editor/#describedby"
    },
    {
      "text": "__nextUnconstrainedWidth",
      "url": "https://developer.wordpress.org/block-editor/#__nextunconstrainedwidth"
    },
    {
      "text": "onMouseOver",
      "url": "https://developer.wordpress.org/block-editor/#onmouseover"
    },
    {
      "text": "onMouseOut",
      "url": "https://developer.wordpress.org/block-editor/#onmouseout"
    },
    {
      "text": "onFocus",
      "url": "https://developer.wordpress.org/block-editor/#onfocus"
    },
    {
      "text": "onBlur",
      "url": "https://developer.wordpress.org/block-editor/#onblur"
    },
    {
      "text": "← ConfirmDialog",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/confirm-dialog/"
    },
    {
      "text": "Dashicon →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/dashicon/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fcomponents%2Fsearch-control%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/packages/components/src/search-control/README.md"
    },
    {
      "text": "← Scrollable",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/scrollable/"
    },
    {
      "text": "SelectControl →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/select-control/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fcomponents%2Fscrollable%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/packages/components/src/scrollable/README.md"
    },
    {
      "text": "scrollDirection: string",
      "url": "https://developer.wordpress.org/block-editor/#scrolldirection-string"
    },
    {
      "text": "smoothScroll: boolean",
      "url": "https://developer.wordpress.org/block-editor/#smoothscroll-boolean"
    },
    {
      "text": "← ScrollLock",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/scroll-lock/"
    },
    {
      "text": "SearchControl →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/search-control/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fcomponents%2Fscroll-lock%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/packages/components/src/scroll-lock/README.md"
    },
    {
      "text": "← Sandbox",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/sandbox/"
    },
    {
      "text": "Scrollable →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/scrollable/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fcomponents%2Fsandbox%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/packages/components/src/sandbox/README.md"
    },
    {
      "text": "html: string",
      "url": "https://developer.wordpress.org/block-editor/#html-string"
    },
    {
      "text": "onFocus: React.DOMAttributes< HTMLIFrameElement >[ 'onFocus' ]",
      "url": "https://developer.wordpress.org/block-editor/#onfocus-react-domattributes-htmliframeelement-onfocus"
    },
    {
      "text": "scripts: string[]",
      "url": "https://developer.wordpress.org/block-editor/#scripts-string"
    },
    {
      "text": "styles: string[]",
      "url": "https://developer.wordpress.org/block-editor/#styles-string"
    },
    {
      "text": "title: string",
      "url": "https://developer.wordpress.org/block-editor/#title-string"
    },
    {
      "text": "type: string",
      "url": "https://developer.wordpress.org/block-editor/#type-string"
    },
    {
      "text": "← ResponsiveWrapper",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/responsive-wrapper/"
    },
    {
      "text": "ScrollLock →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/scroll-lock/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fcomponents%2Fresponsive-wrapper%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/packages/components/src/responsive-wrapper/README.md"
    },
    {
      "text": "Usage with SVG elements",
      "url": "https://developer.wordpress.org/block-editor/#usage-with-svg-elements"
    },
    {
      "text": "children: React.ReactElement",
      "url": "https://developer.wordpress.org/block-editor/#children-react-reactelement"
    },
    {
      "text": "isInline: boolean",
      "url": "https://developer.wordpress.org/block-editor/#isinline-boolean"
    },
    {
      "text": "naturalHeight: number",
      "url": "https://developer.wordpress.org/block-editor/#naturalheight-number"
    },
    {
      "text": "naturalWidth: number",
      "url": "https://developer.wordpress.org/block-editor/#naturalwidth-number"
    },
    {
      "text": "← ResizeTooltip",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/resize-tooltip/"
    },
    {
      "text": "Sandbox →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/sandbox/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fcomponents%2Fresize-tooltip%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/packages/components/src/resizable-box/resize-tooltip/README.md"
    },
    {
      "text": "Positions",
      "url": "https://developer.wordpress.org/block-editor/#positions"
    },
    {
      "text": "axis",
      "url": "https://developer.wordpress.org/block-editor/#axis"
    },
    {
      "text": "fadeTimeout",
      "url": "https://developer.wordpress.org/block-editor/#fadetimeout"
    },
    {
      "text": "isVisible",
      "url": "https://developer.wordpress.org/block-editor/#isvisible"
    },
    {
      "text": "labelRef",
      "url": "https://developer.wordpress.org/block-editor/#labelref"
    },
    {
      "text": "Ref",
      "url": "https://reactjs.org/docs/forwarding-refs.html"
    },
    {
      "text": "onMove",
      "url": "https://developer.wordpress.org/block-editor/#onmove"
    },
    {
      "text": "onResize",
      "url": "https://developer.wordpress.org/block-editor/#onresize"
    },
    {
      "text": "showPx",
      "url": "https://developer.wordpress.org/block-editor/#showpx"
    },
    {
      "text": "zIndex",
      "url": "https://developer.wordpress.org/block-editor/#zindex"
    },
    {
      "text": "← ResizableBox",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/resizable-box/"
    },
    {
      "text": "ResponsiveWrapper →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/responsive-wrapper/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fcomponents%2Fresizable-box%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/packages/components/src/resizable-box/README.md"
    },
    {
      "text": "re-resizable package",
      "url": "https://github.com/bokuweb/re-resizable"
    },
    {
      "text": "re-resizable",
      "url": "https://github.com/bokuweb/re-resizable"
    },
    {
      "text": "re-resizable",
      "url": "https://github.com/bokuweb/re-resizable#props"
    },
    {
      "text": "← RangeControl",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/range-control/"
    },
    {
      "text": "ResizeTooltip →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/resize-tooltip/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fcomponents%2Frange-control%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/packages/components/src/range-control/README.md"
    },
    {
      "text": "Continuous sliders",
      "url": "https://developer.wordpress.org/block-editor/#continuous-sliders"
    },
    {
      "text": "Discrete sliders",
      "url": "https://developer.wordpress.org/block-editor/#discrete-sliders"
    },
    {
      "text": "Immediate effects",
      "url": "https://developer.wordpress.org/block-editor/#immediate-effects"
    },
    {
      "text": "Current state",
      "url": "https://developer.wordpress.org/block-editor/#current-state"
    },
    {
      "text": "Values",
      "url": "https://developer.wordpress.org/block-editor/#values"
    },
    {
      "text": "afterIcon: string|Function|WPComponent|null",
      "url": "https://developer.wordpress.org/block-editor/#aftericon-stringfunctionwpcomponentnull"
    },
    {
      "text": "Icon component",
      "url": "https://developer.wordpress.org/block-editor/reference-guide/components/icon/"
    },
    {
      "text": "Icon component",
      "url": "https://developer.wordpress.org/block-editor/reference-guide/components/icon/index.tsx/#L23"
    },
    {
      "text": "allowReset: boolean",
      "url": "https://developer.wordpress.org/block-editor/#allowreset-boolean"
    },
    {
      "text": "beforeIcon: string|Function|WPComponent|null",
      "url": "https://developer.wordpress.org/block-editor/#beforeicon-stringfunctionwpcomponentnull"
    },
    {
      "text": "color: CSSProperties['color']",
      "url": "https://developer.wordpress.org/block-editor/#color-csspropertiescolor"
    },
    {
      "text": "currentInput: number",
      "url": "https://developer.wordpress.org/block-editor/#currentinput-number"
    },
    {
      "text": "help: string|WPElement",
      "url": "https://developer.wordpress.org/block-editor/#help-stringwpelement"
    },
    {
      "text": "icon: string",
      "url": "https://developer.wordpress.org/block-editor/#icon-string"
    },
    {
      "text": "initialPosition: number",
      "url": "https://developer.wordpress.org/block-editor/#initialposition-number"
    },
    {
      "text": "isShiftStepEnabled: boolean",
      "url": "https://developer.wordpress.org/block-editor/#isshiftstepenabled-boolean"
    },
    {
      "text": "marks: Array|boolean",
      "url": "https://developer.wordpress.org/block-editor/#marks-arrayboolean"
    },
    {
      "text": "onBlur: FocusEventHandler< HTMLInputElement >",
      "url": "https://developer.wordpress.org/block-editor/#onblur-focuseventhandler-htmlinputelement"
    },
    {
      "text": "onChange: ( value?: number ) => void",
      "url": "https://developer.wordpress.org/block-editor/#onchange-value-number-void"
    },
    {
      "text": "onFocus: FocusEventHandler< HTMLInputElement >",
      "url": "https://developer.wordpress.org/block-editor/#onfocus-focuseventhandler-htmlinputelement"
    },
    {
      "text": "onMouseLeave: MouseEventHandler< HTMLInputElement >",
      "url": "https://developer.wordpress.org/block-editor/#onmouseleave-mouseeventhandler-htmlinputelement"
    },
    {
      "text": "onMouseMove: MouseEventHandler< HTMLInputElement >",
      "url": "https://developer.wordpress.org/block-editor/#onmousemove-mouseeventhandler-htmlinputelement"
    },
    {
      "text": "min: number",
      "url": "https://developer.wordpress.org/block-editor/#min-number"
    },
    {
      "text": "max: number",
      "url": "https://developer.wordpress.org/block-editor/#max-number"
    },
    {
      "text": "railColor: CSSProperties[ 'color' ]",
      "url": "https://developer.wordpress.org/block-editor/#railcolor-cssproperties-color"
    },
    {
      "text": "renderTooltipContent: ( value ) => value",
      "url": "https://developer.wordpress.org/block-editor/#rendertooltipcontent-value-value"
    },
    {
      "text": "resetFallbackValue: number",
      "url": "https://developer.wordpress.org/block-editor/#resetfallbackvalue-number"
    },
    {
      "text": "separatorType: 'none' | 'fullWidth' | 'topFullWidth'",
      "url": "https://developer.wordpress.org/block-editor/#separatortype-none-fullwidth-topfullwidth"
    },
    {
      "text": "shiftStep: number",
      "url": "https://developer.wordpress.org/block-editor/#shiftstep-number"
    },
    {
      "text": "step: number | 'any'",
      "url": "https://developer.wordpress.org/block-editor/#step-number-any"
    },
    {
      "text": "trackColor: CSSProperties[ 'color' ]",
      "url": "https://developer.wordpress.org/block-editor/#trackcolor-cssproperties-color"
    },
    {
      "text": "value: number",
      "url": "https://developer.wordpress.org/block-editor/#value-number"
    },
    {
      "text": "withInputField: boolean",
      "url": "https://developer.wordpress.org/block-editor/#withinputfield-boolean"
    },
    {
      "text": "← RadioGroup",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/radio-group/"
    },
    {
      "text": "ResizableBox →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/resizable-box/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fcomponents%2Fradio-group%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/packages/components/src/radio-group/README.md"
    },
    {
      "text": "Active and available radio groups",
      "url": "https://developer.wordpress.org/block-editor/#active-and-available-radio-groups"
    },
    {
      "text": "Disabled radio groups",
      "url": "https://developer.wordpress.org/block-editor/#disabled-radio-groups"
    },
    {
      "text": "Controlled",
      "url": "https://developer.wordpress.org/block-editor/#controlled"
    },
    {
      "text": "Uncontrolled",
      "url": "https://developer.wordpress.org/block-editor/#uncontrolled"
    },
    {
      "text": "← RadioControl",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/radio-control/"
    },
    {
      "text": "RangeControl →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/range-control/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fcomponents%2Fradio-control%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/packages/components/src/radio-control/README.md"
    },
    {
      "text": "When to use radio buttons",
      "url": "https://developer.wordpress.org/block-editor/#when-to-use-radio-buttons"
    },
    {
      "text": "Do",
      "url": "https://developer.wordpress.org/block-editor/#do"
    },
    {
      "text": "Don’t",
      "url": "https://developer.wordpress.org/block-editor/#dont"
    },
    {
      "text": "options: { label: string, value: string }[]",
      "url": "https://developer.wordpress.org/block-editor/#options-label-string-value-string"
    },
    {
      "text": "selected: string",
      "url": "https://developer.wordpress.org/block-editor/#selected-string"
    },
    {
      "text": "← QueryControls",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/query-controls/"
    },
    {
      "text": "RadioGroup →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/radio-group/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fcomponents%2Fquery-controls%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/packages/components/src/query-controls/README.md"
    },
    {
      "text": "Development Guidelines",
      "url": "https://developer.wordpress.org/block-editor/#development-guidelines"
    },
    {
      "text": "Multiple category selector",
      "url": "https://developer.wordpress.org/block-editor/#multiple-category-selector"
    },
    {
      "text": "authorList: Author[]",
      "url": "https://developer.wordpress.org/block-editor/#authorlist-author"
    },
    {
      "text": "categoriesList: Category[]",
      "url": "https://developer.wordpress.org/block-editor/#categorieslist-category"
    },
    {
      "text": "categorySuggestions: Record< Category[ 'name' ], Category >",
      "url": "https://developer.wordpress.org/block-editor/#categorysuggestions-record-category-name-category"
    },
    {
      "text": "maxItems: number",
      "url": "https://developer.wordpress.org/block-editor/#maxitems-number"
    },
    {
      "text": "minItems: number",
      "url": "https://developer.wordpress.org/block-editor/#minitems-number"
    },
    {
      "text": "numberOfItems: number",
      "url": "https://developer.wordpress.org/block-editor/#numberofitems-number"
    },
    {
      "text": "onAuthorChange: ( newAuthor: string ) => void",
      "url": "https://developer.wordpress.org/block-editor/#onauthorchange-newauthor-string-void"
    },
    {
      "text": "onCategoryChange: ( newCategory: string ) => void | FormTokenFieldProps[ 'onChange' ]",
      "url": "https://developer.wordpress.org/block-editor/#oncategorychange-newcategory-string-void-formtokenfieldprops-onchange"
    },
    {
      "text": "onNumberOfItemsChange: ( newNumber?: number ) => void",
      "url": "https://developer.wordpress.org/block-editor/#onnumberofitemschange-newnumber-number-void"
    },
    {
      "text": "onOrderChange: ( newOrder: 'asc' | 'desc' ) => void",
      "url": "https://developer.wordpress.org/block-editor/#onorderchange-neworder-asc-desc-void"
    },
    {
      "text": "onOrderByChange: ( newOrderBy: 'date' | 'title' ) => void",
      "url": "https://developer.wordpress.org/block-editor/#onorderbychange-neworderby-date-title-void"
    },
    {
      "text": "order: 'asc' | 'desc'",
      "url": "https://developer.wordpress.org/block-editor/#order-asc-desc"
    },
    {
      "text": "orderBy: 'date' | 'title'",
      "url": "https://developer.wordpress.org/block-editor/#orderby-date-title"
    },
    {
      "text": "selectedAuthorId: number",
      "url": "https://developer.wordpress.org/block-editor/#selectedauthorid-number"
    },
    {
      "text": "selectedCategories: Category[]",
      "url": "https://developer.wordpress.org/block-editor/#selectedcategories-category"
    },
    {
      "text": "selectedCategoryId: number",
      "url": "https://developer.wordpress.org/block-editor/#selectedcategoryid-number"
    },
    {
      "text": "← Popover",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/popover/"
    },
    {
      "text": "RadioControl →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/radio-control/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fcomponents%2Fplaceholder%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/packages/components/src/placeholder/README.md"
    },
    {
      "text": "icon: string|Function|WPComponent|null",
      "url": "https://developer.wordpress.org/block-editor/#icon-stringfunctionwpcomponentnull"
    },
    {
      "text": "instructions: string",
      "url": "https://developer.wordpress.org/block-editor/#instructions-string"
    },
    {
      "text": "isColumnLayout: boolean",
      "url": "https://developer.wordpress.org/block-editor/#iscolumnlayout-boolean"
    },
    {
      "text": "notices: ReactNode",
      "url": "https://developer.wordpress.org/block-editor/#notices-reactnode"
    },
    {
      "text": "preview: ReactNode",
      "url": "https://developer.wordpress.org/block-editor/#preview-reactnode"
    },
    {
      "text": "withIllustration: boolean",
      "url": "https://developer.wordpress.org/block-editor/#withillustration-boolean"
    },
    {
      "text": "← Panel",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/panel/"
    },
    {
      "text": "Popover →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/popover/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fcomponents%2Fpanel%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/packages/components/src/panel/README.md"
    },
    {
      "text": "When to use Panels",
      "url": "https://developer.wordpress.org/block-editor/#when-to-use-panels"
    },
    {
      "text": "Expand and collapse",
      "url": "https://developer.wordpress.org/block-editor/#expand-and-collapse"
    },
    {
      "text": "Panel",
      "url": "https://developer.wordpress.org/block-editor/#panel"
    },
    {
      "text": "PanelBody",
      "url": "https://developer.wordpress.org/block-editor/#panelbody"
    },
    {
      "text": "PanelRow",
      "url": "https://developer.wordpress.org/block-editor/#panelrow"
    },
    {
      "text": "PanelHeader",
      "url": "https://developer.wordpress.org/block-editor/#panelheader"
    },
    {
      "text": "← NumberControl",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/number-control/"
    },
    {
      "text": "Placeholder →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/placeholder/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fcomponents%2Fnumber-control%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/packages/components/src/number-control/README.md"
    },
    {
      "text": "input[type=\"number]",
      "url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/number"
    },
    {
      "text": "dragDirection",
      "url": "https://developer.wordpress.org/block-editor/#dragdirection"
    },
    {
      "text": "dragThreshold",
      "url": "https://developer.wordpress.org/block-editor/#dragthreshold"
    },
    {
      "text": "spinControls",
      "url": "https://developer.wordpress.org/block-editor/#spincontrols"
    },
    {
      "text": "isDragEnabled",
      "url": "https://developer.wordpress.org/block-editor/#isdragenabled"
    },
    {
      "text": "isShiftStepEnabled",
      "url": "https://developer.wordpress.org/block-editor/#isshiftstepenabled"
    },
    {
      "text": "max",
      "url": "https://developer.wordpress.org/block-editor/#max"
    },
    {
      "text": "min",
      "url": "https://developer.wordpress.org/block-editor/#min"
    },
    {
      "text": "required",
      "url": "https://developer.wordpress.org/block-editor/#required"
    },
    {
      "text": "shiftStep",
      "url": "https://developer.wordpress.org/block-editor/#shiftstep"
    },
    {
      "text": "step",
      "url": "https://developer.wordpress.org/block-editor/#step"
    },
    {
      "text": "← Notice",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/notice/"
    },
    {
      "text": "Panel →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/panel/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fcomponents%2Fnotice%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/packages/components/src/notice/README.md"
    },
    {
      "text": "spokenMessage: ReactNode",
      "url": "https://developer.wordpress.org/block-editor/#spokenmessage-reactnode"
    },
    {
      "text": "status: 'warning' | 'success' | 'error' | 'info'",
      "url": "https://developer.wordpress.org/block-editor/#status-warning-success-error-info"
    },
    {
      "text": "isDismissible: boolean",
      "url": "https://developer.wordpress.org/block-editor/#isdismissible-boolean"
    },
    {
      "text": "onDismiss : () => void",
      "url": "https://developer.wordpress.org/block-editor/#ondismiss-void"
    },
    {
      "text": "actions: Array<NoticeAction>.",
      "url": "https://developer.wordpress.org/block-editor/#actions-arraynoticeaction"
    },
    {
      "text": "← NavigatorToParentButton",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/navigator-to-parent-button/"
    },
    {
      "text": "NumberControl →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/number-control/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fcomponents%2Fnavigator-to-parent-button%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/packages/components/src/navigator/navigator-to-parent-button/README.md"
    },
    {
      "text": "NavigatorProvider",
      "url": "https://developer.wordpress.org/block-editor/reference-guide/components/navigator/navigator-provider/"
    },
    {
      "text": "NavigatorScreen",
      "url": "https://developer.wordpress.org/block-editor/reference-guide/components/navigator/navigator-screen/"
    },
    {
      "text": "NavigatorButton",
      "url": "https://developer.wordpress.org/block-editor/reference-guide/components/navigator/navigator-button/"
    },
    {
      "text": "the NavigatorProvider component",
      "url": "https://developer.wordpress.org/block-editor/reference-guide/components/navigator/navigator-provider/#usage"
    },
    {
      "text": "Inherited props",
      "url": "https://developer.wordpress.org/block-editor/#inherited-props"
    },
    {
      "text": "Button props",
      "url": "https://developer.wordpress.org/block-editor/reference-guide/components/button/#props"
    },
    {
      "text": "← NavigatorScreen",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/navigator-screen/"
    },
    {
      "text": "Notice →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/notice/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fcomponents%2Fnavigator-screen%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/packages/components/src/navigator/navigator-screen/README.md"
    },
    {
      "text": "NavigatorBackButton",
      "url": "https://developer.wordpress.org/block-editor/reference-guide/components/navigator/navigator-back-button/"
    },
    {
      "text": "path: string",
      "url": "https://developer.wordpress.org/block-editor/#path-string"
    },
    {
      "text": "← NavigatorProvider",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/navigator-provider/"
    },
    {
      "text": "NavigatorToParentButton →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/navigator-to-parent-button/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fcomponents%2Fnavigator-provider%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/packages/components/src/navigator/navigator-provider/README.md"
    },
    {
      "text": "NavigatorScreen component",
      "url": "https://developer.wordpress.org/block-editor/reference-guide/components/navigator/navigator-screen/"
    },
    {
      "text": "NavigatorToParentButton",
      "url": "https://developer.wordpress.org/block-editor/reference-guide/components/navigator/navigator-to-parent-button/"
    },
    {
      "text": "initialPath: string",
      "url": "https://developer.wordpress.org/block-editor/#initialpath-string"
    },
    {
      "text": "The navigator object",
      "url": "https://developer.wordpress.org/block-editor/#the-navigator-object"
    },
    {
      "text": "goTo: ( path: string, options: NavigateOptions ) => void",
      "url": "https://developer.wordpress.org/block-editor/#goto-path-string-options-navigateoptions-void"
    },
    {
      "text": "goToParent: () => void;",
      "url": "https://developer.wordpress.org/block-editor/#gotoparent-void"
    },
    {
      "text": "goBack: () => void",
      "url": "https://developer.wordpress.org/block-editor/#goback-void"
    },
    {
      "text": "location: NavigatorLocation",
      "url": "https://developer.wordpress.org/block-editor/#location-navigatorlocation"
    },
    {
      "text": "params: Record< string, string | string[] >",
      "url": "https://developer.wordpress.org/block-editor/#params-record-string-string-string"
    },
    {
      "text": "← Navigator",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/navigator/"
    },
    {
      "text": "NavigatorScreen →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/navigator-screen/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fcomponents%2Fnavigator%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/packages/components/src/navigator/README.md"
    },
    {
      "text": "Navigator Props",
      "url": "https://developer.wordpress.org/block-editor/#navigator-props"
    },
    {
      "text": "initialPath",
      "url": "https://developer.wordpress.org/block-editor/#initialpath"
    },
    {
      "text": "NavigatorScreen Props",
      "url": "https://developer.wordpress.org/block-editor/#navigatorscreen-props"
    },
    {
      "text": "path",
      "url": "https://developer.wordpress.org/block-editor/#path"
    },
    {
      "text": "The navigator object.",
      "url": "https://developer.wordpress.org/block-editor/#the-navigator-object"
    },
    {
      "text": "push",
      "url": "https://developer.wordpress.org/block-editor/#push"
    },
    {
      "text": "← NavigatorButton",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/navigator-button/"
    },
    {
      "text": "NavigatorProvider →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/navigator-provider/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fcomponents%2Fnavigator-button%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/packages/components/src/navigator/navigator-button/README.md"
    },
    {
      "text": "attributeName: string",
      "url": "https://developer.wordpress.org/block-editor/#attributename-string"
    },
    {
      "text": "onClick: React.MouseEventHandler< HTMLElement >",
      "url": "https://developer.wordpress.org/block-editor/#onclick-react-mouseeventhandler-htmlelement"
    },
    {
      "text": "a valid value for an HTML attribute",
      "url": "https://html.spec.whatwg.org/multipage/syntax.html#attributes-2"
    },
    {
      "text": "← NavigatorBackButton",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/navigator-back-button/"
    },
    {
      "text": "Navigator →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/navigator/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fcomponents%2Fnavigator-back-button%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/packages/components/src/navigator/navigator-back-button/README.md"
    },
    {
      "text": "← Navigation",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/navigation/"
    },
    {
      "text": "NavigatorButton →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/navigator-button/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fcomponents%2Fnavigation%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/packages/components/src/navigation/README.md"
    },
    {
      "text": "Navigation Props",
      "url": "https://developer.wordpress.org/block-editor/#navigation-props"
    },
    {
      "text": "activeItem",
      "url": "https://developer.wordpress.org/block-editor/#activeitem"
    },
    {
      "text": "activeMenu",
      "url": "https://developer.wordpress.org/block-editor/#activemenu"
    },
    {
      "text": "onActivateMenu",
      "url": "https://developer.wordpress.org/block-editor/#onactivatemenu"
    },
    {
      "text": "Navigation Menu Props",
      "url": "https://developer.wordpress.org/block-editor/#navigation-menu-props"
    },
    {
      "text": "backButtonLabel",
      "url": "https://developer.wordpress.org/block-editor/#backbuttonlabel"
    },
    {
      "text": "onBackButtonClick",
      "url": "https://developer.wordpress.org/block-editor/#onbackbuttonclick"
    },
    {
      "text": "className",
      "url": "https://developer.wordpress.org/block-editor/#classname-2"
    },
    {
      "text": "hasSearch",
      "url": "https://developer.wordpress.org/block-editor/#hassearch"
    },
    {
      "text": "menu",
      "url": "https://developer.wordpress.org/block-editor/#menu"
    },
    {
      "text": "onSearch",
      "url": "https://developer.wordpress.org/block-editor/#onsearch"
    },
    {
      "text": "isSearchDebouncing",
      "url": "https://developer.wordpress.org/block-editor/#issearchdebouncing"
    },
    {
      "text": "parentMenu",
      "url": "https://developer.wordpress.org/block-editor/#parentmenu"
    },
    {
      "text": "search",
      "url": "https://developer.wordpress.org/block-editor/#search"
    },
    {
      "text": "titleAction",
      "url": "https://developer.wordpress.org/block-editor/#titleaction"
    },
    {
      "text": "Navigation Group Props",
      "url": "https://developer.wordpress.org/block-editor/#navigation-group-props"
    },
    {
      "text": "className",
      "url": "https://developer.wordpress.org/block-editor/#classname-3"
    },
    {
      "text": "title",
      "url": "https://developer.wordpress.org/block-editor/#title-2"
    },
    {
      "text": "Navigation Item Props",
      "url": "https://developer.wordpress.org/block-editor/#navigation-item-props"
    },
    {
      "text": "badge",
      "url": "https://developer.wordpress.org/block-editor/#badge"
    },
    {
      "text": "className",
      "url": "https://developer.wordpress.org/block-editor/#classname-4"
    },
    {
      "text": "href",
      "url": "https://developer.wordpress.org/block-editor/#href"
    },
    {
      "text": "item",
      "url": "https://developer.wordpress.org/block-editor/#item"
    },
    {
      "text": "navigateToMenu",
      "url": "https://developer.wordpress.org/block-editor/#navigatetomenu"
    },
    {
      "text": "hideIfTargetMenuEmpty",
      "url": "https://developer.wordpress.org/block-editor/#hideiftargetmenuempty"
    },
    {
      "text": "onClick",
      "url": "https://developer.wordpress.org/block-editor/#onclick"
    },
    {
      "text": "isText",
      "url": "https://developer.wordpress.org/block-editor/#istext"
    },
    {
      "text": "title",
      "url": "https://developer.wordpress.org/block-editor/#title-3"
    },
    {
      "text": "← NavigableContainer",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/navigable-container/"
    },
    {
      "text": "NavigatorBackButton →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/navigator-back-button/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fcomponents%2Fnavigable-container%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/packages/components/src/navigable-container/README.md"
    },
    {
      "text": "onNavigate",
      "url": "https://developer.wordpress.org/block-editor/#onnavigate"
    },
    {
      "text": "cycle",
      "url": "https://developer.wordpress.org/block-editor/#cycle"
    },
    {
      "text": "orientation (NavigableMenu only)",
      "url": "https://developer.wordpress.org/block-editor/#orientation-navigablemenu-only"
    },
    {
      "text": "Classes",
      "url": "https://developer.wordpress.org/block-editor/#classes"
    },
    {
      "text": "NavigableMenu",
      "url": "https://developer.wordpress.org/block-editor/#navigablemenu"
    },
    {
      "text": "TabbableContainer",
      "url": "https://developer.wordpress.org/block-editor/#tabbablecontainer"
    },
    {
      "text": "← Modal",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/modal/"
    },
    {
      "text": "Navigation →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/navigation/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fcomponents%2Fmodal%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/packages/components/src/modal/README.md"
    },
    {
      "text": "When to use",
      "url": "https://developer.wordpress.org/block-editor/#when-to-use"
    },
    {
      "text": "Modal box and scrim",
      "url": "https://developer.wordpress.org/block-editor/#modal-box-and-scrim"
    },
    {
      "text": "Buttons",
      "url": "https://developer.wordpress.org/block-editor/#buttons"
    },
    {
      "text": "Side-by-side buttons (recommended)",
      "url": "https://developer.wordpress.org/block-editor/#side-by-side-buttons-recommended"
    },
    {
      "text": "Stacked or full-width buttons",
      "url": "https://developer.wordpress.org/block-editor/#stacked-or-full-width-buttons"
    },
    {
      "text": "Position",
      "url": "https://developer.wordpress.org/block-editor/#position"
    },
    {
      "text": "Scrolling",
      "url": "https://developer.wordpress.org/block-editor/#scrolling"
    },
    {
      "text": "Dismissing modals",
      "url": "https://developer.wordpress.org/block-editor/#dismissing-modals"
    },
    {
      "text": "react-modal",
      "url": "https://github.com/reactjs/react-modal"
    },
    {
      "text": "aria.describedby: string",
      "url": "https://developer.wordpress.org/block-editor/#aria-describedby-string"
    },
    {
      "text": "aria.labelledby: string",
      "url": "https://developer.wordpress.org/block-editor/#aria-labelledby-string"
    },
    {
      "text": "bodyOpenClassName: string",
      "url": "https://developer.wordpress.org/block-editor/#bodyopenclassname-string"
    },
    {
      "text": "contentLabel: string",
      "url": "https://developer.wordpress.org/block-editor/#contentlabel-string"
    },
    {
      "text": "focusOnMount: boolean | 'firstElement'",
      "url": "https://developer.wordpress.org/block-editor/#focusonmount-boolean-firstelement"
    },
    {
      "text": "isFullScreen: boolean",
      "url": "https://developer.wordpress.org/block-editor/#isfullscreen-boolean"
    },
    {
      "text": "onRequestClose: “",
      "url": "https://developer.wordpress.org/block-editor/#onrequestclose"
    },
    {
      "text": "overlayClassName: string",
      "url": "https://developer.wordpress.org/block-editor/#overlayclassname-string"
    },
    {
      "text": "role: AriaRole",
      "url": "https://developer.wordpress.org/block-editor/#role-ariarole"
    },
    {
      "text": "shouldCloseOnClickOutside: boolean",
      "url": "https://developer.wordpress.org/block-editor/#shouldcloseonclickoutside-boolean"
    },
    {
      "text": "shouldCloseOnEsc: boolean",
      "url": "https://developer.wordpress.org/block-editor/#shouldcloseonesc-boolean"
    },
    {
      "text": "style: CSSProperties",
      "url": "https://developer.wordpress.org/block-editor/#style-cssproperties"
    },
    {
      "text": "__experimentalHideHeader: boolean",
      "url": "https://developer.wordpress.org/block-editor/#__experimentalhideheader-boolean"
    },
    {
      "text": "← MenuItemsChoice",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/menu-items-choice/"
    },
    {
      "text": "NavigableContainer →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/navigable-container/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fcomponents%2Fmenu-items-choice%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/packages/components/src/menu-items-choice/README.md"
    },
    {
      "text": "When to use MenuItemsChoice",
      "url": "https://developer.wordpress.org/block-editor/#when-to-use-menuitemschoice"
    },
    {
      "text": "← MenuItem",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/menu-item/"
    },
    {
      "text": "Modal →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/modal/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fcomponents%2Fmenu-item%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/packages/components/src/menu-item/README.md"
    },
    {
      "text": "DropdownMenu component",
      "url": "https://developer.wordpress.org/block-editor/reference-guide/components/dropdown-menu/"
    },
    {
      "text": "info",
      "url": "https://developer.wordpress.org/block-editor/#info"
    },
    {
      "text": "Button’s icon prop",
      "url": "https://developer.wordpress.org/block-editor/reference-guide/components/icon-button/#icon"
    },
    {
      "text": "iconPosition",
      "url": "https://developer.wordpress.org/block-editor/#iconposition"
    },
    {
      "text": "shortcut",
      "url": "https://developer.wordpress.org/block-editor/#shortcut"
    },
    {
      "text": "role",
      "url": "https://developer.wordpress.org/block-editor/#role"
    },
    {
      "text": "Aria Spec",
      "url": "https://www.w3.org/TR/wai-aria-1.1/#aria-checked"
    },
    {
      "text": "suffix",
      "url": "https://developer.wordpress.org/block-editor/#suffix"
    },
    {
      "text": "← MenuGroup",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/menu-group/"
    },
    {
      "text": "MenuItemsChoice →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/menu-items-choice/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fcomponents%2Fmenu-group%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/packages/components/src/menu-group/README.md"
    },
    {
      "text": "Related Components",
      "url": "https://developer.wordpress.org/block-editor/#related-components"
    },
    {
      "text": "← KeyboardShortcuts",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/keyboard-shortcuts/"
    },
    {
      "text": "MenuItem →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/menu-item/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fcomponents%2Fkeyboard-shortcuts%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/packages/components/src/keyboard-shortcuts/README.md"
    },
    {
      "text": "Mousetrap",
      "url": "https://craig.is/killing/mice"
    },
    {
      "text": "shortcuts",
      "url": "https://developer.wordpress.org/block-editor/#shortcuts"
    },
    {
      "text": "bindGlobal",
      "url": "https://developer.wordpress.org/block-editor/#bindglobal"
    },
    {
      "text": "eventName",
      "url": "https://developer.wordpress.org/block-editor/#eventname"
    },
    {
      "text": "References",
      "url": "https://developer.wordpress.org/block-editor/#references"
    },
    {
      "text": "Mousetrap documentation",
      "url": "https://craig.is/killing/mice"
    },
    {
      "text": "← Item",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/item/"
    },
    {
      "text": "MenuGroup →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/menu-group/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fcomponents%2Fitem%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/packages/components/src/item-group/item/README.md"
    },
    {
      "text": "ItemGroup component",
      "url": "https://developer.wordpress.org/block-editor/designers-developers/developers/components/item-group/item-group/"
    },
    {
      "text": "onClick: React.MouseEventHandler<HTMLDivElement>",
      "url": "https://developer.wordpress.org/block-editor/#onclick-react-mouseeventhandlerhtmldivelement"
    },
    {
      "text": "size: 'small' | 'medium' | 'large'",
      "url": "https://developer.wordpress.org/block-editor/#size-small-medium-large"
    },
    {
      "text": "the <ItemGroup /> parent component",
      "url": "https://developer.wordpress.org/block-editor/designers-developers/developers/components/item-group/item-group/"
    },
    {
      "text": "Context",
      "url": "https://reactjs.org/docs/context.html"
    },
    {
      "text": "← ItemGroup",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/item-group/"
    },
    {
      "text": "KeyboardShortcuts →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/keyboard-shortcuts/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fcomponents%2Fitem-group%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/packages/components/src/item-group/item-group/README.md"
    },
    {
      "text": "Item sub-component",
      "url": "https://developer.wordpress.org/block-editor/designers-developers/developers/components/item-group/item/"
    },
    {
      "text": "isBordered: boolean",
      "url": "https://developer.wordpress.org/block-editor/#isbordered-boolean"
    },
    {
      "text": "isRounded: boolean",
      "url": "https://developer.wordpress.org/block-editor/#isrounded-boolean"
    },
    {
      "text": "isSeparated: boolean",
      "url": "https://developer.wordpress.org/block-editor/#isseparated-boolean"
    },
    {
      "text": "← IsolatedEventContainer",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/isolated-event-container/"
    },
    {
      "text": "Item →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/item/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fcomponents%2Fisolated-event-container%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/packages/components/src/isolated-event-container/README.md"
    },
    {
      "text": "← InputControl",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/input-control/"
    },
    {
      "text": "ItemGroup →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/item-group/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fcomponents%2Finput-control%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/packages/components/src/input-control/README.md"
    },
    {
      "text": "TextControl",
      "url": "https://developer.wordpress.org/text-control"
    },
    {
      "text": "isPressEnterToChange",
      "url": "https://developer.wordpress.org/block-editor/#ispressentertochange"
    },
    {
      "text": "prefix",
      "url": "https://developer.wordpress.org/block-editor/#prefix"
    },
    {
      "text": "← Icon",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/icon/"
    },
    {
      "text": "IsolatedEventContainer →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/isolated-event-container/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guide%2Fcomponents%2Ficon%2Findex.tsx%2F&locale=en_US"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fcomponents%2Fwith-spoken-messages%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/packages/components/src/higher-order/with-spoken-messages/README.md"
    },
    {
      "text": "← WithNotices",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/with-notices/"
    },
    {
      "text": "Icon →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/icon/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fcomponents%2Fwith-notices%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/packages/components/src/higher-order/with-notices/README.md"
    },
    {
      "text": "higher-order component",
      "url": "https://facebook.github.io/react/docs/higher-order-components.html"
    },
    {
      "text": "#",
      "url": "https://developer.wordpress.org/block-editor/#createNotice"
    },
    {
      "text": "#",
      "url": "https://developer.wordpress.org/block-editor/#createErrorNotice"
    },
    {
      "text": "#",
      "url": "https://developer.wordpress.org/block-editor/#removeAllNotices"
    },
    {
      "text": "#",
      "url": "https://developer.wordpress.org/block-editor/#removeNotice"
    },
    {
      "text": "#",
      "url": "https://developer.wordpress.org/block-editor/#noticeUi"
    },
    {
      "text": "#",
      "url": "https://developer.wordpress.org/block-editor/#noticeList"
    },
    {
      "text": "← WithFocusReturn",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/with-focus-return/"
    },
    {
      "text": "WithSpokenMessages →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/with-spoken-messages/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fcomponents%2Fwith-focus-return%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/packages/components/src/higher-order/with-focus-return/README.md"
    },
    {
      "text": "withFocusReturn",
      "url": "https://developer.wordpress.org/block-editor/#withfocusreturn"
    },
    {
      "text": "onFocusReturn",
      "url": "https://developer.wordpress.org/block-editor/#onfocusreturn"
    },
    {
      "text": "← WithFocusOutside",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/with-focus-outside/"
    },
    {
      "text": "WithNotices →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/with-notices/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fcomponents%2Fwith-focus-outside%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/packages/components/src/higher-order/with-focus-outside/README.md"
    },
    {
      "text": "← WithFilters",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/with-filters/"
    },
    {
      "text": "WithFocusReturn →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/with-focus-return/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fcomponents%2Fwith-filters%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/packages/components/src/higher-order/with-filters/README.md"
    },
    {
      "text": "Native Gutenberg Extensibility",
      "url": "https://github.com/WordPress/gutenberg/issues/3330"
    },
    {
      "text": "← WithFallbackStyles",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/with-fallback-styles/"
    },
    {
      "text": "WithFocusOutside →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/with-focus-outside/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fcomponents%2Fwith-fallback-styles%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/packages/components/src/higher-order/with-fallback-styles/README.md"
    },
    {
      "text": "← WithConstrainedTabbing",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/with-constrained-tabbing/"
    },
    {
      "text": "WithFilters →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/with-filters/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fcomponents%2Fwith-constrained-tabbing%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/packages/components/src/higher-order/with-constrained-tabbing/README.md"
    },
    {
      "text": "← HigherOrder",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/higher-order/"
    },
    {
      "text": "WithFallbackStyles →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/with-fallback-styles/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fcomponents%2Fhigher-order%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/packages/components/src/higher-order/README.md"
    },
    {
      "text": "Learn more about Higher Order Components",
      "url": "https://facebook.github.io/react/docs/higher-order-components.html"
    },
    {
      "text": "← NavigateRegions",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/navigate-regions/"
    },
    {
      "text": "WithConstrainedTabbing →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/with-constrained-tabbing/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fcomponents%2Fnavigate-regions%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/packages/components/src/higher-order/navigate-regions/README.md"
    },
    {
      "text": "WAI-ARIA specification",
      "url": "https://www.w3.org/TR/wai-aria/"
    },
    {
      "text": "ARIA Authoring Practices Guide",
      "url": "https://www.w3.org/WAI/ARIA/apg/practices/landmark-regions/"
    },
    {
      "text": "Notes:",
      "url": "https://developer.wordpress.org/block-editor/#notes"
    },
    {
      "text": "← Heading",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/heading/"
    },
    {
      "text": "HigherOrder →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/higher-order/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fcomponents%2Fheading%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/packages/components/src/heading/README.md"
    },
    {
      "text": "Text",
      "url": "https://developer.wordpress.org/block-editor/reference-guide/components/text/#props"
    },
    {
      "text": "← HStack",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/h-stack/"
    },
    {
      "text": "NavigateRegions →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/navigate-regions/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fcomponents%2Fh-stack%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/packages/components/src/h-stack/README.md"
    },
    {
      "text": "← Guide",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/guide/"
    },
    {
      "text": "Heading →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/heading/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fcomponents%2Fguide%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/packages/components/src/guide/README.md"
    },
    {
      "text": "contentLabel",
      "url": "https://developer.wordpress.org/block-editor/#contentlabel"
    },
    {
      "text": "finishButtonText",
      "url": "https://developer.wordpress.org/block-editor/#finishbuttontext"
    },
    {
      "text": "onFinish",
      "url": "https://developer.wordpress.org/block-editor/#onfinish"
    },
    {
      "text": "pages",
      "url": "https://developer.wordpress.org/block-editor/#pages"
    },
    {
      "text": "← Grid",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/grid/"
    },
    {
      "text": "HStack →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/h-stack/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guide%2Fcomponents%2Ficon-button%2F&locale=en_US"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fcomponents%2Fgrid%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/packages/components/src/grid/README.md"
    },
    {
      "text": "← GradientPicker",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/gradient-picker/"
    },
    {
      "text": "Guide →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/guide/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fcomponents%2Fgradient-picker%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/packages/components/src/gradient-picker/README.md"
    },
    {
      "text": "onChange: ( currentGradient: string | undefined ) => void",
      "url": "https://developer.wordpress.org/block-editor/#onchange-currentgradient-string-undefined-void"
    },
    {
      "text": "gradients: GradientsProp[]",
      "url": "https://developer.wordpress.org/block-editor/#gradients-gradientsprop"
    },
    {
      "text": "clearable: boolean",
      "url": "https://developer.wordpress.org/block-editor/#clearable-boolean"
    },
    {
      "text": "disableCustomGradients: boolean",
      "url": "https://developer.wordpress.org/block-editor/#disablecustomgradients-boolean"
    },
    {
      "text": "__nextHasNoMargin: boolean",
      "url": "https://developer.wordpress.org/block-editor/#__nexthasnomargin-boolean"
    },
    {
      "text": "← FormTokenField",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/form-token-field/"
    },
    {
      "text": "Grid →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/grid/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fcomponents%2Fform-token-field%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/packages/components/src/form-token-field/README.md"
    },
    {
      "text": "Forms",
      "url": "http://facebook.github.io/react/docs/forms.html"
    },
    {
      "text": "Keyboard Accessibility",
      "url": "https://developer.wordpress.org/block-editor/#keyboard-accessibility"
    },
    {
      "text": "Properties",
      "url": "https://developer.wordpress.org/block-editor/#properties"
    },
    {
      "text": "← FormToggle",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/form-toggle/"
    },
    {
      "text": "GradientPicker →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/gradient-picker/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fcomponents%2Fform-toggle%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/packages/components/src/form-toggle/README.md"
    },
    {
      "text": "When to use toggles",
      "url": "https://developer.wordpress.org/block-editor/#when-to-use-toggles"
    },
    {
      "text": "State",
      "url": "https://developer.wordpress.org/block-editor/#state"
    },
    {
      "text": "checked: boolean",
      "url": "https://developer.wordpress.org/block-editor/#checked-boolean"
    },
    {
      "text": "onChange: ( event: ChangeEvent<HTMLInputElement> ) => void",
      "url": "https://developer.wordpress.org/block-editor/#onchange-event-changeeventhtmlinputelement-void"
    },
    {
      "text": "← FormFileUpload",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/form-file-upload/"
    },
    {
      "text": "FormTokenField →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/form-token-field/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fcomponents%2Fform-file-upload%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/packages/components/src/form-file-upload/README.md"
    },
    {
      "text": "accept",
      "url": "https://developer.wordpress.org/block-editor/#accept"
    },
    {
      "text": "render",
      "url": "https://developer.wordpress.org/block-editor/#render"
    },
    {
      "text": "← FontSizePicker",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/font-size-picker/"
    },
    {
      "text": "FormToggle →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/form-toggle/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fcomponents%2Ffont-size-picker%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/packages/components/src/font-size-picker/README.md"
    },
    {
      "text": "disableCustomFontSizes: boolean",
      "url": "https://developer.wordpress.org/block-editor/#disablecustomfontsizes-boolean"
    },
    {
      "text": "fallbackFontSize: number",
      "url": "https://developer.wordpress.org/block-editor/#fallbackfontsize-number"
    },
    {
      "text": "fontSizes: FontSize[]",
      "url": "https://developer.wordpress.org/block-editor/#fontsizes-fontsize"
    },
    {
      "text": "onChange: ( value: number | string | undefined, selectedItem?: FontSize ) => void",
      "url": "https://developer.wordpress.org/block-editor/#onchange-value-number-string-undefined-selecteditem-fontsize-void"
    },
    {
      "text": "size: 'default' | '__unstable-large'",
      "url": "https://developer.wordpress.org/block-editor/#size-default-__unstable-large"
    },
    {
      "text": "units: string[]",
      "url": "https://developer.wordpress.org/block-editor/#units-string"
    },
    {
      "text": "withReset: boolean",
      "url": "https://developer.wordpress.org/block-editor/#withreset-boolean"
    },
    {
      "text": "withSlider: boolean",
      "url": "https://developer.wordpress.org/block-editor/#withslider-boolean"
    },
    {
      "text": "__nextHasNoMarginBottom: boolean",
      "url": "https://developer.wordpress.org/block-editor/#__nexthasnomarginbottom-boolean"
    },
    {
      "text": "← FocusableIframe",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/focusable-iframe/"
    },
    {
      "text": "FormFileUpload →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/form-file-upload/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fcomponents%2Ffocusable-iframe%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/packages/components/src/focusable-iframe/README.md"
    },
    {
      "text": "FocusEvent",
      "url": "https://developer.mozilla.org/en-US/docs/Web/API/FocusEvent"
    },
    {
      "text": "iframeRef",
      "url": "https://developer.wordpress.org/block-editor/#iframeref"
    },
    {
      "text": "← FocalPointPicker",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/focal-point-picker/"
    },
    {
      "text": "FontSizePicker →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/font-size-picker/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fcomponents%2Ffocal-point-picker%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/packages/components/src/focal-point-picker/README.md"
    },
    {
      "text": "url",
      "url": "https://developer.wordpress.org/block-editor/#url"
    },
    {
      "text": "autoPlay",
      "url": "https://developer.wordpress.org/block-editor/#autoplay"
    },
    {
      "text": "onDrag",
      "url": "https://developer.wordpress.org/block-editor/#ondrag"
    },
    {
      "text": "onDragEnd",
      "url": "https://developer.wordpress.org/block-editor/#ondragend"
    },
    {
      "text": "onDragStart",
      "url": "https://developer.wordpress.org/block-editor/#ondragstart"
    },
    {
      "text": "resolvePoint",
      "url": "https://developer.wordpress.org/block-editor/#resolvepoint"
    },
    {
      "text": "← Flex",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/flex/"
    },
    {
      "text": "FocusableIframe →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/focusable-iframe/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fcomponents%2Fflex%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/packages/components/src/flex/flex/README.md"
    },
    {
      "text": "align: CSSProperties['alignItems']",
      "url": "https://developer.wordpress.org/block-editor/#align-csspropertiesalignitems"
    },
    {
      "text": "direction: ResponsiveCSSValue<CSSProperties['flexDirection']>",
      "url": "https://developer.wordpress.org/block-editor/#direction-responsivecssvaluecsspropertiesflexdirection"
    },
    {
      "text": "expanded: boolean",
      "url": "https://developer.wordpress.org/block-editor/#expanded-boolean"
    },
    {
      "text": "gap: number",
      "url": "https://developer.wordpress.org/block-editor/#gap-number"
    },
    {
      "text": "← FlexItem",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/flex-item/"
    },
    {
      "text": "FocalPointPicker →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/focal-point-picker/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fcomponents%2Fflex-item%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/packages/components/src/flex/flex-item/README.md"
    },
    {
      "text": "flex/README.md#usage",
      "url": "https://developer.wordpress.org/block-editor/reference-guide/components/flex/flex/#usage"
    },
    {
      "text": "display: CSSProperties['display']",
      "url": "https://developer.wordpress.org/block-editor/#display-csspropertiesdisplay"
    },
    {
      "text": "← FlexBlock",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/flex-block/"
    },
    {
      "text": "Flex →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/flex/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fcomponents%2Fflex-block%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/packages/components/src/flex/flex-block/README.md"
    },
    {
      "text": "flex/README.md#usage",
      "url": "https://developer.wordpress.org/block-editor/reference-guide/components/flex/#usage"
    },
    {
      "text": "← ExternalLink",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/external-link/"
    },
    {
      "text": "FlexItem →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/flex-item/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fcomponents%2Fexternal-link%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/packages/components/src/external-link/README.md"
    },
    {
      "text": "← Elevation",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/elevation/"
    },
    {
      "text": "FlexBlock →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/flex-block/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fcomponents%2Felevation%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/packages/components/src/elevation/README.md"
    },
    {
      "text": "active: number",
      "url": "https://developer.wordpress.org/block-editor/#active-number"
    },
    {
      "text": "borderRadius: CSSProperties[ 'borderRadius' ]",
      "url": "https://developer.wordpress.org/block-editor/#borderradius-cssproperties-borderradius"
    },
    {
      "text": "focus: number",
      "url": "https://developer.wordpress.org/block-editor/#focus-number"
    },
    {
      "text": "hover: number",
      "url": "https://developer.wordpress.org/block-editor/#hover-number"
    },
    {
      "text": "isInteractive: boolean",
      "url": "https://developer.wordpress.org/block-editor/#isinteractive-boolean"
    },
    {
      "text": "← DuotonePicker",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/duotone-picker/"
    },
    {
      "text": "ExternalLink →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/external-link/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fcomponents%2Fduotone-picker%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/packages/components/src/duotone-picker/README.md"
    },
    {
      "text": "DuotonePicker Props",
      "url": "https://developer.wordpress.org/block-editor/#duotonepicker-props"
    },
    {
      "text": "colorPalette",
      "url": "https://developer.wordpress.org/block-editor/#colorpalette"
    },
    {
      "text": "duotonePalette",
      "url": "https://developer.wordpress.org/block-editor/#duotonepalette"
    },
    {
      "text": "DuotoneSwatch Props",
      "url": "https://developer.wordpress.org/block-editor/#duotoneswatch-props"
    },
    {
      "text": "values",
      "url": "https://developer.wordpress.org/block-editor/#values"
    },
    {
      "text": "← Dropdown",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/dropdown/"
    },
    {
      "text": "Elevation →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/elevation/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fcomponents%2Fflyout%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/packages/components/src/flyout/flyout/README.md"
    },
    {
      "text": "state: PopoverStateReturn",
      "url": "https://developer.wordpress.org/block-editor/#state-popoverstatereturn"
    },
    {
      "text": "animated: boolean",
      "url": "https://developer.wordpress.org/block-editor/#animated-boolean"
    },
    {
      "text": "animationDuration: boolean",
      "url": "https://developer.wordpress.org/block-editor/#animationduration-boolean"
    },
    {
      "text": "baseId: string",
      "url": "https://developer.wordpress.org/block-editor/#baseid-string"
    },
    {
      "text": "elevation: number",
      "url": "https://developer.wordpress.org/block-editor/#elevation-number"
    },
    {
      "text": "Card",
      "url": "https://developer.wordpress.org/block-editor/reference-guide/components/card/card/#props"
    },
    {
      "text": "maxWidth: CSSProperties[ 'maxWidth' ]",
      "url": "https://developer.wordpress.org/block-editor/#maxwidth-cssproperties-maxwidth"
    },
    {
      "text": "onVisibleChange: ( ...args: any ) => void",
      "url": "https://developer.wordpress.org/block-editor/#onvisiblechange-args-any-void"
    },
    {
      "text": "trigger: FunctionComponentElement< any >",
      "url": "https://developer.wordpress.org/block-editor/#trigger-functioncomponentelement-any"
    },
    {
      "text": "visible: boolean",
      "url": "https://developer.wordpress.org/block-editor/#visible-boolean"
    },
    {
      "text": "the Reakit docs",
      "url": "https://reakit.io/docs/popover/#usepopoverstate"
    },
    {
      "text": "placement: PopperPlacement",
      "url": "https://developer.wordpress.org/block-editor/#placement-popperplacement"
    },
    {
      "text": "the popper docs",
      "url": "https://popper.js.org/docs/v1/#popperplacements--codeenumcode"
    },
    {
      "text": "← DropdownMenu",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/dropdown-menu/"
    },
    {
      "text": "Dropdown →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/dropdown/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fcomponents%2Fdrop-zone%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/packages/components/src/drop-zone/README.md"
    },
    {
      "text": "onFilesDrop",
      "url": "https://developer.wordpress.org/block-editor/#onfilesdrop"
    },
    {
      "text": "onHTMLDrop",
      "url": "https://developer.wordpress.org/block-editor/#onhtmldrop"
    },
    {
      "text": "onDrop",
      "url": "https://developer.wordpress.org/block-editor/#ondrop"
    },
    {
      "text": "← Draggable",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/draggable/"
    },
    {
      "text": "DropdownMenu →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/dropdown-menu/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fcomponents%2Fdraggable%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/packages/components/src/draggable/README.md"
    },
    {
      "text": "elementId: string",
      "url": "https://developer.wordpress.org/block-editor/#elementid-string"
    },
    {
      "text": "onDragEnd: ( event: DragEvent ) => void",
      "url": "https://developer.wordpress.org/block-editor/#ondragend-event-dragevent-void"
    },
    {
      "text": "onDragOver: ( event: DragEvent ) => void",
      "url": "https://developer.wordpress.org/block-editor/#ondragover-event-dragevent-void"
    },
    {
      "text": "onDragStart: ( event: DragEvent ) => void",
      "url": "https://developer.wordpress.org/block-editor/#ondragstart-event-dragevent-void"
    },
    {
      "text": "transferData: unknown",
      "url": "https://developer.wordpress.org/block-editor/#transferdata-unknown"
    },
    {
      "text": "← Divider",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/divider/"
    },
    {
      "text": "DropZone →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/drop-zone/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fcomponents%2Fdivider%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/packages/components/src/divider/README.md"
    },
    {
      "text": "marginEnd: number",
      "url": "https://developer.wordpress.org/block-editor/#marginend-number"
    },
    {
      "text": "marginStart: number",
      "url": "https://developer.wordpress.org/block-editor/#marginstart-number"
    },
    {
      "text": "orientation: horizontal | vertical",
      "url": "https://developer.wordpress.org/block-editor/#orientation-horizontal-vertical"
    },
    {
      "text": "Separator props",
      "url": "https://reakit.io/docs/separator/"
    },
    {
      "text": "← Disabled",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/disabled/"
    },
    {
      "text": "Draggable →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/draggable/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fcomponents%2Fdisabled%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/packages/components/src/disabled/README.md"
    },
    {
      "text": "context",
      "url": "https://reactjs.org/docs/context.html"
    },
    {
      "text": "the inert HTML attribute",
      "url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/inert"
    },
    {
      "text": "the official WICG polyfill",
      "url": "https://github.com/WICG/inert"
    },
    {
      "text": "isDisabled",
      "url": "https://developer.wordpress.org/block-editor/#isdisabled"
    },
    {
      "text": "← DimensionControl",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/dimension-control/"
    },
    {
      "text": "Divider →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/divider/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fcomponents%2Fdimension-control%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/packages/components/src/dimension-control/README.md"
    },
    {
      "text": "sizes",
      "url": "https://developer.wordpress.org/block-editor/#sizes"
    },
    {
      "text": "← DateTime",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/date-time/"
    },
    {
      "text": "Disabled →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/disabled/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fcomponents%2Fdate-time%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/packages/components/src/date-time/README.md"
    },
    {
      "text": "currentDate: Date | string | number | null",
      "url": "https://developer.wordpress.org/block-editor/#currentdate-date-string-number-null"
    },
    {
      "text": "onChange: ( date: string | null ) => void",
      "url": "https://developer.wordpress.org/block-editor/#onchange-date-string-null-void"
    },
    {
      "text": "is12Hour: boolean",
      "url": "https://developer.wordpress.org/block-editor/#is12hour-boolean"
    },
    {
      "text": "isInvalidDate: ( date: Date ) => boolean",
      "url": "https://developer.wordpress.org/block-editor/#isinvaliddate-date-date-boolean"
    },
    {
      "text": "onMonthPreviewed: ( date: Date ) => void",
      "url": "https://developer.wordpress.org/block-editor/#onmonthpreviewed-date-date-void"
    },
    {
      "text": "events: { date: Date }[]",
      "url": "https://developer.wordpress.org/block-editor/#events-date-date"
    },
    {
      "text": "startOfWeek: number",
      "url": "https://developer.wordpress.org/block-editor/#startofweek-number"
    },
    {
      "text": "__nextRemoveHelpButton: boolean",
      "url": "https://developer.wordpress.org/block-editor/#__nextremovehelpbutton-boolean"
    },
    {
      "text": "__nextRemoveResetButton: boolean",
      "url": "https://developer.wordpress.org/block-editor/#__nextremoveresetbutton-boolean"
    },
    {
      "text": "← Dashicon",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/dashicon/"
    },
    {
      "text": "DimensionControl →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/dimension-control/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fcomponents%2Fdashicon%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/packages/components/src/dashicon/README.md"
    },
    {
      "text": "← CustomSelectControl",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/custom-select-control/"
    },
    {
      "text": "DateTime →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/date-time/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fcomponents%2Fconfirm-dialog%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/packages/components/src/confirm-dialog/README.md"
    },
    {
      "text": "Modal",
      "url": "https://developer.wordpress.org/block-editor/reference-guide/components/modal/"
    },
    {
      "text": "Uncontrolled mode",
      "url": "https://developer.wordpress.org/block-editor/#uncontrolled-mode"
    },
    {
      "text": "Controlled mode",
      "url": "https://developer.wordpress.org/block-editor/#controlled-mode"
    },
    {
      "text": "Unsupported: Multiple instances",
      "url": "https://developer.wordpress.org/block-editor/#unsupported-multiple-instances"
    },
    {
      "text": "children: React.ReactNode",
      "url": "https://developer.wordpress.org/block-editor/#children-react-reactnode"
    },
    {
      "text": "isOpen: boolean",
      "url": "https://developer.wordpress.org/block-editor/#isopen-boolean"
    },
    {
      "text": "onConfirm: ( event: DialogInputEvent ) => void",
      "url": "https://developer.wordpress.org/block-editor/#onconfirm-event-dialoginputevent-void"
    },
    {
      "text": "onCancel: ( event: DialogInputEvent ) => void",
      "url": "https://developer.wordpress.org/block-editor/#oncancel-event-dialoginputevent-void"
    },
    {
      "text": "confirmButtonText: string",
      "url": "https://developer.wordpress.org/block-editor/#confirmbuttontext-string"
    },
    {
      "text": "cancelButtonText: string",
      "url": "https://developer.wordpress.org/block-editor/#cancelbuttontext-string"
    },
    {
      "text": "← ComboboxControl",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/combobox-control/"
    },
    {
      "text": "CustomSelectControl →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/custom-select-control/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fcomponents%2Fcombobox-control%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/packages/components/src/combobox-control/README.md"
    },
    {
      "text": "onFilterValueChange",
      "url": "https://developer.wordpress.org/block-editor/#onfiltervaluechange"
    },
    {
      "text": "__experimentalRenderItem",
      "url": "https://developer.wordpress.org/block-editor/#__experimentalrenderitem"
    },
    {
      "text": "← ColorPicker",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/color-picker/"
    },
    {
      "text": "ConfirmDialog →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/confirm-dialog/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fcomponents%2Fcolor-picker%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/packages/components/src/color-picker/README.md"
    },
    {
      "text": "color: string",
      "url": "https://developer.wordpress.org/block-editor/#color-string"
    },
    {
      "text": "onChange: (hex8Color: string) => void",
      "url": "https://developer.wordpress.org/block-editor/#onchange-hex8color-string-void"
    },
    {
      "text": "enableAlpha: boolean",
      "url": "https://developer.wordpress.org/block-editor/#enablealpha-boolean"
    },
    {
      "text": "defaultValue: string | undefined",
      "url": "https://developer.wordpress.org/block-editor/#defaultvalue-string-undefined"
    },
    {
      "text": "copyFormat: 'hex' | 'hsl' | 'rgb' | undefined",
      "url": "https://developer.wordpress.org/block-editor/#copyformat-hex-hsl-rgb-undefined"
    },
    {
      "text": "← ColorPalette",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/color-palette/"
    },
    {
      "text": "ComboboxControl →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/combobox-control/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fcomponents%2Fcolor-palette%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/packages/components/src/color-palette/README.md"
    },
    {
      "text": "ensure Tooltip positioning",
      "url": "https://developer.wordpress.org/block-editor/reference-guide/components/#popovers-and-tooltips"
    },
    {
      "text": "colors: PaletteObject[] | ColorObject[]",
      "url": "https://developer.wordpress.org/block-editor/#colors-paletteobject-colorobject"
    },
    {
      "text": "disableCustomColors: boolean",
      "url": "https://developer.wordpress.org/block-editor/#disablecustomcolors-boolean"
    },
    {
      "text": "onChange: OnColorChange",
      "url": "https://developer.wordpress.org/block-editor/#onchange-oncolorchange"
    },
    {
      "text": "← ColorIndicator",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/color-indicator/"
    },
    {
      "text": "ColorPicker →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/color-picker/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fcomponents%2Fcolor-indicator%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/packages/components/src/color-indicator/README.md"
    },
    {
      "text": "Single component",
      "url": "https://developer.wordpress.org/block-editor/#single-component"
    },
    {
      "text": "Used in sidebar",
      "url": "https://developer.wordpress.org/block-editor/#used-in-sidebar"
    },
    {
      "text": "colorValue: CSSProperties[ 'background' ]",
      "url": "https://developer.wordpress.org/block-editor/#colorvalue-cssproperties-background"
    },
    {
      "text": "background",
      "url": "https://developer.mozilla.org/en-US/docs/Web/CSS/background"
    },
    {
      "text": "← ClipboardButton",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/clipboard-button/"
    },
    {
      "text": "ColorPalette →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/color-palette/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fcomponents%2Fclipboard-button%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/packages/components/src/clipboard-button/README.md"
    },
    {
      "text": "onCopy",
      "url": "https://developer.wordpress.org/block-editor/#oncopy"
    },
    {
      "text": "onFinishCopy",
      "url": "https://developer.wordpress.org/block-editor/#onfinishcopy"
    },
    {
      "text": "Button",
      "url": "https://developer.wordpress.org/block-editor/designers-developers/developers/components/button/#props"
    },
    {
      "text": "← CircularOptionPicker",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/circular-option-picker/"
    },
    {
      "text": "ColorIndicator →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/color-indicator/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fcomponents%2Fcircular-option-picker%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/packages/components/src/circular-option-picker/README.md"
    },
    {
      "text": "actions: ReactNode",
      "url": "https://developer.wordpress.org/block-editor/#actions-reactnode"
    },
    {
      "text": "options: ReactNode",
      "url": "https://developer.wordpress.org/block-editor/#options-reactnode"
    },
    {
      "text": "Subcomponents",
      "url": "https://developer.wordpress.org/block-editor/#subcomponents"
    },
    {
      "text": "CircularOptionPicker.ButtonAction",
      "url": "https://developer.wordpress.org/block-editor/#circularoptionpicker-buttonaction"
    },
    {
      "text": "Props",
      "url": "https://developer.wordpress.org/block-editor/#props-2"
    },
    {
      "text": "CircularOptionPicker.DropdownLinkAction",
      "url": "https://developer.wordpress.org/block-editor/#circularoptionpicker-dropdownlinkaction"
    },
    {
      "text": "Props",
      "url": "https://developer.wordpress.org/block-editor/#props-3"
    },
    {
      "text": "Dropdown props",
      "url": "https://developer.wordpress.org/block-editor/reference-guide/components/dropdown/#props"
    },
    {
      "text": "← CheckboxControl",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/checkbox-control/"
    },
    {
      "text": "ClipboardButton →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/clipboard-button/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fcomponents%2Fcheckbox-control%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/packages/components/src/checkbox-control/README.md"
    },
    {
      "text": "When to use checkboxes",
      "url": "https://developer.wordpress.org/block-editor/#when-to-use-checkboxes"
    },
    {
      "text": "Parent and child checkboxes",
      "url": "https://developer.wordpress.org/block-editor/#parent-and-child-checkboxes"
    },
    {
      "text": "onChange: function",
      "url": "https://developer.wordpress.org/block-editor/#onchange-function"
    },
    {
      "text": "indeterminate: boolean",
      "url": "https://developer.wordpress.org/block-editor/#indeterminate-boolean"
    },
    {
      "text": "← Card",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/card/"
    },
    {
      "text": "CircularOptionPicker →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/circular-option-picker/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fcomponents%2Fcard%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/packages/components/src/card/card/README.md"
    },
    {
      "text": "sub-components",
      "url": "https://developer.wordpress.org/block-editor/#sub-components"
    },
    {
      "text": "Elevation",
      "url": "https://developer.wordpress.org/block-editor/designers-developers/developers/components/elevation/"
    },
    {
      "text": "isBorderless: boolean",
      "url": "https://developer.wordpress.org/block-editor/#isborderless-boolean"
    },
    {
      "text": "Surface props",
      "url": "https://developer.wordpress.org/block-editor/designers-developers/developers/components/ui/surface/#props"
    },
    {
      "text": "<CardBody />",
      "url": "https://developer.wordpress.org/block-editor/designers-developers/developers/components/card/card-body/"
    },
    {
      "text": "<CardDivider />",
      "url": "https://developer.wordpress.org/block-editor/designers-developers/developers/components/card/card-divider/"
    },
    {
      "text": "<CardFooter />",
      "url": "https://developer.wordpress.org/block-editor/designers-developers/developers/components/card/card-footer/"
    },
    {
      "text": "<CardHeader />",
      "url": "https://developer.wordpress.org/block-editor/designers-developers/developers/components/card/card-header/"
    },
    {
      "text": "<CardMedia />",
      "url": "https://developer.wordpress.org/block-editor/designers-developers/developers/components/card/card-media/"
    },
    {
      "text": "Sub-Components Example",
      "url": "https://developer.wordpress.org/block-editor/#sub-components-example"
    },
    {
      "text": "← CardMedia",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/card-media/"
    },
    {
      "text": "CheckboxControl →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/checkbox-control/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fcomponents%2Fcard-media%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/packages/components/src/card/card-media/README.md"
    },
    {
      "text": "Card",
      "url": "https://developer.wordpress.org/block-editor/designers-developers/developers/components/card/card/"
    },
    {
      "text": "← CardHeader",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/card-header/"
    },
    {
      "text": "Card →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/card/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fcomponents%2Fcard-header%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/packages/components/src/card/card-header/README.md"
    },
    {
      "text": "Card‘s Context",
      "url": "https://developer.wordpress.org/block-editor/designers-developers/developers/components/card/card/#context"
    },
    {
      "text": "isShady: boolean",
      "url": "https://developer.wordpress.org/block-editor/#isshady-boolean"
    },
    {
      "text": "← CardFooter",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/card-footer/"
    },
    {
      "text": "CardMedia →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/card-media/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fcomponents%2Fcard-footer%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/packages/components/src/card/card-footer/README.md"
    },
    {
      "text": "Flex",
      "url": "https://developer.wordpress.org/block-editor/#flex"
    },
    {
      "text": "Flex layout component",
      "url": "https://developer.wordpress.org/block-editor/designers-developers/developers/components/flex/flex/"
    },
    {
      "text": "the documentation",
      "url": "https://developer.wordpress.org/block-editor/designers-developers/developers/components/flex/flex/"
    },
    {
      "text": "justify: CSSProperties[ 'justifyContent' ]",
      "url": "https://developer.wordpress.org/block-editor/#justify-cssproperties-justifycontent"
    },
    {
      "text": "Flex component",
      "url": "https://developer.wordpress.org/block-editor/designers-developers/developers/components/flex/flex/#justify"
    },
    {
      "text": "← CardDivider",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/card-divider/"
    },
    {
      "text": "CardHeader →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/card-header/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fcomponents%2Fcard-divider%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/packages/components/src/card/card-divider/README.md"
    },
    {
      "text": "Divider props",
      "url": "https://developer.wordpress.org/block-editor/designers-developers/developers/components/divider/#props"
    },
    {
      "text": "← CardBody",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/card-body/"
    },
    {
      "text": "CardFooter →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/card-footer/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fcomponents%2Fcard-body%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/packages/components/src/card/card-body/README.md"
    },
    {
      "text": "isScrollable: boolean",
      "url": "https://developer.wordpress.org/block-editor/#isscrollable-boolean"
    },
    {
      "text": "← Button",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/button/"
    },
    {
      "text": "CardDivider →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/card-divider/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fcomponents%2Fbox-control%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/packages/components/src/box-control/README.md"
    },
    {
      "text": "splitOnAxis: boolean",
      "url": "https://developer.wordpress.org/block-editor/#splitonaxis-boolean"
    },
    {
      "text": "inputProps: object",
      "url": "https://developer.wordpress.org/block-editor/#inputprops-object"
    },
    {
      "text": "UnitControl",
      "url": "https://developer.wordpress.org/unit-control"
    },
    {
      "text": "onChange: (next: BoxControlValue) => void",
      "url": "https://developer.wordpress.org/block-editor/#onchange-next-boxcontrolvalue-void"
    },
    {
      "text": "resetValues: object",
      "url": "https://developer.wordpress.org/block-editor/#resetvalues-object"
    },
    {
      "text": "sides: string[]",
      "url": "https://developer.wordpress.org/block-editor/#sides-string"
    },
    {
      "text": "values: object",
      "url": "https://developer.wordpress.org/block-editor/#values-object"
    },
    {
      "text": "onMouseOver: function",
      "url": "https://developer.wordpress.org/block-editor/#onmouseover-function"
    },
    {
      "text": "onMouseOut: function",
      "url": "https://developer.wordpress.org/block-editor/#onmouseout-function"
    },
    {
      "text": "← BorderControl",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/border-control/"
    },
    {
      "text": "ButtonGroup →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/button-group/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fcomponents%2Fborder-control%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/packages/components/src/border-control/border-control/README.md"
    },
    {
      "text": "colors: ( PaletteObject | ColorObject )[]",
      "url": "https://developer.wordpress.org/block-editor/#colors-paletteobject-colorobject"
    },
    {
      "text": "enableStyle: boolean",
      "url": "https://developer.wordpress.org/block-editor/#enablestyle-boolean"
    },
    {
      "text": "isCompact: boolean",
      "url": "https://developer.wordpress.org/block-editor/#iscompact-boolean"
    },
    {
      "text": "onChange: ( value?: Object ) => void",
      "url": "https://developer.wordpress.org/block-editor/#onchange-value-object-void"
    },
    {
      "text": "shouldSanitizeBorder: boolean",
      "url": "https://developer.wordpress.org/block-editor/#shouldsanitizeborder-boolean"
    },
    {
      "text": "showDropdownHeader: boolean",
      "url": "https://developer.wordpress.org/block-editor/#showdropdownheader-boolean"
    },
    {
      "text": "value: Object",
      "url": "https://developer.wordpress.org/block-editor/#value-object"
    },
    {
      "text": "width: CSSProperties[ 'width' ]",
      "url": "https://developer.wordpress.org/block-editor/#width-cssproperties-width"
    },
    {
      "text": "← BorderBoxControl",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/border-box-control/"
    },
    {
      "text": "BoxControl →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/box-control/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fcomponents%2Fborder-box-control%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/packages/components/src/border-box-control/border-box-control/README.md"
    },
    {
      "text": "popoverPlacement: string",
      "url": "https://developer.wordpress.org/block-editor/#popoverplacement-string"
    },
    {
      "text": "popoverOffset: number",
      "url": "https://developer.wordpress.org/block-editor/#popoveroffset-number"
    },
    {
      "text": "← BaseControl",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/base-control/"
    },
    {
      "text": "BorderControl →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/border-control/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fcomponents%2Fbase-control%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/packages/components/src/base-control/README.md"
    },
    {
      "text": "id",
      "url": "https://developer.wordpress.org/block-editor/#id"
    },
    {
      "text": "BaseControl.VisualLabel",
      "url": "https://developer.wordpress.org/block-editor/#basecontrol-visuallabel"
    },
    {
      "text": "children",
      "url": "https://developer.wordpress.org/block-editor/#children-2"
    },
    {
      "text": "← BaseField",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/base-field/"
    },
    {
      "text": "BorderBoxControl →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/border-box-control/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fcomponents%2Fbase-field%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/packages/components/src/base-field/README.md"
    },
    {
      "text": "hasError: boolean",
      "url": "https://developer.wordpress.org/block-editor/#haserror-boolean"
    },
    {
      "text": "isSubtle: boolean",
      "url": "https://developer.wordpress.org/block-editor/#issubtle-boolean"
    },
    {
      "text": "← Autocomplete",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/autocomplete/"
    },
    {
      "text": "BaseControl →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/base-control/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fcomponents%2Fautocomplete%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/packages/components/src/autocomplete/README.md"
    },
    {
      "text": "record",
      "url": "https://developer.wordpress.org/block-editor/#record"
    },
    {
      "text": "onReplace",
      "url": "https://developer.wordpress.org/block-editor/#onreplace"
    },
    {
      "text": "completers",
      "url": "https://developer.wordpress.org/block-editor/#completers"
    },
    {
      "text": "contentRef",
      "url": "https://developer.wordpress.org/block-editor/#contentref"
    },
    {
      "text": "Autocompleters",
      "url": "https://developer.wordpress.org/block-editor/#autocompleters"
    },
    {
      "text": "The Completer Interface",
      "url": "https://developer.wordpress.org/block-editor/#the-completer-interface"
    },
    {
      "text": "name",
      "url": "https://developer.wordpress.org/block-editor/#name"
    },
    {
      "text": "triggerPrefix",
      "url": "https://developer.wordpress.org/block-editor/#triggerprefix"
    },
    {
      "text": "getOptionLabel",
      "url": "https://developer.wordpress.org/block-editor/#getoptionlabel"
    },
    {
      "text": "getOptionKeywords",
      "url": "https://developer.wordpress.org/block-editor/#getoptionkeywords"
    },
    {
      "text": "isOptionDisabled",
      "url": "https://developer.wordpress.org/block-editor/#isoptiondisabled"
    },
    {
      "text": "getOptionCompletion",
      "url": "https://developer.wordpress.org/block-editor/#getoptioncompletion"
    },
    {
      "text": "allowContext",
      "url": "https://developer.wordpress.org/block-editor/#allowcontext"
    },
    {
      "text": "isDebounced",
      "url": "https://developer.wordpress.org/block-editor/#isdebounced"
    },
    {
      "text": "← Animate",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/animate/"
    },
    {
      "text": "BaseField →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/base-field/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fcomponents%2Fangle-picker-control%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/packages/components/src/angle-picker-control/README.md"
    },
    {
      "text": "onChange: ( value: number ) => void",
      "url": "https://developer.wordpress.org/block-editor/#onchange-value-number-void"
    },
    {
      "text": "← AlignmentMatrixControl",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/alignment-matrix-control/"
    },
    {
      "text": "Animate →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/animate/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fcomponents%2Falignment-matrix-control%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/packages/components/src/alignment-matrix-control/README.md"
    },
    {
      "text": "defaultValue",
      "url": "https://developer.wordpress.org/block-editor/#defaultvalue"
    },
    {
      "text": "width",
      "url": "https://developer.wordpress.org/block-editor/#width"
    },
    {
      "text": "AnglePickerControl →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/angle-picker-control/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Ftheme-json-reference%2Fstyles-versions%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/docs/reference-guides/theme-json-reference/styles-versions.md"
    },
    {
      "text": "← Migrating to Newer Versions",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/theme-json-reference/theme-json-migrations/"
    },
    {
      "text": "Component Reference →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/components/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Ftheme-json-reference%2Ftheme-json-migrations%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/docs/reference-guides/theme-json-reference/theme-json-migrations.md"
    },
    {
      "text": "Migrating from v1 to v2",
      "url": "https://developer.wordpress.org/block-editor/#migrating-from-v1-to-v2"
    },
    {
      "text": "dev note for the release",
      "url": "https://make.wordpress.org/core/2022/01/08/updates-for-settings-styles-and-theme-json/"
    },
    {
      "text": "reference documents",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/theme-json-reference/"
    },
    {
      "text": "Renamed properties",
      "url": "https://developer.wordpress.org/block-editor/#renamed-properties"
    },
    {
      "text": "New properties",
      "url": "https://developer.wordpress.org/block-editor/#new-properties"
    },
    {
      "text": "Changes to property values",
      "url": "https://developer.wordpress.org/block-editor/#changes-to-property-values"
    },
    {
      "text": "← Version 1 Reference",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/theme-json-reference/theme-json-v1/"
    },
    {
      "text": "Available Styles Options →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/theme-json-reference/styles-versions/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Ftheme-json-reference%2Ftheme-json-v1%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/docs/reference-guides/theme-json-reference/theme-json-v1.md"
    },
    {
      "text": "theme.json migration guide",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/theme-json-reference/theme-json-migrations/#migrating-from-v1-to-v2"
    },
    {
      "text": "border",
      "url": "https://developer.wordpress.org/block-editor/#border"
    },
    {
      "text": "layout",
      "url": "https://developer.wordpress.org/block-editor/#layout"
    },
    {
      "text": "custom",
      "url": "https://developer.wordpress.org/block-editor/#custom"
    },
    {
      "text": "border",
      "url": "https://developer.wordpress.org/block-editor/#border-2"
    },
    {
      "text": "color",
      "url": "https://developer.wordpress.org/block-editor/#color-2"
    },
    {
      "text": "spacing",
      "url": "https://developer.wordpress.org/block-editor/#spacing-2"
    },
    {
      "text": "typography",
      "url": "https://developer.wordpress.org/block-editor/#typography-2"
    },
    {
      "text": "← Version 2 (living reference)",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/theme-json-reference/theme-json-living/"
    },
    {
      "text": "Migrating to Newer Versions →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/theme-json-reference/theme-json-migrations/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Ftheme-json-reference%2Ftheme-json-living%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/docs/reference-guides/theme-json-reference/theme-json-living.md"
    },
    {
      "text": "theme.json v1",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/theme-json-reference/theme-json-v1/"
    },
    {
      "text": "reference to migrate from theme.json v1 to v2",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/theme-json-reference/theme-json-migrations/"
    },
    {
      "text": "theme.json how to guide",
      "url": "https://developer.wordpress.org/block-editor/how-to-guides/themes/theme-json/"
    },
    {
      "text": "Schema",
      "url": "https://developer.wordpress.org/block-editor/#schema"
    },
    {
      "text": "appearanceTools",
      "url": "https://developer.wordpress.org/block-editor/#appearancetools"
    },
    {
      "text": "useRootPaddingAwareAlignments",
      "url": "https://developer.wordpress.org/block-editor/#userootpaddingawarealignments"
    },
    {
      "text": "shadow",
      "url": "https://developer.wordpress.org/block-editor/#shadow"
    },
    {
      "text": "dimensions",
      "url": "https://developer.wordpress.org/block-editor/#dimensions-2"
    },
    {
      "text": "shadow",
      "url": "https://developer.wordpress.org/block-editor/#shadow-2"
    },
    {
      "text": "outline",
      "url": "https://developer.wordpress.org/block-editor/#outline"
    },
    {
      "text": "css",
      "url": "https://developer.wordpress.org/block-editor/#css"
    },
    {
      "text": "Version 1 Reference →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/theme-json-reference/theme-json-v1/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Ftheme-json-reference%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/docs/reference-guides/theme-json-reference/README.md"
    },
    {
      "text": "Migrating to Newer Theme.json Versions",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/theme-json-reference/theme-json-migrations/"
    },
    {
      "text": "← RichText Reference",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/richtext/"
    },
    {
      "text": "Version 2 (living reference) →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/theme-json-reference/theme-json-living/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Frichtext%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/docs/reference-guides/richtext.md"
    },
    {
      "text": "Component Reference",
      "url": "https://developer.wordpress.org/block-editor/reference-guide/components/"
    },
    {
      "text": "Property Reference",
      "url": "https://developer.wordpress.org/block-editor/#property-reference"
    },
    {
      "text": "check out the component documentation on GitHub",
      "url": "https://github.com/WordPress/gutenberg/blob/HEAD/packages/block-editor/src/components/rich-text/README.md"
    },
    {
      "text": "Core Blocks Using the RichText Component",
      "url": "https://developer.wordpress.org/block-editor/#core-blocks-using-the-richtext-component"
    },
    {
      "text": "Button",
      "url": "https://github.com/WordPress/gutenberg/blob/HEAD/packages/block-library/src/button/edit.js"
    },
    {
      "text": "Heading",
      "url": "https://github.com/WordPress/gutenberg/blob/HEAD/packages/block-library/src/heading/edit.js"
    },
    {
      "text": "Quote",
      "url": "https://github.com/WordPress/gutenberg/blob/HEAD/packages/block-library/src/quote/edit.js"
    },
    {
      "text": "Search",
      "url": "https://github.com/WordPress/gutenberg/blob/HEAD/packages/block-library/src/search/edit.js"
    },
    {
      "text": "Common Issues & Solutions",
      "url": "https://developer.wordpress.org/block-editor/#common-issues-solutions"
    },
    {
      "text": "HTML Formatting Tags Display in the Content",
      "url": "https://developer.wordpress.org/block-editor/#html-formatting-tags-display-in-the-content"
    },
    {
      "text": "Unwanted Formatting Options Still Display",
      "url": "https://developer.wordpress.org/block-editor/#unwanted-formatting-options-still-display"
    },
    {
      "text": "the component documentation",
      "url": "https://github.com/WordPress/gutenberg/blob/HEAD/packages/block-editor/src/components/rich-text/README.md#allowedformats-array"
    },
    {
      "text": "Disable Specific Format Types in Editor",
      "url": "https://developer.wordpress.org/block-editor/#disable-specific-format-types-in-editor"
    },
    {
      "text": "how to load JavaScript in WordPress",
      "url": "https://developer.wordpress.org/block-editor/how-to-guides/javascript/loading-javascript/"
    },
    {
      "text": "← SlotFills Reference",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/slotfills/"
    },
    {
      "text": "Theme.json Reference →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/theme-json-reference/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fslotfills%2Fplugin-sidebar-more-menu-item%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/docs/reference-guides/slotfills/plugin-sidebar-more-menu-item.md"
    },
    {
      "text": "Location",
      "url": "https://developer.wordpress.org/block-editor/#location"
    },
    {
      "text": "← PluginSidebar",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/slotfills/plugin-sidebar/"
    },
    {
      "text": "RichText Reference →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/richtext/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fslotfills%2Fplugin-sidebar%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/docs/reference-guides/slotfills/plugin-sidebar.md"
    },
    {
      "text": "Closed State",
      "url": "https://developer.wordpress.org/block-editor/#closed-state"
    },
    {
      "text": "Open State",
      "url": "https://developer.wordpress.org/block-editor/#open-state"
    },
    {
      "text": "← PluginPrePublishPanel",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/slotfills/plugin-pre-publish-panel/"
    },
    {
      "text": "PluginSidebarMoreMenuItem →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/slotfills/plugin-sidebar-more-menu-item/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fslotfills%2Fplugin-pre-publish-panel%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/docs/reference-guides/slotfills/plugin-pre-publish-panel.md"
    },
    {
      "text": "← PluginPostStatusInfo",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/slotfills/plugin-post-status-info/"
    },
    {
      "text": "PluginSidebar →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/slotfills/plugin-sidebar/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fslotfills%2Fplugin-post-status-info%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/docs/reference-guides/slotfills/plugin-post-status-info.md"
    },
    {
      "text": "← PluginPostPublishPanel",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/slotfills/plugin-post-publish-panel/"
    },
    {
      "text": "PluginPrePublishPanel →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/slotfills/plugin-pre-publish-panel/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fslotfills%2Fplugin-post-publish-panel%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/docs/reference-guides/slotfills/plugin-post-publish-panel.md"
    },
    {
      "text": "← PluginMoreMenuItem",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/slotfills/plugin-more-menu-item/"
    },
    {
      "text": "PluginPostStatusInfo →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/slotfills/plugin-post-status-info/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fslotfills%2Fplugin-more-menu-item%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/docs/reference-guides/slotfills/plugin-more-menu-item.md"
    },
    {
      "text": "← PluginDocumentSettingPanel",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/slotfills/plugin-document-setting-panel/"
    },
    {
      "text": "PluginPostPublishPanel →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/slotfills/plugin-post-publish-panel/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fslotfills%2Fplugin-document-setting-panel%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/docs/reference-guides/slotfills/plugin-document-setting-panel.md"
    },
    {
      "text": "Available Props",
      "url": "https://developer.wordpress.org/block-editor/#available-props"
    },
    {
      "text": "Accessing a panel programmatically",
      "url": "https://developer.wordpress.org/block-editor/#accessing-a-panel-programmatically"
    },
    {
      "text": "← PluginBlockSettingsMenuItem",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/slotfills/plugin-block-settings-menu-item/"
    },
    {
      "text": "PluginMoreMenuItem →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/slotfills/plugin-more-menu-item/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fslotfills%2Fplugin-block-settings-menu-item%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/docs/reference-guides/slotfills/plugin-block-settings-menu-item.md"
    },
    {
      "text": "← MainDashboardButton",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/slotfills/main-dashboard-button/"
    },
    {
      "text": "PluginDocumentSettingPanel →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/slotfills/plugin-document-setting-panel/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fslotfills%2Fmain-dashboard-button%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/docs/reference-guides/slotfills/main-dashboard-button.md"
    },
    {
      "text": "Post editor example",
      "url": "https://developer.wordpress.org/block-editor/#post-editor-example"
    },
    {
      "text": "Site editor example",
      "url": "https://developer.wordpress.org/block-editor/#site-editor-example"
    },
    {
      "text": "PluginBlockSettingsMenuItem →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/slotfills/plugin-block-settings-menu-item/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fslotfills%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/docs/reference-guides/slotfills/README.md"
    },
    {
      "text": "SlotFill component docs",
      "url": "https://developer.wordpress.org/block-editor/reference-guide/components/slot-fill/"
    },
    {
      "text": "@wordpress/plugins",
      "url": "https://developer.wordpress.org/block-editor/reference-guide/packages/packages-plugins/"
    },
    {
      "text": "Usage overview",
      "url": "https://developer.wordpress.org/block-editor/#usage-overview"
    },
    {
      "text": "How do they work?",
      "url": "https://developer.wordpress.org/block-editor/#how-do-they-work"
    },
    {
      "text": "see core code",
      "url": "https://github.com/WordPress/gutenberg/blob/HEAD/packages/edit-post/src/components/sidebar/plugin-post-status-info/index.js#L54"
    },
    {
      "text": "core code",
      "url": "https://github.com/WordPress/gutenberg/tree/HEAD/packages/edit-post/src/components/sidebar/post-status/index.js#L26"
    },
    {
      "text": "Currently available SlotFills and examples",
      "url": "https://developer.wordpress.org/block-editor/#currently-available-slotfills-and-examples"
    },
    {
      "text": "← Hooks Reference",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/filters/"
    },
    {
      "text": "MainDashboardButton →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/slotfills/main-dashboard-button/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Ffilters%2Fglobal-styles-filters%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/docs/reference-guides/filters/global-styles-filters.md"
    },
    {
      "text": "← Autocomplete",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/filters/autocomplete-filters/"
    },
    {
      "text": "SlotFills Reference →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/slotfills/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Ffilters%2Fautocomplete-filters%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/docs/reference-guides/filters/autocomplete-filters.md"
    },
    {
      "text": "← Parser Filters",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/filters/parser-filters/"
    },
    {
      "text": "Global Styles Filters →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/filters/global-styles-filters/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Ffilters%2Fparser-filters%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/docs/reference-guides/filters/parser-filters.md"
    },
    {
      "text": "Server-side parser",
      "url": "https://developer.wordpress.org/block-editor/#server-side-parser"
    },
    {
      "text": "Client-side parser",
      "url": "https://developer.wordpress.org/block-editor/#client-side-parser"
    },
    {
      "text": "Filters",
      "url": "https://developer.wordpress.org/block-editor/#filters"
    },
    {
      "text": "← i18n Filters",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/filters/i18n-filters/"
    },
    {
      "text": "Autocomplete →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/filters/autocomplete-filters/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Ffilters%2Fi18n-filters%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/docs/reference-guides/filters/i18n-filters.md"
    },
    {
      "text": "Filter Arguments",
      "url": "https://developer.wordpress.org/block-editor/#filter-arguments"
    },
    {
      "text": "i18n.gettext",
      "url": "https://developer.wordpress.org/block-editor/#i18n-gettext"
    },
    {
      "text": "i18n.gettext_with_context",
      "url": "https://developer.wordpress.org/block-editor/#i18n-gettext_with_context"
    },
    {
      "text": "i18n.ngettext",
      "url": "https://developer.wordpress.org/block-editor/#i18n-ngettext"
    },
    {
      "text": "i18n.ngettext_with_context",
      "url": "https://developer.wordpress.org/block-editor/#i18n-ngettext_with_context"
    },
    {
      "text": "Basic Example",
      "url": "https://developer.wordpress.org/block-editor/#basic-example"
    },
    {
      "text": "Using ‘text domain’-specific filters",
      "url": "https://developer.wordpress.org/block-editor/#using-text-domain-specific-filters"
    },
    {
      "text": "← Editor Hooks",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/filters/editor-filters/"
    },
    {
      "text": "Parser Filters →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/filters/parser-filters/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Ffilters%2Feditor-filters%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/docs/reference-guides/filters/editor-filters.md"
    },
    {
      "text": "Editor features",
      "url": "https://developer.wordpress.org/block-editor/#editor-features"
    },
    {
      "text": "editor.PostFeaturedImage.imageSize",
      "url": "https://developer.wordpress.org/block-editor/#editor-postfeaturedimage-imagesize"
    },
    {
      "text": "editor.PostPreview.interstitialMarkup",
      "url": "https://developer.wordpress.org/block-editor/#editor-postpreview-interstitialmarkup"
    },
    {
      "text": "media.crossOrigin",
      "url": "https://developer.wordpress.org/block-editor/#media-crossorigin"
    },
    {
      "text": "article",
      "url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/crossorigin"
    },
    {
      "text": "Editor settings",
      "url": "https://developer.wordpress.org/block-editor/#editor-settings"
    },
    {
      "text": "block_editor_settings_all",
      "url": "https://developer.wordpress.org/block-editor/#block_editor_settings_all"
    },
    {
      "text": "on its WordPress Code Reference page",
      "url": "https://developer.wordpress.org/reference/hooks/block_editor_settings_all/"
    },
    {
      "text": "block_editor_rest_api_preload_paths",
      "url": "https://developer.wordpress.org/block-editor/#block_editor_rest_api_preload_paths"
    },
    {
      "text": "Available default editor settings",
      "url": "https://developer.wordpress.org/block-editor/#available-default-editor-settings"
    },
    {
      "text": "richEditingEnabled",
      "url": "https://developer.wordpress.org/block-editor/#richeditingenabled"
    },
    {
      "text": "user_can_richedit",
      "url": "https://developer.wordpress.org/reference/functions/user_can_richedit/"
    },
    {
      "text": "codeEditingEnabled",
      "url": "https://developer.wordpress.org/block-editor/#codeeditingenabled"
    },
    {
      "text": "Logging errors",
      "url": "https://developer.wordpress.org/block-editor/#logging-errors"
    },
    {
      "text": "“error boundary”",
      "url": "https://reactjs.org/docs/error-boundaries.html"
    },
    {
      "text": "editor.ErrorBoundary.errorLogged",
      "url": "https://developer.wordpress.org/block-editor/#editor-errorboundary-errorlogged"
    },
    {
      "text": "Error Boundaries",
      "url": "https://reactjs.org/docs/error-boundaries.html"
    },
    {
      "text": "Block Directory",
      "url": "https://developer.wordpress.org/block-editor/#block-directory"
    },
    {
      "text": "WordPress.org.",
      "url": "https://wordpress.org/plugins/browse/block/"
    },
    {
      "text": "remove_action,",
      "url": "https://developer.wordpress.org/reference/functions/remove_action/"
    },
    {
      "text": "should_load_remote_block_patterns",
      "url": "https://developer.wordpress.org/block-editor/#should_load_remote_block_patterns"
    },
    {
      "text": "← Block Hooks",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/filters/block-filters/"
    },
    {
      "text": "i18n Filters →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/filters/i18n-filters/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Ffilters%2Fblock-filters%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/docs/reference-guides/filters/block-filters.md"
    },
    {
      "text": "Registration",
      "url": "https://developer.wordpress.org/block-editor/#registration"
    },
    {
      "text": "block_type_metadata",
      "url": "https://developer.wordpress.org/block-editor/#block_type_metadata"
    },
    {
      "text": "block_type_metadata_settings",
      "url": "https://developer.wordpress.org/block-editor/#block_type_metadata_settings"
    },
    {
      "text": "blocks.registerBlockType",
      "url": "https://developer.wordpress.org/block-editor/#blocks-registerblocktype"
    },
    {
      "text": "Block Editor",
      "url": "https://developer.wordpress.org/block-editor/#block-editor"
    },
    {
      "text": "blocks.getSaveElement",
      "url": "https://developer.wordpress.org/block-editor/#blocks-getsaveelement"
    },
    {
      "text": "blocks.getSaveContent.extraProps",
      "url": "https://developer.wordpress.org/block-editor/#blocks-getsavecontent-extraprops"
    },
    {
      "text": "block validation",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/block-api/block-edit-save/#validation"
    },
    {
      "text": "render_block documentation",
      "url": "https://developer.wordpress.org/reference/hooks/render_block/"
    },
    {
      "text": "blocks.getBlockDefaultClassName",
      "url": "https://developer.wordpress.org/block-editor/#blocks-getblockdefaultclassname"
    },
    {
      "text": "blocks.switchToBlockType.transformedBlock",
      "url": "https://developer.wordpress.org/block-editor/#blocks-switchtoblocktype-transformedblock"
    },
    {
      "text": "blocks.getBlockAttributes",
      "url": "https://developer.wordpress.org/block-editor/#blocks-getblockattributes"
    },
    {
      "text": "editor.BlockEdit",
      "url": "https://developer.wordpress.org/block-editor/#editor-blockedit"
    },
    {
      "text": "editor.BlockListBlock",
      "url": "https://developer.wordpress.org/block-editor/#editor-blocklistblock"
    },
    {
      "text": "Removing Blocks",
      "url": "https://developer.wordpress.org/block-editor/#removing-blocks"
    },
    {
      "text": "Using a deny list",
      "url": "https://developer.wordpress.org/block-editor/#using-a-deny-list"
    },
    {
      "text": "race condition",
      "url": "https://en.wikipedia.org/wiki/Race_condition"
    },
    {
      "text": "Using an allow list",
      "url": "https://developer.wordpress.org/block-editor/#using-an-allow-list"
    },
    {
      "text": "Hiding blocks from the inserter",
      "url": "https://developer.wordpress.org/block-editor/#hiding-blocks-from-the-inserter"
    },
    {
      "text": "allowed_block_types_all",
      "url": "https://developer.wordpress.org/block-editor/#allowed_block_types_all"
    },
    {
      "text": "Managing block categories",
      "url": "https://developer.wordpress.org/block-editor/#managing-block-categories"
    },
    {
      "text": "block_categories_all",
      "url": "https://developer.wordpress.org/block-editor/#block_categories_all"
    },
    {
      "text": "wp.blocks.updateCategory",
      "url": "https://developer.wordpress.org/block-editor/#wp-blocks-updatecategory"
    },
    {
      "text": "WordPress Dashicon",
      "url": "https://developer.wordpress.org/resource/dashicons/"
    },
    {
      "text": "Editor Hooks →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/filters/editor-filters/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Ffilters%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/docs/reference-guides/filters/README.md"
    },
    {
      "text": "Hooks",
      "url": "https://developer.wordpress.org/plugins/hooks/"
    },
    {
      "text": "Actions",
      "url": "https://developer.wordpress.org/plugins/hooks/actions/"
    },
    {
      "text": "Filters",
      "url": "https://developer.wordpress.org/plugins/hooks/filters/"
    },
    {
      "text": "@wordpress/hooks",
      "url": "https://www.npmjs.com/package/@wordpress/hooks"
    },
    {
      "text": "PHP",
      "url": "https://codex.wordpress.org/Plugin_API/"
    },
    {
      "text": "JavaScript",
      "url": "https://developer.wordpress.org/block-editor/reference-guide/packages/packages-hooks/"
    },
    {
      "text": "← Core Blocks Reference",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/core-blocks/"
    },
    {
      "text": "Block Hooks →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/filters/block-filters/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fcore-blocks%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/docs/reference-guides/core-blocks.md"
    },
    {
      "text": "Archives",
      "url": "https://developer.wordpress.org/block-editor/#archives"
    },
    {
      "text": "Source",
      "url": "https://github.com/WordPress/gutenberg/tree/trunk/packages/block-library/src/archives"
    },
    {
      "text": "Audio",
      "url": "https://developer.wordpress.org/block-editor/#audio"
    },
    {
      "text": "Source",
      "url": "https://github.com/WordPress/gutenberg/tree/trunk/packages/block-library/src/audio"
    },
    {
      "text": "Avatar",
      "url": "https://developer.wordpress.org/block-editor/#avatar"
    },
    {
      "text": "Source",
      "url": "https://github.com/WordPress/gutenberg/tree/trunk/packages/block-library/src/avatar"
    },
    {
      "text": "Source",
      "url": "https://github.com/WordPress/gutenberg/tree/trunk/packages/block-library/src/block"
    },
    {
      "text": "Button",
      "url": "https://developer.wordpress.org/block-editor/#button"
    },
    {
      "text": "Source",
      "url": "https://github.com/WordPress/gutenberg/tree/trunk/packages/block-library/src/button"
    },
    {
      "text": "Source",
      "url": "https://github.com/WordPress/gutenberg/tree/trunk/packages/block-library/src/buttons"
    },
    {
      "text": "Calendar",
      "url": "https://developer.wordpress.org/block-editor/#calendar"
    },
    {
      "text": "Source",
      "url": "https://github.com/WordPress/gutenberg/tree/trunk/packages/block-library/src/calendar"
    },
    {
      "text": "Categories List",
      "url": "https://developer.wordpress.org/block-editor/#categories-list"
    },
    {
      "text": "Source",
      "url": "https://github.com/WordPress/gutenberg/tree/trunk/packages/block-library/src/categories"
    },
    {
      "text": "Code",
      "url": "https://developer.wordpress.org/block-editor/#code"
    },
    {
      "text": "Source",
      "url": "https://github.com/WordPress/gutenberg/tree/trunk/packages/block-library/src/code"
    },
    {
      "text": "Column",
      "url": "https://developer.wordpress.org/block-editor/#column"
    },
    {
      "text": "Source",
      "url": "https://github.com/WordPress/gutenberg/tree/trunk/packages/block-library/src/column"
    },
    {
      "text": "Columns",
      "url": "https://developer.wordpress.org/block-editor/#columns"
    },
    {
      "text": "Source",
      "url": "https://github.com/WordPress/gutenberg/tree/trunk/packages/block-library/src/columns"
    },
    {
      "text": "Comment Author Avatar (deprecated)",
      "url": "https://developer.wordpress.org/block-editor/#comment-author-avatar-deprecated"
    },
    {
      "text": "Source",
      "url": "https://github.com/WordPress/gutenberg/tree/trunk/packages/block-library/src/comment-author-avatar"
    },
    {
      "text": "Comment Author Name",
      "url": "https://developer.wordpress.org/block-editor/#comment-author-name"
    },
    {
      "text": "Source",
      "url": "https://github.com/WordPress/gutenberg/tree/trunk/packages/block-library/src/comment-author-name"
    },
    {
      "text": "Comment Content",
      "url": "https://developer.wordpress.org/block-editor/#comment-content"
    },
    {
      "text": "Source",
      "url": "https://github.com/WordPress/gutenberg/tree/trunk/packages/block-library/src/comment-content"
    },
    {
      "text": "Comment Date",
      "url": "https://developer.wordpress.org/block-editor/#comment-date"
    },
    {
      "text": "Source",
      "url": "https://github.com/WordPress/gutenberg/tree/trunk/packages/block-library/src/comment-date"
    },
    {
      "text": "Comment Edit Link",
      "url": "https://developer.wordpress.org/block-editor/#comment-edit-link"
    },
    {
      "text": "Source",
      "url": "https://github.com/WordPress/gutenberg/tree/trunk/packages/block-library/src/comment-edit-link"
    },
    {
      "text": "Comment Reply Link",
      "url": "https://developer.wordpress.org/block-editor/#comment-reply-link"
    },
    {
      "text": "Source",
      "url": "https://github.com/WordPress/gutenberg/tree/trunk/packages/block-library/src/comment-reply-link"
    },
    {
      "text": "Comment Template",
      "url": "https://developer.wordpress.org/block-editor/#comment-template"
    },
    {
      "text": "Source",
      "url": "https://github.com/WordPress/gutenberg/tree/trunk/packages/block-library/src/comment-template"
    },
    {
      "text": "Comments",
      "url": "https://developer.wordpress.org/block-editor/#comments"
    },
    {
      "text": "Source",
      "url": "https://github.com/WordPress/gutenberg/tree/trunk/packages/block-library/src/comments"
    },
    {
      "text": "Comments Pagination",
      "url": "https://developer.wordpress.org/block-editor/#comments-pagination"
    },
    {
      "text": "Source",
      "url": "https://github.com/WordPress/gutenberg/tree/trunk/packages/block-library/src/comments-pagination"
    },
    {
      "text": "Comments Next Page",
      "url": "https://developer.wordpress.org/block-editor/#comments-next-page"
    },
    {
      "text": "Source",
      "url": "https://github.com/WordPress/gutenberg/tree/trunk/packages/block-library/src/comments-pagination-next"
    },
    {
      "text": "Comments Page Numbers",
      "url": "https://developer.wordpress.org/block-editor/#comments-page-numbers"
    },
    {
      "text": "Source",
      "url": "https://github.com/WordPress/gutenberg/tree/trunk/packages/block-library/src/comments-pagination-numbers"
    },
    {
      "text": "Comments Previous Page",
      "url": "https://developer.wordpress.org/block-editor/#comments-previous-page"
    },
    {
      "text": "Source",
      "url": "https://github.com/WordPress/gutenberg/tree/trunk/packages/block-library/src/comments-pagination-previous"
    },
    {
      "text": "Comments Title",
      "url": "https://developer.wordpress.org/block-editor/#comments-title"
    },
    {
      "text": "Source",
      "url": "https://github.com/WordPress/gutenberg/tree/trunk/packages/block-library/src/comments-title"
    },
    {
      "text": "Cover",
      "url": "https://developer.wordpress.org/block-editor/#cover"
    },
    {
      "text": "Source",
      "url": "https://github.com/WordPress/gutenberg/tree/trunk/packages/block-library/src/cover"
    },
    {
      "text": "Details",
      "url": "https://developer.wordpress.org/block-editor/#details"
    },
    {
      "text": "Source",
      "url": "https://github.com/WordPress/gutenberg/tree/trunk/packages/block-library/src/details"
    },
    {
      "text": "Details Content",
      "url": "https://developer.wordpress.org/block-editor/#details-content"
    },
    {
      "text": "Source",
      "url": "https://github.com/WordPress/gutenberg/tree/trunk/packages/block-library/src/details-content"
    },
    {
      "text": "Details Summary",
      "url": "https://developer.wordpress.org/block-editor/#details-summary"
    },
    {
      "text": "Source",
      "url": "https://github.com/WordPress/gutenberg/tree/trunk/packages/block-library/src/details-summary"
    },
    {
      "text": "Embed",
      "url": "https://developer.wordpress.org/block-editor/#embed"
    },
    {
      "text": "Source",
      "url": "https://github.com/WordPress/gutenberg/tree/trunk/packages/block-library/src/embed"
    },
    {
      "text": "File",
      "url": "https://developer.wordpress.org/block-editor/#file"
    },
    {
      "text": "Source",
      "url": "https://github.com/WordPress/gutenberg/tree/trunk/packages/block-library/src/file"
    },
    {
      "text": "Classic",
      "url": "https://developer.wordpress.org/block-editor/#classic"
    },
    {
      "text": "Source",
      "url": "https://github.com/WordPress/gutenberg/tree/trunk/packages/block-library/src/freeform"
    },
    {
      "text": "Gallery",
      "url": "https://developer.wordpress.org/block-editor/#gallery"
    },
    {
      "text": "Source",
      "url": "https://github.com/WordPress/gutenberg/tree/trunk/packages/block-library/src/gallery"
    },
    {
      "text": "Group",
      "url": "https://developer.wordpress.org/block-editor/#group"
    },
    {
      "text": "Source",
      "url": "https://github.com/WordPress/gutenberg/tree/trunk/packages/block-library/src/group"
    },
    {
      "text": "Heading",
      "url": "https://developer.wordpress.org/block-editor/#heading"
    },
    {
      "text": "Source",
      "url": "https://github.com/WordPress/gutenberg/tree/trunk/packages/block-library/src/heading"
    },
    {
      "text": "Home Link",
      "url": "https://developer.wordpress.org/block-editor/#home-link"
    },
    {
      "text": "Source",
      "url": "https://github.com/WordPress/gutenberg/tree/trunk/packages/block-library/src/home-link"
    },
    {
      "text": "Custom HTML",
      "url": "https://developer.wordpress.org/block-editor/#custom-html"
    },
    {
      "text": "Source",
      "url": "https://github.com/WordPress/gutenberg/tree/trunk/packages/block-library/src/html"
    },
    {
      "text": "Source",
      "url": "https://github.com/WordPress/gutenberg/tree/trunk/packages/block-library/src/image"
    },
    {
      "text": "Latest Comments",
      "url": "https://developer.wordpress.org/block-editor/#latest-comments"
    },
    {
      "text": "Source",
      "url": "https://github.com/WordPress/gutenberg/tree/trunk/packages/block-library/src/latest-comments"
    },
    {
      "text": "Latest Posts",
      "url": "https://developer.wordpress.org/block-editor/#latest-posts"
    },
    {
      "text": "Source",
      "url": "https://github.com/WordPress/gutenberg/tree/trunk/packages/block-library/src/latest-posts"
    },
    {
      "text": "List",
      "url": "https://developer.wordpress.org/block-editor/#list"
    },
    {
      "text": "Source",
      "url": "https://github.com/WordPress/gutenberg/tree/trunk/packages/block-library/src/list"
    },
    {
      "text": "List item",
      "url": "https://developer.wordpress.org/block-editor/#list-item"
    },
    {
      "text": "Source",
      "url": "https://github.com/WordPress/gutenberg/tree/trunk/packages/block-library/src/list-item"
    },
    {
      "text": "Login/out",
      "url": "https://developer.wordpress.org/block-editor/#login-out"
    },
    {
      "text": "Source",
      "url": "https://github.com/WordPress/gutenberg/tree/trunk/packages/block-library/src/loginout"
    },
    {
      "text": "Media & Text",
      "url": "https://developer.wordpress.org/block-editor/#media-text"
    },
    {
      "text": "Source",
      "url": "https://github.com/WordPress/gutenberg/tree/trunk/packages/block-library/src/media-text"
    },
    {
      "text": "Unsupported",
      "url": "https://developer.wordpress.org/block-editor/#unsupported"
    },
    {
      "text": "Source",
      "url": "https://github.com/WordPress/gutenberg/tree/trunk/packages/block-library/src/missing"
    },
    {
      "text": "More",
      "url": "https://developer.wordpress.org/block-editor/#more"
    },
    {
      "text": "Source",
      "url": "https://github.com/WordPress/gutenberg/tree/trunk/packages/block-library/src/more"
    },
    {
      "text": "Navigation",
      "url": "https://developer.wordpress.org/block-editor/#navigation"
    },
    {
      "text": "Source",
      "url": "https://github.com/WordPress/gutenberg/tree/trunk/packages/block-library/src/navigation"
    },
    {
      "text": "Custom Link",
      "url": "https://developer.wordpress.org/block-editor/#custom-link"
    },
    {
      "text": "Source",
      "url": "https://github.com/WordPress/gutenberg/tree/trunk/packages/block-library/src/navigation-link"
    },
    {
      "text": "Submenu",
      "url": "https://developer.wordpress.org/block-editor/#submenu"
    },
    {
      "text": "Source",
      "url": "https://github.com/WordPress/gutenberg/tree/trunk/packages/block-library/src/navigation-submenu"
    },
    {
      "text": "Page Break",
      "url": "https://developer.wordpress.org/block-editor/#page-break"
    },
    {
      "text": "Source",
      "url": "https://github.com/WordPress/gutenberg/tree/trunk/packages/block-library/src/nextpage"
    },
    {
      "text": "Page List",
      "url": "https://developer.wordpress.org/block-editor/#page-list"
    },
    {
      "text": "Source",
      "url": "https://github.com/WordPress/gutenberg/tree/trunk/packages/block-library/src/page-list"
    },
    {
      "text": "Page List Item",
      "url": "https://developer.wordpress.org/block-editor/#page-list-item"
    },
    {
      "text": "Source",
      "url": "https://github.com/WordPress/gutenberg/tree/trunk/packages/block-library/src/page-list-item"
    },
    {
      "text": "Source",
      "url": "https://github.com/WordPress/gutenberg/tree/trunk/packages/block-library/src/paragraph"
    },
    {
      "text": "Pattern",
      "url": "https://developer.wordpress.org/block-editor/#pattern"
    },
    {
      "text": "Source",
      "url": "https://github.com/WordPress/gutenberg/tree/trunk/packages/block-library/src/pattern"
    },
    {
      "text": "Post Author",
      "url": "https://developer.wordpress.org/block-editor/#post-author"
    },
    {
      "text": "Source",
      "url": "https://github.com/WordPress/gutenberg/tree/trunk/packages/block-library/src/post-author"
    },
    {
      "text": "Post Author Biography",
      "url": "https://developer.wordpress.org/block-editor/#post-author-biography"
    },
    {
      "text": "Source",
      "url": "https://github.com/WordPress/gutenberg/tree/trunk/packages/block-library/src/post-author-biography"
    },
    {
      "text": "Post Author Name",
      "url": "https://developer.wordpress.org/block-editor/#post-author-name"
    },
    {
      "text": "Source",
      "url": "https://github.com/WordPress/gutenberg/tree/trunk/packages/block-library/src/post-author-name"
    },
    {
      "text": "Post Comment (deprecated)",
      "url": "https://developer.wordpress.org/block-editor/#post-comment-deprecated"
    },
    {
      "text": "Source",
      "url": "https://github.com/WordPress/gutenberg/tree/trunk/packages/block-library/src/post-comment"
    },
    {
      "text": "Post Comments Count",
      "url": "https://developer.wordpress.org/block-editor/#post-comments-count"
    },
    {
      "text": "Source",
      "url": "https://github.com/WordPress/gutenberg/tree/trunk/packages/block-library/src/post-comments-count"
    },
    {
      "text": "Post Comments Form",
      "url": "https://developer.wordpress.org/block-editor/#post-comments-form"
    },
    {
      "text": "Source",
      "url": "https://github.com/WordPress/gutenberg/tree/trunk/packages/block-library/src/post-comments-form"
    },
    {
      "text": "Post Comments Link",
      "url": "https://developer.wordpress.org/block-editor/#post-comments-link"
    },
    {
      "text": "Source",
      "url": "https://github.com/WordPress/gutenberg/tree/trunk/packages/block-library/src/post-comments-link"
    },
    {
      "text": "Post Content",
      "url": "https://developer.wordpress.org/block-editor/#post-content"
    },
    {
      "text": "Source",
      "url": "https://github.com/WordPress/gutenberg/tree/trunk/packages/block-library/src/post-content"
    },
    {
      "text": "Post Date",
      "url": "https://developer.wordpress.org/block-editor/#post-date"
    },
    {
      "text": "Source",
      "url": "https://github.com/WordPress/gutenberg/tree/trunk/packages/block-library/src/post-date"
    },
    {
      "text": "Post Excerpt",
      "url": "https://developer.wordpress.org/block-editor/#post-excerpt"
    },
    {
      "text": "Source",
      "url": "https://github.com/WordPress/gutenberg/tree/trunk/packages/block-library/src/post-excerpt"
    },
    {
      "text": "Post Featured Image",
      "url": "https://developer.wordpress.org/block-editor/#post-featured-image"
    },
    {
      "text": "Source",
      "url": "https://github.com/WordPress/gutenberg/tree/trunk/packages/block-library/src/post-featured-image"
    },
    {
      "text": "Post Navigation Link",
      "url": "https://developer.wordpress.org/block-editor/#post-navigation-link"
    },
    {
      "text": "Source",
      "url": "https://github.com/WordPress/gutenberg/tree/trunk/packages/block-library/src/post-navigation-link"
    },
    {
      "text": "Source",
      "url": "https://github.com/WordPress/gutenberg/tree/trunk/packages/block-library/src/post-template"
    },
    {
      "text": "Post Terms",
      "url": "https://developer.wordpress.org/block-editor/#post-terms"
    },
    {
      "text": "Source",
      "url": "https://github.com/WordPress/gutenberg/tree/trunk/packages/block-library/src/post-terms"
    },
    {
      "text": "Time To Read",
      "url": "https://developer.wordpress.org/block-editor/#time-to-read"
    },
    {
      "text": "Source",
      "url": "https://github.com/WordPress/gutenberg/tree/trunk/packages/block-library/src/post-time-to-read"
    },
    {
      "text": "Post Title",
      "url": "https://developer.wordpress.org/block-editor/#post-title"
    },
    {
      "text": "Source",
      "url": "https://github.com/WordPress/gutenberg/tree/trunk/packages/block-library/src/post-title"
    },
    {
      "text": "Preformatted",
      "url": "https://developer.wordpress.org/block-editor/#preformatted"
    },
    {
      "text": "Source",
      "url": "https://github.com/WordPress/gutenberg/tree/trunk/packages/block-library/src/preformatted"
    },
    {
      "text": "Pullquote",
      "url": "https://developer.wordpress.org/block-editor/#pullquote"
    },
    {
      "text": "Source",
      "url": "https://github.com/WordPress/gutenberg/tree/trunk/packages/block-library/src/pullquote"
    },
    {
      "text": "Query Loop",
      "url": "https://developer.wordpress.org/block-editor/#query-loop"
    },
    {
      "text": "Source",
      "url": "https://github.com/WordPress/gutenberg/tree/trunk/packages/block-library/src/query"
    },
    {
      "text": "No results",
      "url": "https://developer.wordpress.org/block-editor/#no-results"
    },
    {
      "text": "Source",
      "url": "https://github.com/WordPress/gutenberg/tree/trunk/packages/block-library/src/query-no-results"
    },
    {
      "text": "Pagination",
      "url": "https://developer.wordpress.org/block-editor/#pagination"
    },
    {
      "text": "Source",
      "url": "https://github.com/WordPress/gutenberg/tree/trunk/packages/block-library/src/query-pagination"
    },
    {
      "text": "Next Page",
      "url": "https://developer.wordpress.org/block-editor/#next-page"
    },
    {
      "text": "Source",
      "url": "https://github.com/WordPress/gutenberg/tree/trunk/packages/block-library/src/query-pagination-next"
    },
    {
      "text": "Page Numbers",
      "url": "https://developer.wordpress.org/block-editor/#page-numbers"
    },
    {
      "text": "Source",
      "url": "https://github.com/WordPress/gutenberg/tree/trunk/packages/block-library/src/query-pagination-numbers"
    },
    {
      "text": "Previous Page",
      "url": "https://developer.wordpress.org/block-editor/#previous-page"
    },
    {
      "text": "Source",
      "url": "https://github.com/WordPress/gutenberg/tree/trunk/packages/block-library/src/query-pagination-previous"
    },
    {
      "text": "Query Title",
      "url": "https://developer.wordpress.org/block-editor/#query-title"
    },
    {
      "text": "Source",
      "url": "https://github.com/WordPress/gutenberg/tree/trunk/packages/block-library/src/query-title"
    },
    {
      "text": "Quote",
      "url": "https://developer.wordpress.org/block-editor/#quote"
    },
    {
      "text": "Source",
      "url": "https://github.com/WordPress/gutenberg/tree/trunk/packages/block-library/src/quote"
    },
    {
      "text": "Read More",
      "url": "https://developer.wordpress.org/block-editor/#read-more"
    },
    {
      "text": "Source",
      "url": "https://github.com/WordPress/gutenberg/tree/trunk/packages/block-library/src/read-more"
    },
    {
      "text": "RSS",
      "url": "https://developer.wordpress.org/block-editor/#rss"
    },
    {
      "text": "Source",
      "url": "https://github.com/WordPress/gutenberg/tree/trunk/packages/block-library/src/rss"
    },
    {
      "text": "Search",
      "url": "https://developer.wordpress.org/block-editor/#search"
    },
    {
      "text": "Source",
      "url": "https://github.com/WordPress/gutenberg/tree/trunk/packages/block-library/src/search"
    },
    {
      "text": "Separator",
      "url": "https://developer.wordpress.org/block-editor/#separator"
    },
    {
      "text": "Source",
      "url": "https://github.com/WordPress/gutenberg/tree/trunk/packages/block-library/src/separator"
    },
    {
      "text": "Shortcode",
      "url": "https://developer.wordpress.org/block-editor/#shortcode"
    },
    {
      "text": "Source",
      "url": "https://github.com/WordPress/gutenberg/tree/trunk/packages/block-library/src/shortcode"
    },
    {
      "text": "Site Logo",
      "url": "https://developer.wordpress.org/block-editor/#site-logo"
    },
    {
      "text": "Source",
      "url": "https://github.com/WordPress/gutenberg/tree/trunk/packages/block-library/src/site-logo"
    },
    {
      "text": "Site Tagline",
      "url": "https://developer.wordpress.org/block-editor/#site-tagline"
    },
    {
      "text": "Source",
      "url": "https://github.com/WordPress/gutenberg/tree/trunk/packages/block-library/src/site-tagline"
    },
    {
      "text": "Site Title",
      "url": "https://developer.wordpress.org/block-editor/#site-title"
    },
    {
      "text": "Source",
      "url": "https://github.com/WordPress/gutenberg/tree/trunk/packages/block-library/src/site-title"
    },
    {
      "text": "Social Icon",
      "url": "https://developer.wordpress.org/block-editor/#social-icon"
    },
    {
      "text": "Source",
      "url": "https://github.com/WordPress/gutenberg/tree/trunk/packages/block-library/src/social-link"
    },
    {
      "text": "Social Icons",
      "url": "https://developer.wordpress.org/block-editor/#social-icons"
    },
    {
      "text": "Source",
      "url": "https://github.com/WordPress/gutenberg/tree/trunk/packages/block-library/src/social-links"
    },
    {
      "text": "Source",
      "url": "https://github.com/WordPress/gutenberg/tree/trunk/packages/block-library/src/spacer"
    },
    {
      "text": "Table",
      "url": "https://developer.wordpress.org/block-editor/#table"
    },
    {
      "text": "Source",
      "url": "https://github.com/WordPress/gutenberg/tree/trunk/packages/block-library/src/table"
    },
    {
      "text": "Source",
      "url": "https://github.com/WordPress/gutenberg/tree/trunk/packages/block-library/src/table-of-contents"
    },
    {
      "text": "Tag Cloud",
      "url": "https://developer.wordpress.org/block-editor/#tag-cloud"
    },
    {
      "text": "Source",
      "url": "https://github.com/WordPress/gutenberg/tree/trunk/packages/block-library/src/tag-cloud"
    },
    {
      "text": "Template Part",
      "url": "https://developer.wordpress.org/block-editor/#template-part"
    },
    {
      "text": "Source",
      "url": "https://github.com/WordPress/gutenberg/tree/trunk/packages/block-library/src/template-part"
    },
    {
      "text": "Term Description",
      "url": "https://developer.wordpress.org/block-editor/#term-description"
    },
    {
      "text": "Source",
      "url": "https://github.com/WordPress/gutenberg/tree/trunk/packages/block-library/src/term-description"
    },
    {
      "text": "Text Columns (deprecated)",
      "url": "https://developer.wordpress.org/block-editor/#text-columns-deprecated"
    },
    {
      "text": "Source",
      "url": "https://github.com/WordPress/gutenberg/tree/trunk/packages/block-library/src/text-columns"
    },
    {
      "text": "Verse",
      "url": "https://developer.wordpress.org/block-editor/#verse"
    },
    {
      "text": "Source",
      "url": "https://github.com/WordPress/gutenberg/tree/trunk/packages/block-library/src/verse"
    },
    {
      "text": "Video",
      "url": "https://developer.wordpress.org/block-editor/#video"
    },
    {
      "text": "Source",
      "url": "https://github.com/WordPress/gutenberg/tree/trunk/packages/block-library/src/video"
    },
    {
      "text": "Hooks Reference →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/filters/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fblock-api%2Fblock-variations%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/docs/reference-guides/block-api/block-variations.md"
    },
    {
      "text": "experimental BlockVariationPicker",
      "url": "https://github.com/WordPress/gutenberg/blob/HEAD/packages/block-editor/src/components/block-variation-picker/README.md"
    },
    {
      "text": "← Transforms",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/block-api/block-transforms/"
    },
    {
      "text": "Core Blocks Reference →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/core-blocks/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fblock-api%2Fblock-transforms%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/docs/reference-guides/block-api/block-transforms.md"
    },
    {
      "text": "Transform direction: to and from",
      "url": "https://developer.wordpress.org/block-editor/#transform-direction-to-and-from"
    },
    {
      "text": "Transformations Types",
      "url": "https://developer.wordpress.org/block-editor/#transformations-types"
    },
    {
      "text": "WordPress hook",
      "url": "https://codex.wordpress.org/Plugin_API#Hook_to_WordPress"
    },
    {
      "text": "wp-blocks package",
      "url": "https://developer.wordpress.org/block-editor/reference-guide/packages/packages-blocks/#createBlock"
    },
    {
      "text": "Enter",
      "url": "https://developer.wordpress.org/block-editor/#enter"
    },
    {
      "text": "Files",
      "url": "https://developer.wordpress.org/block-editor/#files"
    },
    {
      "text": "Prefix",
      "url": "https://developer.wordpress.org/block-editor/#prefix"
    },
    {
      "text": "Raw",
      "url": "https://developer.wordpress.org/block-editor/#raw"
    },
    {
      "text": "HTML content model",
      "url": "https://html.spec.whatwg.org/multipage/dom.html#content-models"
    },
    {
      "text": "below",
      "url": "https://developer.wordpress.org/block-editor/#schemas-and-content-models"
    },
    {
      "text": "element.matches",
      "url": "https://developer.mozilla.org/en-US/docs/Web/API/Element/matches"
    },
    {
      "text": "Schemas and Content Models",
      "url": "https://developer.wordpress.org/block-editor/#schemas-and-content-models"
    },
    {
      "text": "content model",
      "url": "https://html.spec.whatwg.org/multipage/dom.html#content-models"
    },
    {
      "text": "cleanNodeList from @wordpress/dom",
      "url": "https://github.com/wordpress/gutenberg/blob/trunk/packages/dom/src/dom/clean-node-list.js"
    },
    {
      "text": "complete description of the schema",
      "url": "https://github.com/wordpress/gutenberg/blob/trunk/packages/dom/src/phrasing-content.js"
    },
    {
      "text": "WPShortcodeMatch",
      "url": "https://developer.wordpress.org/block-editor/reference-guide/packages/packages-shortcode/#next"
    },
    {
      "text": "block configuration object",
      "url": "https://developer.wordpress.org/block-editor/block-registration.md"
    },
    {
      "text": "Shortcode API",
      "url": "https://codex.wordpress.org/Shortcode_API"
    },
    {
      "text": "← Templates",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/block-api/block-templates/"
    },
    {
      "text": "Variations →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/block-api/block-variations/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guides%2Fblock-api%2Fblock-styles%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/docs/reference-guides/block-api/block-styles.md"
    },
    {
      "text": "Getting Started with JavaScript tutorial",
      "url": "https://developer.wordpress.org/block-editor/how-to-guides/javascript/"
    },
    {
      "text": "Server-side registration helper",
      "url": "https://developer.wordpress.org/block-editor/#server-side-registration-helper"
    },
    {
      "text": "register_block_style",
      "url": "https://developer.wordpress.org/block-editor/#register_block_style"
    },
    {
      "text": "unregister_block_style",
      "url": "https://developer.wordpress.org/block-editor/#unregister_block_style"
    },
    {
      "text": "← Selectors",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/block-api/block-selectors/"
    },
    {
      "text": "Supports →",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/block-api/block-supports/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Fhow-to-guides%2Fmetabox%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/docs/how-to-guides/metabox.md"
    },
    {
      "text": "the backward compatibility section below",
      "url": "https://developer.wordpress.org/block-editor/#backward-compatibility"
    },
    {
      "text": "Sidebar Tutorial",
      "url": "https://developer.wordpress.org/block-editor/how-to-guides/sidebar-tutorial/plugin-sidebar-0/"
    },
    {
      "text": "Use Blocks to Store Meta",
      "url": "https://developer.wordpress.org/block-editor/#use-blocks-to-store-meta"
    },
    {
      "text": "Getting started with JavaScript tutorial",
      "url": "https://developer.wordpress.org/block-editor/how-to-guides/javascript/"
    },
    {
      "text": "Create Block tutorial",
      "url": "https://developer.wordpress.org/block-editor/getting-started/create-block/"
    },
    {
      "text": "complete meta-block example",
      "url": "https://github.com/WordPress/gutenberg-examples/tree/trunk/blocks-jsx/meta-block"
    },
    {
      "text": "Register Meta Field",
      "url": "https://developer.wordpress.org/block-editor/#step-1-register-meta-field"
    },
    {
      "text": "Add Meta Block",
      "url": "https://developer.wordpress.org/block-editor/#step-2-add-meta-block"
    },
    {
      "text": "Use Post Meta Data",
      "url": "https://developer.wordpress.org/block-editor/#step-3-use-post-meta-data"
    },
    {
      "text": "Finishing Touches",
      "url": "https://developer.wordpress.org/block-editor/#step-4-use-block-templates-optional"
    },
    {
      "text": "Step 1: Register Meta Field",
      "url": "https://developer.wordpress.org/block-editor/#step-1-register-meta-field"
    },
    {
      "text": "Post Metadata",
      "url": "https://developer.wordpress.org/plugins/metadata/managing-post-metadata/"
    },
    {
      "text": "Step 2: Add Meta Block",
      "url": "https://developer.wordpress.org/block-editor/#step-2-add-meta-block"
    },
    {
      "text": "Step 3: Use Post Meta Data",
      "url": "https://developer.wordpress.org/block-editor/#step-3-use-post-meta-data"
    },
    {
      "text": "Use Post Meta in PHP",
      "url": "https://developer.wordpress.org/block-editor/#use-post-meta-in-php"
    },
    {
      "text": "Use Post Meta in Block",
      "url": "https://developer.wordpress.org/block-editor/#use-post-meta-in-block"
    },
    {
      "text": "Step 4: Use Block Templates (optional)",
      "url": "https://developer.wordpress.org/block-editor/#step-4-use-block-templates-optional"
    },
    {
      "text": "block templates",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/block-api/block-templates/"
    },
    {
      "text": "Testing, Converting, and Maintaining Existing Meta Boxes",
      "url": "https://developer.wordpress.org/block-editor/#testing-converting-and-maintaining-existing-meta-boxes"
    },
    {
      "text": "Meta Box Data Collection",
      "url": "https://developer.wordpress.org/block-editor/#meta-box-data-collection"
    },
    {
      "text": "Redux and React Meta Box Management",
      "url": "https://developer.wordpress.org/block-editor/#redux-and-react-meta-box-management"
    },
    {
      "text": "MetaBoxArea Component",
      "url": "https://developer.wordpress.org/block-editor/#metaboxarea-component"
    },
    {
      "text": "Common Compatibility Issues",
      "url": "https://developer.wordpress.org/block-editor/#common-compatibility-issues"
    },
    {
      "text": "← Internationalization",
      "url": "https://developer.wordpress.org/block-editor/how-to-guides/internationalization/"
    },
    {
      "text": "Notices →",
      "url": "https://developer.wordpress.org/block-editor/how-to-guides/notices/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Fhow-to-guides%2Fjavascript%2Fesnext-js%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/docs/how-to-guides/javascript/esnext-js.md"
    },
    {
      "text": "Ecma International",
      "url": "https://en.wikipedia.org/wiki/Ecma_International"
    },
    {
      "text": "ECMAScript",
      "url": "https://en.wikipedia.org/wiki/ECMAScript"
    },
    {
      "text": "Destructuring Assignments",
      "url": "https://developer.wordpress.org/block-editor/#destructuring-assignments"
    },
    {
      "text": "destructuring assignment",
      "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment"
    },
    {
      "text": "Arrow Functions",
      "url": "https://developer.wordpress.org/block-editor/#arrow-functions"
    },
    {
      "text": "import statement",
      "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import"
    },
    {
      "text": "Summary",
      "url": "https://developer.wordpress.org/block-editor/#summary"
    },
    {
      "text": "ES5 vs ES6 with example code",
      "url": "https://medium.com/recraftrelic/es5-vs-es6-with-example-code-9901fa0136fc"
    },
    {
      "text": "Top 10 ES6 Features by Example",
      "url": "https://blog.pragmatists.com/top-10-es6-features-by-example-80ac878794bb"
    },
    {
      "text": "ES6 Syntax and Feature Overview",
      "url": "https://www.taniarascia.com/es6-syntax-and-feature-overview/"
    },
    {
      "text": "← JavaScript Build Setup",
      "url": "https://developer.wordpress.org/block-editor/how-to-guides/javascript/js-build-setup/"
    },
    {
      "text": "Internationalization →",
      "url": "https://developer.wordpress.org/block-editor/how-to-guides/internationalization/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Fhow-to-guides%2Fjavascript%2Fjs-build-setup%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/docs/how-to-guides/javascript/js-build-setup.md"
    },
    {
      "text": "JSX",
      "url": "https://reactjs.org/docs/introducing-jsx.html"
    },
    {
      "text": "ESNext syntax documentation",
      "url": "https://developer.wordpress.org/block-editor/how-to-guides/javascript/esnext-js/"
    },
    {
      "text": "@wordpress/scripts",
      "url": "https://www.npmjs.com/package/@wordpress/scripts"
    },
    {
      "text": "@wordpress/scripts package documentation",
      "url": "https://developer.wordpress.org/block-editor/packages/packages-scripts/"
    },
    {
      "text": "Gutenberg Examples repository",
      "url": "https://github.com/wordpress/gutenberg-examples/"
    },
    {
      "text": "developer environment setup documentation",
      "url": "https://developer.wordpress.org/block-editor/getting-started/devenv/"
    },
    {
      "text": "Node.js download page",
      "url": "https://nodejs.org/en/download/"
    },
    {
      "text": "Node Package Manager (npm)",
      "url": "https://developer.wordpress.org/block-editor/#node-package-manager-npm"
    },
    {
      "text": "Using npm to install packages",
      "url": "https://developer.wordpress.org/block-editor/#using-npm-to-install-packages"
    },
    {
      "text": "npm install documentation",
      "url": "https://docs.npmjs.com/cli/install"
    },
    {
      "text": "Setting Up wp-scripts build",
      "url": "https://developer.wordpress.org/block-editor/#setting-up-wp-scripts-build"
    },
    {
      "text": "loading JavaScript step in this tutorial",
      "url": "https://developer.wordpress.org/block-editor/how-to-guides/javascript/loading-javascript/"
    },
    {
      "text": "Development Mode",
      "url": "https://developer.wordpress.org/block-editor/#development-mode"
    },
    {
      "text": "Source Control",
      "url": "https://developer.wordpress.org/block-editor/#source-control"
    },
    {
      "text": "Dependency Management",
      "url": "https://developer.wordpress.org/block-editor/#dependency-management"
    },
    {
      "text": "ESNext blocks in gutenberg-examples repo",
      "url": "https://github.com/WordPress/gutenberg-examples"
    },
    {
      "text": "← Scope Your Code",
      "url": "https://developer.wordpress.org/block-editor/how-to-guides/javascript/scope-your-code/"
    },
    {
      "text": "ESNext Syntax →",
      "url": "https://developer.wordpress.org/block-editor/how-to-guides/javascript/esnext-js/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Fhow-to-guides%2Fjavascript%2Fscope-your-code%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/docs/how-to-guides/javascript/scope-your-code.md"
    },
    {
      "text": "Scoping Code Within a Function",
      "url": "https://developer.wordpress.org/block-editor/#scoping-code-within-a-function"
    },
    {
      "text": "Automatically Execute Anonymous Functions",
      "url": "https://developer.wordpress.org/block-editor/#automatically-execute-anonymous-functions"
    },
    {
      "text": "Immediately-Invoked Function Expression",
      "url": "http://benalman.com/news/2010/11/immediately-invoked-function-expression/"
    },
    {
      "text": "Future Changes",
      "url": "https://developer.wordpress.org/block-editor/#future-changes"
    },
    {
      "text": "supported by modern browsers",
      "url": "https://caniuse.com/#feat=es6-module"
    },
    {
      "text": "← JavaScript Versions and Build Step",
      "url": "https://developer.wordpress.org/block-editor/how-to-guides/javascript/versions-and-building/"
    },
    {
      "text": "JavaScript Build Setup →",
      "url": "https://developer.wordpress.org/block-editor/how-to-guides/javascript/js-build-setup/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Fhow-to-guides%2Fjavascript%2Fversions-and-building%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/docs/how-to-guides/javascript/versions-and-building.md"
    },
    {
      "text": "target for browser support",
      "url": "https://make.wordpress.org/core/handbook/best-practices/browser-support/"
    },
    {
      "text": "JSX syntax",
      "url": "https://reactjs.org/docs/introducing-jsx.html"
    },
    {
      "text": "JavaScript Build Setup documentation",
      "url": "https://developer.wordpress.org/block-editor/how-to-guides/javascript/js-build-setup/"
    },
    {
      "text": "← Troubleshooting",
      "url": "https://developer.wordpress.org/block-editor/how-to-guides/javascript/troubleshooting/"
    },
    {
      "text": "Scope Your Code →",
      "url": "https://developer.wordpress.org/block-editor/how-to-guides/javascript/scope-your-code/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Fhow-to-guides%2Fjavascript%2Ftroubleshooting%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/docs/how-to-guides/javascript/troubleshooting.md"
    },
    {
      "text": "Console Log",
      "url": "https://developer.wordpress.org/block-editor/#console-log"
    },
    {
      "text": "JavaScript console",
      "url": "https://developer.mozilla.org/en-US/docs/Learn/Common_questions/What_are_browser_developer_tools#The_JavaScript_console"
    },
    {
      "text": "First Step",
      "url": "https://developer.wordpress.org/block-editor/#first-step"
    },
    {
      "text": "Display your message in console log",
      "url": "https://developer.wordpress.org/block-editor/#display-your-message-in-console-log"
    },
    {
      "text": "Using console log",
      "url": "https://developer.wordpress.org/block-editor/#using-console-log"
    },
    {
      "text": "wp.data package",
      "url": "https://developer.wordpress.org/block-editor/reference-guide/packages/packages-data/"
    },
    {
      "text": "Using the debugger statement",
      "url": "https://developer.wordpress.org/block-editor/#using-the-debugger-statement"
    },
    {
      "text": "See this MDN page for more information",
      "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/debugger"
    },
    {
      "text": "Confirm JavaScript is loading",
      "url": "https://developer.wordpress.org/block-editor/#confirm-javascript-is-loading"
    },
    {
      "text": "review the loading JavaScript page",
      "url": "https://developer.wordpress.org/block-editor/how-to-guides/javascript/loading-javascript/"
    },
    {
      "text": "Confirm all dependencies are loading",
      "url": "https://developer.wordpress.org/block-editor/#confirm-all-dependencies-are-loading"
    },
    {
      "text": "use wp-scripts to build step your JavaScript",
      "url": "https://developer.wordpress.org/block-editor/how-to-guides/javascript/js-build-setup/#dependency-management"
    },
    {
      "text": "← Extending the Block Editor",
      "url": "https://developer.wordpress.org/block-editor/how-to-guides/javascript/extending-the-block-editor/"
    },
    {
      "text": "JavaScript Versions and Build Step →",
      "url": "https://developer.wordpress.org/block-editor/how-to-guides/javascript/versions-and-building/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Fhow-to-guides%2Fjavascript%2Fextending-the-block-editor%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/docs/how-to-guides/javascript/extending-the-block-editor.md"
    },
    {
      "text": "Block Style example",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/block-api/block-styles/"
    },
    {
      "text": "Packages",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/"
    },
    {
      "text": "← Loading JavaScript",
      "url": "https://developer.wordpress.org/block-editor/how-to-guides/javascript/loading-javascript/"
    },
    {
      "text": "Troubleshooting →",
      "url": "https://developer.wordpress.org/block-editor/how-to-guides/javascript/troubleshooting/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Fhow-to-guides%2Fjavascript%2Floading-javascript%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/docs/how-to-guides/javascript/loading-javascript.md"
    },
    {
      "text": "enqueuing section of the Plugin Handbook",
      "url": "https://developer.wordpress.org/plugins/javascript/enqueuing/"
    },
    {
      "text": "“What are browser developer tools?”",
      "url": "https://developer.mozilla.org/en-US/docs/Learn/Common_questions/What_are_browser_developer_tools"
    },
    {
      "text": "← Plugins Background",
      "url": "https://developer.wordpress.org/block-editor/how-to-guides/javascript/plugins-background/"
    },
    {
      "text": "Extending the Block Editor →",
      "url": "https://developer.wordpress.org/block-editor/how-to-guides/javascript/extending-the-block-editor/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Fhow-to-guides%2Fjavascript%2Fplugins-background%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/docs/how-to-guides/javascript/plugins-background.md"
    },
    {
      "text": "Plugin Basics",
      "url": "https://developer.wordpress.org/plugins/plugin-basics/"
    },
    {
      "text": "Loading JavaScript →",
      "url": "https://developer.wordpress.org/block-editor/how-to-guides/javascript/loading-javascript/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Fhow-to-guides%2Fjavascript%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/docs/how-to-guides/javascript/README.md"
    },
    {
      "text": "What is JavaScript",
      "url": "https://developer.wordpress.org/block-editor/#what-is-javascript"
    },
    {
      "text": "JavaScript Versions and Building",
      "url": "https://developer.wordpress.org/block-editor/how-to-guides/javascript/versions-and-building/"
    },
    {
      "text": "Scope your code",
      "url": "https://developer.wordpress.org/block-editor/how-to-guides/javascript/scope-your-code/"
    },
    {
      "text": "JavaScript Build Step",
      "url": "https://developer.wordpress.org/block-editor/how-to-guides/javascript/js-build-setup/"
    },
    {
      "text": "← Formatting Toolbar API",
      "url": "https://developer.wordpress.org/block-editor/how-to-guides/format-api/"
    },
    {
      "text": "Plugins Background →",
      "url": "https://developer.wordpress.org/block-editor/how-to-guides/javascript/plugins-background/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Fhow-to-guides%2Fformat-api%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/docs/how-to-guides/format-api.md"
    },
    {
      "text": "HTML tag with text-level semantics",
      "url": "https://www.w3.org/TR/html5/textlevel-semantics.html#text-level-semantics-usage-summary"
    },
    {
      "text": "Plugin Handbook",
      "url": "https://developer.wordpress.org/plugins/"
    },
    {
      "text": "JavaScript Tutorial",
      "url": "https://developer.wordpress.org/block-editor/how-to-guides/javascript/"
    },
    {
      "text": "complete format-api example",
      "url": "https://github.com/WordPress/gutenberg-examples/tree/trunk/non-block-examples/format-api"
    },
    {
      "text": "Step 1: Register a new format",
      "url": "https://developer.wordpress.org/block-editor/#step-1-register-a-new-format"
    },
    {
      "text": "Step 2: Add a button to the toolbar",
      "url": "https://developer.wordpress.org/block-editor/#step-2-add-a-button-to-the-toolbar"
    },
    {
      "text": "Step 3: Apply a format when clicked",
      "url": "https://developer.wordpress.org/block-editor/#step-3-apply-a-format-when-clicked"
    },
    {
      "text": "Step 4: Show the button only for specific blocks (Optional)",
      "url": "https://developer.wordpress.org/block-editor/#step-4-show-the-button-only-for-specific-blocks-optional"
    },
    {
      "text": "the data API",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-data"
    },
    {
      "text": "Step5: Add a button outside of the dropdown (Optional)",
      "url": "https://developer.wordpress.org/block-editor/#step5-add-a-button-outside-of-the-dropdown-optional"
    },
    {
      "text": "Additional Resources",
      "url": "https://developer.wordpress.org/block-editor/#additional-resources"
    },
    {
      "text": "registerFormatType",
      "url": "https://developer.wordpress.org/block-editor/reference-guide/packages/packages-rich-text/#registerformattype"
    },
    {
      "text": "RichTextToolbarButton",
      "url": "https://developer.wordpress.org/block-editor/reference-guide/packages/packages-block-editor/src/components/rich-text/#richtexttoolbarbutton"
    },
    {
      "text": "applyFormat",
      "url": "https://developer.wordpress.org/block-editor/reference-guide/packages/packages-rich-text/#applyformat"
    },
    {
      "text": "removeFormat",
      "url": "https://developer.wordpress.org/block-editor/reference-guide/packages/packages-rich-text/#removeformat"
    },
    {
      "text": "toggleFormat",
      "url": "https://developer.wordpress.org/block-editor/reference-guide/packages/packages-rich-text/#toggleformat"
    },
    {
      "text": "format-api example",
      "url": "https://github.com/WordPress/gutenberg-examples/tree/trunk/non-block-examples/format-api"
    },
    {
      "text": "← Feature Flags",
      "url": "https://developer.wordpress.org/block-editor/how-to-guides/feature-flags/"
    },
    {
      "text": "How to use JavaScript with the Block Editor →",
      "url": "https://developer.wordpress.org/block-editor/how-to-guides/javascript/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Fhow-to-guides%2Ffeature-flags%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/docs/how-to-guides/feature-flags.md"
    },
    {
      "text": "Introducing process.env.IS_GUTENBERG_PLUGIN",
      "url": "https://developer.wordpress.org/block-editor/#introducing-process-env-is_gutenberg_plugin"
    },
    {
      "text": "Basic Use",
      "url": "https://developer.wordpress.org/block-editor/#basic-use"
    },
    {
      "text": "Exporting features",
      "url": "https://developer.wordpress.org/block-editor/#exporting-features"
    },
    {
      "text": "Importing features",
      "url": "https://developer.wordpress.org/block-editor/#importing-features"
    },
    {
      "text": "define plugin",
      "url": "https://webpack.js.org/plugins/define-plugin/"
    },
    {
      "text": "Dead Code Elimination",
      "url": "https://developer.wordpress.org/block-editor/#dead-code-elimination"
    },
    {
      "text": "‘minifies’",
      "url": "https://en.wikipedia.org/wiki/Minification_(programming)"
    },
    {
      "text": "FAQ",
      "url": "https://developer.wordpress.org/block-editor/#faq"
    },
    {
      "text": "Why shouldn’t I assign the result of an expression involving IS_GUTENBERG_PLUGIN to a variable, e.g. const isMyFeatureActive = process.env.IS_GUTENBERG_PLUGIN === 2?",
      "url": "https://developer.wordpress.org/block-editor/#why-shouldnt-i-assign-the-result-of-an-expression-involving-is_gutenberg_plugin-to-a-variable-e-g-const-ismyfeatureactive-process-env-is_gutenberg_plugin-2"
    },
    {
      "text": "← Curating the Editor Experience",
      "url": "https://developer.wordpress.org/block-editor/how-to-guides/curating-the-editor-experience/"
    },
    {
      "text": "Formatting Toolbar API →",
      "url": "https://developer.wordpress.org/block-editor/how-to-guides/format-api/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Fhow-to-guides%2Fcurating-the-editor-experience%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/docs/how-to-guides/curating-the-editor-experience.md"
    },
    {
      "text": "Converting a classic theme to a block theme",
      "url": "https://developer.wordpress.org/themes/block-themes/converting-a-classic-theme-to-a-block-theme/"
    },
    {
      "text": "Locking APIs",
      "url": "https://developer.wordpress.org/block-editor/#locking-apis"
    },
    {
      "text": "Navigation Block",
      "url": "https://github.com/WordPress/gutenberg/pull/44739"
    },
    {
      "text": "Reusable block",
      "url": "https://github.com/WordPress/gutenberg/pull/39950"
    },
    {
      "text": "Here’s an example of a pattern",
      "url": "https://gist.github.com/annezazu/acee30f8b6e8995e1b1a52796e6ef805"
    },
    {
      "text": "creating a template with locked blocks",
      "url": "https://make.wordpress.org/core/2022/02/09/core-editor-improvement-curated-experiences-with-locking-apis-theme-json/"
    },
    {
      "text": "documentation to register them",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/block-api/block-patterns/"
    },
    {
      "text": "Here’s an example of a pattern",
      "url": "https://gist.github.com/annezazu/d62acd2514cea558be6cea97fe28ff3c"
    },
    {
      "text": "review the relevant documentation",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/block-api/block-templates/#locking"
    },
    {
      "text": "permission to lock and unlock blocks",
      "url": "https://make.wordpress.org/core/2022/05/05/block-locking-settings-in-wordpress-6-0/"
    },
    {
      "text": "block_editor_settings_all",
      "url": "https://developer.wordpress.org/reference/hooks/block_editor_settings_all/"
    },
    {
      "text": "WP_Block_Editor_Context",
      "url": "https://developer.wordpress.org/reference/classes/wp_block_editor_context/"
    },
    {
      "text": "Providing default controls/options",
      "url": "https://developer.wordpress.org/block-editor/#providing-default-controls-options"
    },
    {
      "text": "Limiting interface options with theme.json",
      "url": "https://developer.wordpress.org/block-editor/#limiting-interface-options-with-theme-json"
    },
    {
      "text": "turn on/off options with theme.json here",
      "url": "https://developer.wordpress.org/block-editor/how-to-guides/themes/theme-json/"
    },
    {
      "text": "Limiting interface options with theme.json filters",
      "url": "https://developer.wordpress.org/block-editor/#limiting-interface-options-with-theme-json-filters"
    },
    {
      "text": "wp_theme_json_data_default",
      "url": "https://developer.wordpress.org/reference/hooks/wp_theme_json_data_default/"
    },
    {
      "text": "wp_theme_json_data_blocks",
      "url": "https://developer.wordpress.org/reference/hooks/wp_theme_json_data_blocks/"
    },
    {
      "text": "wp_theme_json_data_theme",
      "url": "https://developer.wordpress.org/reference/hooks/wp_theme_json_data_theme/"
    },
    {
      "text": "wp_theme_json_data_user",
      "url": "https://developer.wordpress.org/reference/hooks/wp_theme_json_data_user/"
    },
    {
      "text": "Filters for theme.json data dev note",
      "url": "https://make.wordpress.org/core/2022/10/10/filters-for-theme-json-data/"
    },
    {
      "text": "Remove access to functionality",
      "url": "https://developer.wordpress.org/block-editor/#remove-access-to-functionality"
    },
    {
      "text": "theme.json in a Classic Theme",
      "url": "https://developer.wordpress.org/themes/block-themes/converting-a-classic-theme-to-a-block-theme/#adding-theme-json-in-classic-themes"
    },
    {
      "text": "an allow list",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/filters/block-filters/#using-an-allow-list"
    },
    {
      "text": "deny list that unregisters specific blocks",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/filters/block-filters/#using-a-deny-list"
    },
    {
      "text": "Utilizing patterns",
      "url": "https://developer.wordpress.org/block-editor/#utilizing-patterns"
    },
    {
      "text": "Here’s an example of a pattern",
      "url": "https://gist.github.com/annezazu/ead4c4965345251ec999b716c0c84f32"
    },
    {
      "text": "Page creation patterns in WordPress 6.0 dev note",
      "url": "https://make.wordpress.org/core/2022/05/03/page-creation-patterns-in-wordpress-6-0/"
    },
    {
      "text": "note that WordPress 6.1 brought this functionality to all post types",
      "url": "https://make.wordpress.org/core/2022/10/10/miscellaneous-editor-changes-for-wordpress-6-1/#start-content-patterns-for-all-post-types"
    },
    {
      "text": "following the documentation to register them",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/block-api/block-patterns/"
    },
    {
      "text": "version 2 of theme.json",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/theme-json-reference/theme-json-living/"
    },
    {
      "text": "Combining approaches",
      "url": "https://developer.wordpress.org/block-editor/#combining-approaches"
    },
    {
      "text": "Builder Basics – Working with Templates in Full Site Editing (Part 3)",
      "url": "https://wordpress.tv/2022/05/24/nick-diego-builder-basics-working-with-templates-in-full-site-editing-part-3/"
    },
    {
      "text": "Core Editor Improvement: Curated experiences with locking APIs & theme.json",
      "url": "https://make.wordpress.org/core/2022/02/09/core-editor-improvement-curated-experiences-with-locking-apis-theme-json/"
    },
    {
      "text": "Learn WordPress session on Curating the Editor Experience",
      "url": "https://wordpress.tv/2022/07/22/nick-diego-curating-the-editor-experience/"
    },
    {
      "text": "← Create your First App with Gutenberg Data",
      "url": "https://developer.wordpress.org/block-editor/how-to-guides/data-basics/"
    },
    {
      "text": "Feature Flags →",
      "url": "https://developer.wordpress.org/block-editor/how-to-guides/feature-flags/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Fhow-to-guides%2Fdata-basics%2F5-adding-a-delete-button%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/docs/how-to-guides/data-basics/5-adding-a-delete-button.md"
    },
    {
      "text": "previous part",
      "url": "https://developer.wordpress.org/block-editor/how-to-guides/data-basics/3-building-an-edit-form/"
    },
    {
      "text": "Step 1: Add a Delete button",
      "url": "https://developer.wordpress.org/block-editor/#step-1-add-a-delete-button"
    },
    {
      "text": "Step 2: Wire the button to a delete action",
      "url": "https://developer.wordpress.org/block-editor/#step-2-wire-the-button-to-a-delete-action"
    },
    {
      "text": "Step 3: Add visual feedback",
      "url": "https://developer.wordpress.org/block-editor/#step-3-add-visual-feedback"
    },
    {
      "text": "part 3",
      "url": "https://developer.wordpress.org/block-editor/how-to-guides/data-basics/3-building-an-edit-form/"
    },
    {
      "text": "Step 4: Handle errors",
      "url": "https://developer.wordpress.org/block-editor/#step-4-handle-errors"
    },
    {
      "text": "/v2/pages endpoint’s source code",
      "url": "https://github.com/WordPress/wordpress-develop/blob/2648a5f984b8abf06872151898e3a61d3458a628/src/wp-includes/rest-api/endpoints/class-wp-rest-revisions-controller.php#L226-L230"
    },
    {
      "text": "Displaying notifications",
      "url": "https://developer.wordpress.org/block-editor/#displaying-notifications"
    },
    {
      "text": "component called Snackbar",
      "url": "https://wordpress.github.io/gutenberg/?path=/story/components-snackbar--default"
    },
    {
      "text": "@wordpress/notices",
      "url": "https://github.com/WordPress/gutenberg/blob/895ca1f6a7d7e492974ea55f693aecbeb1d5bbe3/docs/reference-guides/data/data-core-notices.md"
    },
    {
      "text": "handbook page",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/data/data-core-notices/"
    },
    {
      "text": "Dispatching notifications",
      "url": "https://developer.wordpress.org/block-editor/#dispatching-notifications"
    },
    {
      "text": "Wiring it all together",
      "url": "https://developer.wordpress.org/block-editor/#wiring-it-all-together"
    },
    {
      "text": "What’s next?",
      "url": "https://developer.wordpress.org/block-editor/#whats-next"
    },
    {
      "text": "Building a Create page form",
      "url": "https://developer.wordpress.org/block-editor/how-to-guides/data-basics/4-building-a-create-page-form/"
    },
    {
      "text": "finished app",
      "url": "https://github.com/WordPress/gutenberg-examples/tree/trunk/non-block-examples/09-code-data-basics-esnext"
    },
    {
      "text": "← Part 4: Building a Create page form",
      "url": "https://developer.wordpress.org/block-editor/how-to-guides/data-basics/4-building-a-create-page-form/"
    },
    {
      "text": "Curating the Editor Experience →",
      "url": "https://developer.wordpress.org/block-editor/how-to-guides/curating-the-editor-experience/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Fhow-to-guides%2Fdata-basics%2F4-building-a-create-page-form%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/docs/how-to-guides/data-basics/4-building-a-create-page-form.md"
    },
    {
      "text": "Step 1: Add a Create a new page button",
      "url": "https://developer.wordpress.org/block-editor/#step-1-add-a-create-a-new-page-button"
    },
    {
      "text": "Step 2: Extract a controlled PageForm",
      "url": "https://developer.wordpress.org/block-editor/#step-2-extract-a-controlled-pageform"
    },
    {
      "text": "part three",
      "url": "https://developer.wordpress.org/block-editor/how-to-guides/data-basics/3-building-an-edit-form/"
    },
    {
      "text": "Step 3: Build a CreatePageForm",
      "url": "https://developer.wordpress.org/block-editor/#step-3-build-a-createpageform"
    },
    {
      "text": "Title, onChangeTitle, hasEdits",
      "url": "https://developer.wordpress.org/block-editor/#title-onchangetitle-hasedits"
    },
    {
      "text": "onSave, onCancel",
      "url": "https://developer.wordpress.org/block-editor/#onsave-oncancel"
    },
    {
      "text": "saveEntityRecord",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/data/data-core/#saveentityrecord"
    },
    {
      "text": "/wp/v2/pages WordPress REST API",
      "url": "https://developer.wordpress.org/rest-api/reference/pages/"
    },
    {
      "text": "lastError, isSaving",
      "url": "https://developer.wordpress.org/block-editor/#lasterror-issaving"
    },
    {
      "text": "← Building an edit form",
      "url": "https://developer.wordpress.org/block-editor/how-to-guides/data-basics/3-building-an-edit-form/"
    },
    {
      "text": "Adding a delete button →",
      "url": "https://developer.wordpress.org/block-editor/how-to-guides/data-basics/5-adding-a-delete-button/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Fhow-to-guides%2Fdata-basics%2F3-building-an-edit-form%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/docs/how-to-guides/data-basics/3-building-an-edit-form.md"
    },
    {
      "text": "Step 1: Add an Edit button",
      "url": "https://developer.wordpress.org/block-editor/#step-1-add-an-edit-button"
    },
    {
      "text": "Step 2: Display an Edit form",
      "url": "https://developer.wordpress.org/block-editor/#step-2-display-an-edit-form"
    },
    {
      "text": "Step 3: Populate the form with page details",
      "url": "https://developer.wordpress.org/block-editor/#step-3-populate-the-form-with-page-details"
    },
    {
      "text": "getEntityRecord",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/data/data-core/#getentityrecord"
    },
    {
      "text": "Step 4: Making the Page title field editable",
      "url": "https://developer.wordpress.org/block-editor/#step-4-making-the-page-title-field-editable"
    },
    {
      "text": "“controlled component”",
      "url": "https://reactjs.org/docs/forms.html#controlled-components"
    },
    {
      "text": "shortcodes",
      "url": "https://developer.wordpress.org/apis/handbook/shortcode/"
    },
    {
      "text": "Step 5: Saving the form data",
      "url": "https://developer.wordpress.org/block-editor/#step-5-saving-the-form-data"
    },
    {
      "text": "Step 6: Handle errors",
      "url": "https://developer.wordpress.org/block-editor/#step-6-handle-errors"
    },
    {
      "text": "Step 7: Status indicator",
      "url": "https://developer.wordpress.org/block-editor/#step-7-status-indicator"
    },
    {
      "text": "← Building a list of pages",
      "url": "https://developer.wordpress.org/block-editor/how-to-guides/data-basics/2-building-a-list-of-pages/"
    },
    {
      "text": "Part 4: Building a Create page form →",
      "url": "https://developer.wordpress.org/block-editor/how-to-guides/data-basics/4-building-a-create-page-form/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Fhow-to-guides%2Fdata-basics%2F2-building-a-list-of-pages%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/docs/how-to-guides/data-basics/2-building-a-list-of-pages.md"
    },
    {
      "text": "Step 1: Build the PagesList component",
      "url": "https://developer.wordpress.org/block-editor/#step-1-build-the-pageslist-component"
    },
    {
      "text": "Step 2: Fetch the data",
      "url": "https://developer.wordpress.org/block-editor/#step-2-fetch-the-data"
    },
    {
      "text": "WordPress REST API",
      "url": "https://developer.wordpress.org/rest-api/"
    },
    {
      "text": "@wordpress/core-data",
      "url": "https://github.com/WordPress/gutenberg/tree/trunk/packages/core-data"
    },
    {
      "text": "@wordpress/data",
      "url": "https://github.com/WordPress/gutenberg/tree/trunk/packages/data"
    },
    {
      "text": "getEntityRecords",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/data/data-core/#getentityrecords"
    },
    {
      "text": "data module documentation",
      "url": "https://developer.wordpress.org/block-editor/reference-guide/packages/packages-data/#useselect"
    },
    {
      "text": "decodeEntities",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-html-entities/"
    },
    {
      "text": "Step 3: Turn it into a table",
      "url": "https://developer.wordpress.org/block-editor/#step-3-turn-it-into-a-table"
    },
    {
      "text": "Step 4: Add a search box",
      "url": "https://developer.wordpress.org/block-editor/#step-4-add-a-search-box"
    },
    {
      "text": "useState",
      "url": "https://reactjs.org/docs/hooks-state.html"
    },
    {
      "text": "React’s documentation",
      "url": "https://reactjs.org/docs/hooks-state.html"
    },
    {
      "text": "WordPress API documentation",
      "url": "https://developer.wordpress.org/rest-api/reference/pages/"
    },
    {
      "text": "/wp/v2/pages",
      "url": "https://developer.wordpress.org/rest-api/reference/pages/"
    },
    {
      "text": "Using core-data instead vs calling the API directly",
      "url": "https://developer.wordpress.org/block-editor/#using-core-data-instead-vs-calling-the-api-directly"
    },
    {
      "text": "Step 5: Loading Indicator",
      "url": "https://developer.wordpress.org/block-editor/#step-5-loading-indicator"
    },
    {
      "text": "← Setup",
      "url": "https://developer.wordpress.org/block-editor/how-to-guides/data-basics/1-data-basics-setup/"
    },
    {
      "text": "Building an edit form →",
      "url": "https://developer.wordpress.org/block-editor/how-to-guides/data-basics/3-building-an-edit-form/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Fhow-to-guides%2Fdata-basics%2F1-data-basics-setup%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/docs/how-to-guides/data-basics/1-data-basics-setup.md"
    },
    {
      "text": "Getting Started With Redux",
      "url": "https://redux.js.org/introduction/getting-started"
    },
    {
      "text": "Creating a plugin",
      "url": "https://developer.wordpress.org/block-editor/#creating-a-plugin"
    },
    {
      "text": "Setting up the build pipeline",
      "url": "https://developer.wordpress.org/block-editor/#setting-up-the-build-pipeline"
    },
    {
      "text": "Getting started with JavaScript Build Setup",
      "url": "https://developer.wordpress.org/block-editor/how-to-guides/javascript/js-build-setup/"
    },
    {
      "text": "Testing if it worked",
      "url": "https://developer.wordpress.org/block-editor/#testing-if-it-worked"
    },
    {
      "text": "Introduction",
      "url": "https://developer.wordpress.org/block-editor/how-to-guides/data-basics/"
    },
    {
      "text": "Building a basic list of pages",
      "url": "https://developer.wordpress.org/block-editor/how-to-guides/data-basics/2-building-a-list-of-pages/"
    },
    {
      "text": "Building a list of pages →",
      "url": "https://developer.wordpress.org/block-editor/how-to-guides/data-basics/2-building-a-list-of-pages/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Fhow-to-guides%2Fdata-basics%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/docs/how-to-guides/data-basics/README.md"
    },
    {
      "text": "Building a create page form",
      "url": "https://developer.wordpress.org/block-editor/how-to-guides/data-basics/4-building-a-create-page-form/"
    },
    {
      "text": "← Development Platform",
      "url": "https://developer.wordpress.org/block-editor/how-to-guides/platform/"
    },
    {
      "text": "Setup →",
      "url": "https://developer.wordpress.org/block-editor/how-to-guides/data-basics/1-data-basics-setup/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Fblock-registration.md&locale=en_US"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Fhow-to-guides%2Fplatform%2Fcustom-block-editor%2Ftutorial%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/docs/how-to-guides/platform/custom-block-editor/tutorial.md"
    },
    {
      "text": "Introduction",
      "url": "https://developer.wordpress.org/block-editor/#introduction"
    },
    {
      "text": "What we’re going to be building",
      "url": "https://developer.wordpress.org/block-editor/#what-were-going-to-be-building"
    },
    {
      "text": "Plugin setup and organization",
      "url": "https://developer.wordpress.org/block-editor/#plugin-setup-and-organization"
    },
    {
      "text": "The “Core” of the Editor",
      "url": "https://developer.wordpress.org/block-editor/#the-core-of-the-editor"
    },
    {
      "text": "Creating the custom “Block Editor” page in WP Admin",
      "url": "https://developer.wordpress.org/block-editor/#creating-the-custom-block-editor-page-in-wp-admin"
    },
    {
      "text": "Registering and Rendering our custom block editor",
      "url": "https://developer.wordpress.org/block-editor/#registering-and-rendering-our-custom-block-editor"
    },
    {
      "text": "Reviewing the <Editor> component",
      "url": "https://developer.wordpress.org/block-editor/#reviewing-the-editor-component"
    },
    {
      "text": "The custom <BlockEditor>",
      "url": "https://developer.wordpress.org/block-editor/#the-custom-blockeditor"
    },
    {
      "text": "Reviewing the Sidebar",
      "url": "https://developer.wordpress.org/block-editor/#reviewing-the-sidebar"
    },
    {
      "text": "Block Persistence",
      "url": "https://developer.wordpress.org/block-editor/#block-persistence"
    },
    {
      "text": "Wrapping up",
      "url": "https://developer.wordpress.org/block-editor/#wrapping-up"
    },
    {
      "text": "skip ahead",
      "url": "https://developer.wordpress.org/block-editor/#registering-and-rendering-our-custom-block-editor"
    },
    {
      "text": "Registering the Page",
      "url": "https://developer.wordpress.org/block-editor/#registering-the-page"
    },
    {
      "text": "register our custom admin page",
      "url": "https://developer.wordpress.org/reference/functions/add_menu_page/"
    },
    {
      "text": "Adding the target HTML",
      "url": "https://developer.wordpress.org/block-editor/#adding-the-target-html"
    },
    {
      "text": "Enqueuing JavaScript and CSS",
      "url": "https://developer.wordpress.org/block-editor/#enqueuing-javascript-and-css"
    },
    {
      "text": "review these here",
      "url": "https://github.com/getdave/standalone-block-editor/blob/974a59dcbc539a0595e8fa34670e75ec541853ab/init.php#L19"
    },
    {
      "text": "ensure that WordPress provided scripts are not included in the built\nbundle",
      "url": "https://developer.wordpress.org/block-editor/packages/packages-scripts/#default-webpack-config"
    },
    {
      "text": "Inlining the editor settings",
      "url": "https://developer.wordpress.org/block-editor/#inlining-the-editor-settings"
    },
    {
      "text": "accepts a settings object to configure the default settings for the editor",
      "url": "https://github.com/WordPress/gutenberg/tree/4c472c3443513d070a50ba1e96f3a476861447b3/packages/block-editor#SETTINGS_DEFAULTS"
    },
    {
      "text": "inline the settings object as JSON",
      "url": "https://github.com/getdave/standalone-block-editor/blob/974a59dcbc539a0595e8fa34670e75ec541853ab/init.php#L48"
    },
    {
      "text": "extending the default @wordpress/scripts Webpack config",
      "url": "https://github.com/getdave/standalone-block-editor/blob/974a59dcbc539a0595e8fa34670e75ec541853ab/webpack.config.js#L13"
    },
    {
      "text": "the Edit Site package in Gutenberg Core for an example of this",
      "url": "https://href.li/?https://github.com/WordPress/gutenberg/blob/c6821d7e64a54eb322583a35daedc6c192ece850/lib/edit-site-page.php#L135"
    },
    {
      "text": "Dependencies",
      "url": "https://developer.wordpress.org/block-editor/#dependencies"
    },
    {
      "text": "Editor Render",
      "url": "https://developer.wordpress.org/block-editor/#editor-render"
    },
    {
      "text": "context providers",
      "url": "https://reactjs.org/docs/context.html#contextprovider"
    },
    {
      "text": "“Slot/Fill”\npattern",
      "url": "https://developer.wordpress.org/docs/reference-guides/slotfills/README.md"
    },
    {
      "text": "dropzones for drag and drop functionality",
      "url": "https://github.com/WordPress/gutenberg/tree/e38dbe958c04d8089695eb686d4f5caff2707505/packages/components/src/drop-zone"
    },
    {
      "text": "Keyboard Navigation",
      "url": "https://developer.wordpress.org/block-editor/#keyboard-navigation"
    },
    {
      "text": "the navigateRegions HOC",
      "url": "https://github.com/WordPress/gutenberg/tree/e38dbe958c04d8089695eb686d4f5caff2707505/packages/components/src/higher-order/navigate-regions"
    },
    {
      "text": "Understanding the render",
      "url": "https://developer.wordpress.org/block-editor/#understanding-the-render"
    },
    {
      "text": "Understanding the <BlockEditorProvider> component",
      "url": "https://developer.wordpress.org/block-editor/#understanding-the-blockeditorprovider-component"
    },
    {
      "text": "<BlockEditorProvider>",
      "url": "https://github.com/WordPress/gutenberg/tree/e38dbe958c04d8089695eb686d4f5caff2707505/packages/block-editor/src/components/provider"
    },
    {
      "text": "BlockEditor props",
      "url": "https://developer.wordpress.org/block-editor/#blockeditor-props"
    },
    {
      "text": "withRegistryProvider HOC",
      "url": "https://github.com/WordPress/gutenberg/blob/e38dbe958c04d8089695eb686d4f5caff2707505/packages/block-editor/src/components/provider/index.js#L158"
    },
    {
      "text": "fired when block updates are considered\n“committed”",
      "url": "https://github.com/WordPress/gutenberg/tree/HEAD/packages/block-editor/src/components/provider#onchange"
    },
    {
      "text": "much more",
      "url": "https://github.com/WordPress/gutenberg/tree/4c472c3443513d070a50ba1e96f3a476861447b3/packages/block-editor#SETTINGS_DEFAULTS"
    },
    {
      "text": "Understanding the <BlockList> component",
      "url": "https://developer.wordpress.org/block-editor/#understanding-the-blocklist-component"
    },
    {
      "text": "<BlockList>",
      "url": "https://github.com/WordPress/gutenberg/blob/e38dbe958c04d8089695eb686d4f5caff2707505/packages/block-editor/src/components/block-list/index.js"
    },
    {
      "text": "How does BlockList work?",
      "url": "https://developer.wordpress.org/block-editor/#how-does-blocklist-work"
    },
    {
      "text": "<BlockListBlock />",
      "url": "https://github.com/WordPress/gutenberg/blob/e38dbe958c04d8089695eb686d4f5caff2707505/packages/block-editor/src/components/block-list/block.js"
    },
    {
      "text": "<BlockEdit>",
      "url": "https://github.com/WordPress/gutenberg/blob/def076809d25e2ad680beda8b9205ab9dea45a0f/packages/block-editor/src/components/block-edit/index.js"
    },
    {
      "text": "the Block itself",
      "url": "https://github.com/WordPress/gutenberg/blob/def076809d25e2ad680beda8b9205ab9dea45a0f/packages/block-editor/src/components/block-edit/edit.js"
    },
    {
      "text": "Utility components in our custom block editor",
      "url": "https://developer.wordpress.org/block-editor/#utility-components-in-our-custom-block-editor"
    },
    {
      "text": "<BlockEditorKeyboardShortcuts />",
      "url": "https://github.com/WordPress/gutenberg/blob/e38dbe958c04d8089695eb686d4f5caff2707505/packages/block-editor/src/components/keyboard-shortcuts/index.js"
    },
    {
      "text": "<WritingFlow>",
      "url": "https://github.com/WordPress/gutenberg/blob/e38dbe958c04d8089695eb686d4f5caff2707505/packages/block-editor/src/components/writing-flow/index.js"
    },
    {
      "text": "<ObserveTyping>",
      "url": "https://github.com/WordPress/gutenberg/tree/e38dbe958c04d8089695eb686d4f5caff2707505/packages/block-editor/src/components/observe-typing"
    },
    {
      "text": "<BlockInspector>",
      "url": "https://github.com/WordPress/gutenberg/blob/def076809d25e2ad680beda8b9205ab9dea45a0f/packages/block-editor/src/components/block-inspector/index.js"
    },
    {
      "text": "<InspectorControls>",
      "url": "https://github.com/WordPress/gutenberg/tree/HEAD/packages/block-editor/src/components/inspector-controls"
    },
    {
      "text": "render a <InspectorControls> component inside\nthe edit() definition for your block",
      "url": "https://github.com/WordPress/gutenberg/blob/def076809d25e2ad680beda8b9205ab9dea45a0f/packages/block-library/src/paragraph/edit.js#L127"
    },
    {
      "text": "Storing blocks in state",
      "url": "https://developer.wordpress.org/block-editor/#storing-blocks-in-state"
    },
    {
      "text": "Saving Block data",
      "url": "https://developer.wordpress.org/block-editor/#saving-block-data"
    },
    {
      "text": "Gutenberg “Block Grammar”",
      "url": "https://developer.wordpress.org/block-editor/principles/key-concepts/#blocks"
    },
    {
      "text": "Retrieving previous block data",
      "url": "https://developer.wordpress.org/block-editor/#retrieving-previous-block-data"
    },
    {
      "text": "available on GitHub",
      "url": "https://github.com/getdave/standalone-block-editor"
    },
    {
      "text": "← Building a custom block editor",
      "url": "https://developer.wordpress.org/block-editor/how-to-guides/platform/custom-block-editor/"
    },
    {
      "text": "Create your First App with Gutenberg Data →",
      "url": "https://developer.wordpress.org/block-editor/how-to-guides/data-basics/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Fhow-to-guides%2Fplatform%2Fcustom-block-editor%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/docs/how-to-guides/platform/custom-block-editor/README.md"
    },
    {
      "text": "this tutorial",
      "url": "https://developer.wordpress.org/block-editor/how-to-guides/platform/custom-block-editor/tutorial/"
    },
    {
      "text": "@wordpress/block-editor",
      "url": "https://developer.wordpress.org/block-editor/reference-guide/packages/packages-block-editor/"
    },
    {
      "text": "Following this tutorial",
      "url": "https://developer.wordpress.org/block-editor/#following-this-tutorial"
    },
    {
      "text": "download the accompanying WordPress plugin",
      "url": "https://github.com/getdave/standalone-block-editor"
    },
    {
      "text": "Code Syntax",
      "url": "https://developer.wordpress.org/block-editor/#code-syntax"
    },
    {
      "text": "Start custom block editor tutorial",
      "url": "https://developer.wordpress.org/block-editor/how-to-guides/platform/custom-block-editor/tutorial/"
    },
    {
      "text": "Tutorial: building a custom block editor →",
      "url": "https://developer.wordpress.org/block-editor/how-to-guides/platform/custom-block-editor/tutorial/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Fhow-to-guides%2Fplatform%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/docs/how-to-guides/platform/README.md"
    },
    {
      "text": "View the list of packages available on npm",
      "url": "https://www.npmjs.com/org/wordpress"
    },
    {
      "text": "UI Components",
      "url": "https://developer.wordpress.org/block-editor/#ui-components"
    },
    {
      "text": "WordPress Components package",
      "url": "https://developer.wordpress.org/block-editor/reference-guide/components/"
    },
    {
      "text": "WordPress Storybook site",
      "url": "https://wordpress.github.io/gutenberg/"
    },
    {
      "text": "Development Scripts",
      "url": "https://developer.wordpress.org/block-editor/#development-scripts"
    },
    {
      "text": "@wordpress/scripts package",
      "url": "https://developer.wordpress.org/block-editor/reference-guide/packages/packages-scripts/"
    },
    {
      "text": "Getting Started with JavaScript tutorial",
      "url": "https://developer.wordpress.org/block-editor/how-to-guides/javascript/js-build-setup/"
    },
    {
      "text": "@wordpress/block-editor package",
      "url": "https://developer.wordpress.org/block-editor/packages/packages-block-editor/"
    },
    {
      "text": "tutorial “Building a custom block editor”",
      "url": "https://developer.wordpress.org/block-editor/how-to-guides/platform/custom-block-editor/"
    },
    {
      "text": "← Blocks",
      "url": "https://developer.wordpress.org/block-editor/how-to-guides/block-tutorial/"
    },
    {
      "text": "Building a custom block editor →",
      "url": "https://developer.wordpress.org/block-editor/how-to-guides/platform/custom-block-editor/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Fhow-to-guides%2Fblock-tutorial%2Fextending-the-query-loop-block%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/docs/how-to-guides/block-tutorial/extending-the-query-loop-block.md"
    },
    {
      "text": "Extending the block with variations",
      "url": "https://developer.wordpress.org/block-editor/#extending-the-block-with-variations"
    },
    {
      "text": "here",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/block-api/block-variations/"
    },
    {
      "text": "custom post type",
      "url": "https://developer.wordpress.org/plugins/post-types/"
    },
    {
      "text": "Offer sensible defaults",
      "url": "https://developer.wordpress.org/block-editor/#offer-sensible-defaults"
    },
    {
      "text": "Customize your variation layout",
      "url": "https://developer.wordpress.org/block-editor/#customize-your-variation-layout"
    },
    {
      "text": "here",
      "url": "https://github.com/WordPress/gutenberg/blob/HEAD/packages/block-editor/src/components/block-variation-picker/README.md"
    },
    {
      "text": "see here",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/block-api/block-patterns/"
    },
    {
      "text": "Making Gutenberg recognize your variation",
      "url": "https://developer.wordpress.org/block-editor/#making-gutenberg-recognize-your-variation"
    },
    {
      "text": "Extending the query",
      "url": "https://developer.wordpress.org/block-editor/#extending-the-query"
    },
    {
      "text": "Disabling irrelevant or unsupported query controls",
      "url": "https://developer.wordpress.org/block-editor/#disabling-irrelevant-or-unsupported-query-controls"
    },
    {
      "text": "Adding additional controls",
      "url": "https://developer.wordpress.org/block-editor/#adding-additional-controls"
    },
    {
      "text": "React HOC",
      "url": "https://reactjs.org/docs/higher-order-components.html"
    },
    {
      "text": "block filter",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/filters/block-filters/"
    },
    {
      "text": "@wordpress/components",
      "url": "https://www.npmjs.com/package/@wordpress/components"
    },
    {
      "text": "Making your custom query work on the front-end side",
      "url": "https://developer.wordpress.org/block-editor/#making-your-custom-query-work-on-the-front-end-side"
    },
    {
      "text": "query_loop_block_query_vars",
      "url": "https://developer.wordpress.org/reference/hooks/query_loop_block_query_vars/"
    },
    {
      "text": "pre_render_block",
      "url": "https://developer.wordpress.org/reference/hooks/pre_render_block/"
    },
    {
      "text": "Making your custom query work on the editor side",
      "url": "https://developer.wordpress.org/block-editor/#making-your-custom-query-work-on-the-editor-side"
    },
    {
      "text": "rest_{$this->post_type}_query",
      "url": "https://developer.wordpress.org/reference/hooks/rest_this-post_type_query/"
    },
    {
      "text": "← Nested Blocks: Using InnerBlocks",
      "url": "https://developer.wordpress.org/block-editor/how-to-guides/block-tutorial/nested-blocks-inner-blocks/"
    },
    {
      "text": "Development Platform →",
      "url": "https://developer.wordpress.org/block-editor/how-to-guides/platform/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Fhow-to-guides%2Fblock-tutorial%2Fgenerate-blocks-with-wp-cli%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/docs/how-to-guides/block-tutorial/generate-blocks-with-wp-cli.md"
    },
    {
      "text": "@wordpress/create-block",
      "url": "https://developer.wordpress.org/block-editor/designers-developers/developers/packages/packages-create-block/"
    },
    {
      "text": "Create a Block tutorial",
      "url": "https://developer.wordpress.org/block-editor/getting-started/create-block/"
    },
    {
      "text": "← Block Supports in dynamic blocks",
      "url": "https://developer.wordpress.org/block-editor/how-to-guides/block-tutorial/block-supports-in-dynamic-blocks/"
    },
    {
      "text": "Nested Blocks: Using InnerBlocks →",
      "url": "https://developer.wordpress.org/block-editor/how-to-guides/block-tutorial/nested-blocks-inner-blocks/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Fhow-to-guides%2Fblock-tutorial%2Fblock-supports-in-dynamic-blocks%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/docs/how-to-guides/block-tutorial/block-supports-in-dynamic-blocks.md"
    },
    {
      "text": "here",
      "url": "https://developer.wordpress.org/block-editor/how-to-guides/block-tutorial/creating-dynamic-blocks/"
    },
    {
      "text": "Without using block supports",
      "url": "https://developer.wordpress.org/block-editor/#without-using-block-supports"
    },
    {
      "text": "With block supports",
      "url": "https://developer.wordpress.org/block-editor/#with-block-supports"
    },
    {
      "text": "← Creating dynamic blocks",
      "url": "https://developer.wordpress.org/block-editor/how-to-guides/block-tutorial/creating-dynamic-blocks/"
    },
    {
      "text": "Generate Blocks with WP-CLI →",
      "url": "https://developer.wordpress.org/block-editor/how-to-guides/block-tutorial/generate-blocks-with-wp-cli/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Fhow-to-guides%2Fblock-tutorial%2Fcreating-dynamic-blocks%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/docs/how-to-guides/block-tutorial/creating-dynamic-blocks.md"
    },
    {
      "text": "validation process",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/block-api/block-edit-save/#validation"
    },
    {
      "text": "InnerBlocks",
      "url": "https://developer.wordpress.org/block-editor/how-to-guides/block-tutorial/nested-blocks-inner-blocks/"
    },
    {
      "text": "next chapter",
      "url": "https://developer.wordpress.org/block-editor/how-to-guides/block-tutorial/block-supports-in-dynamic-blocks/"
    },
    {
      "text": "<ServerSideRender>",
      "url": "https://developer.wordpress.org/block-editor/reference-guide/packages/packages-server-side-render/"
    },
    {
      "text": "gutenberg-examples repo",
      "url": "https://github.com/WordPress/gutenberg-examples/tree/trunk/blocks-jsx/01-basic-esnext"
    },
    {
      "text": "← Block Supports",
      "url": "https://developer.wordpress.org/block-editor/how-to-guides/block-tutorial/block-supports-in-static-blocks/"
    },
    {
      "text": "Block Supports in dynamic blocks →",
      "url": "https://developer.wordpress.org/block-editor/how-to-guides/block-tutorial/block-supports-in-dynamic-blocks/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Fhow-to-guides%2Fblock-tutorial%2Fblock-supports-in-static-blocks%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/docs/how-to-guides/block-tutorial/block-supports-in-static-blocks.md"
    },
    {
      "text": "← Block Controls: Block Toolbar and Settings Sidebar",
      "url": "https://developer.wordpress.org/block-editor/how-to-guides/block-tutorial/block-controls-toolbar-and-sidebar/"
    },
    {
      "text": "Creating dynamic blocks →",
      "url": "https://developer.wordpress.org/block-editor/how-to-guides/block-tutorial/creating-dynamic-blocks/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Fhow-to-guides%2Fblock-tutorial%2Fblock-controls-toolbar-and-sidebar%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/docs/how-to-guides/block-tutorial/block-controls-toolbar-and-sidebar.md"
    },
    {
      "text": "next chapter",
      "url": "https://developer.wordpress.org/block-editor/how-to-guides/block-tutorial/block-supports-in-static-blocks/"
    },
    {
      "text": "← Introducing Attributes and Editable Fields",
      "url": "https://developer.wordpress.org/block-editor/how-to-guides/block-tutorial/introducing-attributes-and-editable-fields/"
    },
    {
      "text": "Block Supports →",
      "url": "https://developer.wordpress.org/block-editor/how-to-guides/block-tutorial/block-supports-in-static-blocks/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Fhow-to-guides%2Fblock-tutorial%2Fintroducing-attributes-and-editable-fields%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/docs/how-to-guides/block-tutorial/introducing-attributes-and-editable-fields.md"
    },
    {
      "text": "source function",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/block-api/block-attributes/"
    },
    {
      "text": "Components and the RichText Component",
      "url": "https://developer.wordpress.org/block-editor/#components-and-the-richtext-component"
    },
    {
      "text": "components available",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-editor/#components"
    },
    {
      "text": "RichText component",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/richtext/"
    },
    {
      "text": "← Use styles and stylesheets",
      "url": "https://developer.wordpress.org/block-editor/how-to-guides/block-tutorial/applying-styles-with-stylesheets/"
    },
    {
      "text": "Block Controls: Block Toolbar and Settings Sidebar →",
      "url": "https://developer.wordpress.org/block-editor/how-to-guides/block-tutorial/block-controls-toolbar-and-sidebar/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Fhow-to-guides%2Fblock-tutorial%2Fapplying-styles-with-stylesheets%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/docs/how-to-guides/block-tutorial/applying-styles-with-stylesheets.md"
    },
    {
      "text": "create a basic block",
      "url": "https://developer.wordpress.org/block-editor/how-to-guides/block-tutorial/writing-your-first-block-type/"
    },
    {
      "text": "block tutorial",
      "url": "https://developer.wordpress.org/block-editor/getting-started/create-block/"
    },
    {
      "text": "Methods to add style",
      "url": "https://developer.wordpress.org/block-editor/#methods-to-add-style"
    },
    {
      "text": "Method 1: Inline style",
      "url": "https://developer.wordpress.org/block-editor/#method-1-inline-style"
    },
    {
      "text": "Method 2: Block classname",
      "url": "https://developer.wordpress.org/block-editor/#method-2-block-classname"
    },
    {
      "text": "Build or add dependency",
      "url": "https://developer.wordpress.org/block-editor/#build-or-add-dependency"
    },
    {
      "text": "Enqueue stylesheets",
      "url": "https://developer.wordpress.org/block-editor/#enqueue-stylesheets"
    },
    {
      "text": "block wrapper reference documentation",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/block-api/block-edit-save/#block-wrapper-props"
    },
    {
      "text": "example-02-stylesheets",
      "url": "https://github.com/WordPress/gutenberg-examples/tree/trunk/blocks-non-jsx/02-stylesheets"
    },
    {
      "text": "gutenberg-examples repository",
      "url": "https://github.com/WordPress/gutenberg-examples"
    },
    {
      "text": "← Create a basic block",
      "url": "https://developer.wordpress.org/block-editor/how-to-guides/block-tutorial/writing-your-first-block-type/"
    },
    {
      "text": "Introducing Attributes and Editable Fields →",
      "url": "https://developer.wordpress.org/block-editor/how-to-guides/block-tutorial/introducing-attributes-and-editable-fields/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Freference-guide%2Fpackages%2Fpackages-block-editor%2Fsrc%2Fcomponents%2Frich-text%2F&locale=en_US"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Fhow-to-guides%2Fblock-tutorial%2Fwriting-your-first-block-type%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/docs/how-to-guides/block-tutorial/writing-your-first-block-type.md"
    },
    {
      "text": "dynamic blocks guide",
      "url": "https://developer.wordpress.org/block-editor/how-to-guides/block-tutorial/creating-dynamic-blocks/"
    },
    {
      "text": "Getting Started with JavaScript",
      "url": "https://developer.wordpress.org/block-editor/how-to-guides/javascript/"
    },
    {
      "text": "setup guide",
      "url": "https://developer.wordpress.org/block-editor/getting-started/devenv/"
    },
    {
      "text": "Step 1: Configure block.json",
      "url": "https://developer.wordpress.org/block-editor/#step-1-configure-block-json"
    },
    {
      "text": "Step 2: Register block in plugin",
      "url": "https://developer.wordpress.org/block-editor/#step-2-register-block-in-plugin"
    },
    {
      "text": "Step 3: Block edit and save functions",
      "url": "https://developer.wordpress.org/block-editor/#step-3-block-edit-and-save-functions"
    },
    {
      "text": "Step 4: Build or add dependency",
      "url": "https://developer.wordpress.org/block-editor/#step-4-build-or-add-dependency"
    },
    {
      "text": "Step 5: Confirm",
      "url": "https://developer.wordpress.org/block-editor/#step-5-confirm"
    },
    {
      "text": "Basic Example with JSX build",
      "url": "https://github.com/WordPress/gutenberg-examples/tree/trunk/blocks-jsx/01-basic-esnext"
    },
    {
      "text": "Basic Example Plain JavaScript",
      "url": "https://github.com/WordPress/gutenberg-examples/tree/trunk/blocks-non-jsx/01-basic"
    },
    {
      "text": "Additional",
      "url": "https://developer.wordpress.org/block-editor/#additional"
    },
    {
      "text": "metadata reference",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/block-api/block-metadata/"
    },
    {
      "text": "edit and save function reference",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/block-api/block-edit-save/"
    },
    {
      "text": "Dashicons icon set",
      "url": "https://developer.wordpress.org/resource/dashicons/"
    },
    {
      "text": "Use styles and stylesheets →",
      "url": "https://developer.wordpress.org/block-editor/how-to-guides/block-tutorial/applying-styles-with-stylesheets/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Fhow-to-guides%2Fblock-tutorial%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/docs/how-to-guides/block-tutorial/README.md"
    },
    {
      "text": "accompanying WordPress plugin",
      "url": "https://github.com/WordPress/gutenberg-examples"
    },
    {
      "text": "releases page",
      "url": "https://github.com/WordPress/gutenberg-examples/releases"
    },
    {
      "text": "the JavaScript build step",
      "url": "https://developer.wordpress.org/block-editor/how-to-guides/javascript/js-build-setup/"
    },
    {
      "text": "← Accessibility",
      "url": "https://developer.wordpress.org/block-editor/how-to-guides/accessibility/"
    },
    {
      "text": "Create a basic block →",
      "url": "https://developer.wordpress.org/block-editor/how-to-guides/block-tutorial/writing-your-first-block-type/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Fhow-to-guides%2Faccessibility%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/docs/how-to-guides/accessibility.md"
    },
    {
      "text": "Make WordPress Accessibility Handbook",
      "url": "https://make.wordpress.org/accessibility/handbook/"
    },
    {
      "text": "Accessibility Team section",
      "url": "https://make.wordpress.org/accessibility/"
    },
    {
      "text": "navigateRegions package",
      "url": "https://developer.wordpress.org/block-editor/reference-guide/components/higher-order/navigate-regions/"
    },
    {
      "text": "General Principles of Landmark Design",
      "url": "https://www.w3.org/WAI/ARIA/apg/practices/landmark-regions/#x4-2-general-principles-of-landmark-design"
    },
    {
      "text": "ARIA Landmarks Examples",
      "url": "https://www.w3.org/WAI/ARIA/apg/example-index/landmarks/"
    },
    {
      "text": "HTML5 elements that by default define ARIA landmarks",
      "url": "https://www.w3.org/WAI/ARIA/apg/practices/landmark-regions/#x4-1-html-sectioning-elements"
    },
    {
      "text": "Blocks →",
      "url": "https://developer.wordpress.org/block-editor/how-to-guides/block-tutorial/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Fhow-to-guides%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/docs/how-to-guides/README.md"
    },
    {
      "text": "Creating Blocks",
      "url": "https://developer.wordpress.org/block-editor/#creating-blocks"
    },
    {
      "text": "Dynamic Blocks",
      "url": "https://developer.wordpress.org/block-editor/how-to-guides/block-tutorial/creating-dynamic-blocks/"
    },
    {
      "text": "Extending Blocks",
      "url": "https://developer.wordpress.org/block-editor/#extending-blocks"
    },
    {
      "text": "Block Filters",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/filters/block-filters/"
    },
    {
      "text": "Extending the Editor UI",
      "url": "https://developer.wordpress.org/block-editor/#extending-the-editor-ui"
    },
    {
      "text": "Editor Filters",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/filters/editor-filters/"
    },
    {
      "text": "Meta Boxes",
      "url": "https://developer.wordpress.org/block-editor/#meta-boxes"
    },
    {
      "text": "meta box",
      "url": "https://developer.wordpress.org/block-editor/how-to-guides/metabox/"
    },
    {
      "text": "sidebar plugin",
      "url": "https://developer.wordpress.org/block-editor/how-to-guides/plugin-sidebar-0/"
    },
    {
      "text": "Theme Support",
      "url": "https://developer.wordpress.org/block-editor/#theme-support"
    },
    {
      "text": "theme support",
      "url": "https://developer.wordpress.org/block-editor/how-to-guides/themes/theme-support/"
    },
    {
      "text": "how to filter global styles",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/filters/global-styles-filters/"
    },
    {
      "text": "autocomplete",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/filters/autocomplete-filters/"
    },
    {
      "text": "Block Parsing and Serialization",
      "url": "https://developer.wordpress.org/block-editor/#block-parsing-and-serialization"
    },
    {
      "text": "Extending the Parser",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/filters/parser-filters/"
    },
    {
      "text": "← Getting Started",
      "url": "https://developer.wordpress.org/block-editor/getting-started/"
    },
    {
      "text": "Accessibility →",
      "url": "https://developer.wordpress.org/block-editor/how-to-guides/accessibility/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Fgetting-started%2Foutreach%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/docs/getting-started/outreach.md"
    },
    {
      "text": "#core-editor slack channel",
      "url": "https://make.wordpress.org/chat/"
    },
    {
      "text": "Articles",
      "url": "https://developer.wordpress.org/block-editor/#articles"
    },
    {
      "text": "Overviews of Gutenberg",
      "url": "https://developer.wordpress.org/block-editor/#overviews-of-gutenberg"
    },
    {
      "text": "Status Check: Site Editing & Customization",
      "url": "https://make.wordpress.org/core/2020/12/10/status-check-site-editing-and-customization/"
    },
    {
      "text": "Embrace the Modularity",
      "url": "https://riad.blog/2020/01/28/embrace-the-modularity/"
    },
    {
      "text": "The Language of Gutenberg",
      "url": "https://lamda.blog/2018/04/22/the-language-of-gutenberg/"
    },
    {
      "text": "Gutenberg, or the Ship of Theseus",
      "url": "https://matiasventura.com/post/gutenberg-or-the-ship-of-theseus/"
    },
    {
      "text": "We Called It Gutenberg for a Reason",
      "url": "https://ma.tt/2017/08/we-called-it-gutenberg-for-a-reason/"
    },
    {
      "text": "How Gutenberg is Changing WordPress Development",
      "url": "https://riad.blog/2017/10/06/how-gutenberg-is-changing-wordpress-development/"
    },
    {
      "text": "How Gutenberg Will Shape the Future of WordPress",
      "url": "https://www.linkedin.com/pulse/gutenberg-morten-rand-hendriksen/"
    },
    {
      "text": "Index of Gutenberg related posts",
      "url": "https://make.wordpress.org/core/handbook/references/keeping-up-with-gutenberg-index/"
    },
    {
      "text": "Extending Gutenberg",
      "url": "https://developer.wordpress.org/block-editor/#extending-gutenberg"
    },
    {
      "text": "How to Start Block Development with Scaffolding",
      "url": "https://gziolo.pl/2020/12/22/how-to-start-block-development-with-scaffolding/"
    },
    {
      "text": "Introducing BlockBook for WordPress",
      "url": "https://riad.blog/2020/07/22/introducing-blockbook-for-wordpress/"
    },
    {
      "text": "AsBlocks: an encrypted collaborative environment",
      "url": "https://riad.blog/2020/06/11/write-as-blocks-in-an-encrypted-collaborative-environment/"
    },
    {
      "text": "Thoughts on Themes",
      "url": "https://matiasventura.com/post/thoughts-on-themes/"
    },
    {
      "text": "Build a Block Series",
      "url": "https://mkaz.blog/code/build-a-block-series-1/"
    },
    {
      "text": "With Gutenberg, what happens to my Custom Fields?",
      "url": "https://riad.blog/2017/12/11/with-gutenberg-what-happens-to-my-custom-fields/"
    },
    {
      "text": "One thousand and one ways to extend Gutenberg today",
      "url": "https://riad.blog/2017/10/16/one-thousand-and-one-way-to-extend-gutenberg-today/"
    },
    {
      "text": "Gutenberg Plugin Boilerplate",
      "url": "https://github.com/ahmadawais/Gutenberg-Boilerplate/"
    },
    {
      "text": "Community Contribution",
      "url": "https://developer.wordpress.org/block-editor/#community-contribution"
    },
    {
      "text": "The WordPress block editor: a maintainer’s story",
      "url": "https://riad.blog/2020/10/26/the-wordpress-block-editor-a-maintainers-story/"
    },
    {
      "text": "Good first issue on Gutenberg",
      "url": "https://mkaz.blog/code/good-first-issue-on-gutenberg/"
    },
    {
      "text": "How to Use the New WordPress Block Editor",
      "url": "https://www.codeinwp.com/blog/wordpress-gutenberg-guide/"
    },
    {
      "text": "WordPress Gutenberg Developer’s Guide",
      "url": "https://awhitepixel.com/guides/wordpress-gutenberg-developers-guide/"
    },
    {
      "text": "Gutenberg Block Library",
      "url": "https://editorblockswp.com/library"
    },
    {
      "text": "A zero-configuration developer toolkit for building WordPress Gutenberg block plugins",
      "url": "https://ahmadawais.com/create-guten-block-toolkit/"
    },
    {
      "text": "Contributing to Gutenberg Without Code",
      "url": "https://wordimpress.com/a-pot-stirrer-amongst-chefs-contributing-to-gutenberg-without-code/"
    },
    {
      "text": "Testing Flow in Gutenberg: Instructions for how to contribute to usability testing",
      "url": "https://make.wordpress.org/test/2017/11/22/testing-flow-in-gutenberg/"
    },
    {
      "text": "Article Compilations",
      "url": "https://developer.wordpress.org/block-editor/#article-compilations"
    },
    {
      "text": "Full-Site-Editing: MVP and Ultimate Resource List",
      "url": "https://gutenbergtimes.com/full-site-editing/"
    },
    {
      "text": "Theme Shaper posts about Block Themes",
      "url": "https://themeshaper.com/tag/block-based-themes/"
    },
    {
      "text": "Gutenberg Times Updates",
      "url": "https://gutenbergtimes.com/category/updates/"
    },
    {
      "text": "Curated Collection of Gutenberg Articles, Plugins, Blocks, Tutorials, etc",
      "url": "http://gutenberghub.com/"
    },
    {
      "text": "Gutenberg articles on ManageWP.org",
      "url": "https://managewp.org/search?q=gutenberg"
    },
    {
      "text": "Talks",
      "url": "https://developer.wordpress.org/block-editor/#talks"
    },
    {
      "text": "Slides",
      "url": "https://developer.wordpress.org/block-editor/#slides"
    },
    {
      "text": "Growing JavaScript Skills with WordPress",
      "url": "https://gziolo.pl/2019/07/15/growing-javascript-skills-with-wordpress/"
    },
    {
      "text": "The new core WordPress editor",
      "url": "http://kimb.me/talk-bigwp-london-new-core-wordpress-editor/"
    },
    {
      "text": "Gutenberg Notes",
      "url": "http://haiku2.com/2017/09/bend-wordpress-meetup-gutenberg-notes/"
    },
    {
      "text": "Gutenberg and the Future of Content in WordPress",
      "url": "https://www.slideshare.net/andrewmduthie/gutenberg-and-the-future-of-content-in-wordpress"
    },
    {
      "text": "Head first into Gutenberg",
      "url": "https://speakerdeck.com/prtksxna/head-first-into-gutenberg"
    },
    {
      "text": "WordPress Goa Meet-up",
      "url": "https://www.meetup.com/WordPressGoa/events/245275573/"
    },
    {
      "text": "Gutenberg : vers une approche plus fine du contenu",
      "url": "https://imathi.eu/2018/02/16/gutenberg-vers-une-approche-plus-fine-du-contenu/"
    },
    {
      "text": "WP Paris",
      "url": "https://wpparis.fr/"
    },
    {
      "text": "Videos",
      "url": "https://developer.wordpress.org/block-editor/#videos"
    },
    {
      "text": "All Gutenberg tagged Talks at WordPress.tv",
      "url": "https://wordpress.tv/tag/gutenberg/"
    },
    {
      "text": "Themes of the Future",
      "url": "https://wordpress.tv/2021/01/21/eileen-violini-themes-of-the-future-the-new-frontier-of-gutenberg-block-based-themes-and-theme-development/"
    },
    {
      "text": "Content Creation in WordPress using Gutenberg",
      "url": "https://wordpress.tv/2021/02/06/sayed-taqui-content-creation-in-wordpress-using-gutenberg/"
    },
    {
      "text": "Updates on WordPress Site-Editor (FSE) and Themes",
      "url": "https://www.youtube.com/watch?v=z-5OJq-OBjI&t"
    },
    {
      "text": "State of the Word 2020 FSE Demo",
      "url": "https://youtu.be/QI3qCoiuG3w?t=1279"
    },
    {
      "text": "Full Site Editing! It’s Coming, But Will Change How We Use WordPress?",
      "url": "https://www.youtube.com/watch?v=JHxsDSAImn0"
    },
    {
      "text": "Advanced Layouts with the Block Editor",
      "url": "https://wordpress.tv/2020/12/06/advanced-layouts-with-the-block-editor/"
    },
    {
      "text": "State of the Word 2019 Gutenberg Demo",
      "url": "https://www.youtube.com/watch?v=LezbkeV059Q"
    },
    {
      "text": "Beyond Gutenberg",
      "url": "https://wordpress.tv/2018/07/09/matias-ventura-beyond-gutenberg/"
    },
    {
      "text": "Anatomy of a block: Gutenberg design patterns",
      "url": "https://wordpress.tv/2018/07/08/tammie-lister-anatomy-of-a-block-gutenberg-design-patterns/"
    },
    {
      "text": "State of the Word 2017 Gutenberg Demo",
      "url": "https://youtu.be/XOY3ZUO6P0k?t=2100"
    },
    {
      "text": "Gutenberg is Coming (Don’t Be Afraid)",
      "url": "https://training.ithemes.com/webinar/gutenberg-is-coming-dont-be-afraid/"
    },
    {
      "text": "Learn WordPress Courses",
      "url": "https://developer.wordpress.org/block-editor/#learn-wordpress-courses"
    },
    {
      "text": "here",
      "url": "https://learn.wordpress.org/"
    },
    {
      "text": "Registering Block Patterns",
      "url": "https://learn.wordpress.org/workshop/registering-block-patterns/"
    },
    {
      "text": "Intro to Gutenberg Block Development",
      "url": "https://learn.wordpress.org/workshop/intro-to-gutenberg-block-development/"
    },
    {
      "text": "Intro to Publishing with the Block Editor",
      "url": "https://learn.wordpress.org/workshop/intro-to-publishing-with-the-block-editor/"
    },
    {
      "text": "← Full Site Editing",
      "url": "https://developer.wordpress.org/block-editor/getting-started/full-site-editing/"
    },
    {
      "text": "How-to Guides →",
      "url": "https://developer.wordpress.org/block-editor/how-to-guides/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Fgetting-started%2Ffull-site-editing%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/docs/getting-started/full-site-editing.md"
    },
    {
      "text": "here",
      "url": "https://github.com/WordPress/gutenberg/issues/24551"
    },
    {
      "text": "TT1 Blocks theme",
      "url": "https://wordpress.org/themes/tt1-blocks/"
    },
    {
      "text": "full-site-editing feature tag",
      "url": "https://wordpress.org/themes/tags/full-site-editing/"
    },
    {
      "text": "Get Involved",
      "url": "https://developer.wordpress.org/block-editor/#get-involved"
    },
    {
      "text": "FSE Outreach program",
      "url": "https://make.wordpress.org/test/handbook/full-site-editing-outreach-experiment/"
    },
    {
      "text": "WordPress Slack",
      "url": "https://make.wordpress.org/chat/"
    },
    {
      "text": "#fse-outreach-experiment",
      "url": "https://wordpress.slack.com/archives/C015GUFFC00"
    },
    {
      "text": "Calls for Testing",
      "url": "https://make.wordpress.org/test/tag/fse-testing-call/"
    },
    {
      "text": "How to Test FSE instructions",
      "url": "https://make.wordpress.org/test/handbook/full-site-editing-outreach-experiment/how-to-test-fse/"
    },
    {
      "text": "Block Themes",
      "url": "https://developer.wordpress.org/block-editor/#block-themes"
    },
    {
      "text": "block theme overview",
      "url": "https://developer.wordpress.org/block-editor/how-to-guides/themes/block-theme-overview/"
    },
    {
      "text": "Create a Block Theme",
      "url": "https://developer.wordpress.org/block-editor/how-to-guides/themes/create-block-theme/"
    },
    {
      "text": "WordPress/theme-experiments",
      "url": "https://github.com/WordPress/theme-experiments/"
    },
    {
      "text": "Template and Template Parts",
      "url": "https://developer.wordpress.org/block-editor/#template-and-template-parts"
    },
    {
      "text": "architecture document on templates",
      "url": "https://developer.wordpress.org/block-editor/explanations/architecture/full-site-editing-templates/"
    },
    {
      "text": "theme.json",
      "url": "https://developer.wordpress.org/block-editor/#theme-json"
    },
    {
      "text": "documentation for theme.json",
      "url": "https://developer.wordpress.org/block-editor/how-to-guides/themes/theme-json/"
    },
    {
      "text": "← Create a Block Tutorial",
      "url": "https://developer.wordpress.org/block-editor/getting-started/create-block/"
    },
    {
      "text": "Outreach →",
      "url": "https://developer.wordpress.org/block-editor/getting-started/outreach/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Fgetting-started%2Fcreate-block%2Fsubmitting-to-block-directory%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/docs/getting-started/create-block/submitting-to-block-directory.md"
    },
    {
      "text": "Step 1: Help users understand your block",
      "url": "https://developer.wordpress.org/block-editor/#step-1-help-users-understand-your-block"
    },
    {
      "text": "Name your block based on what it does",
      "url": "https://developer.wordpress.org/block-editor/#name-your-block-based-on-what-it-does"
    },
    {
      "text": "Clearly describe your block",
      "url": "https://developer.wordpress.org/block-editor/#clearly-describe-your-block"
    },
    {
      "text": "Add Keywords for broader context",
      "url": "https://developer.wordpress.org/block-editor/#add-keywords-for-broader-context"
    },
    {
      "text": "Read more about keywords.",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/block-api/block-metadata/#keywords"
    },
    {
      "text": "Choose the right category",
      "url": "https://developer.wordpress.org/block-editor/#choose-the-right-category"
    },
    {
      "text": "Read more about categories.",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/block-api/block-metadata/#category"
    },
    {
      "text": "Step 2: Analyze your plugin",
      "url": "https://developer.wordpress.org/block-editor/#step-2-analyze-your-plugin"
    },
    {
      "text": "block metadata",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/block-api/block-metadata/"
    },
    {
      "text": "example block.json",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/block-api/block-metadata/"
    },
    {
      "text": "Step 3: Zip & Submit",
      "url": "https://developer.wordpress.org/block-editor/#step-3-zip-submit"
    },
    {
      "text": "the block guidelines",
      "url": "https://github.com/WordPress/wporg-plugin-guidelines/blob/block-guidelines/blocks.md"
    },
    {
      "text": "block plugin validator",
      "url": "https://wordpress.org/plugins/developers/block-plugin-validator/"
    },
    {
      "text": "← Finishing Touches",
      "url": "https://developer.wordpress.org/block-editor/getting-started/create-block/finishing/"
    },
    {
      "text": "Full Site Editing →",
      "url": "https://developer.wordpress.org/block-editor/getting-started/full-site-editing/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Fgetting-started%2Fcreate-block%2Ffinishing%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/docs/getting-started/create-block/finishing.md"
    },
    {
      "text": "Additional Components",
      "url": "https://developer.wordpress.org/block-editor/#additional-components"
    },
    {
      "text": "components package",
      "url": "https://developer.wordpress.org/block-editor/reference-guide/components/"
    },
    {
      "text": "https://wordpress.github.io/gutenberg",
      "url": "https://wordpress.github.io/gutenberg"
    },
    {
      "text": "Additional Tutorials",
      "url": "https://developer.wordpress.org/block-editor/#additional-tutorials"
    },
    {
      "text": "Block controls tutorial",
      "url": "https://developer.wordpress.org/block-editor/how-to-guides/block-tutorial/block-controls-toolbar-and-sidebar/"
    },
    {
      "text": "Sidebar tutorial",
      "url": "https://developer.wordpress.org/block-editor/how-to-guides/sidebar-tutorial/plugin-sidebar-0/"
    },
    {
      "text": "Using InnerBlocks documentation",
      "url": "https://developer.wordpress.org/block-editor/how-to-guides/block-tutorial/nested-blocks-inner-blocks/"
    },
    {
      "text": "How did they do that",
      "url": "https://developer.wordpress.org/block-editor/#how-did-they-do-that"
    },
    {
      "text": "block library package on GitHub",
      "url": "https://github.com/WordPress/gutenberg/tree/HEAD/packages/block-library/src"
    },
    {
      "text": "← Authoring Experience",
      "url": "https://developer.wordpress.org/block-editor/getting-started/create-block/author-experience/"
    },
    {
      "text": "Share your Block with the World →",
      "url": "https://developer.wordpress.org/block-editor/getting-started/create-block/submitting-to-block-directory/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Fgetting-started%2Fcreate-block%2Fauthor-experience%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/docs/getting-started/create-block/author-experience.md"
    },
    {
      "text": "Placeholder",
      "url": "https://developer.wordpress.org/block-editor/#placeholder"
    },
    {
      "text": "isSelected Ternary Function",
      "url": "https://developer.wordpress.org/block-editor/#isselected-ternary-function"
    },
    {
      "text": "A Better Solution",
      "url": "https://developer.wordpress.org/block-editor/#a-better-solution"
    },
    {
      "text": "← Code Implementation",
      "url": "https://developer.wordpress.org/block-editor/getting-started/create-block/block-code/"
    },
    {
      "text": "Finishing Touches →",
      "url": "https://developer.wordpress.org/block-editor/getting-started/create-block/finishing/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Fgetting-started%2Fcreate-block%2Fblock-code%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/docs/getting-started/create-block/block-code.md"
    },
    {
      "text": "Type with Pride",
      "url": "https://www.typewithpride.com/"
    },
    {
      "text": "colorfonts.wtf",
      "url": "https://www.colorfonts.wtf/"
    },
    {
      "text": "Load Font File",
      "url": "https://developer.wordpress.org/block-editor/#load-font-file"
    },
    {
      "text": "see Including CSS & JavaScript documentation",
      "url": "https://developer.wordpress.org/themes/basics/including-css-javascript/"
    },
    {
      "text": "enqueue",
      "url": "https://developer.wordpress.org/themes/basics/including-css-javascript/"
    },
    {
      "text": "Add CSS Style for Block",
      "url": "https://developer.wordpress.org/block-editor/#add-css-style-for-block"
    },
    {
      "text": "← Block Attributes",
      "url": "https://developer.wordpress.org/block-editor/getting-started/create-block/attributes/"
    },
    {
      "text": "Authoring Experience →",
      "url": "https://developer.wordpress.org/block-editor/getting-started/create-block/author-experience/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Fgetting-started%2Fcreate-block%2Fattributes%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/docs/getting-started/create-block/attributes.md"
    },
    {
      "text": "Edit and Save",
      "url": "https://developer.wordpress.org/block-editor/#edit-and-save"
    },
    {
      "text": "the edit/save documentation",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/block-api/block-edit-save/"
    },
    {
      "text": "TextControl Component",
      "url": "https://developer.wordpress.org/block-editor/#textcontrol-component"
    },
    {
      "text": "documentation for TextControl component",
      "url": "https://developer.wordpress.org/block-editor/reference-guide/components/text-control/"
    },
    {
      "text": "interactive set of components in this Storybook",
      "url": "https://wordpress.github.io/gutenberg/"
    },
    {
      "text": "← Anatomy of a Block",
      "url": "https://developer.wordpress.org/block-editor/getting-started/create-block/block-anatomy/"
    },
    {
      "text": "Code Implementation →",
      "url": "https://developer.wordpress.org/block-editor/getting-started/create-block/block-code/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Fgetting-started%2Fcreate-block%2Fblock-anatomy%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/docs/getting-started/create-block/block-anatomy.md"
    },
    {
      "text": "block registration documentation",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/block-api/block-registration/"
    },
    {
      "text": "list of available icons",
      "url": "https://developer.wordpress.org/resource/dashicons/"
    },
    {
      "text": "see documentation for details",
      "url": "https://developer.wordpress.org/block-editor/reference-guides/filters/block-filters/#managing-block-categories"
    },
    {
      "text": "Internationalization in Plugin Developer Handbook",
      "url": "https://developer.wordpress.org/plugins/internationalization/"
    },
    {
      "text": "← WordPress Plugin",
      "url": "https://developer.wordpress.org/block-editor/getting-started/create-block/wp-plugin/"
    },
    {
      "text": "Block Attributes →",
      "url": "https://developer.wordpress.org/block-editor/getting-started/create-block/attributes/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Fgetting-started%2Fcreate-block%2Fwp-plugin%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/docs/getting-started/create-block/wp-plugin.md"
    },
    {
      "text": "Plugin Details",
      "url": "https://developer.wordpress.org/block-editor/#plugin-details"
    },
    {
      "text": "Switch to Working Directory",
      "url": "https://developer.wordpress.org/block-editor/#switch-to-working-directory"
    },
    {
      "text": "Generate Plugin Files",
      "url": "https://developer.wordpress.org/block-editor/#generate-plugin-files"
    },
    {
      "text": "Start WordPress",
      "url": "https://developer.wordpress.org/block-editor/#start-wordpress"
    },
    {
      "text": "Development Environment setup",
      "url": "https://developer.wordpress.org/block-editor/getting-started/devenv/"
    },
    {
      "text": "Confirm Plugin Installed",
      "url": "https://developer.wordpress.org/block-editor/#confirm-plugin-installed"
    },
    {
      "text": "Plugin Header requirements",
      "url": "https://developer.wordpress.org/plugins/plugin-basics/header-requirements/"
    },
    {
      "text": "package.json",
      "url": "https://developer.wordpress.org/block-editor/#package-json"
    },
    {
      "text": "source maps",
      "url": "https://developer.mozilla.org/en-US/docs/Tools/Debugger/How_to/Use_a_source_map"
    },
    {
      "text": "Plugin to Load Script",
      "url": "https://developer.wordpress.org/block-editor/#plugin-to-load-script"
    },
    {
      "text": "translations & internationalization.",
      "url": "https://developer.wordpress.org/block-editor/how-to-guides/internationalization/"
    },
    {
      "text": "Firefox Developer Tools documentation",
      "url": "https://developer.mozilla.org/en-US/docs/Tools"
    },
    {
      "text": "Anatomy of a Block →",
      "url": "https://developer.wordpress.org/block-editor/getting-started/create-block/block-anatomy/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Fgetting-started%2Fdevenv%2Fdocker-ubuntu%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/docs/getting-started/devenv/docker-ubuntu.md"
    },
    {
      "text": "directions from Docker to install",
      "url": "https://docs.docker.com/install/linux/docker-ce/ubuntu/"
    },
    {
      "text": "Docker compose documentation",
      "url": "https://docs.docker.com/compose/install/"
    },
    {
      "text": "How do I enable the remote API for dockerd",
      "url": "https://success.docker.com/article/how-do-i-enable-the-remote-api-for-dockerd"
    },
    {
      "text": "Create a Block Tutorial →",
      "url": "https://developer.wordpress.org/block-editor/getting-started/create-block/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Fgetting-started%2Fdevenv%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/docs/getting-started/devenv/README.md"
    },
    {
      "text": "Getting Started guide",
      "url": "https://developer.wordpress.org/block-editor/contributors/code/getting-started-with-code-contribution/"
    },
    {
      "text": "Docker Desktop",
      "url": "https://www.docker.com/products/docker-desktop"
    },
    {
      "text": "Visual Studio Code",
      "url": "https://code.visualstudio.com/"
    },
    {
      "text": "Node Development Tools",
      "url": "https://developer.wordpress.org/block-editor/#node-development-tools"
    },
    {
      "text": "download a Nodejs installer",
      "url": "https://nodejs.org/en/download/"
    },
    {
      "text": "full installation instructions",
      "url": "https://github.com/nvm-sh/nvm#installing-and-updating"
    },
    {
      "text": "WordPress Development Site",
      "url": "https://developer.wordpress.org/block-editor/#wordpress-development-site"
    },
    {
      "text": "wp-env package",
      "url": "https://www.npmjs.com/package/@wordpress/env"
    },
    {
      "text": "Windows 10 Pro",
      "url": "https://docs.docker.com/docker-for-windows/install/"
    },
    {
      "text": "other versions of Windows 10",
      "url": "https://docs.docker.com/docker-for-windows/wsl/"
    },
    {
      "text": "Linux",
      "url": "https://docs.docker.com/v17.12/install/linux/docker-ce/ubuntu/#install-using-the-convenience-script"
    },
    {
      "text": "help installing Docker on Ubuntu",
      "url": "https://developer.wordpress.org/block-editor/getting-started/devenv/docker-ubuntu/"
    },
    {
      "text": "http://localhost:8888/",
      "url": "http://localhost:8888/"
    },
    {
      "text": "@wordpress/env package readme",
      "url": "https://developer.wordpress.org/block-editor/reference-guide/packages/packages-env/"
    },
    {
      "text": "@wordpress/env package for additional details",
      "url": "https://developer.wordpress.org/block-editor/reference-guide/packages/packages-env/#wp-envjson"
    },
    {
      "text": "Alternative to Docker",
      "url": "https://developer.wordpress.org/block-editor/#alternative-to-docker"
    },
    {
      "text": "Code Editor",
      "url": "https://developer.wordpress.org/block-editor/#code-editor"
    },
    {
      "text": "Sublime Text",
      "url": "https://www.sublimetext.com/"
    },
    {
      "text": "Vim",
      "url": "https://www.vim.org/"
    },
    {
      "text": "Atom",
      "url": "https://atom.io/"
    },
    {
      "text": "Notepad++",
      "url": "https://notepad-plus-plus.org/"
    },
    {
      "text": "Uninstall – Start Over",
      "url": "https://developer.wordpress.org/block-editor/#uninstall-start-over"
    },
    {
      "text": "Local Environment",
      "url": "https://developer.wordpress.org/block-editor/#local-environment"
    },
    {
      "text": "Uninstall Node/NVM",
      "url": "https://developer.wordpress.org/block-editor/#uninstall-node-nvm"
    },
    {
      "text": "How to setup local WordPress environment on Ubuntu →",
      "url": "https://developer.wordpress.org/block-editor/getting-started/devenv/docker-ubuntu/"
    },
    {
      "text": "Log In",
      "url": "https://login.wordpress.org/?redirect_to=https%3A%2F%2Fdeveloper.wordpress.org%2Fblock-editor%2Fgetting-started%2F&locale=en_US"
    },
    {
      "text": "Edit",
      "url": "https://github.com/WordPress/gutenberg/edit/trunk/docs/getting-started/README.md"
    },
    {
      "text": "reviewing the long term roadmap",
      "url": "https://wordpress.org/about/roadmap/"
    },
    {
      "text": "GitHub repo",
      "url": "https://github.com/WordPress/gutenberg/"
    },
    {
      "text": "Good First Issues",
      "url": "https://github.com/WordPress/gutenberg/issues?q=is%3Aopen+is%3Aissue+label%3A%22Good+First+Issue%22"
    },
    {
      "text": "Slack community",
      "url": "https://make.wordpress.org/chat/"
    },
    {
      "text": "developer.wordpress.org resource",
      "url": "https://developer.wordpress.org/"
    },
    {
      "text": "updates on Make Core",
      "url": "https://make.wordpress.org/core/"
    },
    {
      "text": "Tutorials",
      "url": "https://developer.wordpress.org/block-editor/#tutorials"
    },
    {
      "text": "about using theme.json",
      "url": "https://developer.wordpress.org/block-editor/how-to-guides/themes/theme-json/"
    },
    {
      "text": "Convert as Classic Theme to a Block Theme",
      "url": "https://developer.wordpress.org/themes/block-themes/converting-a-classic-theme-to-a-block-theme/"
    },
    {
      "text": "Ways to Stay Informed",
      "url": "https://developer.wordpress.org/block-editor/#ways-to-stay-informed"
    },
    {
      "text": "WordPress.org Roadmap",
      "url": "https://wordpress.org/about/roadmap/"
    },
    {
      "text": "Quarterly Updates",
      "url": "https://make.wordpress.org/updates/tag/quarterly-updates/"
    },
    {
      "text": "“What’s Next In Gutenberg?” posts",
      "url": "https://make.wordpress.org/core/tag/gutenberg-next/"
    },
    {
      "text": "Block Based Themes Meeting",
      "url": "https://make.wordpress.org/themes/tags/block-based-meeting/"
    },
    {
      "text": "Make Themes blog",
      "url": "https://make.wordpress.org/themes/"
    },
    {
      "text": "“What’s New In Gutenberg?” release posts",
      "url": "https://make.wordpress.org/core/tag/gutenberg-new/"
    },
    {
      "text": "Core Editor meetings",
      "url": "https://make.wordpress.org/core/tag/core-editor-summary/"
    },
    {
      "text": "Agendas",
      "url": "https://make.wordpress.org/core/tag/core-editor-summary/"
    },
    {
      "text": "summaries",
      "url": "https://make.wordpress.org/core/tag/core-editor-summary/"
    },
    {
      "text": "Make Core blog",
      "url": "https://make.wordpress.org/core/"
    },
    {
      "text": "Weekly Theme Related Gutenberg Updates",
      "url": "https://make.wordpress.org/themes/tags/gutenberg-themes-roundup/"
    },
    {
      "text": "issues",
      "url": "https://github.com/WordPress/gutenberg/issues"
    },
    {
      "text": "PRs",
      "url": "https://github.com/WordPress/gutenberg/pulls"
    },
    {
      "text": "Project History",
      "url": "https://developer.wordpress.org/block-editor/explanations/history/"
    },
    {
      "text": "← Block Editor Handbook",
      "url": "https://developer.wordpress.org/block-editor/"
    },
    {
      "text": "Development Environment →",
      "url": "https://developer.wordpress.org/block-editor/getting-started/devenv/"
    }
  ]
}